// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        globalObject
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"aQL8O":[function(require,module,exports,__globalThis) {
var Refresh = require("f11b6b8f6a1f6f0b");
var ErrorOverlay = require("f490fb404efab291");
window.__REACT_REFRESH_VERSION_RUNTIME = '0.14.2';
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};
ErrorOverlay.setEditorHandler(function editorHandler(errorLocation) {
    let file = `${errorLocation.fileName}:${errorLocation.lineNumber || 1}:${errorLocation.colNumber || 1}`;
    fetch(`/__parcel_launch_editor?file=${encodeURIComponent(file)}`);
});
ErrorOverlay.startReportingRuntimeErrors({
    onError: function() {}
});
window.addEventListener('parcelhmraccept', ()=>{
    ErrorOverlay.dismissRuntimeErrors();
});

},{"f11b6b8f6a1f6f0b":"786KC","f490fb404efab291":"1dldy"}],"786KC":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("96622d495519d4e");

},{"96622d495519d4e":"hdge7"}],"hdge7":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    'use strict';
    // ATTENTION
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    } // This is a safety mechanism to protect against rogue getters and Proxies.
    function getProperty(object, property) {
        try {
            return object[property];
        } catch (err) {
            // Intentionally ignore.
            return undefined;
        }
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(getProperty(type, '$$typeof')){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        if (!allSignaturesByType.has(type)) allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
         // Visit inner types because we might not have signed them.
        if (typeof type === 'object' && type !== null) switch(getProperty(type, '$$typeof')){
            case REACT_FORWARD_REF_TYPE:
                setSignature(type.render, key, forceReset, getCustomHooks);
                break;
            case REACT_MEMO_TYPE:
                setSignature(type.type, key, forceReset, getCustomHooks);
                break;
        }
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {},
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {},
                onCommitFiberUnmount: function() {}
            };
        }
        if (hook.isDisabled) {
            // This isn't a real property on the hook, but it can be set to opt out
            // of DevTools integration and associated warnings and logs.
            // Using console['warn'] to evade Babel and ESLint
            console['warn']("Something has shimmed the React DevTools global hook (__REACT_DEVTOOLS_GLOBAL_HOOK__). Fast Refresh is not compatible with this shim and will be disabled.");
            return;
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {};
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers !== undefined) {
                helpersByRoot.set(root, helpers);
                var current = root.current;
                var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
                // This logic is copy-pasted from similar logic in the DevTools backend.
                // If this breaks with some refactoring, you'll want to update DevTools too.
                if (alternate !== null) {
                    var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null && mountedRoots.has(root);
                    var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                    if (!wasMounted && isMounted) {
                        // Mount a new root.
                        mountedRoots.add(root);
                        failedRoots.delete(root);
                    } else if (wasMounted && isMounted) ;
                    else if (wasMounted && !isMounted) {
                        // Unmount an existing root.
                        mountedRoots.delete(root);
                        if (didError) // We'll remount it on future edits.
                        failedRoots.add(root);
                        else helpersByRoot.delete(root);
                    } else if (!wasMounted && !isMounted) {
                        if (didError) // We'll remount it on future edits.
                        failedRoots.add(root);
                    }
                } else // Mount a new root.
                mountedRoots.add(root);
            } // Always call the decorated DevTools hook.
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Call without arguments triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* Call with arguments attaches the signature to the type: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        var savedType;
        var hasCustomHooks;
        var didCollectHooks = false;
        return function(type, key, forceReset, getCustomHooks) {
            if (typeof key === 'string') {
                // We're in the initial phase that associates signatures
                // with the functions. Note this may be called multiple times
                // in HOC chains like _s(hoc1(_s(hoc2(_s(actualFunction))))).
                if (!savedType) {
                    // We're in the innermost call, so this is the actual type.
                    savedType = type;
                    hasCustomHooks = typeof getCustomHooks === 'function';
                } // Set the signature for all types (even wrappers!) in case
                // they have no signatures of their own. This is to prevent
                // problems like https://github.com/facebook/react/issues/20417.
                if (type != null && (typeof type === 'function' || typeof type === 'object')) setSignature(type, key, forceReset, getCustomHooks);
                return type;
            } else // We're in the _s() call without arguments, which means
            // this is the time to collect custom Hook signatures.
            // Only do this once. This path is hot and runs *inside* every render!
            if (!didCollectHooks && hasCustomHooks) {
                didCollectHooks = true;
                collectCustomHooksForSignature(savedType);
            }
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(getProperty(type, '$$typeof')){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"1dldy":[function(require,module,exports,__globalThis) {
var process = require("d1546958eb39fdcf");
!function(e, t) {
    module.exports = t();
}(window, function() {
    return function(e) {
        var t = {};
        function r(n) {
            if (t[n]) return t[n].exports;
            var o = t[n] = {
                i: n,
                l: !1,
                exports: {}
            };
            return e[n].call(o.exports, o, o.exports, r), o.l = !0, o.exports;
        }
        return r.m = e, r.c = t, r.d = function(e, t, n) {
            r.o(e, t) || Object.defineProperty(e, t, {
                enumerable: !0,
                get: n
            });
        }, r.r = function(e) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e, "__esModule", {
                value: !0
            });
        }, r.t = function(e, t) {
            if (1 & t && (e = r(e)), 8 & t) return e;
            if (4 & t && "object" == typeof e && e && e.__esModule) return e;
            var n = Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", {
                enumerable: !0,
                value: e
            }), 2 & t && "string" != typeof e) for(var o in e)r.d(n, o, (function(t) {
                return e[t];
            }).bind(null, o));
            return n;
        }, r.n = function(e) {
            var t = e && e.__esModule ? function() {
                return e.default;
            } : function() {
                return e;
            };
            return r.d(t, "a", t), t;
        }, r.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
        }, r.p = "", r(r.s = 15);
    }([
        function(e, t, r) {
            e.exports = r(8);
        },
        function(e, t) {
            t.getArg = function(e, t, r) {
                if (t in e) return e[t];
                if (3 === arguments.length) return r;
                throw new Error('"' + t + '" is a required argument.');
            };
            var r = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/, n = /^data:.+\,.+$/;
            function o(e) {
                var t = e.match(r);
                return t ? {
                    scheme: t[1],
                    auth: t[2],
                    host: t[3],
                    port: t[4],
                    path: t[5]
                } : null;
            }
            function a(e) {
                var t = "";
                return e.scheme && (t += e.scheme + ":"), t += "//", e.auth && (t += e.auth + "@"), e.host && (t += e.host), e.port && (t += ":" + e.port), e.path && (t += e.path), t;
            }
            function i(e) {
                var r = e, n = o(e);
                if (n) {
                    if (!n.path) return e;
                    r = n.path;
                }
                for(var i, l = t.isAbsolute(r), u = r.split(/\/+/), c = 0, s = u.length - 1; s >= 0; s--)"." === (i = u[s]) ? u.splice(s, 1) : ".." === i ? c++ : c > 0 && ("" === i ? (u.splice(s + 1, c), c = 0) : (u.splice(s, 2), c--));
                return "" === (r = u.join("/")) && (r = l ? "/" : "."), n ? (n.path = r, a(n)) : r;
            }
            t.urlParse = o, t.urlGenerate = a, t.normalize = i, t.join = function(e, t) {
                "" === e && (e = "."), "" === t && (t = ".");
                var r = o(t), l = o(e);
                if (l && (e = l.path || "/"), r && !r.scheme) return l && (r.scheme = l.scheme), a(r);
                if (r || t.match(n)) return t;
                if (l && !l.host && !l.path) return l.host = t, a(l);
                var u = "/" === t.charAt(0) ? t : i(e.replace(/\/+$/, "") + "/" + t);
                return l ? (l.path = u, a(l)) : u;
            }, t.isAbsolute = function(e) {
                return "/" === e.charAt(0) || !!e.match(r);
            }, t.relative = function(e, t) {
                "" === e && (e = "."), e = e.replace(/\/$/, "");
                for(var r = 0; 0 !== t.indexOf(e + "/");){
                    var n = e.lastIndexOf("/");
                    if (n < 0) return t;
                    if ((e = e.slice(0, n)).match(/^([^\/]+:\/)?\/*$/)) return t;
                    ++r;
                }
                return Array(r + 1).join("../") + t.substr(e.length + 1);
            };
            var l = !("__proto__" in Object.create(null));
            function u(e) {
                return e;
            }
            function c(e) {
                if (!e) return !1;
                var t = e.length;
                if (t < 9) return !1;
                if (95 !== e.charCodeAt(t - 1) || 95 !== e.charCodeAt(t - 2) || 111 !== e.charCodeAt(t - 3) || 116 !== e.charCodeAt(t - 4) || 111 !== e.charCodeAt(t - 5) || 114 !== e.charCodeAt(t - 6) || 112 !== e.charCodeAt(t - 7) || 95 !== e.charCodeAt(t - 8) || 95 !== e.charCodeAt(t - 9)) return !1;
                for(var r = t - 10; r >= 0; r--)if (36 !== e.charCodeAt(r)) return !1;
                return !0;
            }
            function s(e, t) {
                return e === t ? 0 : e > t ? 1 : -1;
            }
            t.toSetString = l ? u : function(e) {
                return c(e) ? "$" + e : e;
            }, t.fromSetString = l ? u : function(e) {
                return c(e) ? e.slice(1) : e;
            }, t.compareByOriginalPositions = function(e, t, r) {
                var n = e.source - t.source;
                return 0 !== n ? n : 0 !== (n = e.originalLine - t.originalLine) ? n : 0 !== (n = e.originalColumn - t.originalColumn) || r ? n : 0 !== (n = e.generatedColumn - t.generatedColumn) ? n : 0 !== (n = e.generatedLine - t.generatedLine) ? n : e.name - t.name;
            }, t.compareByGeneratedPositionsDeflated = function(e, t, r) {
                var n = e.generatedLine - t.generatedLine;
                return 0 !== n ? n : 0 !== (n = e.generatedColumn - t.generatedColumn) || r ? n : 0 !== (n = e.source - t.source) ? n : 0 !== (n = e.originalLine - t.originalLine) ? n : 0 !== (n = e.originalColumn - t.originalColumn) ? n : e.name - t.name;
            }, t.compareByGeneratedPositionsInflated = function(e, t) {
                var r = e.generatedLine - t.generatedLine;
                return 0 !== r ? r : 0 !== (r = e.generatedColumn - t.generatedColumn) ? r : 0 !== (r = s(e.source, t.source)) ? r : 0 !== (r = e.originalLine - t.originalLine) ? r : 0 !== (r = e.originalColumn - t.originalColumn) ? r : s(e.name, t.name);
            };
        },
        function(e, t) {
            function r(e, t) {
                for(var r = 0, n = e.length - 1; n >= 0; n--){
                    var o = e[n];
                    "." === o ? e.splice(n, 1) : ".." === o ? (e.splice(n, 1), r++) : r && (e.splice(n, 1), r--);
                }
                if (t) for(; r--; r)e.unshift("..");
                return e;
            }
            function n(e, t) {
                if (e.filter) return e.filter(t);
                for(var r = [], n = 0; n < e.length; n++)t(e[n], n, e) && r.push(e[n]);
                return r;
            }
            t.resolve = function() {
                for(var e = "", t = !1, o = arguments.length - 1; o >= -1 && !t; o--){
                    var a = o >= 0 ? arguments[o] : process.cwd();
                    if ("string" != typeof a) throw new TypeError("Arguments to path.resolve must be strings");
                    a && (e = a + "/" + e, t = "/" === a.charAt(0));
                }
                return (t ? "/" : "") + (e = r(n(e.split("/"), function(e) {
                    return !!e;
                }), !t).join("/")) || ".";
            }, t.normalize = function(e) {
                var a = t.isAbsolute(e), i = "/" === o(e, -1);
                return (e = r(n(e.split("/"), function(e) {
                    return !!e;
                }), !a).join("/")) || a || (e = "."), e && i && (e += "/"), (a ? "/" : "") + e;
            }, t.isAbsolute = function(e) {
                return "/" === e.charAt(0);
            }, t.join = function() {
                var e = Array.prototype.slice.call(arguments, 0);
                return t.normalize(n(e, function(e, t) {
                    if ("string" != typeof e) throw new TypeError("Arguments to path.join must be strings");
                    return e;
                }).join("/"));
            }, t.relative = function(e, r) {
                function n(e) {
                    for(var t = 0; t < e.length && "" === e[t]; t++);
                    for(var r = e.length - 1; r >= 0 && "" === e[r]; r--);
                    return t > r ? [] : e.slice(t, r - t + 1);
                }
                e = t.resolve(e).substr(1), r = t.resolve(r).substr(1);
                for(var o = n(e.split("/")), a = n(r.split("/")), i = Math.min(o.length, a.length), l = i, u = 0; u < i; u++)if (o[u] !== a[u]) {
                    l = u;
                    break;
                }
                var c = [];
                for(u = l; u < o.length; u++)c.push("..");
                return (c = c.concat(a.slice(l))).join("/");
            }, t.sep = "/", t.delimiter = ":", t.dirname = function(e) {
                if ("string" != typeof e && (e += ""), 0 === e.length) return ".";
                for(var t = e.charCodeAt(0), r = 47 === t, n = -1, o = !0, a = e.length - 1; a >= 1; --a)if (47 === (t = e.charCodeAt(a))) {
                    if (!o) {
                        n = a;
                        break;
                    }
                } else o = !1;
                return -1 === n ? r ? "/" : "." : r && 1 === n ? "/" : e.slice(0, n);
            }, t.basename = function(e, t) {
                var r = function(e) {
                    "string" != typeof e && (e += "");
                    var t, r = 0, n = -1, o = !0;
                    for(t = e.length - 1; t >= 0; --t)if (47 === e.charCodeAt(t)) {
                        if (!o) {
                            r = t + 1;
                            break;
                        }
                    } else -1 === n && (o = !1, n = t + 1);
                    return -1 === n ? "" : e.slice(r, n);
                }(e);
                return t && r.substr(-1 * t.length) === t && (r = r.substr(0, r.length - t.length)), r;
            }, t.extname = function(e) {
                "string" != typeof e && (e += "");
                for(var t = -1, r = 0, n = -1, o = !0, a = 0, i = e.length - 1; i >= 0; --i){
                    var l = e.charCodeAt(i);
                    if (47 !== l) -1 === n && (o = !1, n = i + 1), 46 === l ? -1 === t ? t = i : 1 !== a && (a = 1) : -1 !== t && (a = -1);
                    else if (!o) {
                        r = i + 1;
                        break;
                    }
                }
                return -1 === t || -1 === n || 0 === a || 1 === a && t === n - 1 && t === r + 1 ? "" : e.slice(t, n);
            };
            var o = "b" === "ab".substr(-1) ? function(e, t, r) {
                return e.substr(t, r);
            } : function(e, t, r) {
                return t < 0 && (t = e.length + t), e.substr(t, r);
            };
        },
        function(e, t, r) {
            t.SourceMapGenerator = r(4).SourceMapGenerator, t.SourceMapConsumer = r(11).SourceMapConsumer, t.SourceNode = r(14).SourceNode;
        },
        function(e, t, r) {
            var n = r(5), o = r(1), a = r(6).ArraySet, i = r(10).MappingList;
            function l(e) {
                e || (e = {}), this._file = o.getArg(e, "file", null), this._sourceRoot = o.getArg(e, "sourceRoot", null), this._skipValidation = o.getArg(e, "skipValidation", !1), this._sources = new a, this._names = new a, this._mappings = new i, this._sourcesContents = null;
            }
            l.prototype._version = 3, l.fromSourceMap = function(e) {
                var t = e.sourceRoot, r = new l({
                    file: e.file,
                    sourceRoot: t
                });
                return e.eachMapping(function(e) {
                    var n = {
                        generated: {
                            line: e.generatedLine,
                            column: e.generatedColumn
                        }
                    };
                    null != e.source && (n.source = e.source, null != t && (n.source = o.relative(t, n.source)), n.original = {
                        line: e.originalLine,
                        column: e.originalColumn
                    }, null != e.name && (n.name = e.name)), r.addMapping(n);
                }), e.sources.forEach(function(t) {
                    var n = e.sourceContentFor(t);
                    null != n && r.setSourceContent(t, n);
                }), r;
            }, l.prototype.addMapping = function(e) {
                var t = o.getArg(e, "generated"), r = o.getArg(e, "original", null), n = o.getArg(e, "source", null), a = o.getArg(e, "name", null);
                this._skipValidation || this._validateMapping(t, r, n, a), null != n && (n = String(n), this._sources.has(n) || this._sources.add(n)), null != a && (a = String(a), this._names.has(a) || this._names.add(a)), this._mappings.add({
                    generatedLine: t.line,
                    generatedColumn: t.column,
                    originalLine: null != r && r.line,
                    originalColumn: null != r && r.column,
                    source: n,
                    name: a
                });
            }, l.prototype.setSourceContent = function(e, t) {
                var r = e;
                null != this._sourceRoot && (r = o.relative(this._sourceRoot, r)), null != t ? (this._sourcesContents || (this._sourcesContents = Object.create(null)), this._sourcesContents[o.toSetString(r)] = t) : this._sourcesContents && (delete this._sourcesContents[o.toSetString(r)], 0 === Object.keys(this._sourcesContents).length && (this._sourcesContents = null));
            }, l.prototype.applySourceMap = function(e, t, r) {
                var n = t;
                if (null == t) {
                    if (null == e.file) throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');
                    n = e.file;
                }
                var i = this._sourceRoot;
                null != i && (n = o.relative(i, n));
                var l = new a, u = new a;
                this._mappings.unsortedForEach(function(t) {
                    if (t.source === n && null != t.originalLine) {
                        var a = e.originalPositionFor({
                            line: t.originalLine,
                            column: t.originalColumn
                        });
                        null != a.source && (t.source = a.source, null != r && (t.source = o.join(r, t.source)), null != i && (t.source = o.relative(i, t.source)), t.originalLine = a.line, t.originalColumn = a.column, null != a.name && (t.name = a.name));
                    }
                    var c = t.source;
                    null == c || l.has(c) || l.add(c);
                    var s = t.name;
                    null == s || u.has(s) || u.add(s);
                }, this), this._sources = l, this._names = u, e.sources.forEach(function(t) {
                    var n = e.sourceContentFor(t);
                    null != n && (null != r && (t = o.join(r, t)), null != i && (t = o.relative(i, t)), this.setSourceContent(t, n));
                }, this);
            }, l.prototype._validateMapping = function(e, t, r, n) {
                if (t && "number" != typeof t.line && "number" != typeof t.column) throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
                if ((!(e && "line" in e && "column" in e && e.line > 0 && e.column >= 0) || t || r || n) && !(e && "line" in e && "column" in e && t && "line" in t && "column" in t && e.line > 0 && e.column >= 0 && t.line > 0 && t.column >= 0 && r)) throw new Error("Invalid mapping: " + JSON.stringify({
                    generated: e,
                    source: r,
                    original: t,
                    name: n
                }));
            }, l.prototype._serializeMappings = function() {
                for(var e, t, r, a, i = 0, l = 1, u = 0, c = 0, s = 0, f = 0, d = "", p = this._mappings.toArray(), h = 0, g = p.length; h < g; h++){
                    if (e = "", (t = p[h]).generatedLine !== l) for(i = 0; t.generatedLine !== l;)e += ";", l++;
                    else if (h > 0) {
                        if (!o.compareByGeneratedPositionsInflated(t, p[h - 1])) continue;
                        e += ",";
                    }
                    e += n.encode(t.generatedColumn - i), i = t.generatedColumn, null != t.source && (a = this._sources.indexOf(t.source), e += n.encode(a - f), f = a, e += n.encode(t.originalLine - 1 - c), c = t.originalLine - 1, e += n.encode(t.originalColumn - u), u = t.originalColumn, null != t.name && (r = this._names.indexOf(t.name), e += n.encode(r - s), s = r)), d += e;
                }
                return d;
            }, l.prototype._generateSourcesContent = function(e, t) {
                return e.map(function(e) {
                    if (!this._sourcesContents) return null;
                    null != t && (e = o.relative(t, e));
                    var r = o.toSetString(e);
                    return Object.prototype.hasOwnProperty.call(this._sourcesContents, r) ? this._sourcesContents[r] : null;
                }, this);
            }, l.prototype.toJSON = function() {
                var e = {
                    version: this._version,
                    sources: this._sources.toArray(),
                    names: this._names.toArray(),
                    mappings: this._serializeMappings()
                };
                return null != this._file && (e.file = this._file), null != this._sourceRoot && (e.sourceRoot = this._sourceRoot), this._sourcesContents && (e.sourcesContent = this._generateSourcesContent(e.sources, e.sourceRoot)), e;
            }, l.prototype.toString = function() {
                return JSON.stringify(this.toJSON());
            }, t.SourceMapGenerator = l;
        },
        function(e, t, r) {
            var n = r(9);
            t.encode = function(e) {
                var t, r = "", o = function(e) {
                    return e < 0 ? 1 + (-e << 1) : 0 + (e << 1);
                }(e);
                do t = 31 & o, (o >>>= 5) > 0 && (t |= 32), r += n.encode(t);
                while (o > 0);
                return r;
            }, t.decode = function(e, t, r) {
                var o, a, i, l, u = e.length, c = 0, s = 0;
                do {
                    if (t >= u) throw new Error("Expected more digits in base 64 VLQ value.");
                    if (-1 === (a = n.decode(e.charCodeAt(t++)))) throw new Error("Invalid base64 digit: " + e.charAt(t - 1));
                    o = !!(32 & a), c += (a &= 31) << s, s += 5;
                }while (o);
                r.value = (l = (i = c) >> 1, 1 == (1 & i) ? -l : l), r.rest = t;
            };
        },
        function(e, t, r) {
            var n = r(1), o = Object.prototype.hasOwnProperty, a = "undefined" != typeof Map;
            function i() {
                this._array = [], this._set = a ? new Map : Object.create(null);
            }
            i.fromArray = function(e, t) {
                for(var r = new i, n = 0, o = e.length; n < o; n++)r.add(e[n], t);
                return r;
            }, i.prototype.size = function() {
                return a ? this._set.size : Object.getOwnPropertyNames(this._set).length;
            }, i.prototype.add = function(e, t) {
                var r = a ? e : n.toSetString(e), i = a ? this.has(e) : o.call(this._set, r), l = this._array.length;
                i && !t || this._array.push(e), i || (a ? this._set.set(e, l) : this._set[r] = l);
            }, i.prototype.has = function(e) {
                if (a) return this._set.has(e);
                var t = n.toSetString(e);
                return o.call(this._set, t);
            }, i.prototype.indexOf = function(e) {
                if (a) {
                    var t = this._set.get(e);
                    if (t >= 0) return t;
                } else {
                    var r = n.toSetString(e);
                    if (o.call(this._set, r)) return this._set[r];
                }
                throw new Error('"' + e + '" is not in the set.');
            }, i.prototype.at = function(e) {
                if (e >= 0 && e < this._array.length) return this._array[e];
                throw new Error("No element indexed by " + e);
            }, i.prototype.toArray = function() {
                return this._array.slice();
            }, t.ArraySet = i;
        },
        function(e, t, r) {
            "use strict";
            function n(e) {
                return Array.isArray(e) || (e = [
                    e
                ]), Promise.all(e.map(function(e) {
                    return e.then(function(e) {
                        return {
                            isFulfilled: !0,
                            isRejected: !1,
                            value: e
                        };
                    }).catch(function(e) {
                        return {
                            isFulfilled: !1,
                            isRejected: !0,
                            reason: e
                        };
                    });
                }));
            }
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.settle = n, t.default = n;
        },
        function(e, t, r) {
            var n = function(e) {
                "use strict";
                var t, r = Object.prototype, n = r.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, a = o.iterator || "@@iterator", i = o.asyncIterator || "@@asyncIterator", l = o.toStringTag || "@@toStringTag";
                function u(e, t, r) {
                    return Object.defineProperty(e, t, {
                        value: r,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }), e[t];
                }
                try {
                    u({}, "");
                } catch (e) {
                    u = function(e, t, r) {
                        return e[t] = r;
                    };
                }
                function c(e, t, r, n) {
                    var o = t && t.prototype instanceof m ? t : m, a = Object.create(o.prototype), i = new T(n || []);
                    return a._invoke = function(e, t, r) {
                        var n = f;
                        return function(o, a) {
                            if (n === p) throw new Error("Generator is already running");
                            if (n === h) {
                                if ("throw" === o) throw a;
                                return L();
                            }
                            for(r.method = o, r.arg = a;;){
                                var i = r.delegate;
                                if (i) {
                                    var l = _(i, r);
                                    if (l) {
                                        if (l === g) continue;
                                        return l;
                                    }
                                }
                                if ("next" === r.method) r.sent = r._sent = r.arg;
                                else if ("throw" === r.method) {
                                    if (n === f) throw n = h, r.arg;
                                    r.dispatchException(r.arg);
                                } else "return" === r.method && r.abrupt("return", r.arg);
                                n = p;
                                var u = s(e, t, r);
                                if ("normal" === u.type) {
                                    if (n = r.done ? h : d, u.arg === g) continue;
                                    return {
                                        value: u.arg,
                                        done: r.done
                                    };
                                }
                                "throw" === u.type && (n = h, r.method = "throw", r.arg = u.arg);
                            }
                        };
                    }(e, r, i), a;
                }
                function s(e, t, r) {
                    try {
                        return {
                            type: "normal",
                            arg: e.call(t, r)
                        };
                    } catch (e) {
                        return {
                            type: "throw",
                            arg: e
                        };
                    }
                }
                e.wrap = c;
                var f = "suspendedStart", d = "suspendedYield", p = "executing", h = "completed", g = {};
                function m() {}
                function v() {}
                function y() {}
                var b = {};
                b[a] = function() {
                    return this;
                };
                var w = Object.getPrototypeOf, k = w && w(w(P([])));
                k && k !== r && n.call(k, a) && (b = k);
                var E = y.prototype = m.prototype = Object.create(b);
                function S(e) {
                    [
                        "next",
                        "throw",
                        "return"
                    ].forEach(function(t) {
                        u(e, t, function(e) {
                            return this._invoke(t, e);
                        });
                    });
                }
                function x(e, t) {
                    var r;
                    this._invoke = function(o, a) {
                        function i() {
                            return new t(function(r, i) {
                                !function r(o, a, i, l) {
                                    var u = s(e[o], e, a);
                                    if ("throw" !== u.type) {
                                        var c = u.arg, f = c.value;
                                        return f && "object" == typeof f && n.call(f, "__await") ? t.resolve(f.__await).then(function(e) {
                                            r("next", e, i, l);
                                        }, function(e) {
                                            r("throw", e, i, l);
                                        }) : t.resolve(f).then(function(e) {
                                            c.value = e, i(c);
                                        }, function(e) {
                                            return r("throw", e, i, l);
                                        });
                                    }
                                    l(u.arg);
                                }(o, a, r, i);
                            });
                        }
                        return r = r ? r.then(i, i) : i();
                    };
                }
                function _(e, r) {
                    var n = e.iterator[r.method];
                    if (n === t) {
                        if (r.delegate = null, "throw" === r.method) {
                            if (e.iterator.return && (r.method = "return", r.arg = t, _(e, r), "throw" === r.method)) return g;
                            r.method = "throw", r.arg = new TypeError("The iterator does not provide a 'throw' method");
                        }
                        return g;
                    }
                    var o = s(n, e.iterator, r.arg);
                    if ("throw" === o.type) return r.method = "throw", r.arg = o.arg, r.delegate = null, g;
                    var a = o.arg;
                    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, g) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, g);
                }
                function C(e) {
                    var t = {
                        tryLoc: e[0]
                    };
                    1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t);
                }
                function O(e) {
                    var t = e.completion || {};
                    t.type = "normal", delete t.arg, e.completion = t;
                }
                function T(e) {
                    this.tryEntries = [
                        {
                            tryLoc: "root"
                        }
                    ], e.forEach(C, this), this.reset(!0);
                }
                function P(e) {
                    if (e) {
                        var r = e[a];
                        if (r) return r.call(e);
                        if ("function" == typeof e.next) return e;
                        if (!isNaN(e.length)) {
                            var o = -1, i = function r() {
                                for(; ++o < e.length;)if (n.call(e, o)) return r.value = e[o], r.done = !1, r;
                                return r.value = t, r.done = !0, r;
                            };
                            return i.next = i;
                        }
                    }
                    return {
                        next: L
                    };
                }
                function L() {
                    return {
                        value: t,
                        done: !0
                    };
                }
                return v.prototype = E.constructor = y, y.constructor = v, v.displayName = u(y, l, "GeneratorFunction"), e.isGeneratorFunction = function(e) {
                    var t = "function" == typeof e && e.constructor;
                    return !!t && (t === v || "GeneratorFunction" === (t.displayName || t.name));
                }, e.mark = function(e) {
                    return Object.setPrototypeOf ? Object.setPrototypeOf(e, y) : (e.__proto__ = y, u(e, l, "GeneratorFunction")), e.prototype = Object.create(E), e;
                }, e.awrap = function(e) {
                    return {
                        __await: e
                    };
                }, S(x.prototype), x.prototype[i] = function() {
                    return this;
                }, e.AsyncIterator = x, e.async = function(t, r, n, o, a) {
                    void 0 === a && (a = Promise);
                    var i = new x(c(t, r, n, o), a);
                    return e.isGeneratorFunction(r) ? i : i.next().then(function(e) {
                        return e.done ? e.value : i.next();
                    });
                }, S(E), u(E, l, "Generator"), E[a] = function() {
                    return this;
                }, E.toString = function() {
                    return "[object Generator]";
                }, e.keys = function(e) {
                    var t = [];
                    for(var r in e)t.push(r);
                    return t.reverse(), function r() {
                        for(; t.length;){
                            var n = t.pop();
                            if (n in e) return r.value = n, r.done = !1, r;
                        }
                        return r.done = !0, r;
                    };
                }, e.values = P, T.prototype = {
                    constructor: T,
                    reset: function(e) {
                        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(O), !e) for(var r in this)"t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
                    },
                    stop: function() {
                        this.done = !0;
                        var e = this.tryEntries[0].completion;
                        if ("throw" === e.type) throw e.arg;
                        return this.rval;
                    },
                    dispatchException: function(e) {
                        if (this.done) throw e;
                        var r = this;
                        function o(n, o) {
                            return l.type = "throw", l.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
                        }
                        for(var a = this.tryEntries.length - 1; a >= 0; --a){
                            var i = this.tryEntries[a], l = i.completion;
                            if ("root" === i.tryLoc) return o("end");
                            if (i.tryLoc <= this.prev) {
                                var u = n.call(i, "catchLoc"), c = n.call(i, "finallyLoc");
                                if (u && c) {
                                    if (this.prev < i.catchLoc) return o(i.catchLoc, !0);
                                    if (this.prev < i.finallyLoc) return o(i.finallyLoc);
                                } else if (u) {
                                    if (this.prev < i.catchLoc) return o(i.catchLoc, !0);
                                } else {
                                    if (!c) throw new Error("try statement without catch or finally");
                                    if (this.prev < i.finallyLoc) return o(i.finallyLoc);
                                }
                            }
                        }
                    },
                    abrupt: function(e, t) {
                        for(var r = this.tryEntries.length - 1; r >= 0; --r){
                            var o = this.tryEntries[r];
                            if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
                                var a = o;
                                break;
                            }
                        }
                        a && ("break" === e || "continue" === e) && a.tryLoc <= t && t <= a.finallyLoc && (a = null);
                        var i = a ? a.completion : {};
                        return i.type = e, i.arg = t, a ? (this.method = "next", this.next = a.finallyLoc, g) : this.complete(i);
                    },
                    complete: function(e, t) {
                        if ("throw" === e.type) throw e.arg;
                        return "break" === e.type || "continue" === e.type ? this.next = e.arg : "return" === e.type ? (this.rval = this.arg = e.arg, this.method = "return", this.next = "end") : "normal" === e.type && t && (this.next = t), g;
                    },
                    finish: function(e) {
                        for(var t = this.tryEntries.length - 1; t >= 0; --t){
                            var r = this.tryEntries[t];
                            if (r.finallyLoc === e) return this.complete(r.completion, r.afterLoc), O(r), g;
                        }
                    },
                    catch: function(e) {
                        for(var t = this.tryEntries.length - 1; t >= 0; --t){
                            var r = this.tryEntries[t];
                            if (r.tryLoc === e) {
                                var n = r.completion;
                                if ("throw" === n.type) {
                                    var o = n.arg;
                                    O(r);
                                }
                                return o;
                            }
                        }
                        throw new Error("illegal catch attempt");
                    },
                    delegateYield: function(e, r, n) {
                        return this.delegate = {
                            iterator: P(e),
                            resultName: r,
                            nextLoc: n
                        }, "next" === this.method && (this.arg = t), g;
                    }
                }, e;
            }(e.exports);
            try {
                regeneratorRuntime = n;
            } catch (e) {
                Function("r", "regeneratorRuntime = r")(n);
            }
        },
        function(e, t) {
            var r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
            t.encode = function(e) {
                if (0 <= e && e < r.length) return r[e];
                throw new TypeError("Must be between 0 and 63: " + e);
            }, t.decode = function(e) {
                return 65 <= e && e <= 90 ? e - 65 : 97 <= e && e <= 122 ? e - 97 + 26 : 48 <= e && e <= 57 ? e - 48 + 52 : 43 == e ? 62 : 47 == e ? 63 : -1;
            };
        },
        function(e, t, r) {
            var n = r(1);
            function o() {
                this._array = [], this._sorted = !0, this._last = {
                    generatedLine: -1,
                    generatedColumn: 0
                };
            }
            o.prototype.unsortedForEach = function(e, t) {
                this._array.forEach(e, t);
            }, o.prototype.add = function(e) {
                var t, r, o, a, i, l;
                t = this._last, r = e, o = t.generatedLine, a = r.generatedLine, i = t.generatedColumn, l = r.generatedColumn, a > o || a == o && l >= i || n.compareByGeneratedPositionsInflated(t, r) <= 0 ? (this._last = e, this._array.push(e)) : (this._sorted = !1, this._array.push(e));
            }, o.prototype.toArray = function() {
                return this._sorted || (this._array.sort(n.compareByGeneratedPositionsInflated), this._sorted = !0), this._array;
            }, t.MappingList = o;
        },
        function(e, t, r) {
            var n = r(1), o = r(12), a = r(6).ArraySet, i = r(5), l = r(13).quickSort;
            function u(e) {
                var t = e;
                return "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, ""))), null != t.sections ? new f(t) : new c(t);
            }
            function c(e) {
                var t = e;
                "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
                var r = n.getArg(t, "version"), o = n.getArg(t, "sources"), i = n.getArg(t, "names", []), l = n.getArg(t, "sourceRoot", null), u = n.getArg(t, "sourcesContent", null), c = n.getArg(t, "mappings"), s = n.getArg(t, "file", null);
                if (r != this._version) throw new Error("Unsupported version: " + r);
                o = o.map(String).map(n.normalize).map(function(e) {
                    return l && n.isAbsolute(l) && n.isAbsolute(e) ? n.relative(l, e) : e;
                }), this._names = a.fromArray(i.map(String), !0), this._sources = a.fromArray(o, !0), this.sourceRoot = l, this.sourcesContent = u, this._mappings = c, this.file = s;
            }
            function s() {
                this.generatedLine = 0, this.generatedColumn = 0, this.source = null, this.originalLine = null, this.originalColumn = null, this.name = null;
            }
            function f(e) {
                var t = e;
                "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
                var r = n.getArg(t, "version"), o = n.getArg(t, "sections");
                if (r != this._version) throw new Error("Unsupported version: " + r);
                this._sources = new a, this._names = new a;
                var i = {
                    line: -1,
                    column: 0
                };
                this._sections = o.map(function(e) {
                    if (e.url) throw new Error("Support for url field in sections not implemented.");
                    var t = n.getArg(e, "offset"), r = n.getArg(t, "line"), o = n.getArg(t, "column");
                    if (r < i.line || r === i.line && o < i.column) throw new Error("Section offsets must be ordered and non-overlapping.");
                    return i = t, {
                        generatedOffset: {
                            generatedLine: r + 1,
                            generatedColumn: o + 1
                        },
                        consumer: new u(n.getArg(e, "map"))
                    };
                });
            }
            u.fromSourceMap = function(e) {
                return c.fromSourceMap(e);
            }, u.prototype._version = 3, u.prototype.__generatedMappings = null, Object.defineProperty(u.prototype, "_generatedMappings", {
                get: function() {
                    return this.__generatedMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__generatedMappings;
                }
            }), u.prototype.__originalMappings = null, Object.defineProperty(u.prototype, "_originalMappings", {
                get: function() {
                    return this.__originalMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__originalMappings;
                }
            }), u.prototype._charIsMappingSeparator = function(e, t) {
                var r = e.charAt(t);
                return ";" === r || "," === r;
            }, u.prototype._parseMappings = function(e, t) {
                throw new Error("Subclasses must implement _parseMappings");
            }, u.GENERATED_ORDER = 1, u.ORIGINAL_ORDER = 2, u.GREATEST_LOWER_BOUND = 1, u.LEAST_UPPER_BOUND = 2, u.prototype.eachMapping = function(e, t, r) {
                var o, a = t || null;
                switch(r || u.GENERATED_ORDER){
                    case u.GENERATED_ORDER:
                        o = this._generatedMappings;
                        break;
                    case u.ORIGINAL_ORDER:
                        o = this._originalMappings;
                        break;
                    default:
                        throw new Error("Unknown order of iteration.");
                }
                var i = this.sourceRoot;
                o.map(function(e) {
                    var t = null === e.source ? null : this._sources.at(e.source);
                    return null != t && null != i && (t = n.join(i, t)), {
                        source: t,
                        generatedLine: e.generatedLine,
                        generatedColumn: e.generatedColumn,
                        originalLine: e.originalLine,
                        originalColumn: e.originalColumn,
                        name: null === e.name ? null : this._names.at(e.name)
                    };
                }, this).forEach(e, a);
            }, u.prototype.allGeneratedPositionsFor = function(e) {
                var t = n.getArg(e, "line"), r = {
                    source: n.getArg(e, "source"),
                    originalLine: t,
                    originalColumn: n.getArg(e, "column", 0)
                };
                if (null != this.sourceRoot && (r.source = n.relative(this.sourceRoot, r.source)), !this._sources.has(r.source)) return [];
                r.source = this._sources.indexOf(r.source);
                var a = [], i = this._findMapping(r, this._originalMappings, "originalLine", "originalColumn", n.compareByOriginalPositions, o.LEAST_UPPER_BOUND);
                if (i >= 0) {
                    var l = this._originalMappings[i];
                    if (void 0 === e.column) for(var u = l.originalLine; l && l.originalLine === u;)a.push({
                        line: n.getArg(l, "generatedLine", null),
                        column: n.getArg(l, "generatedColumn", null),
                        lastColumn: n.getArg(l, "lastGeneratedColumn", null)
                    }), l = this._originalMappings[++i];
                    else for(var c = l.originalColumn; l && l.originalLine === t && l.originalColumn == c;)a.push({
                        line: n.getArg(l, "generatedLine", null),
                        column: n.getArg(l, "generatedColumn", null),
                        lastColumn: n.getArg(l, "lastGeneratedColumn", null)
                    }), l = this._originalMappings[++i];
                }
                return a;
            }, t.SourceMapConsumer = u, c.prototype = Object.create(u.prototype), c.prototype.consumer = u, c.fromSourceMap = function(e) {
                var t = Object.create(c.prototype), r = t._names = a.fromArray(e._names.toArray(), !0), o = t._sources = a.fromArray(e._sources.toArray(), !0);
                t.sourceRoot = e._sourceRoot, t.sourcesContent = e._generateSourcesContent(t._sources.toArray(), t.sourceRoot), t.file = e._file;
                for(var i = e._mappings.toArray().slice(), u = t.__generatedMappings = [], f = t.__originalMappings = [], d = 0, p = i.length; d < p; d++){
                    var h = i[d], g = new s;
                    g.generatedLine = h.generatedLine, g.generatedColumn = h.generatedColumn, h.source && (g.source = o.indexOf(h.source), g.originalLine = h.originalLine, g.originalColumn = h.originalColumn, h.name && (g.name = r.indexOf(h.name)), f.push(g)), u.push(g);
                }
                return l(t.__originalMappings, n.compareByOriginalPositions), t;
            }, c.prototype._version = 3, Object.defineProperty(c.prototype, "sources", {
                get: function() {
                    return this._sources.toArray().map(function(e) {
                        return null != this.sourceRoot ? n.join(this.sourceRoot, e) : e;
                    }, this);
                }
            }), c.prototype._parseMappings = function(e, t) {
                for(var r, o, a, u, c, f = 1, d = 0, p = 0, h = 0, g = 0, m = 0, v = e.length, y = 0, b = {}, w = {}, k = [], E = []; y < v;)if (";" === e.charAt(y)) f++, y++, d = 0;
                else if ("," === e.charAt(y)) y++;
                else {
                    for((r = new s).generatedLine = f, u = y; u < v && !this._charIsMappingSeparator(e, u); u++);
                    if (a = b[o = e.slice(y, u)]) y += o.length;
                    else {
                        for(a = []; y < u;)i.decode(e, y, w), c = w.value, y = w.rest, a.push(c);
                        if (2 === a.length) throw new Error("Found a source, but no line and column");
                        if (3 === a.length) throw new Error("Found a source and line, but no column");
                        b[o] = a;
                    }
                    r.generatedColumn = d + a[0], d = r.generatedColumn, a.length > 1 && (r.source = g + a[1], g += a[1], r.originalLine = p + a[2], p = r.originalLine, r.originalLine += 1, r.originalColumn = h + a[3], h = r.originalColumn, a.length > 4 && (r.name = m + a[4], m += a[4])), E.push(r), "number" == typeof r.originalLine && k.push(r);
                }
                l(E, n.compareByGeneratedPositionsDeflated), this.__generatedMappings = E, l(k, n.compareByOriginalPositions), this.__originalMappings = k;
            }, c.prototype._findMapping = function(e, t, r, n, a, i) {
                if (e[r] <= 0) throw new TypeError("Line must be greater than or equal to 1, got " + e[r]);
                if (e[n] < 0) throw new TypeError("Column must be greater than or equal to 0, got " + e[n]);
                return o.search(e, t, a, i);
            }, c.prototype.computeColumnSpans = function() {
                for(var e = 0; e < this._generatedMappings.length; ++e){
                    var t = this._generatedMappings[e];
                    if (e + 1 < this._generatedMappings.length) {
                        var r = this._generatedMappings[e + 1];
                        if (t.generatedLine === r.generatedLine) {
                            t.lastGeneratedColumn = r.generatedColumn - 1;
                            continue;
                        }
                    }
                    t.lastGeneratedColumn = 1 / 0;
                }
            }, c.prototype.originalPositionFor = function(e) {
                var t = {
                    generatedLine: n.getArg(e, "line"),
                    generatedColumn: n.getArg(e, "column")
                }, r = this._findMapping(t, this._generatedMappings, "generatedLine", "generatedColumn", n.compareByGeneratedPositionsDeflated, n.getArg(e, "bias", u.GREATEST_LOWER_BOUND));
                if (r >= 0) {
                    var o = this._generatedMappings[r];
                    if (o.generatedLine === t.generatedLine) {
                        var a = n.getArg(o, "source", null);
                        null !== a && (a = this._sources.at(a), null != this.sourceRoot && (a = n.join(this.sourceRoot, a)));
                        var i = n.getArg(o, "name", null);
                        return null !== i && (i = this._names.at(i)), {
                            source: a,
                            line: n.getArg(o, "originalLine", null),
                            column: n.getArg(o, "originalColumn", null),
                            name: i
                        };
                    }
                }
                return {
                    source: null,
                    line: null,
                    column: null,
                    name: null
                };
            }, c.prototype.hasContentsOfAllSources = function() {
                return !!this.sourcesContent && this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(e) {
                    return null == e;
                });
            }, c.prototype.sourceContentFor = function(e, t) {
                if (!this.sourcesContent) return null;
                if (null != this.sourceRoot && (e = n.relative(this.sourceRoot, e)), this._sources.has(e)) return this.sourcesContent[this._sources.indexOf(e)];
                var r;
                if (null != this.sourceRoot && (r = n.urlParse(this.sourceRoot))) {
                    var o = e.replace(/^file:\/\//, "");
                    if ("file" == r.scheme && this._sources.has(o)) return this.sourcesContent[this._sources.indexOf(o)];
                    if ((!r.path || "/" == r.path) && this._sources.has("/" + e)) return this.sourcesContent[this._sources.indexOf("/" + e)];
                }
                if (t) return null;
                throw new Error('"' + e + '" is not in the SourceMap.');
            }, c.prototype.generatedPositionFor = function(e) {
                var t = n.getArg(e, "source");
                if (null != this.sourceRoot && (t = n.relative(this.sourceRoot, t)), !this._sources.has(t)) return {
                    line: null,
                    column: null,
                    lastColumn: null
                };
                var r = {
                    source: t = this._sources.indexOf(t),
                    originalLine: n.getArg(e, "line"),
                    originalColumn: n.getArg(e, "column")
                }, o = this._findMapping(r, this._originalMappings, "originalLine", "originalColumn", n.compareByOriginalPositions, n.getArg(e, "bias", u.GREATEST_LOWER_BOUND));
                if (o >= 0) {
                    var a = this._originalMappings[o];
                    if (a.source === r.source) return {
                        line: n.getArg(a, "generatedLine", null),
                        column: n.getArg(a, "generatedColumn", null),
                        lastColumn: n.getArg(a, "lastGeneratedColumn", null)
                    };
                }
                return {
                    line: null,
                    column: null,
                    lastColumn: null
                };
            }, t.BasicSourceMapConsumer = c, f.prototype = Object.create(u.prototype), f.prototype.constructor = u, f.prototype._version = 3, Object.defineProperty(f.prototype, "sources", {
                get: function() {
                    for(var e = [], t = 0; t < this._sections.length; t++)for(var r = 0; r < this._sections[t].consumer.sources.length; r++)e.push(this._sections[t].consumer.sources[r]);
                    return e;
                }
            }), f.prototype.originalPositionFor = function(e) {
                var t = {
                    generatedLine: n.getArg(e, "line"),
                    generatedColumn: n.getArg(e, "column")
                }, r = o.search(t, this._sections, function(e, t) {
                    var r = e.generatedLine - t.generatedOffset.generatedLine;
                    return r || e.generatedColumn - t.generatedOffset.generatedColumn;
                }), a = this._sections[r];
                return a ? a.consumer.originalPositionFor({
                    line: t.generatedLine - (a.generatedOffset.generatedLine - 1),
                    column: t.generatedColumn - (a.generatedOffset.generatedLine === t.generatedLine ? a.generatedOffset.generatedColumn - 1 : 0),
                    bias: e.bias
                }) : {
                    source: null,
                    line: null,
                    column: null,
                    name: null
                };
            }, f.prototype.hasContentsOfAllSources = function() {
                return this._sections.every(function(e) {
                    return e.consumer.hasContentsOfAllSources();
                });
            }, f.prototype.sourceContentFor = function(e, t) {
                for(var r = 0; r < this._sections.length; r++){
                    var n = this._sections[r].consumer.sourceContentFor(e, !0);
                    if (n) return n;
                }
                if (t) return null;
                throw new Error('"' + e + '" is not in the SourceMap.');
            }, f.prototype.generatedPositionFor = function(e) {
                for(var t = 0; t < this._sections.length; t++){
                    var r = this._sections[t];
                    if (-1 !== r.consumer.sources.indexOf(n.getArg(e, "source"))) {
                        var o = r.consumer.generatedPositionFor(e);
                        if (o) return {
                            line: o.line + (r.generatedOffset.generatedLine - 1),
                            column: o.column + (r.generatedOffset.generatedLine === o.line ? r.generatedOffset.generatedColumn - 1 : 0)
                        };
                    }
                }
                return {
                    line: null,
                    column: null
                };
            }, f.prototype._parseMappings = function(e, t) {
                this.__generatedMappings = [], this.__originalMappings = [];
                for(var r = 0; r < this._sections.length; r++)for(var o = this._sections[r], a = o.consumer._generatedMappings, i = 0; i < a.length; i++){
                    var u = a[i], c = o.consumer._sources.at(u.source);
                    null !== o.consumer.sourceRoot && (c = n.join(o.consumer.sourceRoot, c)), this._sources.add(c), c = this._sources.indexOf(c);
                    var s = o.consumer._names.at(u.name);
                    this._names.add(s), s = this._names.indexOf(s);
                    var f = {
                        source: c,
                        generatedLine: u.generatedLine + (o.generatedOffset.generatedLine - 1),
                        generatedColumn: u.generatedColumn + (o.generatedOffset.generatedLine === u.generatedLine ? o.generatedOffset.generatedColumn - 1 : 0),
                        originalLine: u.originalLine,
                        originalColumn: u.originalColumn,
                        name: s
                    };
                    this.__generatedMappings.push(f), "number" == typeof f.originalLine && this.__originalMappings.push(f);
                }
                l(this.__generatedMappings, n.compareByGeneratedPositionsDeflated), l(this.__originalMappings, n.compareByOriginalPositions);
            }, t.IndexedSourceMapConsumer = f;
        },
        function(e, t) {
            t.GREATEST_LOWER_BOUND = 1, t.LEAST_UPPER_BOUND = 2, t.search = function(e, r, n, o) {
                if (0 === r.length) return -1;
                var a = function e(r, n, o, a, i, l) {
                    var u = Math.floor((n - r) / 2) + r, c = i(o, a[u], !0);
                    return 0 === c ? u : c > 0 ? n - u > 1 ? e(u, n, o, a, i, l) : l == t.LEAST_UPPER_BOUND ? n < a.length ? n : -1 : u : u - r > 1 ? e(r, u, o, a, i, l) : l == t.LEAST_UPPER_BOUND ? u : r < 0 ? -1 : r;
                }(-1, r.length, e, r, n, o || t.GREATEST_LOWER_BOUND);
                if (a < 0) return -1;
                for(; a - 1 >= 0 && 0 === n(r[a], r[a - 1], !0);)--a;
                return a;
            };
        },
        function(e, t) {
            function r(e, t, r) {
                var n = e[t];
                e[t] = e[r], e[r] = n;
            }
            function n(e, t, o, a) {
                if (o < a) {
                    var i = o - 1;
                    r(e, (s = o, f = a, Math.round(s + Math.random() * (f - s))), a);
                    for(var l = e[a], u = o; u < a; u++)t(e[u], l) <= 0 && r(e, i += 1, u);
                    r(e, i + 1, u);
                    var c = i + 1;
                    n(e, t, o, c - 1), n(e, t, c + 1, a);
                }
                var s, f;
            }
            t.quickSort = function(e, t) {
                n(e, t, 0, e.length - 1);
            };
        },
        function(e, t, r) {
            var n = r(4).SourceMapGenerator, o = r(1), a = /(\r?\n)/, i = "$$$isSourceNode$$$";
            function l(e, t, r, n, o) {
                this.children = [], this.sourceContents = {}, this.line = null == e ? null : e, this.column = null == t ? null : t, this.source = null == r ? null : r, this.name = null == o ? null : o, this[i] = !0, null != n && this.add(n);
            }
            l.fromStringWithSourceMap = function(e, t, r) {
                var n = new l, i = e.split(a), u = 0, c = function() {
                    return e() + (e() || "");
                    function e() {
                        return u < i.length ? i[u++] : void 0;
                    }
                }, s = 1, f = 0, d = null;
                return t.eachMapping(function(e) {
                    if (null !== d) {
                        if (!(s < e.generatedLine)) {
                            var t = (r = i[u]).substr(0, e.generatedColumn - f);
                            return i[u] = r.substr(e.generatedColumn - f), f = e.generatedColumn, p(d, t), void (d = e);
                        }
                        p(d, c()), s++, f = 0;
                    }
                    for(; s < e.generatedLine;)n.add(c()), s++;
                    if (f < e.generatedColumn) {
                        var r = i[u];
                        n.add(r.substr(0, e.generatedColumn)), i[u] = r.substr(e.generatedColumn), f = e.generatedColumn;
                    }
                    d = e;
                }, this), u < i.length && (d && p(d, c()), n.add(i.splice(u).join(""))), t.sources.forEach(function(e) {
                    var a = t.sourceContentFor(e);
                    null != a && (null != r && (e = o.join(r, e)), n.setSourceContent(e, a));
                }), n;
                function p(e, t) {
                    if (null === e || void 0 === e.source) n.add(t);
                    else {
                        var a = r ? o.join(r, e.source) : e.source;
                        n.add(new l(e.originalLine, e.originalColumn, a, t, e.name));
                    }
                }
            }, l.prototype.add = function(e) {
                if (Array.isArray(e)) e.forEach(function(e) {
                    this.add(e);
                }, this);
                else {
                    if (!e[i] && "string" != typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
                    e && this.children.push(e);
                }
                return this;
            }, l.prototype.prepend = function(e) {
                if (Array.isArray(e)) for(var t = e.length - 1; t >= 0; t--)this.prepend(e[t]);
                else {
                    if (!e[i] && "string" != typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
                    this.children.unshift(e);
                }
                return this;
            }, l.prototype.walk = function(e) {
                for(var t, r = 0, n = this.children.length; r < n; r++)(t = this.children[r])[i] ? t.walk(e) : "" !== t && e(t, {
                    source: this.source,
                    line: this.line,
                    column: this.column,
                    name: this.name
                });
            }, l.prototype.join = function(e) {
                var t, r, n = this.children.length;
                if (n > 0) {
                    for(t = [], r = 0; r < n - 1; r++)t.push(this.children[r]), t.push(e);
                    t.push(this.children[r]), this.children = t;
                }
                return this;
            }, l.prototype.replaceRight = function(e, t) {
                var r = this.children[this.children.length - 1];
                return r[i] ? r.replaceRight(e, t) : "string" == typeof r ? this.children[this.children.length - 1] = r.replace(e, t) : this.children.push("".replace(e, t)), this;
            }, l.prototype.setSourceContent = function(e, t) {
                this.sourceContents[o.toSetString(e)] = t;
            }, l.prototype.walkSourceContents = function(e) {
                for(var t = 0, r = this.children.length; t < r; t++)this.children[t][i] && this.children[t].walkSourceContents(e);
                var n = Object.keys(this.sourceContents);
                for(t = 0, r = n.length; t < r; t++)e(o.fromSetString(n[t]), this.sourceContents[n[t]]);
            }, l.prototype.toString = function() {
                var e = "";
                return this.walk(function(t) {
                    e += t;
                }), e;
            }, l.prototype.toStringWithSourceMap = function(e) {
                var t = {
                    code: "",
                    line: 1,
                    column: 0
                }, r = new n(e), o = !1, a = null, i = null, l = null, u = null;
                return this.walk(function(e, n) {
                    t.code += e, null !== n.source && null !== n.line && null !== n.column ? (a === n.source && i === n.line && l === n.column && u === n.name || r.addMapping({
                        source: n.source,
                        original: {
                            line: n.line,
                            column: n.column
                        },
                        generated: {
                            line: t.line,
                            column: t.column
                        },
                        name: n.name
                    }), a = n.source, i = n.line, l = n.column, u = n.name, o = !0) : o && (r.addMapping({
                        generated: {
                            line: t.line,
                            column: t.column
                        }
                    }), a = null, o = !1);
                    for(var c = 0, s = e.length; c < s; c++)10 === e.charCodeAt(c) ? (t.line++, t.column = 0, c + 1 === s ? (a = null, o = !1) : o && r.addMapping({
                        source: n.source,
                        original: {
                            line: n.line,
                            column: n.column
                        },
                        generated: {
                            line: t.line,
                            column: t.column
                        },
                        name: n.name
                    })) : t.column++;
                }), this.walkSourceContents(function(e, t) {
                    r.setSourceContent(e, t);
                }), {
                    code: t.code,
                    map: r
                };
            }, t.SourceNode = l;
        },
        function(e, t, r) {
            "use strict";
            r.r(t), r.d(t, "setEditorHandler", function() {
                return ue;
            }), r.d(t, "reportBuildError", function() {
                return ce;
            }), r.d(t, "reportRuntimeError", function() {
                return se;
            }), r.d(t, "dismissBuildError", function() {
                return fe;
            }), r.d(t, "startReportingRuntimeErrors", function() {
                return de;
            }), r.d(t, "dismissRuntimeErrors", function() {
                return he;
            }), r.d(t, "stopReportingRuntimeErrors", function() {
                return ge;
            });
            var n = null;
            function o(e, t) {
                if (t.error) {
                    var r = t.error;
                    r instanceof Error ? e(r) : e(new Error(r));
                }
            }
            function a(e, t) {
                null === n && (n = o.bind(void 0, t), e.addEventListener("error", n));
            }
            var i = null;
            function l(e, t) {
                if (null == t || null == t.reason) return e(new Error("Unknown"));
                var r = t.reason;
                return r instanceof Error ? e(r) : e(new Error(r));
            }
            function u(e, t) {
                null === i && (i = l.bind(void 0, t), e.addEventListener("unhandledrejection", i));
            }
            var c = !1, s = 10, f = 50;
            var d = [], p = function() {
                "undefined" != typeof console && (console.reactStack = function(e) {
                    return d.push(e);
                }, console.reactStackEnd = function(e) {
                    return d.pop();
                });
            }, h = function() {
                "undefined" != typeof console && (console.reactStack = void 0, console.reactStackEnd = void 0);
            }, g = function(e, t) {
                if ("undefined" != typeof console) {
                    var r = console[e];
                    "function" == typeof r && (console[e] = function() {
                        try {
                            var e = arguments[0];
                            "string" == typeof e && d.length > 0 && t(e, d[d.length - 1]);
                        } catch (e) {
                            setTimeout(function() {
                                throw e;
                            });
                        }
                        return r.apply(this, arguments);
                    });
                }
            };
            function m(e, t) {
                return (m = Object.setPrototypeOf || function(e, t) {
                    return e.__proto__ = t, e;
                })(e, t);
            }
            function v(e, t, r) {
                return (v = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ("function" == typeof Proxy) return !0;
                    try {
                        return Date.prototype.toString.call(Reflect.construct(Date, [], function() {})), !0;
                    } catch (e) {
                        return !1;
                    }
                }() ? Reflect.construct : function(e, t, r) {
                    var n = [
                        null
                    ];
                    n.push.apply(n, t);
                    var o = new (Function.bind.apply(e, n));
                    return r && m(o, r.prototype), o;
                }).apply(null, arguments);
            }
            function y(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for(var r = 0, n = new Array(t); r < t; r++)n[r] = e[r];
                return n;
            }
            function b(e) {
                return function(e) {
                    if (Array.isArray(e)) return y(e);
                }(e) || function(e) {
                    if ("undefined" != typeof Symbol && Symbol.iterator in Object(e)) return Array.from(e);
                }(e) || function(e, t) {
                    if (e) {
                        if ("string" == typeof e) return y(e, t);
                        var r = Object.prototype.toString.call(e).slice(8, -1);
                        return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? y(e, t) : void 0;
                    }
                }(e) || function() {
                    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }();
            }
            function w(e, t) {
                for(var r = 0; r < t.length; r++){
                    var n = t[r];
                    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                }
            }
            function k(e, t, r) {
                return t && w(e.prototype, t), r && w(e, r), e;
            }
            function E(e, t) {
                if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }
            var S = function e(t, r) {
                var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                E(this, e), this.lineNumber = t, this.content = r, this.highlight = n;
            }, x = function() {
                function e() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null, l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null, u = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null, c = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null, s = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : null;
                    E(this, e), t && 0 === t.indexOf("Object.") && (t = t.slice(7)), "friendlySyntaxErrorLabel" !== t && "exports.__esModule" !== t && "<anonymous>" !== t && t || (t = null), this.functionName = t, this.fileName = r, this.lineNumber = n, this.columnNumber = o, this._originalFunctionName = i, this._originalFileName = l, this._originalLineNumber = u, this._originalColumnNumber = c, this._scriptCode = a, this._originalScriptCode = s;
                }
                return k(e, [
                    {
                        key: "getFunctionName",
                        value: function() {
                            return this.functionName || "(anonymous function)";
                        }
                    },
                    {
                        key: "getSource",
                        value: function() {
                            var e = "";
                            return null != this.fileName && (e += this.fileName + ":"), null != this.lineNumber && (e += this.lineNumber + ":"), null != this.columnNumber && (e += this.columnNumber + ":"), e.slice(0, -1);
                        }
                    },
                    {
                        key: "toString",
                        value: function() {
                            var e = this.getFunctionName(), t = this.getSource();
                            return "".concat(e).concat(t ? " (".concat(t, ")") : "");
                        }
                    }
                ]), e;
            }(), _ = /\(?(.+?)(?::(\d+))?(?::(\d+))?\)?$/;
            function C(e) {
                return _.exec(e).slice(1).map(function(e) {
                    var t = Number(e);
                    return isNaN(t) ? e : t;
                });
            }
            var O = /^\s*(at|in)\s.+(:\d+)/, T = /(^|@)\S+:\d+|.+line\s+\d+\s+>\s+(eval|Function).+/;
            function P(e) {
                return e.filter(function(e) {
                    return O.test(e) || T.test(e);
                }).map(function(e) {
                    if (T.test(e)) {
                        var t = !1;
                        / > (eval|Function)/.test(e) && (e = e.replace(/ line (\d+)(?: > eval line \d+)* > (eval|Function):\d+:\d+/g, ":$1"), t = !0);
                        var r = e.split(/[@]/g), n = r.pop();
                        return v(x, [
                            r.join("@") || (t ? "eval" : null)
                        ].concat(b(C(n))));
                    }
                    -1 !== e.indexOf("(eval ") && (e = e.replace(/(\(eval at [^()]*)|(\),.*$)/g, "")), -1 !== e.indexOf("(at ") && (e = e.replace(/\(at /, "("));
                    var o = e.trim().split(/\s+/g).slice(1), a = o.pop();
                    return v(x, [
                        o.join(" ") || null
                    ].concat(b(C(a))));
                });
            }
            function L(e) {
                if (null == e) throw new Error("You cannot pass a null object.");
                if ("string" == typeof e) return P(e.split("\n"));
                if (Array.isArray(e)) return P(e);
                if ("string" == typeof e.stack) return P(e.stack.split("\n"));
                throw new Error("The error you provided does not contain a stack trace.");
            }
            var R = r(0), A = r.n(R);
            function N(e, t, r, n, o, a, i) {
                try {
                    var l = e[a](i), u = l.value;
                } catch (e) {
                    return void r(e);
                }
                l.done ? t(u) : Promise.resolve(u).then(n, o);
            }
            function j(e) {
                return function() {
                    var t = this, r = arguments;
                    return new Promise(function(n, o) {
                        var a = e.apply(t, r);
                        function i(e) {
                            N(a, n, o, i, l, "next", e);
                        }
                        function l(e) {
                            N(a, n, o, i, l, "throw", e);
                        }
                        i(void 0);
                    });
                };
            }
            var M = r(3), I = function() {
                function e(t) {
                    E(this, e), this.__source_map = t;
                }
                return k(e, [
                    {
                        key: "getOriginalPosition",
                        value: function(e, t) {
                            var r = this.__source_map.originalPositionFor({
                                line: e,
                                column: t
                            });
                            return {
                                line: r.line,
                                column: r.column,
                                source: r.source
                            };
                        }
                    },
                    {
                        key: "getGeneratedPosition",
                        value: function(e, t, r) {
                            var n = this.__source_map.generatedPositionFor({
                                source: e,
                                line: t,
                                column: r
                            });
                            return {
                                line: n.line,
                                column: n.column
                            };
                        }
                    },
                    {
                        key: "getSource",
                        value: function(e) {
                            return this.__source_map.sourceContentFor(e);
                        }
                    },
                    {
                        key: "getSources",
                        value: function() {
                            return this.__source_map.sources;
                        }
                    }
                ]), e;
            }();
            function D(e, t) {
                for(var r = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/gm, n = null;;){
                    var o = r.exec(t);
                    if (null == o) break;
                    n = o;
                }
                return n && n[1] ? Promise.resolve(n[1].toString()) : Promise.reject("Cannot find a source map directive for ".concat(e, "."));
            }
            function z(e, t) {
                return q.apply(this, arguments);
            }
            function q() {
                return (q = j(A.a.mark(function e(t, r) {
                    var n, o, a, i, l, u;
                    return A.a.wrap(function(e) {
                        for(;;)switch(e.prev = e.next){
                            case 0:
                                return e.next = 2, D(t, r);
                            case 2:
                                if (0 !== (n = e.sent).indexOf("data:")) {
                                    e.next = 14;
                                    break;
                                }
                                if (o = /^data:application\/json;([\w=:"-]+;)*base64,/, a = n.match(o)) {
                                    e.next = 8;
                                    break;
                                }
                                throw new Error("Sorry, non-base64 inline source-map encoding is not supported.");
                            case 8:
                                return n = n.substring(a[0].length), n = window.atob(n), n = JSON.parse(n), e.abrupt("return", new I(new M.SourceMapConsumer(n)));
                            case 14:
                                return i = t.lastIndexOf("/"), l = t.substring(0, i + 1) + n, e.next = 18, fetch(l).then(function(e) {
                                    return e.json();
                                });
                            case 18:
                                return u = e.sent, e.abrupt("return", new I(new M.SourceMapConsumer(u)));
                            case 20:
                            case "end":
                                return e.stop();
                        }
                    }, e);
                }))).apply(this, arguments);
            }
            function F(e, t, r) {
                "string" == typeof r && (r = r.split("\n"));
                for(var n = [], o = Math.max(0, e - 1 - t); o <= Math.min(r.length - 1, e - 1 + t); ++o)n.push(new S(o + 1, r[o], o === e - 1));
                return n;
            }
            var U = r(7);
            function B(e) {
                return H.apply(this, arguments);
            }
            function H() {
                return (H = j(A.a.mark(function e(t) {
                    var r, n, o, a = arguments;
                    return A.a.wrap(function(e) {
                        for(;;)switch(e.prev = e.next){
                            case 0:
                                return r = a.length > 1 && void 0 !== a[1] ? a[1] : 3, n = {}, o = [], t.forEach(function(e) {
                                    var t = e.fileName;
                                    null != t && -1 === o.indexOf(t) && o.push(t);
                                }), e.next = 6, Object(U.settle)(o.map(function() {
                                    var e = j(A.a.mark(function e(t) {
                                        var r, o, a;
                                        return A.a.wrap(function(e) {
                                            for(;;)switch(e.prev = e.next){
                                                case 0:
                                                    return r = 0 === t.indexOf("webpack-internal:") ? "/__get-internal-source?fileName=".concat(encodeURIComponent(t)) : t, e.next = 3, fetch(r).then(function(e) {
                                                        return e.text();
                                                    });
                                                case 3:
                                                    return o = e.sent, e.next = 6, z(t, o);
                                                case 6:
                                                    a = e.sent, n[t] = {
                                                        fileSource: o,
                                                        map: a
                                                    };
                                                case 8:
                                                case "end":
                                                    return e.stop();
                                            }
                                        }, e);
                                    }));
                                    return function(t) {
                                        return e.apply(this, arguments);
                                    };
                                }()));
                            case 6:
                                return e.abrupt("return", t.map(function(e) {
                                    var t = e.functionName, o = e.fileName, a = e.lineNumber, i = e.columnNumber, l = n[o] || {}, u = l.map, c = l.fileSource;
                                    if (null == u || null == a) return e;
                                    var s = u.getOriginalPosition(a, i), f = s.source, d = s.line, p = s.column, h = null == f ? [] : u.getSource(f);
                                    return new x(t, o, a, i, F(a, r, c), t, f, d, p, F(d, r, h));
                                }));
                            case 7:
                            case "end":
                                return e.stop();
                        }
                    }, e);
                }))).apply(this, arguments);
            }
            var $ = r(2), V = r.n($);
            function W(e, t) {
                var r = -1, n = -1;
                do ++r, n = t.indexOf(e, n + 1);
                while (-1 !== n);
                return r;
            }
            function G(e, t) {
                return Q.apply(this, arguments);
            }
            function Q() {
                return (Q = j(A.a.mark(function e(t, r) {
                    var n, o, a, i, l = arguments;
                    return A.a.wrap(function(e) {
                        for(;;)switch(e.prev = e.next){
                            case 0:
                                if (n = l.length > 2 && void 0 !== l[2] ? l[2] : 3, o = "object" == typeof t ? t.contents : null, a = "object" == typeof t ? t.uri : t, null != o) {
                                    e.next = 7;
                                    break;
                                }
                                return e.next = 6, fetch(a).then(function(e) {
                                    return e.text();
                                });
                            case 6:
                                o = e.sent;
                            case 7:
                                return e.next = 9, z(a, o);
                            case 9:
                                return i = e.sent, e.abrupt("return", r.map(function(e) {
                                    var t = e.functionName, r = e.lineNumber, l = e.columnNumber;
                                    if (null != e._originalLineNumber) return e;
                                    var u = e.fileName;
                                    if (u && (u = V.a.normalize(u.replace(/[\\]+/g, "/"))), null == u) return e;
                                    var c = u, s = i.getSources().map(function(e) {
                                        return e.replace(/[\\]+/g, "/");
                                    }).filter(function(e) {
                                        var t = (e = V.a.normalize(e)).lastIndexOf(c);
                                        return -1 !== t && t === e.length - c.length;
                                    }).map(function(e) {
                                        return {
                                            token: e,
                                            seps: W(V.a.sep, V.a.normalize(e)),
                                            penalties: W("node_modules", e) + W("~", e)
                                        };
                                    }).sort(function(e, t) {
                                        var r = Math.sign(e.seps - t.seps);
                                        return 0 !== r ? r : Math.sign(e.penalties - t.penalties);
                                    });
                                    if (s.length < 1 || null == r) return new x(null, null, null, null, null, t, c, r, l, null);
                                    var f = s[0].token, d = i.getGeneratedPosition(f, r, l), p = d.line, h = d.column, g = i.getSource(f);
                                    return new x(t, a, p, h || null, F(p, n, o || []), t, c, r, l, F(r, n, g));
                                }));
                            case 11:
                            case "end":
                                return e.stop();
                        }
                    }, e);
                }))).apply(this, arguments);
            }
            var Y = function(e) {
                arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                var t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 3, r = L(e);
                return (e.__unmap_source ? G(e.__unmap_source, r, t) : B(r, t)).then(function(e) {
                    return 0 === e.map(function(e) {
                        return e._originalFileName;
                    }).filter(function(e) {
                        return null != e && -1 === e.indexOf("node_modules");
                    }).length ? null : e.filter(function(e) {
                        var t = e.functionName;
                        return null == t || -1 === t.indexOf("__stack_frame_overlay_proxy_console__");
                    });
                });
            }, X = function(e) {
                return function(t) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    Y(t, r, 3).then(function(n) {
                        null != n && e({
                            error: t,
                            unhandledRejection: r,
                            contextSize: 3,
                            stackFrames: n
                        });
                    }).catch(function(e) {
                        console.log("Could not get the stack frames of error:", e);
                    });
                };
            };
            function K(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "/static/js/bundle.js", r = X(e);
                return a(window, function(e) {
                    return r(e, !1);
                }), u(window, function(e) {
                    return r(e, !0);
                }), function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f;
                    if (!c) try {
                        s = Error.stackTraceLimit, Error.stackTraceLimit = e, c = !0;
                    } catch (e) {}
                }(), p(), g("error", function(e, n) {
                    var o = function(e, t) {
                        for(var r, n, o = function(e) {
                            return e.split("\n").filter(function(e) {
                                return !e.match(/^\s*in/);
                            }).join("\n");
                        }(e), a = "", i = 0; i < t.length; ++i){
                            var l = t[i], u = l.fileName, c = l.lineNumber;
                            if (null != u && null != c && !(u === r && "number" == typeof c && "number" == typeof n && Math.abs(c - n) < 3)) {
                                r = u, n = c;
                                var s = t[i].name;
                                a += "in ".concat(s = s || "(anonymous function)", " (at ").concat(u, ":").concat(c, ")\n");
                            }
                        }
                        return {
                            message: o,
                            stack: a
                        };
                    }(e, n);
                    r({
                        message: o.message,
                        stack: o.stack,
                        __unmap_source: t
                    }, !1);
                }), function() {
                    var e;
                    !function() {
                        if (c) try {
                            Error.stackTraceLimit = s, c = !1;
                        } catch (e) {}
                    }(), e = window, null !== i && (e.removeEventListener("unhandledrejection", i), i = null), function(e) {
                        null !== n && (e.removeEventListener("error", n), n = null);
                    }(window), h();
                };
            }
            var J = {
                position: "fixed",
                top: "0",
                left: "0",
                width: "100%",
                height: "100%",
                border: "none",
                "z-index": 2147483647
            };
            var Z = '/*! For license information please see iframe-bundle.js.LICENSE.txt */\n!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=208)}([function(e,t,r){"use strict";e.exports=r(183)},function(e,t,r){var n=r(8),o=r(35).f,a=r(18),i=r(21),l=r(38),u=r(60),c=r(64);e.exports=function(e,t){var r,s,f,d,p,h=e.target,g=e.global,v=e.stat;if(r=g?n:v?n[h]||l(h,{}):(n[h]||{}).prototype)for(s in t){if(d=t[s],f=e.noTargetGet?(p=o(r,s))&&p.value:r[s],!c(g?s:h+(v?".":"#")+s,e.forced)&&void 0!==f){if(typeof d===typeof f)continue;u(d,f)}(e.sham||f&&f.sham)&&a(d,"sham",!0),i(r,s,d,e)}}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t){e.exports=!1},function(e,t,r){var n=r(2),o=r(66),a=r(26),i=r(7),l=r(45),u=r(69),c=function(e,t){this.stopped=e,this.result=t};e.exports=function(e,t,r){var s,f,d,p,h,g,v,m=r&&r.that,y=!(!r||!r.AS_ENTRIES),b=!(!r||!r.IS_ITERATOR),w=!(!r||!r.INTERRUPTED),k=i(t,m,1+y+w),E=function(e){return s&&u(s),new c(!0,e)},x=function(e){return y?(n(e),w?k(e[0],e[1],E):k(e[0],e[1])):w?k(e,E):k(e)};if(b)s=e;else{if("function"!=typeof(f=l(e)))throw TypeError("Target is not iterable");if(o(f)){for(d=0,p=a(e.length);p>d;d++)if((h=x(e[d]))&&h instanceof c)return h;return new c(!1)}s=f.call(e)}for(g=s.next;!(v=g.call(s)).done;){try{h=x(v.value)}catch(e){throw u(s),e}if("object"==typeof h&&h&&h instanceof c)return h}return new c(!1)}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t,r){var n=r(8),o=r(40),a=r(11),i=r(31),l=r(44),u=r(67),c=o("wks"),s=n.Symbol,f=u?s:s&&s.withoutSetter||i;e.exports=function(e){return a(c,e)||(l&&a(s,e)?c[e]=s[e]:c[e]=f("Symbol."+e)),c[e]}},function(e,t,r){var n=r(5);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 0:return function(){return e.call(t)};case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},function(e,t,r){(function(t){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof t&&t)||function(){return this}()||Function("return this")()}).call(this,r(34))},function(e,t,r){var n=r(61),o=r(11),a=r(82),i=r(14).f;e.exports=function(e){var t=n.Symbol||(n.Symbol={});o(t,e)||i(t,e,{value:a.f(e)})}},function(e,t,r){var n=r(61),o=r(8),a=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?a(n[e])||a(o[e]):n[e]&&n[e][t]||o[e]&&o[e][t]}},function(e,t){var r={}.hasOwnProperty;e.exports=function(e,t){return r.call(e,t)}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"===typeof e?null!==e:"function"===typeof e}},function(e,t,r){var n=r(16),o=r(57),a=r(2),i=r(29),l=Object.defineProperty;t.f=n?l:function(e,t,r){if(a(e),t=i(t,!0),a(r),o)try{return l(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},function(e,t,r){var n=r(3),o=r(48);e.exports=n?o:function(e){return Map.prototype.entries.call(e)}},function(e,t,r){var n=r(12);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t,r){var n=r(2),o=r(5),a=r(6)("species");e.exports=function(e,t){var r,i=n(e).constructor;return void 0===i||void 0==(r=n(i)[a])?t:o(r)}},function(e,t,r){var n=r(16),o=r(14),a=r(23);e.exports=n?function(e,t,r){return o.f(e,t,a(1,r))}:function(e,t,r){return e[t]=r,e}},function(e,t,r){var n=r(3),o=r(48);e.exports=n?o:function(e){return Set.prototype.values.call(e)}},function(e,t,r){var n=r(56),o=r(37);e.exports=function(e){return n(o(e))}},function(e,t,r){var n=r(8),o=r(18),a=r(11),i=r(38),l=r(59),u=r(24),c=u.get,s=u.enforce,f=String(String).split("String");(e.exports=function(e,t,r,l){var u,c=!!l&&!!l.unsafe,d=!!l&&!!l.enumerable,p=!!l&&!!l.noTargetGet;"function"==typeof r&&("string"!=typeof t||a(r,"name")||o(r,"name",t),(u=s(r)).source||(u.source=f.join("string"==typeof t?t:""))),e!==n?(c?!p&&e[t]&&(d=!0):delete e[t],d?e[t]=r:o(e,t,r)):d?e[t]=r:i(t,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||l(this)}))},function(e,t,r){var n=r(14).f,o=r(11),a=r(6)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,a)&&n(e,a,{configurable:!0,value:t})}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,r){var n,o,a,i=r(92),l=r(8),u=r(13),c=r(18),s=r(11),f=r(39),d=r(30),p=r(25),h=l.WeakMap;if(i){var g=f.state||(f.state=new h),v=g.get,m=g.has,y=g.set;n=function(e,t){return t.facade=e,y.call(g,e,t),t},o=function(e){return v.call(g,e)||{}},a=function(e){return m.call(g,e)}}else{var b=d("state");p[b]=!0,n=function(e,t){return t.facade=e,c(e,b,t),t},o=function(e){return s(e,b)?e[b]:{}},a=function(e){return s(e,b)}}e.exports={set:n,get:o,has:a,enforce:function(e){return a(e)?o(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!u(t)||(r=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return r}}}},function(e,t){e.exports={}},function(e,t,r){var n=r(42),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},function(e,t){e.exports={}},function(e,t,r){var n=r(37);e.exports=function(e){return Object(n(e))}},function(e,t,r){var n=r(13);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can\'t convert object to primitive value")}},function(e,t,r){var n=r(40),o=r(31),a=n("keys");e.exports=function(e){return a[e]||(a[e]=o(e))}},function(e,t){var r=0,n=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++r+n).toString(36)}},function(e,t,r){var n,o=r(2),a=r(99),i=r(43),l=r(25),u=r(100),c=r(58),s=r(30),f=s("IE_PROTO"),d=function(){},p=function(e){return"<script>"+e+"</"+"script>"},h=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=n?function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t}(n):((t=c("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F);for(var r=i.length;r--;)delete h.prototype[i[r]];return h()};l[f]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(d.prototype=o(e),r=new d,d.prototype=null,r[f]=e):r=h(),void 0===t?r:a(r,t)}},function(e,t,r){"use strict";var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();var o=[[{color:"0, 0, 0",class:"ansi-black"},{color:"187, 0, 0",class:"ansi-red"},{color:"0, 187, 0",class:"ansi-green"},{color:"187, 187, 0",class:"ansi-yellow"},{color:"0, 0, 187",class:"ansi-blue"},{color:"187, 0, 187",class:"ansi-magenta"},{color:"0, 187, 187",class:"ansi-cyan"},{color:"255,255,255",class:"ansi-white"}],[{color:"85, 85, 85",class:"ansi-bright-black"},{color:"255, 85, 85",class:"ansi-bright-red"},{color:"0, 255, 0",class:"ansi-bright-green"},{color:"255, 255, 85",class:"ansi-bright-yellow"},{color:"85, 85, 255",class:"ansi-bright-blue"},{color:"255, 85, 255",class:"ansi-bright-magenta"},{color:"85, 255, 255",class:"ansi-bright-cyan"},{color:"255, 255, 255",class:"ansi-bright-white"}]],a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.fg=this.bg=this.fg_truecolor=this.bg_truecolor=null,this.bright=0}return n(e,null,[{key:"escapeForHtml",value:function(t){return(new e).escapeForHtml(t)}},{key:"linkify",value:function(t){return(new e).linkify(t)}},{key:"ansiToHtml",value:function(t,r){return(new e).ansiToHtml(t,r)}},{key:"ansiToJson",value:function(t,r){return(new e).ansiToJson(t,r)}},{key:"ansiToText",value:function(t){return(new e).ansiToText(t)}}]),n(e,[{key:"setupPalette",value:function(){this.PALETTE_COLORS=[];for(var e=0;e<2;++e)for(var t=0;t<8;++t)this.PALETTE_COLORS.push(o[e][t].color);for(var r=[0,95,135,175,215,255],n=function(e,t,n){return r[e]+", "+r[t]+", "+r[n]},a=0;a<6;++a)for(var i=0;i<6;++i)for(var l=0;l<6;++l)this.PALETTE_COLORS.push(n(a,i,l));for(var u=8,c=0;c<24;++c,u+=10)this.PALETTE_COLORS.push(n(u,u,u))}},{key:"escapeForHtml",value:function(e){return e.replace(/[&<>]/gm,(function(e){return"&"==e?"&amp;":"<"==e?"&lt;":">"==e?"&gt;":""}))}},{key:"linkify",value:function(e){return e.replace(/(https?:\\/\\/[^\\s]+)/gm,(function(e){return\'<a href="\'+e+\'">\'+e+"</a>"}))}},{key:"ansiToHtml",value:function(e,t){return this.process(e,t,!0)}},{key:"ansiToJson",value:function(e,t){return(t=t||{}).json=!0,t.clearLine=!1,this.process(e,t,!0)}},{key:"ansiToText",value:function(e){return this.process(e,{},!1)}},{key:"process",value:function(e,t,r){var n=this,o=e.split(/\\033\\[/),a=o.shift();void 0!==t&&null!==t||(t={}),t.clearLine=/\\r/.test(e);var i=o.map((function(e){return n.processChunk(e,t,r)}));if(t&&t.json){var l=this.processChunkJson("");return l.content=a,l.clearLine=t.clearLine,i.unshift(l),t.remove_empty&&(i=i.filter((function(e){return!e.isEmpty()}))),i}return i.unshift(a),i.join("")}},{key:"processChunkJson",value:function(e,t,r){var n=(t="undefined"==typeof t?{}:t).use_classes="undefined"!=typeof t.use_classes&&t.use_classes,a=t.key=n?"class":"color",i={content:e,fg:null,bg:null,fg_truecolor:null,bg_truecolor:null,clearLine:t.clearLine,decoration:null,was_processed:!1,isEmpty:function(){return!i.content}},l=e.match(/^([!\\x3c-\\x3f]*)([\\d;]*)([\\x20-\\x2c]*[\\x40-\\x7e])([\\s\\S]*)/m);if(!l)return i;i.content=l[4];var u=l[2].split(";");if(""!==l[1]||"m"!==l[3])return i;if(!r)return i;var c=this;for(c.decoration=null;u.length>0;){var s=u.shift(),f=parseInt(s);if(isNaN(f)||0===f)c.fg=c.bg=c.decoration=null;else if(1===f)c.decoration="bold";else if(2===f)c.decoration="dim";else if(3==f)c.decoration="italic";else if(4==f)c.decoration="underline";else if(5==f)c.decoration="blink";else if(7===f)c.decoration="reverse";else if(8===f)c.decoration="hidden";else if(9===f)c.decoration="strikethrough";else if(39==f)c.fg=null;else if(49==f)c.bg=null;else if(f>=30&&f<38)c.fg=o[0][f%10][a];else if(f>=90&&f<98)c.fg=o[1][f%10][a];else if(f>=40&&f<48)c.bg=o[0][f%10][a];else if(f>=100&&f<108)c.bg=o[1][f%10][a];else if(38===f||48===f){var d=38===f;if(u.length>=1){var p=u.shift();if("5"===p&&u.length>=1){var h=parseInt(u.shift());if(h>=0&&h<=255)if(n){var g=h>=16?"ansi-palette-"+h:o[h>7?1:0][h%8].class;d?c.fg=g:c.bg=g}else this.PALETTE_COLORS||c.setupPalette(),d?c.fg=this.PALETTE_COLORS[h]:c.bg=this.PALETTE_COLORS[h]}else if("2"===p&&u.length>=3){var v=parseInt(u.shift()),m=parseInt(u.shift()),y=parseInt(u.shift());if(v>=0&&v<=255&&m>=0&&m<=255&&y>=0&&y<=255){var b=v+", "+m+", "+y;n?d?(c.fg="ansi-truecolor",c.fg_truecolor=b):(c.bg="ansi-truecolor",c.bg_truecolor=b):d?c.fg=b:c.bg=b}}}}}if(null===c.fg&&null===c.bg&&null===c.decoration)return i;return i.fg=c.fg,i.bg=c.bg,i.fg_truecolor=c.fg_truecolor,i.bg_truecolor=c.bg_truecolor,i.decoration=c.decoration,i.was_processed=!0,i}},{key:"processChunk",value:function(e,t,r){var n=this;t=t||{};var o=this.processChunkJson(e,t,r);if(t.json)return o;if(o.isEmpty())return"";if(!o.was_processed)return o.content;var a=t.use_classes,i=[],l=[],u={},c=function(e){var t=[],r=void 0;for(r in e)e.hasOwnProperty(r)&&t.push("data-"+r+\'="\'+n.escapeForHtml(e[r])+\'"\');return t.length>0?" "+t.join(" "):""};return o.fg&&(a?(l.push(o.fg+"-fg"),null!==o.fg_truecolor&&(u["ansi-truecolor-fg"]=o.fg_truecolor,o.fg_truecolor=null)):i.push("color:rgb("+o.fg+")")),o.bg&&(a?(l.push(o.bg+"-bg"),null!==o.bg_truecolor&&(u["ansi-truecolor-bg"]=o.bg_truecolor,o.bg_truecolor=null)):i.push("background-color:rgb("+o.bg+")")),o.decoration&&(a?l.push("ansi-"+o.decoration):"bold"===o.decoration?i.push("font-weight:bold"):"dim"===o.decoration?i.push("opacity:0.5"):"italic"===o.decoration?i.push("font-style:italic"):"reverse"===o.decoration?i.push("filter:invert(100%)"):"hidden"===o.decoration?i.push("visibility:hidden"):"strikethrough"===o.decoration?i.push("text-decoration:line-through"):i.push("text-decoration:"+o.decoration)),a?\'<span class="\'+l.join(" ")+\'"\'+c(u)+">"+o.content+"</span>":\'<span style="\'+i.join(";")+\'"\'+c(u)+">"+o.content+"</span>"}}]),e}();e.exports=a},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"===typeof window&&(r=window)}e.exports=r},function(e,t,r){var n=r(16),o=r(55),a=r(23),i=r(20),l=r(29),u=r(11),c=r(57),s=Object.getOwnPropertyDescriptor;t.f=n?s:function(e,t){if(e=i(e),t=l(t,!0),c)try{return s(e,t)}catch(e){}if(u(e,t))return a(!o.f.call(e,t),e[t])}},function(e,t){var r={}.toString;e.exports=function(e){return r.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can\'t call method on "+e);return e}},function(e,t,r){var n=r(8),o=r(18);e.exports=function(e,t){try{o(n,e,t)}catch(r){n[e]=t}return t}},function(e,t,r){var n=r(8),o=r(38),a="__core-js_shared__",i=n[a]||o(a,{});e.exports=i},function(e,t,r){var n=r(3),o=r(39);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.8.3",mode:n?"pure":"global",copyright:"\xa9 2021 Denis Pushkarev (zloirock.ru)"})},function(e,t,r){var n=r(62),o=r(43).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},function(e,t){var r=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:r)(e)}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,r){var n=r(12);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(e,t,r){var n=r(68),o=r(27),a=r(6)("iterator");e.exports=function(e){if(void 0!=e)return e[a]||e["@@iterator"]||o[n(e)]}},function(e,t,r){var n={};n[r(6)("toStringTag")]="z",e.exports="[object z]"===String(n)},function(e,t,r){"use strict";var n=r(1),o=r(102),a=r(76),i=r(72),l=r(22),u=r(18),c=r(21),s=r(6),f=r(3),d=r(27),p=r(75),h=p.IteratorPrototype,g=p.BUGGY_SAFARI_ITERATORS,v=s("iterator"),m="keys",y="values",b="entries",w=function(){return this};e.exports=function(e,t,r,s,p,k,E){o(r,t,s);var x,S,_,T=function(e){if(e===p&&N)return N;if(!g&&e in P)return P[e];switch(e){case m:case y:case b:return function(){return new r(this,e)}}return function(){return new r(this)}},C=t+" Iterator",O=!1,P=e.prototype,R=P[v]||P["@@iterator"]||p&&P[p],N=!g&&R||T(p),L="Array"==t&&P.entries||R;if(L&&(x=a(L.call(new e)),h!==Object.prototype&&x.next&&(f||a(x)===h||(i?i(x,h):"function"!=typeof x[v]&&u(x,v,w)),l(x,C,!0,!0),f&&(d[C]=w))),p==y&&R&&R.name!==y&&(O=!0,N=function(){return R.call(this)}),f&&!E||P[v]===N||u(P,v,N),d[t]=N,p)if(S={values:T(y),keys:k?N:T(m),entries:T(b)},E)for(_ in S)(g||O||!(_ in P))&&c(P,_,S[_]);else n({target:t,proto:!0,forced:g||O},S);return S}},function(e,t,r){var n=r(2),o=r(45);e.exports=function(e){var t=o(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return n(t.call(e))}},function(e,t,r){var n=r(36);e.exports=Array.isArray||function(e){return"Array"==n(e)}},function(e,t,r){"use strict";var n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,l,u=i(e),c=1;c<arguments.length;c++){for(var s in r=Object(arguments[c]))o.call(r,s)&&(u[s]=r[s]);if(n){l=n(r);for(var f=0;f<l.length;f++)a.call(r,l[f])&&(u[l[f]]=r[l[f]])}}return u}},function(e,t){var r,n,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function l(e){if(r===setTimeout)return setTimeout(e,0);if((r===a||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"===typeof setTimeout?setTimeout:a}catch(e){r=a}try{n="function"===typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var u,c=[],s=!1,f=-1;function d(){s&&u&&(s=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=l(d);s=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,s=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function g(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new h(e,t)),1!==c.length||s||l(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){var n=r(191);e.exports=function(e,t){var r;if("undefined"===typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(r=n(e))||t&&e&&"number"===typeof e.length){r&&(e=r);var o=0,a=function(){};return{s:a,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,l=!0,u=!1;return{s:function(){r=e[Symbol.iterator]()},n:function(){var e=r.next();return l=e.done,e},e:function(e){u=!0,i=e},f:function(){try{l||null==r.return||r.return()}finally{if(u)throw i}}}}},function(e,t,r){"use strict";!function e(){if("undefined"!==typeof{}&&"function"===typeof{}.checkDCE)try{({}).checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(184)},function(e,t,r){"use strict";var n=r(1),o=r(8),a=r(64),i=r(21),l=r(65),u=r(4),c=r(70),s=r(13),f=r(12),d=r(71),p=r(22),h=r(97);e.exports=function(e,t,r){var g=-1!==e.indexOf("Map"),v=-1!==e.indexOf("Weak"),m=g?"set":"add",y=o[e],b=y&&y.prototype,w=y,k={},E=function(e){var t=b[e];i(b,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(v&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return v&&!s(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(v&&!s(e))&&t.call(this,0===e?0:e)}:function(e,r){return t.call(this,0===e?0:e,r),this})};if(a(e,"function"!=typeof y||!(v||b.forEach&&!f((function(){(new y).entries().next()})))))w=r.getConstructor(t,e,g,m),l.REQUIRED=!0;else if(a(e,!0)){var x=new w,S=x[m](v?{}:-0,1)!=x,_=f((function(){x.has(1)})),T=d((function(e){new y(e)})),C=!v&&f((function(){for(var e=new y,t=5;t--;)e[m](t,t);return!e.has(-0)}));T||((w=t((function(t,r){c(t,w,e);var n=h(new y,t,w);return void 0!=r&&u(r,n[m],{that:n,AS_ENTRIES:g}),n}))).prototype=b,b.constructor=w),(_||C)&&(E("delete"),E("has"),g&&E("get")),(C||S)&&E(m),v&&b.clear&&delete b.clear}return k[e]=w,n({global:!0,forced:w!=y},k),p(w,e),v||r.setStrong(w,e,g),w}},function(e,t,r){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,a=o&&!n.call({1:2},1);t.f=a?function(e){var t=o(this,e);return!!t&&t.enumerable}:n},function(e,t,r){var n=r(12),o=r(36),a="".split;e.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?a.call(e,""):Object(e)}:Object},function(e,t,r){var n=r(16),o=r(12),a=r(58);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(e,t,r){var n=r(8),o=r(13),a=n.document,i=o(a)&&o(a.createElement);e.exports=function(e){return i?a.createElement(e):{}}},function(e,t,r){var n=r(39),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(e){return o.call(e)}),e.exports=n.inspectSource},function(e,t,r){var n=r(11),o=r(93),a=r(35),i=r(14);e.exports=function(e,t){for(var r=o(t),l=i.f,u=a.f,c=0;c<r.length;c++){var s=r[c];n(e,s)||l(e,s,u(t,s))}}},function(e,t,r){var n=r(8);e.exports=n},function(e,t,r){var n=r(11),o=r(20),a=r(94).indexOf,i=r(25);e.exports=function(e,t){var r,l=o(e),u=0,c=[];for(r in l)!n(i,r)&&n(l,r)&&c.push(r);for(;t.length>u;)n(l,r=t[u++])&&(~a(c,r)||c.push(r));return c}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,r){var n=r(12),o=/#|\\.prototype\\./,a=function(e,t){var r=l[i(e)];return r==c||r!=u&&("function"==typeof t?n(t):!!t)},i=a.normalize=function(e){return String(e).replace(o,".").toLowerCase()},l=a.data={},u=a.NATIVE="N",c=a.POLYFILL="P";e.exports=a},function(e,t,r){var n=r(25),o=r(13),a=r(11),i=r(14).f,l=r(31),u=r(96),c=l("meta"),s=0,f=Object.isExtensible||function(){return!0},d=function(e){i(e,c,{value:{objectID:"O"+ ++s,weakData:{}}})},p=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,c)){if(!f(e))return"F";if(!t)return"E";d(e)}return e[c].objectID},getWeakData:function(e,t){if(!a(e,c)){if(!f(e))return!0;if(!t)return!1;d(e)}return e[c].weakData},onFreeze:function(e){return u&&p.REQUIRED&&f(e)&&!a(e,c)&&d(e),e}};n[c]=!0},function(e,t,r){var n=r(6),o=r(27),a=n("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||i[a]===e)}},function(e,t,r){var n=r(44);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,r){var n=r(46),o=r(36),a=r(6)("toStringTag"),i="Arguments"==o(function(){return arguments}());e.exports=n?o:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?r:i?o(t):"Object"==(n=o(t))&&"function"==typeof t.callee?"Arguments":n}},function(e,t,r){var n=r(2);e.exports=function(e){var t=e.return;if(void 0!==t)return n(t.call(e)).value}},function(e,t){e.exports=function(e,t,r){if(!(e instanceof t))throw TypeError("Incorrect "+(r?r+" ":"")+"invocation");return e}},function(e,t,r){var n=r(6)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var a={};a[n]=function(){return{next:function(){return{done:r=!0}}}},e(a)}catch(e){}return r}},function(e,t,r){var n=r(2),o=r(98);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(r,[]),t=r instanceof Array}catch(e){}return function(r,a){return n(r),o(a),t?e.call(r,a):r.__proto__=a,r}}():void 0)},function(e,t,r){"use strict";var n=r(14).f,o=r(32),a=r(101),i=r(7),l=r(70),u=r(4),c=r(47),s=r(104),f=r(16),d=r(65).fastKey,p=r(24),h=p.set,g=p.getterFor;e.exports={getConstructor:function(e,t,r,c){var s=e((function(e,n){l(e,s,t),h(e,{type:t,index:o(null),first:void 0,last:void 0,size:0}),f||(e.size=0),void 0!=n&&u(n,e[c],{that:e,AS_ENTRIES:r})})),p=g(t),v=function(e,t,r){var n,o,a=p(e),i=m(e,t);return i?i.value=r:(a.last=i={index:o=d(t,!0),key:t,value:r,previous:n=a.last,next:void 0,removed:!1},a.first||(a.first=i),n&&(n.next=i),f?a.size++:e.size++,"F"!==o&&(a.index[o]=i)),e},m=function(e,t){var r,n=p(e),o=d(t);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key==t)return r};return a(s.prototype,{clear:function(){for(var e=p(this),t=e.index,r=e.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete t[r.index],r=r.next;e.first=e.last=void 0,f?e.size=0:this.size=0},delete:function(e){var t=this,r=p(t),n=m(t,e);if(n){var o=n.next,a=n.previous;delete r.index[n.index],n.removed=!0,a&&(a.next=o),o&&(o.previous=a),r.first==n&&(r.first=o),r.last==n&&(r.last=a),f?r.size--:t.size--}return!!n},forEach:function(e){for(var t,r=p(this),n=i(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:r.first;)for(n(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!m(this,e)}}),a(s.prototype,r?{get:function(e){var t=m(this,e);return t&&t.value},set:function(e,t){return v(this,0===e?0:e,t)}}:{add:function(e){return v(this,e=0===e?0:e,e)}}),f&&n(s.prototype,"size",{get:function(){return p(this).size}}),s},setStrong:function(e,t,r){var n=t+" Iterator",o=g(t),a=g(n);c(e,t,(function(e,t){h(this,{type:n,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=a(this),t=e.kind,r=e.last;r&&r.removed;)r=r.previous;return e.target&&(e.last=r=r?r.next:e.state.first)?"keys"==t?{value:r.key,done:!1}:"values"==t?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),s(t)}}},function(e,t,r){var n=r(62),o=r(43);e.exports=Object.keys||function(e){return n(e,o)}},function(e,t,r){"use strict";var n,o,a,i=r(12),l=r(76),u=r(18),c=r(11),s=r(6),f=r(3),d=s("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(o=l(l(a)))!==Object.prototype&&(n=o):p=!0);var h=void 0==n||i((function(){var e={};return n[d].call(e)!==e}));h&&(n={}),f&&!h||c(n,d)||u(n,d,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},function(e,t,r){var n=r(11),o=r(28),a=r(30),i=r(103),l=a("IE_PROTO"),u=Object.prototype;e.exports=i?Object.getPrototypeOf:function(e){return e=o(e),n(e,l)?e[l]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?u:null}},function(e,t,r){var n=r(46),o=r(21),a=r(105);n||o(Object.prototype,"toString",a,{unsafe:!0})},function(e,t,r){"use strict";var n=r(107).charAt,o=r(24),a=r(47),i="String Iterator",l=o.set,u=o.getterFor(i);a(String,"String",(function(e){l(this,{type:i,string:String(e),index:0})}),(function(){var e,t=u(this),r=t.string,o=t.index;return o>=r.length?{value:void 0,done:!0}:(e=n(r,o),t.index+=e.length,{value:e,done:!1})}))},function(e,t,r){"use strict";var n=r(2),o=r(5);e.exports=function(){for(var e,t=n(this),r=o(t.delete),a=!0,i=0,l=arguments.length;i<l;i++)e=r.call(t,arguments[i]),a=a&&e;return!!a}},function(e,t,r){"use strict";var n=r(5),o=r(7),a=r(4);e.exports=function(e){var t,r,i,l,u=arguments.length,c=u>1?arguments[1]:void 0;return n(this),(t=void 0!==c)&&n(c),void 0==e?new this:(r=[],t?(i=0,l=o(c,u>2?arguments[2]:void 0,2),a(e,(function(e){r.push(l(e,i++))}))):a(e,r.push,{that:r}),new this(r))}},function(e,t,r){"use strict";e.exports=function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}},function(e,t,r){var n=r(6);t.f=n},function(e,t,r){var n=r(13),o=r(49),a=r(6)("species");e.exports=function(e,t){var r;return o(e)&&("function"!=typeof(r=e.constructor)||r!==Array&&!o(r.prototype)?n(r)&&null===(r=r[a])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===t?0:t)}},function(e,t,r){"use strict";var n=r(29),o=r(14),a=r(23);e.exports=function(e,t,r){var i=n(t);i in e?o.f(e,i,a(0,r)):e[i]=r}},function(e,t,r){var n,o,a=r(8),i=r(168),l=a.process,u=l&&l.versions,c=u&&u.v8;c?o=(n=c.split("."))[0]+n[1]:i&&(!(n=i.match(/Edge\\/(\\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\\/(\\d+)/))&&(o=n[1]),e.exports=o&&+o},function(e,t,r){"use strict";var n=r(178);function o(){}var a=null,i={};function l(e){if("object"!==typeof this)throw new TypeError("Promises must be constructed via new");if("function"!==typeof e)throw new TypeError("Promise constructor\'s argument is not a function");this._U=0,this._V=0,this._W=null,this._X=null,e!==o&&p(e,this)}function u(e,t){for(;3===e._V;)e=e._W;if(l._Y&&l._Y(e),0===e._V)return 0===e._U?(e._U=1,void(e._X=t)):1===e._U?(e._U=2,void(e._X=[e._X,t])):void e._X.push(t);!function(e,t){n((function(){var r=1===e._V?t.onFulfilled:t.onRejected;if(null!==r){var n=function(e,t){try{return e(t)}catch(e){return a=e,i}}(r,e._W);n===i?s(t.promise,a):c(t.promise,n)}else 1===e._V?c(t.promise,e._W):s(t.promise,e._W)}))}(e,t)}function c(e,t){if(t===e)return s(e,new TypeError("A promise cannot be resolved with itself."));if(t&&("object"===typeof t||"function"===typeof t)){var r=function(e){try{return e.then}catch(e){return a=e,i}}(t);if(r===i)return s(e,a);if(r===e.then&&t instanceof l)return e._V=3,e._W=t,void f(e);if("function"===typeof r)return void p(r.bind(t),e)}e._V=1,e._W=t,f(e)}function s(e,t){e._V=2,e._W=t,l._Z&&l._Z(e,t),f(e)}function f(e){if(1===e._U&&(u(e,e._X),e._X=null),2===e._U){for(var t=0;t<e._X.length;t++)u(e,e._X[t]);e._X=null}}function d(e,t,r){this.onFulfilled="function"===typeof e?e:null,this.onRejected="function"===typeof t?t:null,this.promise=r}function p(e,t){var r=!1,n=function(e,t,r){try{e(t,r)}catch(e){return a=e,i}}(e,(function(e){r||(r=!0,c(t,e))}),(function(e){r||(r=!0,s(t,e))}));r||n!==i||(r=!0,s(t,a))}e.exports=l,l._Y=null,l._Z=null,l._0=o,l.prototype.then=function(e,t){if(this.constructor!==l)return function(e,t,r){return new e.constructor((function(n,a){var i=new l(o);i.then(n,a),u(e,new d(t,r,i))}))}(this,e,t);var r=new l(o);return u(this,new d(e,t,r)),r}},function(e,t,r){var n=r(204),o={};for(var a in n)n.hasOwnProperty(a)&&(o[n[a]]=a);var i=e.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var l in i)if(i.hasOwnProperty(l)){if(!("channels"in i[l]))throw new Error("missing channels property: "+l);if(!("labels"in i[l]))throw new Error("missing channel labels property: "+l);if(i[l].labels.length!==i[l].channels)throw new Error("channel and label counts mismatch: "+l);var u=i[l].channels,c=i[l].labels;delete i[l].channels,delete i[l].labels,Object.defineProperty(i[l],"channels",{value:u}),Object.defineProperty(i[l],"labels",{value:c})}i.rgb.hsl=function(e){var t,r,n=e[0]/255,o=e[1]/255,a=e[2]/255,i=Math.min(n,o,a),l=Math.max(n,o,a),u=l-i;return l===i?t=0:n===l?t=(o-a)/u:o===l?t=2+(a-n)/u:a===l&&(t=4+(n-o)/u),(t=Math.min(60*t,360))<0&&(t+=360),r=(i+l)/2,[t,100*(l===i?0:r<=.5?u/(l+i):u/(2-l-i)),100*r]},i.rgb.hsv=function(e){var t,r,n,o,a,i=e[0]/255,l=e[1]/255,u=e[2]/255,c=Math.max(i,l,u),s=c-Math.min(i,l,u),f=function(e){return(c-e)/6/s+.5};return 0===s?o=a=0:(a=s/c,t=f(i),r=f(l),n=f(u),i===c?o=n-r:l===c?o=1/3+t-n:u===c&&(o=2/3+r-t),o<0?o+=1:o>1&&(o-=1)),[360*o,100*a,100*c]},i.rgb.hwb=function(e){var t=e[0],r=e[1],n=e[2];return[i.rgb.hsl(e)[0],100*(1/255*Math.min(t,Math.min(r,n))),100*(n=1-1/255*Math.max(t,Math.max(r,n)))]},i.rgb.cmyk=function(e){var t,r=e[0]/255,n=e[1]/255,o=e[2]/255;return[100*((1-r-(t=Math.min(1-r,1-n,1-o)))/(1-t)||0),100*((1-n-t)/(1-t)||0),100*((1-o-t)/(1-t)||0),100*t]},i.rgb.keyword=function(e){var t=o[e];if(t)return t;var r,a,i,l=1/0;for(var u in n)if(n.hasOwnProperty(u)){var c=n[u],s=(a=e,i=c,Math.pow(a[0]-i[0],2)+Math.pow(a[1]-i[1],2)+Math.pow(a[2]-i[2],2));s<l&&(l=s,r=u)}return r},i.keyword.rgb=function(e){return n[e]},i.rgb.xyz=function(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)+.1805*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)),100*(.2126*t+.7152*r+.0722*n),100*(.0193*t+.1192*r+.9505*n)]},i.rgb.lab=function(e){var t=i.rgb.xyz(e),r=t[0],n=t[1],o=t[2];return n/=100,o/=108.883,r=(r/=95.047)>.008856?Math.pow(r,1/3):7.787*r+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(r-n),200*(n-(o=o>.008856?Math.pow(o,1/3):7.787*o+16/116))]},i.hsl.rgb=function(e){var t,r,n,o,a,i=e[0]/360,l=e[1]/100,u=e[2]/100;if(0===l)return[a=255*u,a,a];t=2*u-(r=u<.5?u*(1+l):u+l-u*l),o=[0,0,0];for(var c=0;c<3;c++)(n=i+1/3*-(c-1))<0&&n++,n>1&&n--,a=6*n<1?t+6*(r-t)*n:2*n<1?r:3*n<2?t+(r-t)*(2/3-n)*6:t,o[c]=255*a;return o},i.hsl.hsv=function(e){var t=e[0],r=e[1]/100,n=e[2]/100,o=r,a=Math.max(n,.01);return r*=(n*=2)<=1?n:2-n,o*=a<=1?a:2-a,[t,100*(0===n?2*o/(a+o):2*r/(n+r)),100*((n+r)/2)]},i.hsv.rgb=function(e){var t=e[0]/60,r=e[1]/100,n=e[2]/100,o=Math.floor(t)%6,a=t-Math.floor(t),i=255*n*(1-r),l=255*n*(1-r*a),u=255*n*(1-r*(1-a));switch(n*=255,o){case 0:return[n,u,i];case 1:return[l,n,i];case 2:return[i,n,u];case 3:return[i,l,n];case 4:return[u,i,n];case 5:return[n,i,l]}},i.hsv.hsl=function(e){var t,r,n,o=e[0],a=e[1]/100,i=e[2]/100,l=Math.max(i,.01);return n=(2-a)*i,r=a*l,[o,100*(r=(r/=(t=(2-a)*l)<=1?t:2-t)||0),100*(n/=2)]},i.hwb.rgb=function(e){var t,r,n,o,a,i,l,u=e[0]/360,c=e[1]/100,s=e[2]/100,f=c+s;switch(f>1&&(c/=f,s/=f),n=6*u-(t=Math.floor(6*u)),0!==(1&t)&&(n=1-n),o=c+n*((r=1-s)-c),t){default:case 6:case 0:a=r,i=o,l=c;break;case 1:a=o,i=r,l=c;break;case 2:a=c,i=r,l=o;break;case 3:a=c,i=o,l=r;break;case 4:a=o,i=c,l=r;break;case 5:a=r,i=c,l=o}return[255*a,255*i,255*l]},i.cmyk.rgb=function(e){var t=e[0]/100,r=e[1]/100,n=e[2]/100,o=e[3]/100;return[255*(1-Math.min(1,t*(1-o)+o)),255*(1-Math.min(1,r*(1-o)+o)),255*(1-Math.min(1,n*(1-o)+o))]},i.xyz.rgb=function(e){var t,r,n,o=e[0]/100,a=e[1]/100,i=e[2]/100;return r=-.9689*o+1.8758*a+.0415*i,n=.0557*o+-.204*a+1.057*i,t=(t=3.2406*o+-1.5372*a+-.4986*i)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,[255*(t=Math.min(Math.max(0,t),1)),255*(r=Math.min(Math.max(0,r),1)),255*(n=Math.min(Math.max(0,n),1))]},i.xyz.lab=function(e){var t=e[0],r=e[1],n=e[2];return r/=100,n/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(t-r),200*(r-(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116))]},i.lab.xyz=function(e){var t,r,n,o=e[0];t=e[1]/500+(r=(o+16)/116),n=r-e[2]/200;var a=Math.pow(r,3),i=Math.pow(t,3),l=Math.pow(n,3);return r=a>.008856?a:(r-16/116)/7.787,t=i>.008856?i:(t-16/116)/7.787,n=l>.008856?l:(n-16/116)/7.787,[t*=95.047,r*=100,n*=108.883]},i.lab.lch=function(e){var t,r=e[0],n=e[1],o=e[2];return(t=360*Math.atan2(o,n)/2/Math.PI)<0&&(t+=360),[r,Math.sqrt(n*n+o*o),t]},i.lch.lab=function(e){var t,r=e[0],n=e[1];return t=e[2]/360*2*Math.PI,[r,n*Math.cos(t),n*Math.sin(t)]},i.rgb.ansi16=function(e){var t=e[0],r=e[1],n=e[2],o=1 in arguments?arguments[1]:i.rgb.hsv(e)[2];if(0===(o=Math.round(o/50)))return 30;var a=30+(Math.round(n/255)<<2|Math.round(r/255)<<1|Math.round(t/255));return 2===o&&(a+=60),a},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){var t=e[0],r=e[1],n=e[2];return t===r&&r===n?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(r/255*5)+Math.round(n/255*5)},i.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var r=.5*(1+~~(e>50));return[(1&t)*r*255,(t>>1&1)*r*255,(t>>2&1)*r*255]},i.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var r;return e-=16,[Math.floor(e/36)/5*255,Math.floor((r=e%36)/6)/5*255,r%6/5*255]},i.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var r=t[0];3===t[0].length&&(r=r.split("").map((function(e){return e+e})).join(""));var n=parseInt(r,16);return[n>>16&255,n>>8&255,255&n]},i.rgb.hcg=function(e){var t,r=e[0]/255,n=e[1]/255,o=e[2]/255,a=Math.max(Math.max(r,n),o),i=Math.min(Math.min(r,n),o),l=a-i;return t=l<=0?0:a===r?(n-o)/l%6:a===n?2+(o-r)/l:4+(r-n)/l+4,t/=6,[360*(t%=1),100*l,100*(l<1?i/(1-l):0)]},i.hsl.hcg=function(e){var t=e[1]/100,r=e[2]/100,n=1,o=0;return(n=r<.5?2*t*r:2*t*(1-r))<1&&(o=(r-.5*n)/(1-n)),[e[0],100*n,100*o]},i.hsv.hcg=function(e){var t=e[1]/100,r=e[2]/100,n=t*r,o=0;return n<1&&(o=(r-n)/(1-n)),[e[0],100*n,100*o]},i.hcg.rgb=function(e){var t=e[0]/360,r=e[1]/100,n=e[2]/100;if(0===r)return[255*n,255*n,255*n];var o,a=[0,0,0],i=t%1*6,l=i%1,u=1-l;switch(Math.floor(i)){case 0:a[0]=1,a[1]=l,a[2]=0;break;case 1:a[0]=u,a[1]=1,a[2]=0;break;case 2:a[0]=0,a[1]=1,a[2]=l;break;case 3:a[0]=0,a[1]=u,a[2]=1;break;case 4:a[0]=l,a[1]=0,a[2]=1;break;default:a[0]=1,a[1]=0,a[2]=u}return o=(1-r)*n,[255*(r*a[0]+o),255*(r*a[1]+o),255*(r*a[2]+o)]},i.hcg.hsv=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t),n=0;return r>0&&(n=t/r),[e[0],100*n,100*r]},i.hcg.hsl=function(e){var t=e[1]/100,r=e[2]/100*(1-t)+.5*t,n=0;return r>0&&r<.5?n=t/(2*r):r>=.5&&r<1&&(n=t/(2*(1-r))),[e[0],100*n,100*r]},i.hcg.hwb=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t);return[e[0],100*(r-t),100*(1-r)]},i.hwb.hcg=function(e){var t=e[1]/100,r=1-e[2]/100,n=r-t,o=0;return n<1&&(o=(r-n)/(1-n)),[e[0],100*n,100*o]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=i.gray.hsv=function(e){return[0,0,e[0]]},i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),r=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(r.length)+r},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(187);t.XmlEntities=n.XmlEntities;var o=r(188);t.Html4Entities=o.Html4Entities;var a=r(189);t.Html5Entities=a.Html5Entities,t.AllHtmlEntities=a.Html5Entities},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.codeFrameColumns=c,t.default=function(t,r,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!a){a=!0;var i="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";if(e.emitWarning)e.emitWarning(i,"DeprecationWarning");else{var l=new Error(i);l.name="DeprecationWarning",console.warn(new Error(i))}}var u={start:{column:n=Math.max(n,0),line:r}};return c(t,u,o)};var n=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==typeof e&&"function"!==typeof e)return{default:e};var t=o();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if(Object.prototype.hasOwnProperty.call(e,a)){var i=n?Object.getOwnPropertyDescriptor(e,a):null;i&&(i.get||i.set)?Object.defineProperty(r,a,i):r[a]=e[a]}r.default=e,t&&t.set(e,r);return r}(r(190));function o(){if("function"!==typeof WeakMap)return null;var e=new WeakMap;return o=function(){return e},e}var a=!1;function i(e){return{gutter:e.grey,marker:e.red.bold,message:e.red.bold}}var l=/\\r\\n|[\\n\\r\\u2028\\u2029]/;function u(e,t,r){var n=Object.assign({column:0,line:-1},e.start),o=Object.assign({},n,e.end),a=r||{},i=a.linesAbove,l=void 0===i?2:i,u=a.linesBelow,c=void 0===u?3:u,s=n.line,f=n.column,d=o.line,p=o.column,h=Math.max(s-(l+1),0),g=Math.min(t.length,d+c);-1===s&&(h=0),-1===d&&(g=t.length);var v=d-s,m={};if(v)for(var y=0;y<=v;y++){var b=y+s;if(f)if(0===y){var w=t[b-1].length;m[b]=[f,w-f+1]}else if(y===v)m[b]=[0,p];else{var k=t[b-y].length;m[b]=[0,k]}else m[b]=!0}else m[s]=f===p?!f||[f,0]:[f,p-f];return{start:h,end:g,markerLines:m}}function c(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=(r.highlightCode||r.forceColor)&&(0,n.shouldHighlight)(r),a=(0,n.getChalk)(r),c=i(a),s=function(e,t){return o?e(t):t},f=e.split(l),d=u(t,f,r),p=d.start,h=d.end,g=d.markerLines,v=t.start&&"number"===typeof t.start.column,m=String(h).length,y=o?(0,n.default)(e,r):e,b=y.split(l).slice(p,h).map((function(e,t){var n=p+1+t,o=" ".concat(n).slice(-m),a=" ".concat(o," | "),i=g[n],l=!g[n+1];if(i){var u="";if(Array.isArray(i)){var f=e.slice(0,Math.max(i[0]-1,0)).replace(/[^\\t]/g," "),d=i[1]||1;u=["\\n ",s(c.gutter,a.replace(/\\d/g," ")),f,s(c.marker,"^").repeat(d)].join(""),l&&r.message&&(u+=" "+s(c.message,r.message))}return[s(c.marker,">"),s(c.gutter,a),e,u].join("")}return" ".concat(s(c.gutter,a)).concat(e)})).join("\\n");return r.message&&!v&&(b="".concat(" ".repeat(m+1)).concat(r.message,"\\n").concat(b)),o?a.reset(b):b}}).call(this,r(51))},function(e,t,r){"use strict";r(91),r(77),r(106),r(78),r(108),r(109),r(110),r(111),r(112),r(113),r(114),r(115),r(117),r(118),r(119),r(120),r(121),r(122),r(123),r(124),r(125),r(126),r(128),r(129),r(130),r(131),r(132),r(133),r(134),r(135),r(136),r(137),r(138),r(139),r(140),r(141),r(142),r(143),r(144),r(145),r(149),r(181).polyfill()},function(e,t,r){"use strict";var n=r(54),o=r(73);e.exports=n("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},function(e,t,r){var n=r(8),o=r(59),a=n.WeakMap;e.exports="function"===typeof a&&/native code/.test(o(a))},function(e,t,r){var n=r(10),o=r(41),a=r(63),i=r(2);e.exports=n("Reflect","ownKeys")||function(e){var t=o.f(i(e)),r=a.f;return r?t.concat(r(e)):t}},function(e,t,r){var n=r(20),o=r(26),a=r(95),i=function(e){return function(t,r,i){var l,u=n(t),c=o(u.length),s=a(i,c);if(e&&r!=r){for(;c>s;)if((l=u[s++])!=l)return!0}else for(;c>s;s++)if((e||s in u)&&u[s]===r)return e||s||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},function(e,t,r){var n=r(42),o=Math.max,a=Math.min;e.exports=function(e,t){var r=n(e);return r<0?o(r+t,0):a(r,t)}},function(e,t,r){var n=r(12);e.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(e,t,r){var n=r(13),o=r(72);e.exports=function(e,t,r){var a,i;return o&&"function"==typeof(a=t.constructor)&&a!==r&&n(i=a.prototype)&&i!==r.prototype&&o(e,i),e}},function(e,t,r){var n=r(13);e.exports=function(e){if(!n(e)&&null!==e)throw TypeError("Can\'t set "+String(e)+" as a prototype");return e}},function(e,t,r){var n=r(16),o=r(14),a=r(2),i=r(74);e.exports=n?Object.defineProperties:function(e,t){a(e);for(var r,n=i(t),l=n.length,u=0;l>u;)o.f(e,r=n[u++],t[r]);return e}},function(e,t,r){var n=r(10);e.exports=n("document","documentElement")},function(e,t,r){var n=r(21);e.exports=function(e,t,r){for(var o in t)n(e,o,t[o],r);return e}},function(e,t,r){"use strict";var n=r(75).IteratorPrototype,o=r(32),a=r(23),i=r(22),l=r(27),u=function(){return this};e.exports=function(e,t,r){var c=t+" Iterator";return e.prototype=o(n,{next:a(1,r)}),i(e,c,!1,!0),l[c]=u,e}},function(e,t,r){var n=r(12);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,r){"use strict";var n=r(10),o=r(14),a=r(6),i=r(16),l=a("species");e.exports=function(e){var t=n(e),r=o.f;i&&t&&!t[l]&&r(t,l,{configurable:!0,get:function(){return this}})}},function(e,t,r){"use strict";var n=r(46),o=r(68);e.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},function(e,t,r){"use strict";var n=r(54),o=r(73);e.exports=n("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},function(e,t,r){var n=r(42),o=r(37),a=function(e){return function(t,r){var a,i,l=String(o(t)),u=n(r),c=l.length;return u<0||u>=c?e?"":void 0:(a=l.charCodeAt(u))<55296||a>56319||u+1===c||(i=l.charCodeAt(u+1))<56320||i>57343?e?l.charAt(u):a:e?l.slice(u,u+2):i-56320+(a-55296<<10)+65536}};e.exports={codeAt:a(!1),charAt:a(!0)}},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(79);n({target:"Map",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return!u(r,(function(e,r,o){if(!n(r,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){n(r,e,t)&&d.call(o,e,r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o(r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{findKey:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o(e)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){r(1)({target:"Map",stat:!0},{from:r(80)})},function(e,t,r){"use strict";var n=r(1),o=r(4),a=r(5);n({target:"Map",stat:!0},{groupBy:function(e,t){var r=new this;a(t);var n=a(r.has),i=a(r.get),l=a(r.set);return o(e,(function(e){var o=t(e);n.call(r,o)?i.call(r,o).push(e):l.call(r,o,[e])})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(15),l=r(116),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{includes:function(e){return u(i(a(this)),(function(t,r,n){if(l(r,e))return n()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,r){"use strict";var n=r(1),o=r(4),a=r(5);n({target:"Map",stat:!0},{keyBy:function(e,t){var r=new this;a(t);var n=a(r.set);return o(e,(function(e){n.call(r,t(e),e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(15),l=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{keyOf:function(e){return l(i(a(this)),(function(t,r,n){if(r===e)return n(t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{mapKeys:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){d.call(o,n(r,e,t),r)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(15),f=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{mapValues:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=l(o.set);return f(r,(function(e,r){d.call(o,e,n(r,e,t))}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{merge:function(e){for(var t=a(this),r=i(t.set),n=0;n<arguments.length;)l(arguments[n++],r,{that:t,AS_ENTRIES:!0});return t}})},function(e,t,r){r(1)({target:"Map",stat:!0},{of:r(81)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),r=l(t),n=arguments.length<2,o=n?void 0:arguments[1];if(i(e),u(r,(function(r,a){n?(n=!1,o=a):o=e(o,a,r,t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),n)throw TypeError("Reduce of empty map with no initial value");return o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(15),u=r(4);n({target:"Map",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r,o){if(n(r,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5);n({target:"Map",proto:!0,real:!0,forced:o},{update:function(e,t){var r=a(this),n=arguments.length;i(t);var o=r.has(e);if(!o&&n<3)throw TypeError("Updating absent value");var l=o?r.get(e):i(n>2?arguments[2]:void 0)(e,r);return r.set(e,t(l,e,r)),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(127);n({target:"Set",proto:!0,real:!0,forced:o},{addAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(2),o=r(5);e.exports=function(){for(var e=n(this),t=o(e.add),r=0,a=arguments.length;r<a;r++)t.call(e,arguments[r]);return e}},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(79);n({target:"Set",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{difference:function(e){var t=i(this),r=new(u(t,a("Set")))(t),n=l(r.delete);return c(e,(function(e){n.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return!u(r,(function(e,r){if(!n(e,e,t))return r()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(19),f=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=l(o.add);return f(r,(function(e){n(e,e,t)&&d.call(o,e)}),{IS_ITERATOR:!0}),o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r){if(n(e,e,t))return r(e)}),{IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},function(e,t,r){r(1)({target:"Set",stat:!0},{from:r(80)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{intersection:function(e){var t=i(this),r=new(u(t,a("Set"))),n=l(t.has),o=l(r.add);return c(e,(function(e){n.call(t,e)&&o.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isDisjointFrom:function(e){var t=a(this),r=i(t.has);return!l(e,(function(e,n){if(!0===r.call(t,e))return n()}),{INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(48),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isSubsetOf:function(e){var t=u(this),r=i(e),n=r.has;return"function"!=typeof n&&(r=new(a("Set"))(e),n=l(r.has)),!c(t,(function(e,t){if(!1===n.call(r,e))return t()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{isSupersetOf:function(e){var t=a(this),r=i(t.has);return!l(e,(function(e,n){if(!1===r.call(t,e))return n()}),{INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(19),l=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{join:function(e){var t=a(this),r=i(t),n=void 0===e?",":String(e),o=[];return l(r,o.push,{that:o,IS_ITERATOR:!0}),o.join(n)}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(7),c=r(17),s=r(19),f=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{map:function(e){var t=i(this),r=s(t),n=u(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=l(o.add);return f(r,(function(e){d.call(o,n(e,e,t))}),{IS_ITERATOR:!0}),o}})},function(e,t,r){r(1)({target:"Set",stat:!0},{of:r(81)})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(5),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),r=l(t),n=arguments.length<2,o=n?void 0:arguments[1];if(i(e),u(r,(function(r){n?(n=!1,o=r):o=e(o,r,r,t)}),{IS_ITERATOR:!0}),n)throw TypeError("Reduce of empty set with no initial value");return o}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(2),i=r(7),l=r(19),u=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),r=l(t),n=i(e,arguments.length>1?arguments[1]:void 0,3);return u(r,(function(e,r){if(n(e,e,t))return r()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{symmetricDifference:function(e){var t=i(this),r=new(u(t,a("Set")))(t),n=l(r.delete),o=l(r.add);return c(e,(function(e){n.call(r,e)||o.call(r,e)})),r}})},function(e,t,r){"use strict";var n=r(1),o=r(3),a=r(10),i=r(2),l=r(5),u=r(17),c=r(4);n({target:"Set",proto:!0,real:!0,forced:o},{union:function(e){var t=i(this),r=new(u(t,a("Set")))(t);return c(e,l(r.add),{that:r}),r}})},function(e,t,r){var n=r(8),o=r(146),a=r(147),i=r(18),l=r(6),u=l("iterator"),c=l("toStringTag"),s=a.values;for(var f in o){var d=n[f],p=d&&d.prototype;if(p){if(p[u]!==s)try{i(p,u,s)}catch(e){p[u]=s}if(p[c]||i(p,c,f),o[f])for(var h in a)if(p[h]!==a[h])try{i(p,h,a[h])}catch(e){p[h]=a[h]}}}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,r){"use strict";var n=r(20),o=r(148),a=r(27),i=r(24),l=r(47),u="Array Iterator",c=i.set,s=i.getterFor(u);e.exports=l(Array,"Array",(function(e,t){c(this,{type:u,target:n(e),index:0,kind:t})}),(function(){var e=s(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values"),a.Arguments=a.Array,o("keys"),o("values"),o("entries")},function(e,t,r){var n=r(6),o=r(32),a=r(14),i=n("unscopables"),l=Array.prototype;void 0==l[i]&&a.f(l,i,{configurable:!0,value:o(null)}),e.exports=function(e){l[i][e]=!0}},function(e,t,r){"use strict";r(150),r(153),r(154),r(155),r(156),r(157),r(158),r(159),r(160),r(161),r(162),r(163),r(164),r(165),r(166),r(169),r(172),r(173),r(77),r(78),r(174),r(175),r(176),"undefined"===typeof Promise&&(r(177).enable(),self.Promise=r(179)),"undefined"!==typeof window&&r(180),Object.assign=r(50)},function(e,t,r){"use strict";var n=r(1),o=r(8),a=r(10),i=r(3),l=r(16),u=r(44),c=r(67),s=r(12),f=r(11),d=r(49),p=r(13),h=r(2),g=r(28),v=r(20),m=r(29),y=r(23),b=r(32),w=r(74),k=r(41),E=r(151),x=r(63),S=r(35),_=r(14),T=r(55),C=r(18),O=r(21),P=r(40),R=r(30),N=r(25),L=r(31),A=r(6),I=r(82),j=r(9),M=r(22),D=r(24),q=r(152).forEach,z=R("hidden"),U="Symbol",F=A("toPrimitive"),B=D.set,V=D.getterFor(U),H=Object.prototype,W=o.Symbol,$=a("JSON","stringify"),G=S.f,Q=_.f,Y=E.f,K=T.f,X=P("symbols"),J=P("op-symbols"),Z=P("string-to-symbol-registry"),ee=P("symbol-to-string-registry"),te=P("wks"),re=o.QObject,ne=!re||!re.prototype||!re.prototype.findChild,oe=l&&s((function(){return 7!=b(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a}))?function(e,t,r){var n=G(H,t);n&&delete H[t],Q(e,t,r),n&&e!==H&&Q(H,t,n)}:Q,ae=function(e,t){var r=X[e]=b(W.prototype);return B(r,{type:U,tag:e,description:t}),l||(r.description=t),r},ie=c?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof W},le=function(e,t,r){e===H&&le(J,t,r),h(e);var n=m(t,!0);return h(r),f(X,n)?(r.enumerable?(f(e,z)&&e[z][n]&&(e[z][n]=!1),r=b(r,{enumerable:y(0,!1)})):(f(e,z)||Q(e,z,y(1,{})),e[z][n]=!0),oe(e,n,r)):Q(e,n,r)},ue=function(e,t){h(e);var r=v(t),n=w(r).concat(de(r));return q(n,(function(t){l&&!ce.call(r,t)||le(e,t,r[t])})),e},ce=function(e){var t=m(e,!0),r=K.call(this,t);return!(this===H&&f(X,t)&&!f(J,t))&&(!(r||!f(this,t)||!f(X,t)||f(this,z)&&this[z][t])||r)},se=function(e,t){var r=v(e),n=m(t,!0);if(r!==H||!f(X,n)||f(J,n)){var o=G(r,n);return!o||!f(X,n)||f(r,z)&&r[z][n]||(o.enumerable=!0),o}},fe=function(e){var t=Y(v(e)),r=[];return q(t,(function(e){f(X,e)||f(N,e)||r.push(e)})),r},de=function(e){var t=e===H,r=Y(t?J:v(e)),n=[];return q(r,(function(e){!f(X,e)||t&&!f(H,e)||n.push(X[e])})),n};(u||(O((W=function(){if(this instanceof W)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=L(e),r=function e(r){this===H&&e.call(J,r),f(this,z)&&f(this[z],t)&&(this[z][t]=!1),oe(this,t,y(1,r))};return l&&ne&&oe(H,t,{configurable:!0,set:r}),ae(t,e)}).prototype,"toString",(function(){return V(this).tag})),O(W,"withoutSetter",(function(e){return ae(L(e),e)})),T.f=ce,_.f=le,S.f=se,k.f=E.f=fe,x.f=de,I.f=function(e){return ae(A(e),e)},l&&(Q(W.prototype,"description",{configurable:!0,get:function(){return V(this).description}}),i||O(H,"propertyIsEnumerable",ce,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:W}),q(w(te),(function(e){j(e)})),n({target:U,stat:!0,forced:!u},{for:function(e){var t=String(e);if(f(Z,t))return Z[t];var r=W(t);return Z[t]=r,ee[r]=t,r},keyFor:function(e){if(!ie(e))throw TypeError(e+" is not a symbol");if(f(ee,e))return ee[e]},useSetter:function(){ne=!0},useSimple:function(){ne=!1}}),n({target:"Object",stat:!0,forced:!u,sham:!l},{create:function(e,t){return void 0===t?b(e):ue(b(e),t)},defineProperty:le,defineProperties:ue,getOwnPropertyDescriptor:se}),n({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:fe,getOwnPropertySymbols:de}),n({target:"Object",stat:!0,forced:s((function(){x.f(1)}))},{getOwnPropertySymbols:function(e){return x.f(g(e))}}),$)&&n({target:"JSON",stat:!0,forced:!u||s((function(){var e=W();return"[null]"!=$([e])||"{}"!=$({a:e})||"{}"!=$(Object(e))}))},{stringify:function(e,t,r){for(var n,o=[e],a=1;arguments.length>a;)o.push(arguments[a++]);if(n=t,(p(t)||void 0!==e)&&!ie(e))return d(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ie(t))return t}),o[1]=t,$.apply(null,o)}});W.prototype[F]||C(W.prototype,F,W.prototype.valueOf),M(W,U),N[z]=!0},function(e,t,r){var n=r(20),o=r(41).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(n(e))}},function(e,t,r){var n=r(7),o=r(56),a=r(28),i=r(26),l=r(83),u=[].push,c=function(e){var t=1==e,r=2==e,c=3==e,s=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,g,v,m){for(var y,b,w=a(h),k=o(w),E=n(g,v,3),x=i(k.length),S=0,_=m||l,T=t?_(h,x):r||d?_(h,0):void 0;x>S;S++)if((p||S in k)&&(b=E(y=k[S],S,w),e))if(t)T[S]=b;else if(b)switch(e){case 3:return!0;case 5:return y;case 6:return S;case 2:u.call(T,y)}else switch(e){case 4:return!1;case 7:u.call(T,y)}return f?-1:c||s?s:T}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},function(e,t,r){"use strict";var n=r(1),o=r(16),a=r(8),i=r(11),l=r(13),u=r(14).f,c=r(60),s=a.Symbol;if(o&&"function"==typeof s&&(!("description"in s.prototype)||void 0!==s().description)){var f={},d=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new s(e):void 0===e?s():s(e);return""===e&&(f[t]=!0),t};c(d,s);var p=d.prototype=s.prototype;p.constructor=d;var h=p.toString,g="Symbol(test)"==String(s("test")),v=/^Symbol\\((.*)\\)[^)]+$/;u(p,"description",{configurable:!0,get:function(){var e=l(this)?this.valueOf():this,t=h.call(e);if(i(f,e))return"";var r=g?t.slice(7,-1):t.replace(v,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:d})}},function(e,t,r){r(9)("asyncIterator")},function(e,t,r){r(9)("hasInstance")},function(e,t,r){r(9)("isConcatSpreadable")},function(e,t,r){r(9)("iterator")},function(e,t,r){r(9)("match")},function(e,t,r){r(9)("replace")},function(e,t,r){r(9)("search")},function(e,t,r){r(9)("species")},function(e,t,r){r(9)("split")},function(e,t,r){r(9)("toPrimitive")},function(e,t,r){r(9)("toStringTag")},function(e,t,r){r(9)("unscopables")},function(e,t,r){"use strict";var n=r(1),o=r(12),a=r(49),i=r(13),l=r(28),u=r(26),c=r(84),s=r(83),f=r(167),d=r(6),p=r(85),h=d("isConcatSpreadable"),g=9007199254740991,v="Maximum allowed index exceeded",m=p>=51||!o((function(){var e=[];return e[h]=!1,e.concat()[0]!==e})),y=f("concat"),b=function(e){if(!i(e))return!1;var t=e[h];return void 0!==t?!!t:a(e)};n({target:"Array",proto:!0,forced:!m||!y},{concat:function(e){var t,r,n,o,a,i=l(this),f=s(i,0),d=0;for(t=-1,n=arguments.length;t<n;t++)if(b(a=-1===t?i:arguments[t])){if(d+(o=u(a.length))>g)throw TypeError(v);for(r=0;r<o;r++,d++)r in a&&c(f,d,a[r])}else{if(d>=g)throw TypeError(v);c(f,d++,a)}return f.length=d,f}})},function(e,t,r){var n=r(12),o=r(6),a=r(85),i=o("species");e.exports=function(e){return a>=51||!n((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},function(e,t,r){var n=r(10);e.exports=n("navigator","userAgent")||""},function(e,t,r){var n=r(1),o=r(170);n({target:"Array",stat:!0,forced:!r(71)((function(e){Array.from(e)}))},{from:o})},function(e,t,r){"use strict";var n=r(7),o=r(28),a=r(171),i=r(66),l=r(26),u=r(84),c=r(45);e.exports=function(e){var t,r,s,f,d,p,h=o(e),g="function"==typeof this?this:Array,v=arguments.length,m=v>1?arguments[1]:void 0,y=void 0!==m,b=c(h),w=0;if(y&&(m=n(m,v>2?arguments[2]:void 0,2)),void 0==b||g==Array&&i(b))for(r=new g(t=l(h.length));t>w;w++)p=y?m(h[w],w):h[w],u(r,w,p);else for(d=(f=b.call(h)).next,r=new g;!(s=d.call(f)).done;w++)p=y?a(f,m,[s.value,w],!0):s.value,u(r,w,p);return r.length=w,r}},function(e,t,r){var n=r(2),o=r(69);e.exports=function(e,t,r,a){try{return a?t(n(r)[0],r[1]):t(r)}catch(t){throw o(e),t}}},function(e,t,r){var n=r(8);r(22)(n.JSON,"JSON",!0)},function(e,t,r){r(22)(Math,"Math",!0)},function(e,t,r){r(9)("dispose")},function(e,t,r){r(9)("observable")},function(e,t,r){r(9)("patternMatch")},function(e,t,r){"use strict";var n=r(86),o=[ReferenceError,TypeError,RangeError],a=!1;function i(){a=!1,n._Y=null,n._Z=null}function l(e,t){return t.some((function(t){return e instanceof t}))}t.disable=i,t.enable=function(e){e=e||{},a&&i();a=!0;var t=0,r=0,u={};function c(t){(e.allRejections||l(u[t].error,e.whitelist||o))&&(u[t].displayId=r++,e.onUnhandled?(u[t].logged=!0,e.onUnhandled(u[t].displayId,u[t].error)):(u[t].logged=!0,function(e,t){console.warn("Possible Unhandled Promise Rejection (id: "+e+"):"),((t&&(t.stack||t))+"").split("\\n").forEach((function(e){console.warn("  "+e)}))}(u[t].displayId,u[t].error)))}n._Y=function(t){2===t._V&&u[t._1]&&(u[t._1].logged?function(t){u[t].logged&&(e.onHandled?e.onHandled(u[t].displayId,u[t].error):u[t].onUnhandled||(console.warn("Promise Rejection Handled (id: "+u[t].displayId+"):"),console.warn(\'  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id \'+u[t].displayId+".")))}(t._1):clearTimeout(u[t._1].timeout),delete u[t._1])},n._Z=function(e,r){0===e._U&&(e._1=t++,u[e._1]={displayId:null,error:r,timeout:setTimeout(c.bind(null,e._1),l(r,o)?100:2e3),logged:!1})}}},function(e,t,r){"use strict";(function(t){function r(e){o.length||(n(),!0),o[o.length]=e}e.exports=r;var n,o=[],a=0;function i(){for(;a<o.length;){var e=a;if(a+=1,o[e].call(),a>1024){for(var t=0,r=o.length-a;t<r;t++)o[t]=o[t+a];o.length-=a,a=0}}o.length=0,a=0,!1}var l,u,c,s="undefined"!==typeof t?t:self,f=s.MutationObserver||s.WebKitMutationObserver;function d(e){return function(){var t=setTimeout(n,0),r=setInterval(n,50);function n(){clearTimeout(t),clearInterval(r),e()}}}"function"===typeof f?(l=1,u=new f(i),c=document.createTextNode(""),u.observe(c,{characterData:!0}),n=function(){l=-l,c.data=l}):n=d(i),r.requestFlush=n,r.makeRequestCallFromTimer=d}).call(this,r(34))},function(e,t,r){"use strict";var n=r(86);e.exports=n;var o=s(!0),a=s(!1),i=s(null),l=s(void 0),u=s(0),c=s("");function s(e){var t=new n(n._0);return t._V=1,t._W=e,t}n.resolve=function(e){if(e instanceof n)return e;if(null===e)return i;if(void 0===e)return l;if(!0===e)return o;if(!1===e)return a;if(0===e)return u;if(""===e)return c;if("object"===typeof e||"function"===typeof e)try{var t=e.then;if("function"===typeof t)return new n(t.bind(e))}catch(e){return new n((function(t,r){r(e)}))}return s(e)};var f=function(e){return"function"===typeof Array.from?(f=Array.from,Array.from(e)):(f=function(e){return Array.prototype.slice.call(e)},Array.prototype.slice.call(e))};n.all=function(e){var t=f(e);return new n((function(e,r){if(0===t.length)return e([]);var o=t.length;function a(i,l){if(l&&("object"===typeof l||"function"===typeof l)){if(l instanceof n&&l.then===n.prototype.then){for(;3===l._V;)l=l._W;return 1===l._V?a(i,l._W):(2===l._V&&r(l._W),void l.then((function(e){a(i,e)}),r))}var u=l.then;if("function"===typeof u)return void new n(u.bind(l)).then((function(e){a(i,e)}),r)}t[i]=l,0===--o&&e(t)}for(var i=0;i<t.length;i++)a(i,t[i])}))},n.reject=function(e){return new n((function(t,r){r(e)}))},n.race=function(e){return new n((function(t,r){f(e).forEach((function(e){n.resolve(e).then(t,r)}))}))},n.prototype.catch=function(e){return this.then(null,e)}},function(e,t,r){"use strict";r.r(t),r.d(t,"Headers",(function(){return h})),r.d(t,"Request",(function(){return k})),r.d(t,"Response",(function(){return x})),r.d(t,"DOMException",(function(){return _})),r.d(t,"fetch",(function(){return T}));var n="undefined"!==typeof globalThis&&globalThis||"undefined"!==typeof self&&self||"undefined"!==typeof n&&n,o="URLSearchParams"in n,a="Symbol"in n&&"iterator"in Symbol,i="FileReader"in n&&"Blob"in n&&function(){try{return new Blob,!0}catch(e){return!1}}(),l="FormData"in n,u="ArrayBuffer"in n;if(u)var c=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],s=ArrayBuffer.isView||function(e){return e&&c.indexOf(Object.prototype.toString.call(e))>-1};function f(e){if("string"!==typeof e&&(e=String(e)),/[^a-z0-9\\-#$%&\'*+.^_`|~!]/i.test(e)||""===e)throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function d(e){return"string"!==typeof e&&(e=String(e)),e}function p(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return a&&(t[Symbol.iterator]=function(){return t}),t}function h(e){this.map={},e instanceof h?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function g(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function v(e){return new Promise((function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}}))}function m(e){var t=new FileReader,r=v(t);return t.readAsArrayBuffer(e),r}function y(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function b(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?"string"===typeof e?this._bodyText=e:i&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:l&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:o&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():u&&i&&((t=e)&&DataView.prototype.isPrototypeOf(t))?(this._bodyArrayBuffer=y(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):u&&(ArrayBuffer.prototype.isPrototypeOf(e)||s(e))?this._bodyArrayBuffer=y(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"===typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):o&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},i&&(this.blob=function(){var e=g(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){if(this._bodyArrayBuffer){var e=g(this);return e||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer))}return this.blob().then(m)}),this.text=function(){var e,t,r,n=g(this);if(n)return n;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,r=v(t),t.readAsText(e),r;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},l&&(this.formData=function(){return this.text().then(E)}),this.json=function(){return this.text().then(JSON.parse)},this}h.prototype.append=function(e,t){e=f(e),t=d(t);var r=this.map[e];this.map[e]=r?r+", "+t:t},h.prototype.delete=function(e){delete this.map[f(e)]},h.prototype.get=function(e){return e=f(e),this.has(e)?this.map[e]:null},h.prototype.has=function(e){return this.map.hasOwnProperty(f(e))},h.prototype.set=function(e,t){this.map[f(e)]=d(t)},h.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},h.prototype.keys=function(){var e=[];return this.forEach((function(t,r){e.push(r)})),p(e)},h.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),p(e)},h.prototype.entries=function(){var e=[];return this.forEach((function(t,r){e.push([r,t])})),p(e)},a&&(h.prototype[Symbol.iterator]=h.prototype.entries);var w=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function k(e,t){if(!(this instanceof k))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');var r,n,o=(t=t||{}).body;if(e instanceof k){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new h(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new h(t.headers)),this.method=(r=t.method||this.method||"GET",n=r.toUpperCase(),w.indexOf(n)>-1?n:r),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),("GET"===this.method||"HEAD"===this.method)&&("no-store"===t.cache||"no-cache"===t.cache)){var a=/([?&])_=[^&]*/;if(a.test(this.url))this.url=this.url.replace(a,"$1_="+(new Date).getTime());else{this.url+=(/\\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}}function E(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var r=e.split("="),n=r.shift().replace(/\\+/g," "),o=r.join("=").replace(/\\+/g," ");t.append(decodeURIComponent(n),decodeURIComponent(o))}})),t}function x(e,t){if(!(this instanceof x))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"",this.headers=new h(t.headers),this.url=t.url||"",this._initBody(e)}k.prototype.clone=function(){return new k(this,{body:this._bodyInit})},b.call(k.prototype),b.call(x.prototype),x.prototype.clone=function(){return new x(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new h(this.headers),url:this.url})},x.error=function(){var e=new x(null,{status:0,statusText:""});return e.type="error",e};var S=[301,302,303,307,308];x.redirect=function(e,t){if(-1===S.indexOf(t))throw new RangeError("Invalid status code");return new x(null,{status:t,headers:{location:e}})};var _=n.DOMException;try{new _}catch(e){(_=function(e,t){this.message=e,this.name=t;var r=Error(e);this.stack=r.stack}).prototype=Object.create(Error.prototype),_.prototype.constructor=_}function T(e,t){return new Promise((function(r,o){var a=new k(e,t);if(a.signal&&a.signal.aborted)return o(new _("Aborted","AbortError"));var l=new XMLHttpRequest;function c(){l.abort()}l.onload=function(){var e,t,n={status:l.status,statusText:l.statusText,headers:(e=l.getAllResponseHeaders()||"",t=new h,e.replace(/\\r?\\n[\\t ]+/g," ").split("\\r").map((function(e){return 0===e.indexOf("\\n")?e.substr(1,e.length):e})).forEach((function(e){var r=e.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();t.append(n,o)}})),t)};n.url="responseURL"in l?l.responseURL:n.headers.get("X-Request-URL");var o="response"in l?l.response:l.responseText;setTimeout((function(){r(new x(o,n))}),0)},l.onerror=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},l.ontimeout=function(){setTimeout((function(){o(new TypeError("Network request failed"))}),0)},l.onabort=function(){setTimeout((function(){o(new _("Aborted","AbortError"))}),0)},l.open(a.method,function(e){try{return""===e&&n.location.href?n.location.href:e}catch(t){return e}}(a.url),!0),"include"===a.credentials?l.withCredentials=!0:"omit"===a.credentials&&(l.withCredentials=!1),"responseType"in l&&(i?l.responseType="blob":u&&a.headers.get("Content-Type")&&-1!==a.headers.get("Content-Type").indexOf("application/octet-stream")&&(l.responseType="arraybuffer")),!t||"object"!==typeof t.headers||t.headers instanceof h?a.headers.forEach((function(e,t){l.setRequestHeader(t,e)})):Object.getOwnPropertyNames(t.headers).forEach((function(e){l.setRequestHeader(e,d(t.headers[e]))})),a.signal&&(a.signal.addEventListener("abort",c),l.onreadystatechange=function(){4===l.readyState&&a.signal.removeEventListener("abort",c)}),l.send("undefined"===typeof a._bodyInit?null:a._bodyInit)}))}T.polyfill=!0,n.fetch||(n.fetch=T,n.Headers=h,n.Request=k,n.Response=x)},function(e,t,r){(function(t){for(var n=r(182),o="undefined"===typeof window?t:window,a=["moz","webkit"],i="AnimationFrame",l=o["request"+i],u=o["cancel"+i]||o["cancelRequest"+i],c=0;!l&&c<a.length;c++)l=o[a[c]+"Request"+i],u=o[a[c]+"Cancel"+i]||o[a[c]+"CancelRequest"+i];if(!l||!u){var s=0,f=0,d=[];l=function(e){if(0===d.length){var t=n(),r=Math.max(0,16.666666666666668-(t-s));s=r+t,setTimeout((function(){var e=d.slice(0);d.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(s)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(r))}return d.push({handle:++f,callback:e,cancelled:!1}),f},u=function(e){for(var t=0;t<d.length;t++)d[t].handle===e&&(d[t].cancelled=!0)}}e.exports=function(e){return l.call(o,e)},e.exports.cancel=function(){u.apply(o,arguments)},e.exports.polyfill=function(e){e||(e=o),e.requestAnimationFrame=l,e.cancelAnimationFrame=u}}).call(this,r(34))},function(e,t,r){(function(t){(function(){var r,n,o,a,i,l;"undefined"!==typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!==typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(r()-i)/1e6},n=t.hrtime,a=(r=function(){var e;return 1e9*(e=n())[0]+e[1]})(),l=1e9*t.uptime(),i=a-l):Date.now?(e.exports=function(){return Date.now()-o},o=Date.now()):(e.exports=function(){return(new Date).getTime()-o},o=(new Date).getTime())}).call(this)}).call(this,r(51))},function(e,t,r){"use strict";var n=r(50),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var c=60115,s=60116;if("function"===typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"===typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function v(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}function m(){}function y(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!==typeof e&&"function"!==typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=v.prototype;var b=y.prototype=new m;b.constructor=y,n(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var n,a={},i=null,l=null;if(null!=t)for(n in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,n)&&!E.hasOwnProperty(n)&&(a[n]=t[n]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(n in u=e.defaultProps)void 0===a[n]&&(a[n]=u[n]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:w.current}}function S(e){return"object"===typeof e&&null!==e&&e.$$typeof===o}var _=/\\/+/g;function T(e,t){return"object"===typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,r,n,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===n?"."+T(u,0):n,Array.isArray(i)?(r="",null!=e&&(r=e.replace(_,"$&/")+"/"),C(i,t,r,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,r+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(_,"$&/")+"/")+e)),t.push(i)),1;if(u=0,n=""===n?".":n+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=n+T(l=e[c],c);u+=C(l,t,r,s,i)}else if("function"===typeof(s=function(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=s.call(e),c=0;!(l=e.next()).done;)u+=C(l=l.value,t,r,s=n+T(l,c++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function O(e,t,r){if(null==e)return e;var n=[],o=0;return C(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var R={current:null};function N(){var e=R.current;if(null===e)throw Error(p(321));return e}var L={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:O,forEach:function(e,t,r){O(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null===e||void 0===e)throw Error(p(267,e));var a=n({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)k.call(t,s)&&!E.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return N().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,r){return N().useReducer(e,t,r)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.1"},function(e,t,r){"use strict";var n=r(0),o=r(50),a=r(185);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!n)throw Error(i(227));var l=new Set,u={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),d=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},g={};function v(e,t,r,n,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,r,n){var o=m.hasOwnProperty(t)?m[t]:null;(null!==o?0===o.type:!n&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,r,n){if(null===t||"undefined"===typeof t||function(e,t,r,n){if(null!==r&&0===r.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!n&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,n))return!0;if(n)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,r,o,n)&&(r=null),n||null===o?function(e){return!!p.call(g,e)||!p.call(h,e)&&(d.test(e)?g[e]=!0:(h[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):o.mustUseProperty?e[o.propertyName]=null===r?3!==o.type&&"":r:(t=o.attributeName,n=o.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(o=o.type)||4===o&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,x=60106,S=60107,_=60108,T=60114,C=60109,O=60110,P=60112,R=60113,N=60120,L=60115,A=60116,I=60121,j=60128,M=60129,D=60130,q=60131;if("function"===typeof Symbol&&Symbol.for){var z=Symbol.for;E=z("react.element"),x=z("react.portal"),S=z("react.fragment"),_=z("react.strict_mode"),T=z("react.profiler"),C=z("react.provider"),O=z("react.context"),P=z("react.forward_ref"),R=z("react.suspense"),N=z("react.suspense_list"),L=z("react.memo"),A=z("react.lazy"),I=z("react.block"),z("react.scope"),j=z("react.opaque.id"),M=z("react.debug_trace_mode"),D=z("react.offscreen"),q=z("react.legacy_hidden")}var U,F="function"===typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=F&&e[F]||e["@@iterator"])?e:null}function V(e){if(void 0===U)try{throw Error()}catch(e){var t=e.stack.trim().match(/\\n( *(at )?)/);U=t&&t[1]||""}return"\\n"+U+e}var H=!1;function W(e,t){if(!e||H)return"";H=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var n=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){n=e}e.call(t.prototype)}else{try{throw Error()}catch(e){n=e}e()}}catch(e){if(e&&n&&"string"===typeof e.stack){for(var o=e.stack.split("\\n"),a=n.stack.split("\\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?V(e):""}function $(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return e=W(e.type,!1);case 11:return e=W(e.type.render,!1);case 22:return e=W(e.type._render,!1);case 1:return e=W(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"===typeof e)return e.displayName||e.name||null;if("string"===typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case T:return"Profiler";case _:return"StrictMode";case R:return"Suspense";case N:return"SuspenseList"}if("object"===typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case L:return G(e.type);case I:return G(e._render);case A:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&"undefined"!==typeof r&&"function"===typeof r.get&&"function"===typeof r.set){var o=r.get,a=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){n=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=Y(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function J(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var r=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function ee(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=Q(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function re(e,t){te(e,t);var r=Q(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,r):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ne(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function oe(e,t,r){"number"===t&&J(e.ownerDocument)===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return n.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,r,n){if(e=e.options,t){t={};for(var o=0;o<r.length;o++)t["$"+r[o]]=!0;for(r=0;r<e.length;r++)o=t.hasOwnProperty("$"+e[r].value),e[r].selected!==o&&(e[r].selected=o),o&&n&&(e[r].defaultSelected=!0)}else{for(r=""+Q(r),t=null,o=0;o<e.length;o++){if(e[o].value===r)return e[o].selected=!0,void(n&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(i(92));if(Array.isArray(r)){if(!(1>=r.length))throw Error(i(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:Q(r)}}function ce(e,t){var r=Q(t.value),n=Q(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ge,ve,me=(ve=function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((ge=ge||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ge.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,r,n){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ye(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},we=["Webkit","ms","Moz","O"];function ke(e,t,r){return null==t||"boolean"===typeof t||""===t?"":r||"number"!==typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),o=ke(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,o):e[r]=o}}Object.keys(be).forEach((function(e){we.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var xe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!==typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!==typeof t.style)throw Error(i(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"===typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Te(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Oe=null,Pe=null;function Re(e){if(e=eo(e)){if("function"!==typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=ro(t),Ce(e.stateNode,e.type,t))}}function Ne(e){Oe?Pe?Pe.push(e):Pe=[e]:Oe=e}function Le(){if(Oe){var e=Oe,t=Pe;if(Pe=Oe=null,Re(e),t)for(e=0;e<t.length;e++)Re(t[e])}}function Ae(e,t){return e(t)}function Ie(e,t,r,n,o){return e(t,r,n,o)}function je(){}var Me=Ae,De=!1,qe=!1;function ze(){null===Oe&&null===Pe||(je(),Le())}function Ue(e,t){var r=e.stateNode;if(null===r)return null;var n=ro(r);if(null===n)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(n=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!n;break e;default:e=!1}if(e)return null;if(r&&"function"!==typeof r)throw Error(i(231,t,typeof r));return r}var Fe=!1;if(f)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Fe=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ve){Fe=!1}function Ve(e,t,r,n,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(r,c)}catch(e){this.onError(e)}}var He=!1,We=null,$e=!1,Ge=null,Qe={onError:function(e){He=!0,We=e}};function Ye(e,t,r,n,o,a,i,l,u){He=!1,We=null,Ve.apply(Qe,arguments)}function Ke(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!==(1026&(t=e).flags)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Je(e){if(Ke(e)!==e)throw Error(i(188))}function Ze(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var r=e,n=t;;){var o=r.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(n=o.return)){r=n;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===r)return Je(o),e;if(a===n)return Je(o),t;a=a.sibling}throw Error(i(188))}if(r.return!==n.return)r=o,n=a;else{for(var l=!1,u=o.child;u;){if(u===r){l=!0,r=o,n=a;break}if(u===n){l=!0,n=o,r=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===r){l=!0,r=a,n=o;break}if(u===n){l=!0,n=a,r=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(r.alternate!==n)throw Error(i(190))}if(3!==r.tag)throw Error(i(188));return r.stateNode.current===r?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function et(e,t){for(var r=e.alternate;null!==t;){if(t===e||t===r)return!0;t=t.return}return!1}var tt,rt,nt,ot,at=!1,it=[],lt=null,ut=null,ct=null,st=new Map,ft=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,r,n,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|r,nativeEvent:o,targetContainers:[n]}}function gt(e,t){switch(e){case"focusin":case"focusout":lt=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":ct=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ft.delete(t.pointerId)}}function vt(e,t,r,n,o,a){return null===e||e.nativeEvent!==a?(e=ht(t,r,n,o,a),null!==t&&(null!==(t=eo(t))&&rt(t)),e):(e.eventSystemFlags|=n,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=Zn(e.target);if(null!==t){var r=Ke(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=Xe(r)))return e.blockedOn=t,void ot(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(r)}))}))}else if(3===t&&r.stateNode.hydrate)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var r=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r)return null!==(t=eo(r))&&rt(t),e.blockedOn=r,!1;t.shift()}return!0}function bt(e,t,r){yt(e)&&r.delete(t)}function wt(){for(at=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=eo(e.blockedOn))&&tt(e);break}for(var t=e.targetContainers;0<t.length;){var r=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==r){e.blockedOn=r;break}t.shift()}null===e.blockedOn&&it.shift()}null!==lt&&yt(lt)&&(lt=null),null!==ut&&yt(ut)&&(ut=null),null!==ct&&yt(ct)&&(ct=null),st.forEach(bt),ft.forEach(bt)}function kt(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,wt)))}function Et(e){function t(t){return kt(t,e)}if(0<it.length){kt(it[0],e);for(var r=1;r<it.length;r++){var n=it[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==lt&&kt(lt,e),null!==ut&&kt(ut,e),null!==ct&&kt(ct,e),st.forEach(t),ft.forEach(t),r=0;r<dt.length;r++)(n=dt[r]).blockedOn===e&&(n.blockedOn=null);for(;0<dt.length&&null===(r=dt[0]).blockedOn;)mt(r),null===r.blockedOn&&dt.shift()}function xt(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var St={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},_t={},Tt={};function Ct(e){if(_t[e])return _t[e];if(!St[e])return e;var t,r=St[e];for(t in r)if(r.hasOwnProperty(t)&&t in Tt)return _t[e]=r[t];return e}f&&(Tt=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Ot=Ct("animationend"),Pt=Ct("animationiteration"),Rt=Ct("animationstart"),Nt=Ct("transitionend"),Lt=new Map,At=new Map,It=["abort","abort",Ot,"animationEnd",Pt,"animationIteration",Rt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function jt(e,t){for(var r=0;r<e.length;r+=2){var n=e[r],o=e[r+1];o="on"+(o[0].toUpperCase()+o.slice(1)),At.set(n,t),Lt.set(n,o),c(o,[n])}}(0,a.unstable_now)();var Mt=8;function Dt(e){if(0!==(1&e))return Mt=15,1;if(0!==(2&e))return Mt=14,2;if(0!==(4&e))return Mt=13,4;var t=24&e;return 0!==t?(Mt=12,t):0!==(32&e)?(Mt=11,32):0!==(t=192&e)?(Mt=10,t):0!==(256&e)?(Mt=9,256):0!==(t=3584&e)?(Mt=8,t):0!==(4096&e)?(Mt=7,4096):0!==(t=4186112&e)?(Mt=6,t):0!==(t=62914560&e)?(Mt=5,t):67108864&e?(Mt=4,67108864):0!==(134217728&e)?(Mt=3,134217728):0!==(t=805306368&e)?(Mt=2,t):0!==(1073741824&e)?(Mt=1,1073741824):(Mt=8,e)}function qt(e,t){var r=e.pendingLanes;if(0===r)return Mt=0;var n=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)n=a,o=Mt=15;else if(0!==(a=134217727&r)){var u=a&~i;0!==u?(n=Dt(u),o=Mt):0!==(l&=a)&&(n=Dt(l),o=Mt)}else 0!==(a=r&~i)?(n=Dt(a),o=Mt):0!==l&&(n=Dt(l),o=Mt);if(0===n)return 0;if(n=r&((0>(n=31-Ht(n))?0:1<<n)<<1)-1,0!==t&&t!==n&&0===(t&i)){if(Dt(t),o<=Mt)return t;Mt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=n;0<t;)o=1<<(r=31-Ht(t)),n|=e[r],t&=~o;return n}function zt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ut(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Ut(10,t):e;case 10:return 0===(e=Ft(192&~t))?Ut(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&(0===(e=Ft(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Ft(e){return e&-e}function Bt(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function Vt(e,t,r){e.pendingLanes|=t;var n=t-1;e.suspendedLanes&=n,e.pingedLanes&=n,(e=e.eventTimes)[t=31-Ht(t)]=r}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/$t|0)|0},Wt=Math.log,$t=Math.LN2;var Gt=a.unstable_UserBlockingPriority,Qt=a.unstable_runWithPriority,Yt=!0;function Kt(e,t,r,n){De||je();var o=Jt,a=De;De=!0;try{Ie(o,e,t,r,n)}finally{(De=a)||ze()}}function Xt(e,t,r,n){Qt(Gt,Jt.bind(null,e,t,r,n))}function Jt(e,t,r,n){var o;if(Yt)if((o=0===(4&t))&&0<it.length&&-1<pt.indexOf(e))e=ht(null,e,t,r,n),it.push(e);else{var a=Zt(e,t,r,n);if(null===a)o&&gt(e,n);else{if(o){if(-1<pt.indexOf(e))return e=ht(a,e,t,r,n),void it.push(e);if(function(e,t,r,n,o){switch(t){case"focusin":return lt=vt(lt,e,t,r,n,o),!0;case"dragenter":return ut=vt(ut,e,t,r,n,o),!0;case"mouseover":return ct=vt(ct,e,t,r,n,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,vt(st.get(a)||null,e,t,r,n,o)),!0;case"gotpointercapture":return a=o.pointerId,ft.set(a,vt(ft.get(a)||null,e,t,r,n,o)),!0}return!1}(a,e,t,r,n))return;gt(e,n)}Ln(e,t,n,null,r)}}}function Zt(e,t,r,n){var o=Te(n);if(null!==(o=Zn(o))){var a=Ke(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Xe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ln(e,t,n,o,r),null}var er=null,tr=null,rr=null;function nr(){if(rr)return rr;var e,t,r=tr,n=r.length,o="value"in er?er.value:er.textContent,a=o.length;for(e=0;e<n&&r[e]===o[e];e++);var i=n-e;for(t=1;t<=i&&r[n-t]===o[a-t];t++);return rr=o.slice(e,1<t?1-t:void 0)}function or(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function ar(){return!0}function ir(){return!1}function lr(e){function t(t,r,n,o,a){for(var i in this._reactName=t,this._targetInst=n,this.type=r,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?ar:ir,this.isPropagationStopped=ir,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!==typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ar)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!==typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ar)},persist:function(){},isPersistent:ar}),t}var ur,cr,sr,fr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dr=lr(fr),pr=o({},fr,{view:0,detail:0}),hr=lr(pr),gr=o({},pr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Tr,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sr&&(sr&&"mousemove"===e.type?(ur=e.screenX-sr.screenX,cr=e.screenY-sr.screenY):cr=ur=0,sr=e),ur)},movementY:function(e){return"movementY"in e?e.movementY:cr}}),vr=lr(gr),mr=lr(o({},gr,{dataTransfer:0})),yr=lr(o({},pr,{relatedTarget:0})),br=lr(o({},fr,{animationName:0,elapsedTime:0,pseudoElement:0})),wr=lr(o({},fr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),kr=lr(o({},fr,{data:0})),Er={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _r(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sr[e])&&!!t[e]}function Tr(){return _r}var Cr=lr(o({},pr,{key:function(e){if(e.key){var t=Er[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=or(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xr[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Tr,charCode:function(e){return"keypress"===e.type?or(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?or(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Or=lr(o({},gr,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pr=lr(o({},pr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Tr})),Rr=lr(o({},fr,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nr=lr(o({},gr,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Lr=[9,13,27,32],Ar=f&&"CompositionEvent"in window,Ir=null;f&&"documentMode"in document&&(Ir=document.documentMode);var jr=f&&"TextEvent"in window&&!Ir,Mr=f&&(!Ar||Ir&&8<Ir&&11>=Ir),Dr=String.fromCharCode(32),qr=!1;function zr(e,t){switch(e){case"keyup":return-1!==Lr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Ur(e){return"object"===typeof(e=e.detail)&&"data"in e?e.data:null}var Fr=!1;var Br={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Br[e.type]:"textarea"===t}function Hr(e,t,r,n){Ne(n),0<(t=In(t,"onChange")).length&&(r=new dr("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var Wr=null,$r=null;function Gr(e){Tn(e,0)}function Qr(e){if(X(to(e)))return e}function Yr(e,t){if("change"===e)return t}var Kr=!1;if(f){var Xr;if(f){var Jr="oninput"in document;if(!Jr){var Zr=document.createElement("div");Zr.setAttribute("oninput","return;"),Jr="function"===typeof Zr.oninput}Xr=Jr}else Xr=!1;Kr=Xr&&(!document.documentMode||9<document.documentMode)}function en(){Wr&&(Wr.detachEvent("onpropertychange",tn),$r=Wr=null)}function tn(e){if("value"===e.propertyName&&Qr($r)){var t=[];if(Hr(t,$r,e,Te(e)),e=Gr,De)e(t);else{De=!0;try{Ae(e,t)}finally{De=!1,ze()}}}}function rn(e,t,r){"focusin"===e?(en(),$r=r,(Wr=t).attachEvent("onpropertychange",tn)):"focusout"===e&&en()}function nn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qr($r)}function on(e,t){if("click"===e)return Qr(t)}function an(e,t){if("input"===e||"change"===e)return Qr(t)}var ln="function"===typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t},un=Object.prototype.hasOwnProperty;function cn(e,t){if(ln(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++)if(!un.call(t,r[n])||!ln(e[r[n]],t[r[n]]))return!1;return!0}function sn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var r,n=sn(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=sn(n)}}function dn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pn(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var r="string"===typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=J((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gn=f&&"documentMode"in document&&11>=document.documentMode,vn=null,mn=null,yn=null,bn=!1;function wn(e,t,r){var n=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;bn||null==vn||vn!==J(n)||("selectionStart"in(n=vn)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},yn&&cn(yn,n)||(yn=n,0<(n=In(mn,"onSelect")).length&&(t=new dr("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=vn)))}jt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),jt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),jt(It,2);for(var kn="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),En=0;En<kn.length;En++)At.set(kn[En],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xn="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sn=new Set("cancel close invalid load scroll toggle".split(" ").concat(xn));function _n(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,function(e,t,r,n,o,a,l,u,c){if(Ye.apply(this,arguments),He){if(!He)throw Error(i(198));var s=We;He=!1,We=null,$e||($e=!0,Ge=s)}}(n,t,void 0,e),e.currentTarget=null}function Tn(e,t){t=0!==(4&t);for(var r=0;r<e.length;r++){var n=e[r],o=n.event;n=n.listeners;e:{var a=void 0;if(t)for(var i=n.length-1;0<=i;i--){var l=n[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;_n(o,l,c),a=u}else for(i=0;i<n.length;i++){if(u=(l=n[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;_n(o,l,c),a=u}}}if($e)throw e=Ge,$e=!1,Ge=null,e}function Cn(e,t){var r=no(t),n=e+"__bubble";r.has(n)||(Nn(t,e,2,!1),r.add(n))}var On="_reactListening"+Math.random().toString(36).slice(2);function Pn(e){e[On]||(e[On]=!0,l.forEach((function(t){Sn.has(t)||Rn(t,!1,e,null),Rn(t,!0,e,null)})))}function Rn(e,t,r,n){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=r;if("selectionchange"===e&&9!==r.nodeType&&(a=r.ownerDocument),null!==n&&!t&&Sn.has(e)){if("scroll"!==e)return;o|=2,a=n}var i=no(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Nn(a,e,o,t),i.add(l))}function Nn(e,t,r,n){var o=At.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Xt;break;default:o=Jt}r=o.bind(null,t,r,e),o=void 0,!Fe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),n?void 0!==o?e.addEventListener(t,r,{capture:!0,passive:o}):e.addEventListener(t,r,!0):void 0!==o?e.addEventListener(t,r,{passive:o}):e.addEventListener(t,r,!1)}function Ln(e,t,r,n,o){var a=n;if(0===(1&t)&&0===(2&t)&&null!==n)e:for(;;){if(null===n)return;var i=n.tag;if(3===i||4===i){var l=n.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=n.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Zn(l)))return;if(5===(u=i.tag)||6===u){n=a=i;continue e}l=l.parentNode}}n=n.return}!function(e,t,r){if(qe)return e(t,r);qe=!0;try{Me(e,t,r)}finally{qe=!1,ze()}}((function(){var n=a,o=Te(r),i=[];e:{var l=Lt.get(e);if(void 0!==l){var u=dr,c=e;switch(e){case"keypress":if(0===or(r))break e;case"keydown":case"keyup":u=Cr;break;case"focusin":c="focus",u=yr;break;case"focusout":c="blur",u=yr;break;case"beforeblur":case"afterblur":u=yr;break;case"click":if(2===r.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mr;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pr;break;case Ot:case Pt:case Rt:u=br;break;case Nt:u=Rr;break;case"scroll":u=hr;break;case"wheel":u=Nr;break;case"copy":case"cut":case"paste":u=wr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Or}var s=0!==(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=n;null!==h;){var g=(p=h).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==d&&(null!=(g=Ue(h,d))&&s.push(An(h,g,p)))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,r,o),i.push({event:l,listeners:s}))}}if(0===(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!==(16&t)||!(c=r.relatedTarget||r.fromElement)||!Zn(c)&&!c[Xn])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=n,null!==(c=(c=r.relatedTarget||r.toElement)?Zn(c):null)&&(c!==(f=Ke(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=n),u!==c)){if(s=vr,g="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Or,g="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:to(u),p=null==c?l:to(c),(l=new s(g,h+"leave",u,r,o)).target=f,l.relatedTarget=p,g=null,Zn(o)===n&&((s=new s(d,h+"enter",c,r,o)).target=p,s.relatedTarget=f,g=s),f=g,u&&c)e:{for(d=c,h=0,p=s=u;p;p=jn(p))h++;for(p=0,g=d;g;g=jn(g))p++;for(;0<h-p;)s=jn(s),h--;for(;0<p-h;)d=jn(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=jn(s),d=jn(d)}s=null}else s=null;null!==u&&Mn(i,l,u,s,!1),null!==c&&null!==f&&Mn(i,f,c,s,!0)}if("select"===(u=(l=n?to(n):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Yr;else if(Vr(l))if(Kr)v=an;else{v=nn;var m=rn}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=on);switch(v&&(v=v(e,n))?Hr(i,v,r,o):(m&&m(e,l,n),"focusout"===e&&(m=l._wrapperState)&&m.controlled&&"number"===l.type&&oe(l,"number",l.value)),m=n?to(n):window,e){case"focusin":(Vr(m)||"true"===m.contentEditable)&&(vn=m,mn=n,yn=null);break;case"focusout":yn=mn=vn=null;break;case"mousedown":bn=!0;break;case"contextmenu":case"mouseup":case"dragend":bn=!1,wn(i,r,o);break;case"selectionchange":if(gn)break;case"keydown":case"keyup":wn(i,r,o)}var y;if(Ar)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Fr?zr(e,r)&&(b="onCompositionEnd"):"keydown"===e&&229===r.keyCode&&(b="onCompositionStart");b&&(Mr&&"ko"!==r.locale&&(Fr||"onCompositionStart"!==b?"onCompositionEnd"===b&&Fr&&(y=nr()):(tr="value"in(er=o)?er.value:er.textContent,Fr=!0)),0<(m=In(n,b)).length&&(b=new kr(b,e,null,r,o),i.push({event:b,listeners:m}),y?b.data=y:null!==(y=Ur(r))&&(b.data=y))),(y=jr?function(e,t){switch(e){case"compositionend":return Ur(t);case"keypress":return 32!==t.which?null:(qr=!0,Dr);case"textInput":return(e=t.data)===Dr&&qr?null:e;default:return null}}(e,r):function(e,t){if(Fr)return"compositionend"===e||!Ar&&zr(e,t)?(e=nr(),rr=tr=er=null,Fr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mr&&"ko"!==t.locale?null:t.data;default:return null}}(e,r))&&(0<(n=In(n,"onBeforeInput")).length&&(o=new kr("onBeforeInput","beforeinput",null,r,o),i.push({event:o,listeners:n}),o.data=y))}Tn(i,t)}))}function An(e,t,r){return{instance:e,listener:t,currentTarget:r}}function In(e,t){for(var r=t+"Capture",n=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ue(e,r))&&n.unshift(An(e,a,o)),null!=(a=Ue(e,t))&&n.push(An(e,a,o))),e=e.return}return n}function jn(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Mn(e,t,r,n,o){for(var a=t._reactName,i=[];null!==r&&r!==n;){var l=r,u=l.alternate,c=l.stateNode;if(null!==u&&u===n)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=Ue(r,a))&&i.unshift(An(r,u,l)):o||null!=(u=Ue(r,a))&&i.push(An(r,u,l))),r=r.return}0!==i.length&&e.push({event:t,listeners:i})}function Dn(){}var qn=null,zn=null;function Un(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Fn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"===typeof t.children||"number"===typeof t.children||"object"===typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Bn="function"===typeof setTimeout?setTimeout:void 0,Vn="function"===typeof clearTimeout?clearTimeout:void 0;function Hn(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function $n(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var Gn=0;var Qn=Math.random().toString(36).slice(2),Yn="__reactFiber$"+Qn,Kn="__reactProps$"+Qn,Xn="__reactContainer$"+Qn,Jn="__reactEvents$"+Qn;function Zn(e){var t=e[Yn];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Xn]||r[Yn]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=$n(e);null!==e;){if(r=e[Yn])return r;e=$n(e)}return t}r=(e=r).parentNode}return null}function eo(e){return!(e=e[Yn]||e[Xn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function to(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function ro(e){return e[Kn]||null}function no(e){var t=e[Jn];return void 0===t&&(t=e[Jn]=new Set),t}var oo=[],ao=-1;function io(e){return{current:e}}function lo(e){0>ao||(e.current=oo[ao],oo[ao]=null,ao--)}function uo(e,t){ao++,oo[ao]=e.current,e.current=t}var co={},so=io(co),fo=io(!1),po=co;function ho(e,t){var r=e.type.contextTypes;if(!r)return co;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in r)a[o]=t[o];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function go(e){return null!==(e=e.childContextTypes)&&void 0!==e}function vo(){lo(fo),lo(so)}function mo(e,t,r){if(so.current!==co)throw Error(i(168));uo(so,t),uo(fo,r)}function yo(e,t,r){var n=e.stateNode;if(e=t.childContextTypes,"function"!==typeof n.getChildContext)return r;for(var a in n=n.getChildContext())if(!(a in e))throw Error(i(108,G(t)||"Unknown",a));return o({},r,n)}function bo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||co,po=so.current,uo(so,e),uo(fo,fo.current),!0}function wo(e,t,r){var n=e.stateNode;if(!n)throw Error(i(169));r?(e=yo(e,t,po),n.__reactInternalMemoizedMergedChildContext=e,lo(fo),lo(so),uo(so,e)):lo(fo),uo(fo,r)}var ko=null,Eo=null,xo=a.unstable_runWithPriority,So=a.unstable_scheduleCallback,_o=a.unstable_cancelCallback,To=a.unstable_shouldYield,Co=a.unstable_requestPaint,Oo=a.unstable_now,Po=a.unstable_getCurrentPriorityLevel,Ro=a.unstable_ImmediatePriority,No=a.unstable_UserBlockingPriority,Lo=a.unstable_NormalPriority,Ao=a.unstable_LowPriority,Io=a.unstable_IdlePriority,jo={},Mo=void 0!==Co?Co:function(){},Do=null,qo=null,zo=!1,Uo=Oo(),Fo=1e4>Uo?Oo:function(){return Oo()-Uo};function Bo(){switch(Po()){case Ro:return 99;case No:return 98;case Lo:return 97;case Ao:return 96;case Io:return 95;default:throw Error(i(332))}}function Vo(e){switch(e){case 99:return Ro;case 98:return No;case 97:return Lo;case 96:return Ao;case 95:return Io;default:throw Error(i(332))}}function Ho(e,t){return e=Vo(e),xo(e,t)}function Wo(e,t,r){return e=Vo(e),So(e,t,r)}function $o(){if(null!==qo){var e=qo;qo=null,_o(e)}Go()}function Go(){if(!zo&&null!==Do){zo=!0;var e=0;try{var t=Do;Ho(99,(function(){for(;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),So(Ro,$o),t}finally{zo=!1}}}var Qo=k.ReactCurrentBatchConfig;function Yo(e,t){if(e&&e.defaultProps){for(var r in t=o({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}return t}var Ko=io(null),Xo=null,Jo=null,Zo=null;function ea(){Zo=Jo=Xo=null}function ta(e){var t=Ko.current;lo(Ko),e.type._context._currentValue=t}function ra(e,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)===t){if(null===r||(r.childLanes&t)===t)break;r.childLanes|=t}else e.childLanes|=t,null!==r&&(r.childLanes|=t);e=e.return}}function na(e,t){Xo=e,Zo=Jo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&t)&&(Ii=!0),e.firstContext=null)}function oa(e,t){if(Zo!==e&&!1!==t&&0!==t)if("number"===typeof t&&1073741823!==t||(Zo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Jo){if(null===Xo)throw Error(i(308));Jo=t,Xo.dependencies={lanes:0,firstContext:t,responders:null}}else Jo=Jo.next=t;return e._currentValue}var aa=!1;function ia(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function la(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ua(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ca(e,t){if(null!==(e=e.updateQueue)){var r=(e=e.shared).pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}}function sa(e,t){var r=e.updateQueue,n=e.alternate;if(null!==n&&r===(n=n.updateQueue)){var o=null,a=null;if(null!==(r=r.firstBaseUpdate)){do{var i={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};null===a?o=a=i:a=a.next=i,r=r.next}while(null!==r);null===a?o=a=t:a=a.next=t}else o=a=t;return r={baseState:n.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:n.shared,effects:n.effects},void(e.updateQueue=r)}null===(e=r.lastBaseUpdate)?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function fa(e,t,r,n){var a=e.updateQueue;aa=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var c=u,s=c.next;c.next=null,null===l?i=s:l.next=s,l=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==i){for(d=a.baseState,l=0,f=s=c=null;;){u=i.lane;var p=i.eventTime;if((n&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,g=i;switch(u=t,p=r,g.tag){case 1:if("function"===typeof(h=g.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null===(u="function"===typeof(h=g.payload)?h.call(p,d,u):h)||void 0===u)break e;d=o({},d,u);break e;case 2:aa=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===f&&(c=d),a.baseState=c,a.firstBaseUpdate=s,a.lastBaseUpdate=f,ql|=l,e.lanes=l,e.memoizedState=d}}function da(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],o=n.callback;if(null!==o){if(n.callback=null,n=r,"function"!==typeof o)throw Error(i(191,o));o.call(n)}}}var pa=(new n.Component).refs;function ha(e,t,r,n){r=null===(r=r(n,t=e.memoizedState))||void 0===r?t:o({},t,r),e.memoizedState=r,0===e.lanes&&(e.updateQueue.baseState=r)}var ga={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=cu(),o=su(e),a=ua(n,o);a.payload=t,void 0!==r&&null!==r&&(a.callback=r),ca(e,a),fu(e,o,n)},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=cu(),o=su(e),a=ua(n,o);a.tag=1,a.payload=t,void 0!==r&&null!==r&&(a.callback=r),ca(e,a),fu(e,o,n)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=cu(),n=su(e),o=ua(r,n);o.tag=2,void 0!==t&&null!==t&&(o.callback=t),ca(e,o),fu(e,n,r)}};function va(e,t,r,n,o,a,i){return"function"===typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!cn(r,n)||!cn(o,a))}function ma(e,t,r){var n=!1,o=co,a=t.contextType;return"object"===typeof a&&null!==a?a=oa(a):(o=go(t)?po:so.current,a=(n=null!==(n=t.contextTypes)&&void 0!==n)?ho(e,o):co),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ga,e.stateNode=t,t._reactInternals=e,n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,r,n){e=t.state,"function"===typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"===typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&ga.enqueueReplaceState(t,t.state,null)}function ba(e,t,r,n){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=pa,ia(e);var a=t.contextType;"object"===typeof a&&null!==a?o.context=oa(a):(a=go(t)?po:so.current,o.context=ho(e,a)),fa(e,r,o,n),o.state=e.memoizedState,"function"===typeof(a=t.getDerivedStateFromProps)&&(ha(e,t,a,r),o.state=e.memoizedState),"function"===typeof t.getDerivedStateFromProps||"function"===typeof o.getSnapshotBeforeUpdate||"function"!==typeof o.UNSAFE_componentWillMount&&"function"!==typeof o.componentWillMount||(t=o.state,"function"===typeof o.componentWillMount&&o.componentWillMount(),"function"===typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ga.enqueueReplaceState(o,o.state,null),fa(e,r,o,n),o.state=e.memoizedState),"function"===typeof o.componentDidMount&&(e.flags|=4)}var wa=Array.isArray;function ka(e,t,r){if(null!==(e=r.ref)&&"function"!==typeof e&&"object"!==typeof e){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(i(309));var n=r.stateNode}if(!n)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"===typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=n.refs;t===pa&&(t=n.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!==typeof e)throw Error(i(284));if(!r._owner)throw Error(i(290,e))}return e}function Ea(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function xa(e){function t(t,r){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.flags=8}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function n(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Vu(e,t)).index=0,e.sibling=null,e}function a(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.flags=2,r):n:(t.flags=2,r):r}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,r,n){return null===t||6!==t.tag?((t=Gu(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function c(e,t,r,n){return null!==t&&t.elementType===r.type?((n=o(t,r.props)).ref=ka(e,t,r),n.return=e,n):((n=Hu(r.type,r.key,r.props,null,e.mode,n)).ref=ka(e,t,r),n.return=e,n)}function s(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=Qu(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function f(e,t,r,n,a){return null===t||7!==t.tag?((t=Wu(r,e.mode,n,a)).return=e,t):((t=o(t,r)).return=e,t)}function d(e,t,r){if("string"===typeof t||"number"===typeof t)return(t=Gu(""+t,e.mode,r)).return=e,t;if("object"===typeof t&&null!==t){switch(t.$$typeof){case E:return(r=Hu(t.type,t.key,t.props,null,e.mode,r)).ref=ka(e,null,t),r.return=e,r;case x:return(t=Qu(t,e.mode,r)).return=e,t}if(wa(t)||B(t))return(t=Wu(t,e.mode,r,null)).return=e,t;Ea(e,t)}return null}function p(e,t,r,n){var o=null!==t?t.key:null;if("string"===typeof r||"number"===typeof r)return null!==o?null:u(e,t,""+r,n);if("object"===typeof r&&null!==r){switch(r.$$typeof){case E:return r.key===o?r.type===S?f(e,t,r.props.children,n,o):c(e,t,r,n):null;case x:return r.key===o?s(e,t,r,n):null}if(wa(r)||B(r))return null!==o?null:f(e,t,r,n,null);Ea(e,r)}return null}function h(e,t,r,n,o){if("string"===typeof n||"number"===typeof n)return u(t,e=e.get(r)||null,""+n,o);if("object"===typeof n&&null!==n){switch(n.$$typeof){case E:return e=e.get(null===n.key?r:n.key)||null,n.type===S?f(t,e,n.props.children,o,n.key):c(t,e,n,o);case x:return s(t,e=e.get(null===n.key?r:n.key)||null,n,o)}if(wa(n)||B(n))return f(t,e=e.get(r)||null,n,o,null);Ea(t,n)}return null}function g(o,i,l,u){for(var c=null,s=null,f=i,g=i=0,v=null;null!==f&&g<l.length;g++){f.index>g?(v=f,f=null):v=f.sibling;var m=p(o,f,l[g],u);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),i=a(m,i,g),null===s?c=m:s.sibling=m,s=m,f=v}if(g===l.length)return r(o,f),c;if(null===f){for(;g<l.length;g++)null!==(f=d(o,l[g],u))&&(i=a(f,i,g),null===s?c=f:s.sibling=f,s=f);return c}for(f=n(o,f);g<l.length;g++)null!==(v=h(f,o,g,l[g],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?g:v.key),i=a(v,i,g),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),c}function v(o,l,u,c){var s=B(u);if("function"!==typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,g=l,v=l=0,m=null,y=u.next();null!==g&&!y.done;v++,y=u.next()){g.index>v?(m=g,g=null):m=g.sibling;var b=p(o,g,y.value,c);if(null===b){null===g&&(g=m);break}e&&g&&null===b.alternate&&t(o,g),l=a(b,l,v),null===f?s=b:f.sibling=b,f=b,g=m}if(y.done)return r(o,g),s;if(null===g){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,c))&&(l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return s}for(g=n(o,g);!y.done;v++,y=u.next())null!==(y=h(g,o,v,y.value,c))&&(e&&null!==y.alternate&&g.delete(null===y.key?v:y.key),l=a(y,l,v),null===f?s=y:f.sibling=y,f=y);return e&&g.forEach((function(e){return t(o,e)})),s}return function(e,n,a,u){var c="object"===typeof a&&null!==a&&a.type===S&&null===a.key;c&&(a=a.props.children);var s="object"===typeof a&&null!==a;if(s)switch(a.$$typeof){case E:e:{for(s=a.key,c=n;null!==c;){if(c.key===s){switch(c.tag){case 7:if(a.type===S){r(e,c.sibling),(n=o(c,a.props.children)).return=e,e=n;break e}break;default:if(c.elementType===a.type){r(e,c.sibling),(n=o(c,a.props)).ref=ka(e,c,a),n.return=e,e=n;break e}}r(e,c);break}t(e,c),c=c.sibling}a.type===S?((n=Wu(a.props.children,e.mode,u,a.key)).return=e,e=n):((u=Hu(a.type,a.key,a.props,null,e.mode,u)).ref=ka(e,n,a),u.return=e,e=u)}return l(e);case x:e:{for(c=a.key;null!==n;){if(n.key===c){if(4===n.tag&&n.stateNode.containerInfo===a.containerInfo&&n.stateNode.implementation===a.implementation){r(e,n.sibling),(n=o(n,a.children||[])).return=e,e=n;break e}r(e,n);break}t(e,n),n=n.sibling}(n=Qu(a,e.mode,u)).return=e,e=n}return l(e)}if("string"===typeof a||"number"===typeof a)return a=""+a,null!==n&&6===n.tag?(r(e,n.sibling),(n=o(n,a)).return=e,e=n):(r(e,n),(n=Gu(a,e.mode,u)).return=e,e=n),l(e);if(wa(a))return g(e,n,a,u);if(B(a))return v(e,n,a,u);if(s&&Ea(e,a),"undefined"===typeof a&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,G(e.type)||"Component"))}return r(e,n)}}var Sa=xa(!0),_a=xa(!1),Ta={},Ca=io(Ta),Oa=io(Ta),Pa=io(Ta);function Ra(e){if(e===Ta)throw Error(i(174));return e}function Na(e,t){switch(uo(Pa,t),uo(Oa,e),uo(Ca,Ta),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Ca),uo(Ca,t)}function La(){lo(Ca),lo(Oa),lo(Pa)}function Aa(e){Ra(Pa.current);var t=Ra(Ca.current),r=he(t,e.type);t!==r&&(uo(Oa,e),uo(Ca,r))}function Ia(e){Oa.current===e&&(lo(Ca),lo(Oa))}var ja=io(0);function Ma(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!==(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,qa=null,za=!1;function Ua(e,t){var r=Fu(5,null,null,0);r.elementType="DELETED",r.type="DELETED",r.stateNode=t,r.return=e,r.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Fa(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ba(e){if(za){var t=qa;if(t){var r=t;if(!Fa(e,t)){if(!(t=Wn(r.nextSibling))||!Fa(e,t))return e.flags=-1025&e.flags|2,za=!1,void(Da=e);Ua(Da,r)}Da=e,qa=Wn(t.firstChild)}else e.flags=-1025&e.flags|2,za=!1,Da=e}}function Va(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ha(e){if(e!==Da)return!1;if(!za)return Va(e),za=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Fn(t,e.memoizedProps))for(t=qa;t;)Ua(e,t),t=Wn(t.nextSibling);if(Va(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){qa=Wn(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}qa=null}}else qa=Da?Wn(e.stateNode.nextSibling):null;return!0}function Wa(){qa=Da=null,za=!1}var $a=[];function Ga(){for(var e=0;e<$a.length;e++)$a[e]._workInProgressVersionPrimary=null;$a.length=0}var Qa=k.ReactCurrentDispatcher,Ya=k.ReactCurrentBatchConfig,Ka=0,Xa=null,Ja=null,Za=null,ei=!1,ti=!1;function ri(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!ln(e[r],t[r]))return!1;return!0}function oi(e,t,r,n,o,a){if(Ka=a,Xa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qa.current=null===e||null===e.memoizedState?Ri:Ni,e=r(n,o),ti){a=0;do{if(ti=!1,!(25>a))throw Error(i(301));a+=1,Za=Ja=null,t.updateQueue=null,Qa.current=Li,e=r(n,o)}while(ti)}if(Qa.current=Pi,t=null!==Ja&&null!==Ja.next,Ka=0,Za=Ja=Xa=null,ei=!1,t)throw Error(i(300));return e}function ai(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Za?Xa.memoizedState=Za=e:Za=Za.next=e,Za}function ii(){if(null===Ja){var e=Xa.alternate;e=null!==e?e.memoizedState:null}else e=Ja.next;var t=null===Za?Xa.memoizedState:Za.next;if(null!==t)Za=t,Ja=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ja=e).memoizedState,baseState:Ja.baseState,baseQueue:Ja.baseQueue,queue:Ja.queue,next:null},null===Za?Xa.memoizedState=Za=e:Za=Za.next=e}return Za}function li(e,t){return"function"===typeof t?t(e):t}function ui(e){var t=ii(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=Ja,o=n.baseQueue,a=r.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}n.baseQueue=o=a,r.pending=null}if(null!==o){o=o.next,n=n.baseState;var u=l=a=null,c=o;do{var s=c.lane;if((Ka&s)===s)null!==u&&(u=u.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),n=c.eagerReducer===e?c.eagerState:e(n,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,a=n):u=u.next=f,Xa.lanes|=s,ql|=s}c=c.next}while(null!==c&&c!==o);null===u?a=n:u.next=l,ln(n,t.memoizedState)||(Ii=!0),t.memoizedState=n,t.baseState=a,t.baseQueue=u,r.lastRenderedState=n}return[t.memoizedState,r.dispatch]}function ci(e){var t=ii(),r=t.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=e;var n=r.dispatch,o=r.pending,a=t.memoizedState;if(null!==o){r.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ln(a,t.memoizedState)||(Ii=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),r.lastRenderedState=a}return[a,n]}function si(e,t,r){var n=t._getVersion;n=n(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===n:(e=e.mutableReadLanes,(e=(Ka&e)===e)&&(t._workInProgressVersionPrimary=n,$a.push(t))),e)return r(t._source);throw $a.push(t),Error(i(350))}function fi(e,t,r,n){var o=Rl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=Qa.current,c=u.useState((function(){return si(o,t,r)})),s=c[1],f=c[0];c=Za;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,g=d.source;d=d.subscribe;var v=Xa;return e.memoizedState={refs:p,source:t,subscribe:n},u.useEffect((function(){p.getSnapshot=r,p.setSnapshot=s;var e=a(t._source);if(!ln(l,e)){e=r(t._source),ln(f,e)||(s(e),e=su(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var n=o.entanglements,i=e;0<i;){var u=31-Ht(i),c=1<<u;n[u]|=e,i&=~c}}}),[r,t,n]),u.useEffect((function(){return n(t._source,(function(){var e=p.getSnapshot,r=p.setSnapshot;try{r(e(t._source));var n=su(v);o.mutableReadLanes|=n&o.pendingLanes}catch(e){r((function(){throw e}))}}))}),[t,n]),ln(h,r)&&ln(g,t)&&ln(d,n)||((e={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:f}).dispatch=s=Oi.bind(null,Xa,e),c.queue=e,c.baseQueue=null,f=si(o,t,r),c.memoizedState=c.baseState=f),f}function di(e,t,r){return fi(ii(),e,t,r)}function pi(e){var t=ai();return"function"===typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:li,lastRenderedState:e}).dispatch=Oi.bind(null,Xa,e),[t.memoizedState,e]}function hi(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=Xa.updateQueue)?(t={lastEffect:null},Xa.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function gi(e){return e={current:e},ai().memoizedState=e}function vi(){return ii().memoizedState}function mi(e,t,r,n){var o=ai();Xa.flags|=e,o.memoizedState=hi(1|t,r,void 0,void 0===n?null:n)}function yi(e,t,r,n){var o=ii();n=void 0===n?null:n;var a=void 0;if(null!==Ja){var i=Ja.memoizedState;if(a=i.destroy,null!==n&&ni(n,i.deps))return void hi(t,r,a,n)}Xa.flags|=e,o.memoizedState=hi(1|t,r,a,n)}function bi(e,t){return mi(516,4,e,t)}function wi(e,t){return yi(516,4,e,t)}function ki(e,t){return yi(4,2,e,t)}function Ei(e,t){return"function"===typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function xi(e,t,r){return r=null!==r&&void 0!==r?r.concat([e]):null,yi(4,2,Ei.bind(null,t,e),r)}function Si(){}function _i(e,t){var r=ii();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ni(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function Ti(e,t){var r=ii();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&ni(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function Ci(e,t){var r=Bo();Ho(98>r?98:r,(function(){e(!0)})),Ho(97<r?97:r,(function(){var r=Ya.transition;Ya.transition=1;try{e(!1),t()}finally{Ya.transition=r}}))}function Oi(e,t,r){var n=cu(),o=su(e),a={lane:o,action:r,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Xa||null!==i&&i===Xa)ti=ei=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,r);if(a.eagerReducer=i,a.eagerState=u,ln(u,l))return}catch(e){}fu(e,o,n)}}var Pi={readContext:oa,useCallback:ri,useContext:ri,useEffect:ri,useImperativeHandle:ri,useLayoutEffect:ri,useMemo:ri,useReducer:ri,useRef:ri,useState:ri,useDebugValue:ri,useDeferredValue:ri,useTransition:ri,useMutableSource:ri,useOpaqueIdentifier:ri,unstable_isNewReconciler:!1},Ri={readContext:oa,useCallback:function(e,t){return ai().memoizedState=[e,void 0===t?null:t],e},useContext:oa,useEffect:bi,useImperativeHandle:function(e,t,r){return r=null!==r&&void 0!==r?r.concat([e]):null,mi(4,2,Ei.bind(null,t,e),r)},useLayoutEffect:function(e,t){return mi(4,2,e,t)},useMemo:function(e,t){var r=ai();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=ai();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Oi.bind(null,Xa,e),[n.memoizedState,e]},useRef:gi,useState:pi,useDebugValue:Si,useDeferredValue:function(e){var t=pi(e),r=t[0],n=t[1];return bi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=pi(!1),t=e[0];return gi(e=Ci.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,r){var n=ai();return n.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:r},fi(n,e,t,r)},useOpaqueIdentifier:function(){if(za){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,r("r:"+(Gn++).toString(36))),Error(i(355))})),r=pi(t)[1];return 0===(2&Xa.mode)&&(Xa.flags|=516,hi(5,(function(){r("r:"+(Gn++).toString(36))}),void 0,null)),t}return pi(t="r:"+(Gn++).toString(36)),t},unstable_isNewReconciler:!1},Ni={readContext:oa,useCallback:_i,useContext:oa,useEffect:wi,useImperativeHandle:xi,useLayoutEffect:ki,useMemo:Ti,useReducer:ui,useRef:vi,useState:function(){return ui(li)},useDebugValue:Si,useDeferredValue:function(e){var t=ui(li),r=t[0],n=t[1];return wi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=ui(li)[0];return[vi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ui(li)[0]},unstable_isNewReconciler:!1},Li={readContext:oa,useCallback:_i,useContext:oa,useEffect:wi,useImperativeHandle:xi,useLayoutEffect:ki,useMemo:Ti,useReducer:ci,useRef:vi,useState:function(){return ci(li)},useDebugValue:Si,useDeferredValue:function(e){var t=ci(li),r=t[0],n=t[1];return wi((function(){var t=Ya.transition;Ya.transition=1;try{n(e)}finally{Ya.transition=t}}),[e]),r},useTransition:function(){var e=ci(li)[0];return[vi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ci(li)[0]},unstable_isNewReconciler:!1},Ai=k.ReactCurrentOwner,Ii=!1;function ji(e,t,r,n){t.child=null===e?_a(t,null,r,n):Sa(t,e.child,r,n)}function Mi(e,t,r,n,o){r=r.render;var a=t.ref;return na(t,o),n=oi(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rl(e,t,o))}function Di(e,t,r,n,o,a){if(null===e){var i=r.type;return"function"!==typeof i||Bu(i)||void 0!==i.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Hu(r.type,null,n,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,qi(e,t,i,n,o,a))}return i=e.child,0===(o&a)&&(o=i.memoizedProps,(r=null!==(r=r.compare)?r:cn)(o,n)&&e.ref===t.ref)?rl(e,t,a):(t.flags|=1,(e=Vu(i,n)).ref=t.ref,e.return=t,t.child=e)}function qi(e,t,r,n,o,a){if(null!==e&&cn(e.memoizedProps,n)&&e.ref===t.ref){if(Ii=!1,0===(a&o))return t.lanes=e.lanes,rl(e,t,a);0!==(16384&e.flags)&&(Ii=!0)}return Fi(e,t,r,n,a)}function zi(e,t,r){var n=t.pendingProps,o=n.children,a=null!==e?e.memoizedState:null;if("hidden"===n.mode||"unstable-defer-without-hiding"===n.mode)if(0===(4&t.mode))t.memoizedState={baseLanes:0},bu(t,r);else{if(0===(1073741824&r))return e=null!==a?a.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(t,e),null;t.memoizedState={baseLanes:0},bu(t,null!==a?a.baseLanes:r)}else null!==a?(n=a.baseLanes|r,t.memoizedState=null):n=r,bu(t,n);return ji(e,t,o,r),t.child}function Ui(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.flags|=128)}function Fi(e,t,r,n,o){var a=go(r)?po:so.current;return a=ho(t,a),na(t,o),r=oi(e,t,r,n,a,o),null===e||Ii?(t.flags|=1,ji(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,rl(e,t,o))}function Bi(e,t,r,n,o){if(go(r)){var a=!0;bo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ma(t,r,n),ba(t,r,n,o),n=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=r.contextType;"object"===typeof c&&null!==c?c=oa(c):c=ho(t,c=go(r)?po:so.current);var s=r.getDerivedStateFromProps,f="function"===typeof s||"function"===typeof i.getSnapshotBeforeUpdate;f||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==n||u!==c)&&ya(t,i,n,c),aa=!1;var d=t.memoizedState;i.state=d,fa(t,n,i,o),u=t.memoizedState,l!==n||d!==u||fo.current||aa?("function"===typeof s&&(ha(t,r,s,n),u=t.memoizedState),(l=aa||va(t,r,l,n,d,u,c))?(f||"function"!==typeof i.UNSAFE_componentWillMount&&"function"!==typeof i.componentWillMount||("function"===typeof i.componentWillMount&&i.componentWillMount(),"function"===typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"===typeof i.componentDidMount&&(t.flags|=4)):("function"===typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=n,t.memoizedState=u),i.props=n,i.state=u,i.context=c,n=l):("function"===typeof i.componentDidMount&&(t.flags|=4),n=!1)}else{i=t.stateNode,la(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:Yo(t.type,l),i.props=c,f=t.pendingProps,d=i.context,"object"===typeof(u=r.contextType)&&null!==u?u=oa(u):u=ho(t,u=go(r)?po:so.current);var p=r.getDerivedStateFromProps;(s="function"===typeof p||"function"===typeof i.getSnapshotBeforeUpdate)||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(l!==f||d!==u)&&ya(t,i,n,u),aa=!1,d=t.memoizedState,i.state=d,fa(t,n,i,o);var h=t.memoizedState;l!==f||d!==h||fo.current||aa?("function"===typeof p&&(ha(t,r,p,n),h=t.memoizedState),(c=aa||va(t,r,c,n,d,h,u))?(s||"function"!==typeof i.UNSAFE_componentWillUpdate&&"function"!==typeof i.componentWillUpdate||("function"===typeof i.componentWillUpdate&&i.componentWillUpdate(n,h,u),"function"===typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(n,h,u)),"function"===typeof i.componentDidUpdate&&(t.flags|=4),"function"===typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=n,t.memoizedState=h),i.props=n,i.state=h,i.context=u,n=c):("function"!==typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!==typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),n=!1)}return Vi(e,t,r,n,a,o)}function Vi(e,t,r,n,o,a){Ui(e,t);var i=0!==(64&t.flags);if(!n&&!i)return o&&wo(t,r,!1),rl(e,t,a);n=t.stateNode,Ai.current=t;var l=i&&"function"!==typeof r.getDerivedStateFromError?null:n.render();return t.flags|=1,null!==e&&i?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,l,a)):ji(e,t,l,a),t.memoizedState=n.state,o&&wo(t,r,!0),t.child}function Hi(e){var t=e.stateNode;t.pendingContext?mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mo(0,t.context,!1),Na(e,t.containerInfo)}var Wi,$i,Gi,Qi={dehydrated:null,retryLane:0};function Yi(e,t,r){var n,o=t.pendingProps,a=ja.current,i=!1;return(n=0!==(64&t.flags))||(n=(null===e||null!==e.memoizedState)&&0!==(2&a)),n?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),uo(ja,1&a),null===e?(void 0!==o.fallback&&Ba(t),e=o.children,a=o.fallback,i?(e=Ki(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Qi,e):"number"===typeof o.unstable_expectedLoadTime?(e=Ki(t,e,a,r),t.child.memoizedState={baseLanes:r},t.memoizedState=Qi,t.lanes=33554432,e):((r=$u({mode:"visible",children:e},t.mode,r,null)).return=t,t.child=r)):(e.memoizedState,i?(o=Ji(e,t,o.children,o.fallback,r),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:r}:{baseLanes:a.baseLanes|r},i.childLanes=e.childLanes&~r,t.memoizedState=Qi,o):(r=Xi(e,t,o.children,r),t.memoizedState=null,r))}function Ki(e,t,r,n){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0===(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=$u(t,o,0,null),r=Wu(r,o,n,null),a.return=e,r.return=e,a.sibling=r,e.child=a,r}function Xi(e,t,r,n){var o=e.child;return e=o.sibling,r=Vu(o,{mode:"visible",children:r}),0===(2&t.mode)&&(r.lanes=n),r.return=t,r.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=r}function Ji(e,t,r,n,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:r};return 0===(2&a)&&t.child!==i?((r=t.child).childLanes=0,r.pendingProps=l,null!==(i=r.lastEffect)?(t.firstEffect=r.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):r=Vu(i,l),null!==e?n=Vu(e,n):(n=Wu(n,a,o,null)).flags|=2,n.return=t,r.return=t,r.sibling=n,t.child=r,n}function Zi(e,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ra(e.return,t)}function el(e,t,r,n,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=n,i.tail=r,i.tailMode=o,i.lastEffect=a)}function tl(e,t,r){var n=t.pendingProps,o=n.revealOrder,a=n.tail;if(ji(e,t,n.children,r),0!==(2&(n=ja.current)))n=1&n|2,t.flags|=64;else{if(null!==e&&0!==(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Zi(e,r);else if(19===e.tag)Zi(e,r);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(uo(ja,n),0===(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(r=t.child,o=null;null!==r;)null!==(e=r.alternate)&&null===Ma(e)&&(o=r),r=r.sibling;null===(r=o)?(o=t.child,t.child=null):(o=r.sibling,r.sibling=null),el(t,!1,o,r,a,t.lastEffect);break;case"backwards":for(r=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ma(e)){t.child=o;break}e=o.sibling,o.sibling=r,r=o,o=e}el(t,!0,r,null,a,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function rl(e,t,r){if(null!==e&&(t.dependencies=e.dependencies),ql|=t.lanes,0!==(r&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(r=Vu(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Vu(e,e.pendingProps)).return=t;r.sibling=null}return t.child}return null}function nl(e,t){if(!za)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function ol(e,t,r){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return go(t.type)&&vo(),null;case 3:return La(),lo(fo),lo(so),Ga(),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(Ha(t)?t.flags|=4:n.hydrate||(t.flags|=256)),null;case 5:Ia(t);var a=Ra(Pa.current);if(r=t.type,null!==e&&null!=t.stateNode)$i(e,t,r,n),e.ref!==t.ref&&(t.flags|=128);else{if(!n){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ra(Ca.current),Ha(t)){n=t.stateNode,r=t.type;var l=t.memoizedProps;switch(n[Yn]=t,n[Kn]=l,r){case"dialog":Cn("cancel",n),Cn("close",n);break;case"iframe":case"object":case"embed":Cn("load",n);break;case"video":case"audio":for(e=0;e<xn.length;e++)Cn(xn[e],n);break;case"source":Cn("error",n);break;case"img":case"image":case"link":Cn("error",n),Cn("load",n);break;case"details":Cn("toggle",n);break;case"input":ee(n,l),Cn("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!l.multiple},Cn("invalid",n);break;case"textarea":ue(n,l),Cn("invalid",n)}for(var c in Se(r,l),e=null,l)l.hasOwnProperty(c)&&(a=l[c],"children"===c?"string"===typeof a?n.textContent!==a&&(e=["children",a]):"number"===typeof a&&n.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(c)&&null!=a&&"onScroll"===c&&Cn("scroll",n));switch(r){case"input":K(n),ne(n,l,!0);break;case"textarea":K(n),se(n);break;case"select":case"option":break;default:"function"===typeof l.onClick&&(n.onclick=Dn)}n=e,t.updateQueue=n,null!==n&&(t.flags|=4)}else{switch(c=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=pe(r)),e===fe?"script"===r?((e=c.createElement("div")).innerHTML="<script><\\/script>",e=e.removeChild(e.firstChild)):"string"===typeof n.is?e=c.createElement(r,{is:n.is}):(e=c.createElement(r),"select"===r&&(c=e,n.multiple?c.multiple=!0:n.size&&(c.size=n.size))):e=c.createElementNS(e,r),e[Yn]=t,e[Kn]=n,Wi(e,t),t.stateNode=e,c=_e(r,n),r){case"dialog":Cn("cancel",e),Cn("close",e),a=n;break;case"iframe":case"object":case"embed":Cn("load",e),a=n;break;case"video":case"audio":for(a=0;a<xn.length;a++)Cn(xn[a],e);a=n;break;case"source":Cn("error",e),a=n;break;case"img":case"image":case"link":Cn("error",e),Cn("load",e),a=n;break;case"details":Cn("toggle",e),a=n;break;case"input":ee(e,n),a=Z(e,n),Cn("invalid",e);break;case"option":a=ae(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},a=o({},n,{value:void 0}),Cn("invalid",e);break;case"textarea":ue(e,n),a=le(e,n),Cn("invalid",e);break;default:a=n}Se(r,a);var s=a;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?Ee(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===l?"string"===typeof f?("textarea"!==r||""!==f)&&ye(e,f):"number"===typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Cn("scroll",e):null!=f&&w(e,l,f,c))}switch(r){case"input":K(e),ne(e,n,!1);break;case"textarea":K(e),se(e);break;case"option":null!=n.value&&e.setAttribute("value",""+Q(n.value));break;case"select":e.multiple=!!n.multiple,null!=(l=n.value)?ie(e,!!n.multiple,l,!1):null!=n.defaultValue&&ie(e,!!n.multiple,n.defaultValue,!0);break;default:"function"===typeof a.onClick&&(e.onclick=Dn)}Un(r,n)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Gi(0,t,e.memoizedProps,n);else{if("string"!==typeof n&&null===t.stateNode)throw Error(i(166));r=Ra(Pa.current),Ra(Ca.current),Ha(t)?(n=t.stateNode,r=t.memoizedProps,n[Yn]=t,n.nodeValue!==r&&(t.flags|=4)):((n=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[Yn]=t,t.stateNode=n)}return null;case 13:return lo(ja),n=t.memoizedState,0!==(64&t.flags)?(t.lanes=r,t):(n=null!==n,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Ha(t):r=null!==e.memoizedState,n&&!r&&0!==(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!==(1&ja.current)?0===jl&&(jl=3):(0!==jl&&3!==jl||(jl=4),null===Rl||0===(134217727&ql)&&0===(134217727&zl)||gu(Rl,Ll))),(n||r)&&(t.flags|=4),null);case 4:return La(),null===e&&Pn(t.stateNode.containerInfo),null;case 10:return ta(t),null;case 17:return go(t.type)&&vo(),null;case 19:if(lo(ja),null===(n=t.memoizedState))return null;if(l=0!==(64&t.flags),null===(c=n.rendering))if(l)nl(n,!1);else{if(0!==jl||null!==e&&0!==(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Ma(e))){for(t.flags|=64,nl(n,!1),null!==(l=c.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===n.lastEffect&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=r,r=t.child;null!==r;)e=n,(l=r).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(c=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=c.childLanes,l.lanes=c.lanes,l.child=c.child,l.memoizedProps=c.memoizedProps,l.memoizedState=c.memoizedState,l.updateQueue=c.updateQueue,l.type=c.type,e=c.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return uo(ja,1&ja.current|2),t.child}e=e.sibling}null!==n.tail&&Fo()>Vl&&(t.flags|=64,l=!0,nl(n,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Ma(c))){if(t.flags|=64,l=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.flags|=4),nl(n,!0),null===n.tail&&"hidden"===n.tailMode&&!c.alternate&&!za)return null!==(t=t.lastEffect=n.lastEffect)&&(t.nextEffect=null),null}else 2*Fo()-n.renderingStartTime>Vl&&1073741824!==r&&(t.flags|=64,l=!0,nl(n,!1),t.lanes=33554432);n.isBackwards?(c.sibling=t.child,t.child=c):(null!==(r=n.last)?r.sibling=c:t.child=c,n.last=c)}return null!==n.tail?(r=n.tail,n.rendering=r,n.tail=r.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=Fo(),r.sibling=null,t=ja.current,uo(ja,l?1&t|2:1&t),r):null;case 23:case 24:return wu(),null!==e&&null!==e.memoizedState!==(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==n.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function al(e){switch(e.tag){case 1:go(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(La(),lo(fo),lo(so),Ga(),0!==(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ia(e),null;case 13:return lo(ja),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(ja),null;case 4:return La(),null;case 10:return ta(e),null;case 23:case 24:return wu(),null;default:return null}}function il(e,t){try{var r="",n=t;do{r+=$(n),n=n.return}while(n);var o=r}catch(e){o="\\nError generating stack: "+e.message+"\\n"+e.stack}return{value:e,source:t,stack:o}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},$i=function(e,t,r,n){var a=e.memoizedProps;if(a!==n){e=t.stateNode,Ra(Ca.current);var i,l=null;switch(r){case"input":a=Z(e,a),n=Z(e,n),l=[];break;case"option":a=ae(e,a),n=ae(e,n),l=[];break;case"select":a=o({},a,{value:void 0}),n=o({},n,{value:void 0}),l=[];break;case"textarea":a=le(e,a),n=le(e,n),l=[];break;default:"function"!==typeof a.onClick&&"function"===typeof n.onClick&&(e.onclick=Dn)}for(f in Se(r,n),r=null,a)if(!n.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var c=a[f];for(i in c)c.hasOwnProperty(i)&&(r||(r={}),r[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in n){var s=n[f];if(c=null!=a?a[f]:void 0,n.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(i in c)!c.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(r||(r={}),r[i]="");for(i in s)s.hasOwnProperty(i)&&c[i]!==s[i]&&(r||(r={}),r[i]=s[i])}else r||(l||(l=[]),l.push(f,r)),r=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(l=l||[]).push(f,s)):"children"===f?"string"!==typeof s&&"number"!==typeof s||(l=l||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&Cn("scroll",e),l||c===s||(l=[])):"object"===typeof s&&null!==s&&s.$$typeof===j?s.toString():(l=l||[]).push(f,s))}r&&(l=l||[]).push("style",r);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Gi=function(e,t,r,n){r!==n&&(t.flags|=4)};var ul="function"===typeof WeakMap?WeakMap:Map;function cl(e,t,r){(r=ua(-1,r)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){Gl||(Gl=!0,Ql=n),ll(0,t)},r}function sl(e,t,r){(r=ua(-1,r)).tag=3;var n=e.type.getDerivedStateFromError;if("function"===typeof n){var o=t.value;r.payload=function(){return ll(0,t),n(o)}}var a=e.stateNode;return null!==a&&"function"===typeof a.componentDidCatch&&(r.callback=function(){"function"!==typeof n&&(null===Yl?Yl=new Set([this]):Yl.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),r}var fl="function"===typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"===typeof t)try{t(null)}catch(t){Du(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var r=e.memoizedProps,n=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?r:Yo(t.type,r),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hn(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function hl(e,t,r){switch(r.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3===(3&e.tag)){var n=e.create;e.destroy=n()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=r.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;n=o.next,0!==(4&(o=o.tag))&&0!==(1&o)&&(Iu(r,e),Au(r,e)),e=n}while(e!==t)}return;case 1:return e=r.stateNode,4&r.flags&&(null===t?e.componentDidMount():(n=r.elementType===r.type?t.memoizedProps:Yo(r.type,t.memoizedProps),e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=r.updateQueue)&&da(r,t,e));case 3:if(null!==(t=r.updateQueue)){if(e=null,null!==r.child)switch(r.child.tag){case 5:e=r.child.stateNode;break;case 1:e=r.child.stateNode}da(r,t,e)}return;case 5:return e=r.stateNode,void(null===t&&4&r.flags&&Un(r.type,r.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===r.memoizedState&&(r=r.alternate,null!==r&&(r=r.memoizedState,null!==r&&(r=r.dehydrated,null!==r&&Et(r)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function gl(e,t){for(var r=e;;){if(5===r.tag){var n=r.stateNode;if(t)"function"===typeof(n=n.style).setProperty?n.setProperty("display","none","important"):n.display="none";else{n=r.stateNode;var o=r.memoizedProps.style;o=void 0!==o&&null!==o&&o.hasOwnProperty("display")?o.display:null,n.style.display=ke("display",o)}}else if(6===r.tag)r.stateNode.nodeValue=t?"":r.memoizedProps;else if((23!==r.tag&&24!==r.tag||null===r.memoizedState||r===e)&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}function vl(e,t){if(Eo&&"function"===typeof Eo.onCommitFiberUnmount)try{Eo.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var n=r,o=n.destroy;if(n=n.tag,void 0!==o)if(0!==(4&n))Iu(t,r);else{n=t;try{o()}catch(e){Du(n,e)}}r=r.next}while(r!==e)}break;case 1:if(dl(t),"function"===typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Du(t,e)}break;case 5:dl(t);break;case 4:El(e,t)}}function ml(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(i(160))}var r=t;switch(t=r.stateNode,r.tag){case 5:var n=!1;break;case 3:case 4:t=t.containerInfo,n=!0;break;default:throw Error(i(161))}16&r.flags&&(ye(t,""),r.flags&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||yl(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag&&18!==r.tag;){if(2&r.flags)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.flags)){r=r.stateNode;break e}}n?wl(e,r,t):kl(e,r,t)}function wl(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===r.nodeType?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(8===r.nodeType?(t=r.parentNode).insertBefore(e,r):(t=r).appendChild(e),null!==(r=r._reactRootContainer)&&void 0!==r||null!==t.onclick||(t.onclick=Dn));else if(4!==n&&null!==(e=e.child))for(wl(e,t,r),e=e.sibling;null!==e;)wl(e,t,r),e=e.sibling}function kl(e,t,r){var n=e.tag,o=5===n||6===n;if(o)e=o?e.stateNode:e.stateNode.instance,t?r.insertBefore(e,t):r.appendChild(e);else if(4!==n&&null!==(e=e.child))for(kl(e,t,r),e=e.sibling;null!==e;)kl(e,t,r),e=e.sibling}function El(e,t){for(var r,n,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(r=a.stateNode,a.tag){case 5:n=!1;break e;case 3:case 4:r=r.containerInfo,n=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,c=u;;)if(vl(l,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===u)break e;for(;null===c.sibling;){if(null===c.return||c.return===u)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}n?(l=r,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,n=!0,o.child.return=o,o=o.child;continue}}else if(vl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function xl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var n=r=r.next;do{3===(3&n.tag)&&(e=n.destroy,n.destroy=void 0,void 0!==e&&e()),n=n.next}while(n!==r)}return;case 1:return;case 5:if(null!=(r=t.stateNode)){n=t.memoizedProps;var o=null!==e?e.memoizedProps:n;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(r[Kn]=n,"input"===e&&"radio"===n.type&&null!=n.name&&te(r,n),_e(e,o),t=_e(e,n),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?Ee(r,u):"dangerouslySetInnerHTML"===l?me(r,u):"children"===l?ye(r,u):w(r,l,u,t)}switch(e){case"input":re(r,n);break;case"textarea":ce(r,n);break;case"select":e=r._wrapperState.wasMultiple,r._wrapperState.wasMultiple=!!n.multiple,null!=(a=n.value)?ie(r,!!n.multiple,a,!1):e!==!!n.multiple&&(null!=n.defaultValue?ie(r,!!n.multiple,n.defaultValue,!0):ie(r,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((r=t.stateNode).hydrate&&(r.hydrate=!1,Et(r.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bl=Fo(),gl(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 17:return;case 23:case 24:return void gl(t,null!==t.memoizedState)}throw Error(i(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new fl),t.forEach((function(t){var n=zu.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}function _l(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Tl=Math.ceil,Cl=k.ReactCurrentDispatcher,Ol=k.ReactCurrentOwner,Pl=0,Rl=null,Nl=null,Ll=0,Al=0,Il=io(0),jl=0,Ml=null,Dl=0,ql=0,zl=0,Ul=0,Fl=null,Bl=0,Vl=1/0;function Hl(){Vl=Fo()+500}var Wl,$l=null,Gl=!1,Ql=null,Yl=null,Kl=!1,Xl=null,Jl=90,Zl=[],eu=[],tu=null,ru=0,nu=null,ou=-1,au=0,iu=0,lu=null,uu=!1;function cu(){return 0!==(48&Pl)?Fo():-1!==ou?ou:ou=Fo()}function su(e){if(0===(2&(e=e.mode)))return 1;if(0===(4&e))return 99===Bo()?1:2;if(0===au&&(au=Dl),0!==Qo.transition){0!==iu&&(iu=null!==Fl?Fl.pendingLanes:0),e=au;var t=4186112&~iu;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Bo(),0!==(4&Pl)&&98===e?e=Ut(12,au):e=Ut(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),au),e}function fu(e,t,r){if(50<ru)throw ru=0,nu=null,Error(i(185));if(null===(e=du(e,t)))return null;Vt(e,t,r),e===Rl&&(zl|=t,4===jl&&gu(e,Ll));var n=Bo();1===t?0!==(8&Pl)&&0===(48&Pl)?vu(e):(pu(e,r),0===Pl&&(Hl(),$o())):(0===(4&Pl)||98!==n&&99!==n||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,r)),Fl=e}function du(e,t){e.lanes|=t;var r=e.alternate;for(null!==r&&(r.lanes|=t),r=e,e=e.return;null!==e;)e.childLanes|=t,null!==(r=e.alternate)&&(r.childLanes|=t),r=e,e=e.return;return 3===r.tag?r.stateNode:null}function pu(e,t){for(var r=e.callbackNode,n=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Ht(l),c=1<<u,s=a[u];if(-1===s){if(0===(c&n)||0!==(c&o)){s=t,Dt(c);var f=Mt;a[u]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);l&=~c}if(n=qt(e,e===Rl?Ll:0),t=Mt,0===n)null!==r&&(r!==jo&&_o(r),e.callbackNode=null,e.callbackPriority=0);else{if(null!==r){if(e.callbackPriority===t)return;r!==jo&&_o(r)}15===t?(r=vu.bind(null,e),null===Do?(Do=[r],qo=So(Ro,Go)):Do.push(r),r=jo):14===t?r=Wo(99,vu.bind(null,e)):r=Wo(r=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),hu.bind(null,e)),e.callbackPriority=t,e.callbackNode=r}}function hu(e){if(ou=-1,iu=au=0,0!==(48&Pl))throw Error(i(327));var t=e.callbackNode;if(Lu()&&e.callbackNode!==t)return null;var r=qt(e,e===Rl?Ll:0);if(0===r)return null;var n=r,o=Pl;Pl|=16;var a=xu();for(Rl===e&&Ll===n||(Hl(),ku(e,n));;)try{Tu();break}catch(t){Eu(e,t)}if(ea(),Cl.current=a,Pl=o,null!==Nl?n=0:(Rl=null,Ll=0,n=jl),0!==(Dl&zl))ku(e,0);else if(0!==n){if(2===n&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(r=zt(e))&&(n=Su(e,r))),1===n)throw t=Ml,ku(e,0),gu(e,r),pu(e,Fo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=r,n){case 0:case 1:throw Error(i(345));case 2:Pu(e);break;case 3:if(gu(e,r),(62914560&r)===r&&10<(n=Bl+500-Fo())){if(0!==qt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){cu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Bn(Pu.bind(null,e),n);break}Pu(e);break;case 4:if(gu(e,r),(4186112&r)===r)break;for(n=e.eventTimes,o=-1;0<r;){var l=31-Ht(r);a=1<<l,(l=n[l])>o&&(o=l),r&=~a}if(r=o,10<(r=(120>(r=Fo()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Tl(r/1960))-r)){e.timeoutHandle=Bn(Pu.bind(null,e),r);break}Pu(e);break;case 5:Pu(e);break;default:throw Error(i(329))}}return pu(e,Fo()),e.callbackNode===t?hu.bind(null,e):null}function gu(e,t){for(t&=~Ul,t&=~zl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-Ht(t),n=1<<r;e[r]=-1,t&=~n}}function vu(e){if(0!==(48&Pl))throw Error(i(327));if(Lu(),e===Rl&&0!==(e.expiredLanes&Ll)){var t=Ll,r=Su(e,t);0!==(Dl&zl)&&(r=Su(e,t=qt(e,t)))}else r=Su(e,t=qt(e,0));if(0!==e.tag&&2===r&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Hn(e.containerInfo)),0!==(t=zt(e))&&(r=Su(e,t))),1===r)throw r=Ml,ku(e,0),gu(e,t),pu(e,Fo()),r;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Pu(e),pu(e,Fo()),null}function mu(e,t){var r=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}}function yu(e,t){var r=Pl;Pl&=-2,Pl|=8;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}}function bu(e,t){uo(Il,Al),Al|=t,Dl|=t}function wu(){Al=Il.current,lo(Il)}function ku(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,Vn(r)),null!==Nl)for(r=Nl.return;null!==r;){var n=r;switch(n.tag){case 1:null!==(n=n.type.childContextTypes)&&void 0!==n&&vo();break;case 3:La(),lo(fo),lo(so),Ga();break;case 5:Ia(n);break;case 4:La();break;case 13:case 19:lo(ja);break;case 10:ta(n);break;case 23:case 24:wu()}r=r.return}Rl=e,Nl=Vu(e.current,null),Ll=Al=Dl=t,jl=0,Ml=null,Ul=zl=ql=0}function Eu(e,t){for(;;){var r=Nl;try{if(ea(),Qa.current=Pi,ei){for(var n=Xa.memoizedState;null!==n;){var o=n.queue;null!==o&&(o.pending=null),n=n.next}ei=!1}if(Ka=0,Za=Ja=Xa=null,ti=!1,Ol.current=null,null===r||null===r.return){jl=1,Ml=t,Nl=null;break}e:{var a=e,i=r.return,l=r,u=t;if(t=Ll,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"===typeof u&&"function"===typeof u.then){var c=u;if(0===(2&l.mode)){var s=l.alternate;s?(l.updateQueue=s.updateQueue,l.memoizedState=s.memoizedState,l.lanes=s.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!==(1&ja.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var g=d.memoizedProps;p=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var m=new Set;m.add(c),d.updateQueue=m}else v.add(c);if(0===(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=ua(-1,1);y.tag=2,ca(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new ul,u=new Set,b.set(c,u)):void 0===(u=b.get(c))&&(u=new Set,b.set(c,u)),!u.has(l)){u.add(l);var w=qu.bind(null,a,c,l);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((G(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==jl&&(jl=2),u=il(u,l),d=i;do{switch(d.tag){case 3:a=u,d.flags|=4096,t&=-t,d.lanes|=t,sa(d,cl(0,a,t));break e;case 1:a=u;var k=d.type,E=d.stateNode;if(0===(64&d.flags)&&("function"===typeof k.getDerivedStateFromError||null!==E&&"function"===typeof E.componentDidCatch&&(null===Yl||!Yl.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,sa(d,sl(d,a,t));break e}}d=d.return}while(null!==d)}Ou(r)}catch(e){t=e,Nl===r&&null!==r&&(Nl=r=r.return);continue}break}}function xu(){var e=Cl.current;return Cl.current=Pi,null===e?Pi:e}function Su(e,t){var r=Pl;Pl|=16;var n=xu();for(Rl===e&&Ll===t||ku(e,t);;)try{_u();break}catch(t){Eu(e,t)}if(ea(),Pl=r,Cl.current=n,null!==Nl)throw Error(i(261));return Rl=null,Ll=0,jl}function _u(){for(;null!==Nl;)Cu(Nl)}function Tu(){for(;null!==Nl&&!To();)Cu(Nl)}function Cu(e){var t=Wl(e.alternate,e,Al);e.memoizedProps=e.pendingProps,null===t?Ou(e):Nl=t,Ol.current=null}function Ou(e){var t=e;do{var r=t.alternate;if(e=t.return,0===(2048&t.flags)){if(null!==(r=ol(r,t,Al)))return void(Nl=r);if(24!==(r=t).tag&&23!==r.tag||null===r.memoizedState||0!==(1073741824&Al)||0===(4&r.mode)){for(var n=0,o=r.child;null!==o;)n|=o.lanes|o.childLanes,o=o.sibling;r.childLanes=n}null!==e&&0===(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(r=al(t)))return r.flags&=2047,void(Nl=r);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Nl=t);Nl=t=e}while(null!==t);0===jl&&(jl=5)}function Pu(e){var t=Bo();return Ho(99,Ru.bind(null,e,t)),null}function Ru(e,t){do{Lu()}while(null!==Xl);if(0!==(48&Pl))throw Error(i(327));var r=e.finishedWork;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(i(177));e.callbackNode=null;var n=r.lanes|r.childLanes,o=n,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var c=31-Ht(a),s=1<<c;o[c]=0,l[c]=-1,u[c]=-1,a&=~s}if(null!==tu&&0===(24&n)&&tu.has(e)&&tu.delete(e),e===Rl&&(Nl=Rl=null,Ll=0),1<r.flags?null!==r.lastEffect?(r.lastEffect.nextEffect=r,n=r.firstEffect):n=r:n=r.firstEffect,null!==n){if(o=Pl,Pl|=32,Ol.current=null,qn=Yt,hn(l=pn())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(s=u.getSelection&&u.getSelection())&&0!==s.rangeCount){u=s.anchorNode,a=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,g=0,v=l,m=null;t:for(;;){for(var y;v!==u||0!==a&&3!==v.nodeType||(d=f+a),v!==c||0!==s&&3!==v.nodeType||(p=f+s),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)m=v,v=y;for(;;){if(v===l)break t;if(m===u&&++h===a&&(d=f),m===c&&++g===s&&(p=f),null!==(y=v.nextSibling))break;m=(v=m).parentNode}v=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;zn={focusedElem:l,selectionRange:u},Yt=!1,lu=null,uu=!1,$l=n;do{try{Nu()}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);lu=null,$l=n;do{try{for(l=e;null!==$l;){var b=$l.flags;if(16&b&&ye($l.stateNode,""),128&b){var w=$l.alternate;if(null!==w){var k=w.ref;null!==k&&("function"===typeof k?k(null):k.current=null)}}switch(1038&b){case 2:bl($l),$l.flags&=-3;break;case 6:bl($l),$l.flags&=-3,xl($l.alternate,$l);break;case 1024:$l.flags&=-1025;break;case 1028:$l.flags&=-1025,xl($l.alternate,$l);break;case 4:xl($l.alternate,$l);break;case 8:El(l,u=$l);var E=u.alternate;ml(u),null!==E&&ml(E)}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);if(k=zn,w=pn(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&dn(b.ownerDocument.documentElement,b)){null!==l&&hn(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,E=Math.min(l.start,u),l=void 0===l.end?E:Math.min(l.end,u),!k.extend&&E>l&&(u=l,l=E,E=u),u=fn(b,E),a=fn(b,l),u&&a&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==a.node||k.focusOffset!==a.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),E>l?(k.addRange(w),k.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"===typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Yt=!!qn,zn=qn=null,e.current=r,$l=n;do{try{for(b=e;null!==$l;){var x=$l.flags;if(36&x&&hl(b,$l.alternate,$l),128&x){w=void 0;var S=$l.ref;if(null!==S){var _=$l.stateNode;switch($l.tag){case 5:w=_;break;default:w=_}"function"===typeof S?S(w):S.current=w}}$l=$l.nextEffect}}catch(e){if(null===$l)throw Error(i(330));Du($l,e),$l=$l.nextEffect}}while(null!==$l);$l=null,Mo(),Pl=o}else e.current=r;if(Kl)Kl=!1,Xl=e,Jl=t;else for($l=n;null!==$l;)t=$l.nextEffect,$l.nextEffect=null,8&$l.flags&&((x=$l).sibling=null,x.stateNode=null),$l=t;if(0===(n=e.pendingLanes)&&(Yl=null),1===n?e===nu?ru++:(ru=0,nu=e):ru=0,r=r.stateNode,Eo&&"function"===typeof Eo.onCommitFiberRoot)try{Eo.onCommitFiberRoot(ko,r,void 0,64===(64&r.current.flags))}catch(e){}if(pu(e,Fo()),Gl)throw Gl=!1,e=Ql,Ql=null,e;return 0!==(8&Pl)||$o(),null}function Nu(){for(;null!==$l;){var e=$l.alternate;uu||null===lu||(0!==(8&$l.flags)?et($l,lu)&&(uu=!0):13===$l.tag&&_l(e,$l)&&et($l,lu)&&(uu=!0));var t=$l.flags;0!==(256&t)&&pl(e,$l),0===(512&t)||Kl||(Kl=!0,Wo(97,(function(){return Lu(),null}))),$l=$l.nextEffect}}function Lu(){if(90!==Jl){var e=97<Jl?97:Jl;return Jl=90,Ho(e,ju)}return!1}function Au(e,t){Zl.push(t,e),Kl||(Kl=!0,Wo(97,(function(){return Lu(),null})))}function Iu(e,t){eu.push(t,e),Kl||(Kl=!0,Wo(97,(function(){return Lu(),null})))}function ju(){if(null===Xl)return!1;var e=Xl;if(Xl=null,0!==(48&Pl))throw Error(i(331));var t=Pl;Pl|=32;var r=eu;eu=[];for(var n=0;n<r.length;n+=2){var o=r[n],a=r[n+1],l=o.destroy;if(o.destroy=void 0,"function"===typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(r=Zl,Zl=[],n=0;n<r.length;n+=2){o=r[n],a=r[n+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Du(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Pl=t,$o(),!0}function Mu(e,t,r){ca(e,t=cl(0,t=il(r,t),1)),t=cu(),null!==(e=du(e,1))&&(Vt(e,1,t),pu(e,t))}function Du(e,t){if(3===e.tag)Mu(e,e,t);else for(var r=e.return;null!==r;){if(3===r.tag){Mu(r,e,t);break}if(1===r.tag){var n=r.stateNode;if("function"===typeof r.type.getDerivedStateFromError||"function"===typeof n.componentDidCatch&&(null===Yl||!Yl.has(n))){var o=sl(r,e=il(t,e),1);if(ca(r,o),o=cu(),null!==(r=du(r,1)))Vt(r,1,o),pu(r,o);else if("function"===typeof n.componentDidCatch&&(null===Yl||!Yl.has(n)))try{n.componentDidCatch(t,e)}catch(e){}break}}r=r.return}}function qu(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),t=cu(),e.pingedLanes|=e.suspendedLanes&r,Rl===e&&(Ll&r)===r&&(4===jl||3===jl&&(62914560&Ll)===Ll&&500>Fo()-Bl?ku(e,0):Ul|=r),pu(e,t)}function zu(e,t){var r=e.stateNode;null!==r&&r.delete(t),0===(t=0)&&(0===(2&(t=e.mode))?t=1:0===(4&t)?t=99===Bo()?1:2:(0===au&&(au=Dl),0===(t=Ft(62914560&~au))&&(t=4194304))),r=cu(),null!==(e=du(e,t))&&(Vt(e,t,r),pu(e,r))}function Uu(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fu(e,t,r,n){return new Uu(e,t,r,n)}function Bu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Vu(e,t){var r=e.alternate;return null===r?((r=Fu(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Hu(e,t,r,n,o,a){var l=2;if(n=e,"function"===typeof e)Bu(e)&&(l=1);else if("string"===typeof e)l=5;else e:switch(e){case S:return Wu(r.children,o,a,t);case M:l=8,o|=16;break;case _:l=8,o|=1;break;case T:return(e=Fu(12,r,t,8|o)).elementType=T,e.type=T,e.lanes=a,e;case R:return(e=Fu(13,r,t,o)).type=R,e.elementType=R,e.lanes=a,e;case N:return(e=Fu(19,r,t,o)).elementType=N,e.lanes=a,e;case D:return $u(r,o,a,t);case q:return(e=Fu(24,r,t,o)).elementType=q,e.lanes=a,e;default:if("object"===typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case O:l=9;break e;case P:l=11;break e;case L:l=14;break e;case A:l=16,n=null;break e;case I:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Fu(l,r,t,o)).elementType=e,t.type=n,t.lanes=a,t}function Wu(e,t,r,n){return(e=Fu(7,e,n,t)).lanes=r,e}function $u(e,t,r,n){return(e=Fu(23,e,n,t)).elementType=D,e.lanes=r,e}function Gu(e,t,r){return(e=Fu(6,e,null,t)).lanes=r,e}function Qu(e,t,r){return(t=Fu(4,null!==e.children?e.children:[],e.key,t)).lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yu(e,t,r){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=r,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Ku(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}function Xu(e,t,r,n){var o=t.current,a=cu(),l=su(o);e:if(r){t:{if(Ke(r=r._reactInternals)!==r||1!==r.tag)throw Error(i(170));var u=r;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(go(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===r.tag){var c=r.type;if(go(c)){r=yo(r,c,u);break e}}r=u}else r=co;return null===t.context?t.context=r:t.pendingContext=r,(t=ua(a,l)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),ca(o,t),fu(o,l,a),l}function Ju(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Zu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var r=e.retryLane;e.retryLane=0!==r&&r<t?r:t}}function ec(e,t){Zu(e,t),(e=e.alternate)&&Zu(e,t)}function tc(e,t,r){var n=null!=r&&null!=r.hydrationOptions&&r.hydrationOptions.mutableSources||null;if(r=new Yu(e,t,null!=r&&!0===r.hydrate),t=Fu(3,null,null,2===t?7:1===t?3:0),r.current=t,t.stateNode=r,ia(t),e[Xn]=r.current,Pn(8===e.nodeType?e.parentNode:e),n)for(e=0;e<n.length;e++){var o=(t=n[e])._getVersion;o=o(t._source),null==r.mutableSourceEagerHydrationData?r.mutableSourceEagerHydrationData=[t,o]:r.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=r}function rc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function nc(e,t,r,n,o){var a=r._reactRootContainer;if(a){var i=a._internalRoot;if("function"===typeof o){var l=o;o=function(){var e=Ju(i);l.call(e)}}Xu(t,i,e,o)}else{if(a=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new tc(e,0,t?{hydrate:!0}:void 0)}(r,n),i=a._internalRoot,"function"===typeof o){var u=o;o=function(){var e=Ju(i);u.call(e)}}yu((function(){Xu(t,i,e,o)}))}return Ju(i)}function oc(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rc(t))throw Error(i(200));return Ku(e,t,null,r)}Wl=function(e,t,r){var n=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fo.current)Ii=!0;else{if(0===(r&n)){switch(Ii=!1,t.tag){case 3:Hi(t),Wa();break;case 5:Aa(t);break;case 1:go(t.type)&&bo(t);break;case 4:Na(t,t.stateNode.containerInfo);break;case 10:n=t.memoizedProps.value;var o=t.type._context;uo(Ko,o._currentValue),o._currentValue=n;break;case 13:if(null!==t.memoizedState)return 0!==(r&t.child.childLanes)?Yi(e,t,r):(uo(ja,1&ja.current),null!==(t=rl(e,t,r))?t.sibling:null);uo(ja,1&ja.current);break;case 19:if(n=0!==(r&t.childLanes),0!==(64&e.flags)){if(n)return tl(e,t,r);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),uo(ja,ja.current),n)break;return null;case 23:case 24:return t.lanes=0,zi(e,t,r)}return rl(e,t,r)}Ii=0!==(16384&e.flags)}else Ii=!1;switch(t.lanes=0,t.tag){case 2:if(n=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=ho(t,so.current),na(t,r),o=oi(null,t,n,e,o,r),t.flags|=1,"object"===typeof o&&null!==o&&"function"===typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(n)){var a=!0;bo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ia(t);var l=n.getDerivedStateFromProps;"function"===typeof l&&ha(t,n,l,e),o.updater=ga,t.stateNode=o,o._reactInternals=t,ba(t,n,e,r),t=Vi(null,t,n,!0,a,r)}else t.tag=0,ji(null,t,o,r),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"===typeof e)return Bu(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===P)return 11;if(e===L)return 14}return 2}(o),e=Yo(o,e),a){case 0:t=Fi(null,t,o,e,r);break e;case 1:t=Bi(null,t,o,e,r);break e;case 11:t=Mi(null,t,o,e,r);break e;case 14:t=Di(null,t,o,Yo(o.type,e),n,r);break e}throw Error(i(306,o,""))}return t;case 0:return n=t.type,o=t.pendingProps,Fi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 1:return n=t.type,o=t.pendingProps,Bi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 3:if(Hi(t),n=t.updateQueue,null===e||null===n)throw Error(i(282));if(n=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,la(e,t),fa(t,n,null,r),(n=t.memoizedState.element)===o)Wa(),t=rl(e,t,r);else{if((a=(o=t.stateNode).hydrate)&&(qa=Wn(t.stateNode.containerInfo.firstChild),Da=t,a=za=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],$a.push(a);for(r=_a(t,null,n,r),t.child=r;r;)r.flags=-3&r.flags|1024,r=r.sibling}else ji(e,t,n,r),Wa();t=t.child}return t;case 5:return Aa(t),null===e&&Ba(t),n=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Fn(n,o)?l=null:null!==a&&Fn(n,a)&&(t.flags|=16),Ui(e,t),ji(e,t,l,r),t.child;case 6:return null===e&&Ba(t),null;case 13:return Yi(e,t,r);case 4:return Na(t,t.stateNode.containerInfo),n=t.pendingProps,null===e?t.child=Sa(t,null,n,r):ji(e,t,n,r),t.child;case 11:return n=t.type,o=t.pendingProps,Mi(e,t,n,o=t.elementType===n?o:Yo(n,o),r);case 7:return ji(e,t,t.pendingProps,r),t.child;case 8:case 12:return ji(e,t,t.pendingProps.children,r),t.child;case 10:e:{n=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(uo(Ko,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0===(a=ln(u,a)?0:0|("function"===typeof n._calculateChangedBits?n._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!fo.current){t=rl(e,t,r);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===n&&0!==(s.observedBits&a)){1===u.tag&&((s=ua(-1,r&-r)).tag=2,ca(u,s)),u.lanes|=r,null!==(s=u.alternate)&&(s.lanes|=r),ra(u.return,r),c.lanes|=r;break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}ji(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,n=(a=t.pendingProps).children,na(t,r),n=n(o=oa(o,a.unstable_observedBits)),t.flags|=1,ji(e,t,n,r),t.child;case 14:return a=Yo(o=t.type,t.pendingProps),Di(e,t,o,a=Yo(o.type,a),n,r);case 15:return qi(e,t,t.type,t.pendingProps,n,r);case 17:return n=t.type,o=t.pendingProps,o=t.elementType===n?o:Yo(n,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(n)?(e=!0,bo(t)):e=!1,na(t,r),ma(t,n,o),ba(t,n,o,r),Vi(null,t,n,!0,e,r);case 19:return tl(e,t,r);case 23:case 24:return zi(e,t,r)}throw Error(i(156,t.tag))},tc.prototype.render=function(e){Xu(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xu(null,e,null,(function(){t[Xn]=null}))},tt=function(e){13===e.tag&&(fu(e,4,cu()),ec(e,4))},rt=function(e){13===e.tag&&(fu(e,67108864,cu()),ec(e,67108864))},nt=function(e){if(13===e.tag){var t=cu(),r=su(e);fu(e,r,t),ec(e,r)}},ot=function(e,t){return t()},Ce=function(e,t,r){switch(t){case"input":if(re(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+\'][type="radio"]\'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var o=ro(n);if(!o)throw Error(i(90));X(n),re(n,o)}}}break;case"textarea":ce(e,r);break;case"select":null!=(t=r.value)&&ie(e,!!r.multiple,t,!1)}},Ae=mu,Ie=function(e,t,r,n,o){var a=Pl;Pl|=4;try{return Ho(98,e.bind(null,t,r,n,o))}finally{0===(Pl=a)&&(Hl(),$o())}},je=function(){0===(49&Pl)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,Fo())}))}$o()}(),Lu())},Me=function(e,t){var r=Pl;Pl|=2;try{return e(t)}finally{0===(Pl=r)&&(Hl(),$o())}};var ac={Events:[eo,to,ro,Ne,Le,Lu,{current:!1}]},ic={findFiberByHostInstance:Zn,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},lc={bundleType:ic.bundleType,version:ic.version,rendererPackageName:ic.rendererPackageName,rendererConfig:ic.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:ic.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof{}){var uc={};if(!uc.isDisabled&&uc.supportsFiber)try{ko=uc.inject(lc),Eo=uc}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ac,t.createPortal=oc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"===typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var r=Pl;if(0!==(48&r))return e(t);Pl|=1;try{if(e)return Ho(99,e.bind(null,t))}finally{Pl=r,$o()}},t.hydrate=function(e,t,r){if(!rc(t))throw Error(i(200));return nc(null,e,t,!0,r)},t.render=function(e,t,r){if(!rc(t))throw Error(i(200));return nc(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!rc(e))throw Error(i(40));return!!e._reactRootContainer&&(yu((function(){nc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Xn]=null}))})),!0)},t.unstable_batchedUpdates=mu,t.unstable_createPortal=function(e,t){return oc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!rc(r))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return nc(e,t,r,!1,n)},t.version="17.0.1"},function(e,t,r){"use strict";e.exports=r(186)},function(e,t,r){"use strict";var n,o,a,i;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var u=Date,c=u.now();t.unstable_now=function(){return u.now()-c}}if("undefined"===typeof window||"function"!==typeof MessageChannel){var s=null,f=null,d=function e(){if(null!==s)try{var r=t.unstable_now();s(!0,r),s=null}catch(t){throw setTimeout(e,0),t}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(d,0))},o=function(e,t){f=setTimeout(e,t)},a=function(){clearTimeout(f)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var p=window.setTimeout,h=window.clearTimeout;if("undefined"!==typeof console){var g=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!==typeof g&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var v=!1,m=null,y=-1,b=5,w=0;t.unstable_shouldYield=function(){return t.unstable_now()>=w},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,E=k.port2;k.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();w=e+b;try{m(!0,e)?E.postMessage(null):(v=!1,m=null)}catch(e){throw E.postMessage(null),e}}else v=!1},n=function(e){m=e,v||(v=!0,E.postMessage(null))},o=function(e,r){y=p((function(){e(t.unstable_now())}),r)},a=function(){h(y),y=-1}}function x(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,o=e[n];if(!(void 0!==o&&0<T(o,t)))break e;e[n]=t,e[r]=o,r=n}}function S(e){return void 0===(e=e[0])?null:e}function _(e){var t=e[0];if(void 0!==t){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,o=e.length;n<o;){var a=2*(n+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>T(i,r))void 0!==u&&0>T(u,i)?(e[n]=u,e[l]=r,n=l):(e[n]=i,e[a]=r,n=a);else{if(!(void 0!==u&&0>T(u,r)))break e;e[n]=u,e[l]=r,n=l}}}return t}return null}function T(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var C=[],O=[],P=1,R=null,N=3,L=!1,A=!1,I=!1;function j(e){for(var t=S(O);null!==t;){if(null===t.callback)_(O);else{if(!(t.startTime<=e))break;_(O),t.sortIndex=t.expirationTime,x(C,t)}t=S(O)}}function M(e){if(I=!1,j(e),!A)if(null!==S(C))A=!0,n(D);else{var t=S(O);null!==t&&o(M,t.startTime-e)}}function D(e,r){A=!1,I&&(I=!1,a()),L=!0;var n=N;try{for(j(r),R=S(C);null!==R&&(!(R.expirationTime>r)||e&&!t.unstable_shouldYield());){var i=R.callback;if("function"===typeof i){R.callback=null,N=R.priorityLevel;var l=i(R.expirationTime<=r);r=t.unstable_now(),"function"===typeof l?R.callback=l:R===S(C)&&_(C),j(r)}else _(C);R=S(C)}if(null!==R)var u=!0;else{var c=S(O);null!==c&&o(M,c.startTime-r),u=!1}return u}finally{R=null,N=n,L=!1}}var q=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||L||(A=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return S(C)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var r=N;N=t;try{return e()}finally{N=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=q,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=N;N=e;try{return t()}finally{N=r}},t.unstable_scheduleCallback=function(e,r,i){var l=t.unstable_now();switch("object"===typeof i&&null!==i?i="number"===typeof(i=i.delay)&&0<i?l+i:l:i=l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:P++,callback:r,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,x(O,e),null===S(C)&&e===S(O)&&(I?a():I=!0,o(M,i-l))):(e.sortIndex=u,x(C,e),A||L||(A=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var r=N;N=t;try{return e.apply(this,arguments)}finally{N=r}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={"&lt":"<","&gt":">","&quot":\'"\',"&apos":"\'","&amp":"&","&lt;":"<","&gt;":">","&quot;":\'"\',"&apos;":"\'","&amp;":"&"},o={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},a={"<":"&lt;",">":"&gt;",\'"\':"&quot;","\'":"&apos;","&":"&amp;"},i=function(){function e(){}return e.prototype.encode=function(e){return e&&e.length?e.replace(/[<>"\'&]/g,(function(e){return a[e]})):""},e.encode=function(t){return(new e).encode(t)},e.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,(function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return isNaN(t)||t<-32768||t>65535?"":String.fromCharCode(t)}return n[e]||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var a=e.charCodeAt(n),i=o[a];i?(r+="&"+i+";",n++):(r+=a<32||a>126?"&#"+a+";":e.charAt(n),n++)}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.XmlEntities=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","Aelig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],o=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],a={},i={};!function(){for(var e=0,t=n.length;e<t;){var r=n[e],l=o[e];a[r]=String.fromCharCode(l),i[l]=r,e++}}();var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=a[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=i[e.charCodeAt(n)];r+=o?"&"+o+";":e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),a=i[o];r+=a?"&"+a+";":o<32||o>126?"&#"+o+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html4Entities=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],o={},a={};!function(e,t){var r=n.length;for(;r--;){var o=n[r],a=o[0],i=o[1],l=i[0],u=l<32||l>126||62===l||60===l||38===l||34===l||39===l,c=void 0;if(u&&(c=t[l]=t[l]||{}),i[1]){var s=i[1];e[a]=String.fromCharCode(l)+String.fromCharCode(s),u&&(c[s]=a)}else e[a]=String.fromCharCode(l),u&&(c[""]=a)}}(o,a);var i=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=o[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=a[e.charCodeAt(n)];if(o){var i=o[e.charCodeAt(n+1)];if(i?n++:i=o[""],i){r+="&"+i+";",n++;continue}}r+=e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),i=a[o];if(i){var l=i[e.charCodeAt(n+1)];if(l?n++:l=i[""],l){r+="&"+l+";",n++;continue}}r+=o<32||o>126?"&#"+o+";":e.charAt(n),n++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html5Entities=i},function(e,t,r){"use strict";var n=r(52),o=r(193);Object.defineProperty(t,"__esModule",{value:!0}),t.shouldHighlight=b,t.getChalk=w,t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(b(t)){var r=w(t),n=f(r);return y(n,e)}return e};var a,i=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==typeof e&&"function"!==typeof e)return{default:e};var t=c();if(t&&t.has(e))return t.get(e);var r={},n=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var a=n?Object.getOwnPropertyDescriptor(e,o):null;a&&(a.get||a.set)?Object.defineProperty(r,o,a):r[o]=e[o]}r.default=e,t&&t.set(e,r);return r}(r(195)),l=r(196),u=(a=r(199))&&a.__esModule?a:{default:a};function c(){if("function"!==typeof WeakMap)return null;var e=new WeakMap;return c=function(){return e},e}var s=new Set(["as","async","from","get","of","set"]);function f(e){return{keyword:e.cyan,capitalized:e.yellow,jsxIdentifier:e.yellow,punctuator:e.yellow,number:e.magenta,string:e.green,regex:e.magenta,comment:e.grey,invalid:e.white.bgRed.bold}}var d,p=/\\r\\n|[\\n\\r\\u2028\\u2029]/,h=/^[()[\\]{}]$/,g=i.matchToToken,v=/^[a-z][\\w-]*$/i,m=function(e,t,r){if("name"===e.type){if((0,l.isKeyword)(e.value)||(0,l.isStrictReservedWord)(e.value,!0)||s.has(e.value))return"keyword";if(v.test(e.value)&&("<"===r[t-1]||"</"==r.substr(t-2,2)))return"jsxIdentifier";if(e.value[0]!==e.value[0].toLowerCase())return"capitalized"}return"punctuator"===e.type&&h.test(e.value)?"bracket":"invalid"!==e.type||"@"!==e.value&&"#"!==e.value?e.type:"punctuator"};function y(e,t){var r,o="",a=n(d(t));try{var i=function(){var t=r.value,n=t.type,a=t.value,i=e[n];o+=i?a.split(p).map((function(e){return i(e)})).join("\\n"):a};for(a.s();!(r=a.n()).done;)i()}catch(e){a.e(e)}finally{a.f()}return o}function b(e){return u.default.supportsColor||e.forceColor}function w(e){var t=u.default;return e.forceColor&&(t=new u.default.constructor({enabled:!0,level:1})),t}d=o.mark((function e(t){var r,n;return o.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r=i.default.exec(t))){e.next=6;break}return n=g(r),e.next=4,{type:m(n,r.index,t),value:n.value};case 4:e.next=0;break;case 6:case"end":return e.stop()}}),e)}))},function(e,t,r){var n=r(192);e.exports=function(e,t){if(e){if("string"===typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}},function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}},function(e,t,r){e.exports=r(194)},function(e,t,r){var n=function(e){"use strict";var t,r=Object.prototype,n=r.hasOwnProperty,o="function"===typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,r){return e[t]=r}}function c(e,t,r,n){var o=t&&t.prototype instanceof v?t:v,a=Object.create(o.prototype),i=new O(n||[]);return a._invoke=function(e,t,r){var n=f;return function(o,a){if(n===p)throw new Error("Generator is already running");if(n===h){if("throw"===o)throw a;return R()}for(r.method=o,r.arg=a;;){var i=r.delegate;if(i){var l=_(i,r);if(l){if(l===g)continue;return l}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===f)throw n=h,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=s(e,t,r);if("normal"===u.type){if(n=r.done?h:d,u.arg===g)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=h,r.method="throw",r.arg=u.arg)}}}(e,r,i),a}function s(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",g={};function v(){}function m(){}function y(){}var b={};b[a]=function(){return this};var w=Object.getPrototypeOf,k=w&&w(w(P([])));k&&k!==r&&n.call(k,a)&&(b=k);var E=y.prototype=v.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function S(e,t){function r(o,a,i,l){var u=s(e[o],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"===typeof f&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,i,l)}),(function(e){r("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return r("throw",e,i,l)}))}l(u.arg)}var o;this._invoke=function(e,n){function a(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(a,a):a()}}function _(e,r){var n=e.iterator[r.method];if(n===t){if(r.delegate=null,"throw"===r.method){if(e.iterator.return&&(r.method="return",r.arg=t,_(e,r),"throw"===r.method))return g;r.method="throw",r.arg=new TypeError("The iterator does not provide a \'throw\' method")}return g}var o=s(n,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,g;var a=o.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,g):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,g)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function P(e){if(e){var r=e[a];if(r)return r.call(e);if("function"===typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function r(){for(;++o<e.length;)if(n.call(e,o))return r.value=e[o],r.done=!1,r;return r.value=t,r.done=!0,r};return i.next=i}}return{next:R}}function R(){return{value:t,done:!0}}return m.prototype=E.constructor=y,y.constructor=m,m.displayName=u(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"===typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,l,"GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},x(S.prototype),S.prototype[i]=function(){return this},e.AsyncIterator=S,e.async=function(t,r,n,o,a){void 0===a&&(a=Promise);var i=new S(c(t,r,n,o),a);return e.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(E),u(E,l,"Generator"),E[a]=function(){return this},E.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function r(){for(;t.length;){var n=t.pop();if(n in e)return r.value=n,r.done=!1,r}return r.done=!0,r}},e.values=P,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function o(n,o){return l.type="throw",l.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),c=n.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,g):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),C(r),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;C(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,r,n){return this.delegate={iterator:P(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=n}catch(e){Function("r","regeneratorRuntime = r")(n)}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=/(([\'"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\\'"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g,t.matchToToken=function(e){var t={type:"invalid",value:e[0],closed:void 0};return e[1]?(t.type="string",t.closed=!(!e[3]&&!e[4])):e[5]?t.type="comment":e[6]?(t.type="comment",t.closed=!!e[7]):e[8]?t.type="regex":e[9]?t.type="number":e[10]?t.type="name":e[11]?t.type="punctuator":e[12]&&(t.type="whitespace"),t}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"isIdentifierName",{enumerable:!0,get:function(){return n.isIdentifierName}}),Object.defineProperty(t,"isIdentifierChar",{enumerable:!0,get:function(){return n.isIdentifierChar}}),Object.defineProperty(t,"isIdentifierStart",{enumerable:!0,get:function(){return n.isIdentifierStart}}),Object.defineProperty(t,"isReservedWord",{enumerable:!0,get:function(){return o.isReservedWord}}),Object.defineProperty(t,"isStrictBindOnlyReservedWord",{enumerable:!0,get:function(){return o.isStrictBindOnlyReservedWord}}),Object.defineProperty(t,"isStrictBindReservedWord",{enumerable:!0,get:function(){return o.isStrictBindReservedWord}}),Object.defineProperty(t,"isStrictReservedWord",{enumerable:!0,get:function(){return o.isStrictReservedWord}}),Object.defineProperty(t,"isKeyword",{enumerable:!0,get:function(){return o.isKeyword}});var n=r(197),o=r(198)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIdentifierStart=s,t.isIdentifierChar=f,t.isIdentifierName=function(e){for(var t=!0,r=0,n=Array.from(e);r<n.length;r++){var o=n[r].codePointAt(0);if(t){if(!s(o))return!1;t=!1}else if(!f(o))return!1}return!t};var n="\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",o="\u200C\u200D\xb7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F",a=new RegExp("["+n+"]"),i=new RegExp("["+n+o+"]");n=o=null;var l=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938],u=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];function c(e,t){for(var r=65536,n=0,o=t.length;n<o;n+=2){if((r+=t[n])>e)return!1;if((r+=t[n+1])>=e)return!0}return!1}function s(e){return e<65?36===e:e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&a.test(String.fromCharCode(e)):c(e,l)))}function f(e){return e<48?36===e:e<58||!(e<65)&&(e<=90||(e<97?95===e:e<=122||(e<=65535?e>=170&&i.test(String.fromCharCode(e)):c(e,l)||c(e,u))))}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isReservedWord=u,t.isStrictReservedWord=c,t.isStrictBindOnlyReservedWord=s,t.isStrictBindReservedWord=function(e,t){return c(e,t)||s(e)},t.isKeyword=function(e){return a.has(e)};var n=["implements","interface","let","package","private","protected","public","static","yield"],o=["eval","arguments"],a=new Set(["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete"]),i=new Set(n),l=new Set(o);function u(e,t){return t&&"await"===e||"enum"===e}function c(e,t){return u(e,t)||i.has(e)}function s(e){return l.has(e)}},function(e,t,r){"use strict";(function(t){var n=r(52),o=r(200),a=r(201),i=r(206).stdout,l=r(207),u="win32"===t.platform&&!(Object({NODE_ENV:"production"}).TERM||"").toLowerCase().startsWith("xterm"),c=["ansi","ansi","ansi256","ansi16m"],s=new Set(["gray"]),f=Object.create(null);function d(e,t){t=t||{};var r=i?i.level:0;e.level=void 0===t.level?r:t.level,e.enabled="enabled"in t?t.enabled:e.level>0}function p(e){if(!this||!(this instanceof p)||this.template){var t={};return d(t,e),t.template=function(){var e=[].slice.call(arguments);return T.apply(null,[t.template].concat(e))},Object.setPrototypeOf(t,p.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=p,t.template}d(this,e)}u&&(a.blue.open="\x1b[94m");for(var h=function(){var e=v[g];a[e].closeRe=new RegExp(o(a[e].close),"g"),f[e]={get:function(){var t=a[e];return S.call(this,this._styles?this._styles.concat(t):[t],this._empty,e)}}},g=0,v=Object.keys(a);g<v.length;g++)h();f.visible={get:function(){return S.call(this,this._styles||[],!0,"visible")}},a.color.closeRe=new RegExp(o(a.color.close),"g");for(var m=function(){var e=b[y];if(s.has(e))return"continue";f[e]={get:function(){var t=this.level;return function(){var r=a.color[c[t]][e].apply(null,arguments),n={open:r,close:a.color.close,closeRe:a.color.closeRe};return S.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},y=0,b=Object.keys(a.color.ansi);y<b.length;y++)m();a.bgColor.closeRe=new RegExp(o(a.bgColor.close),"g");for(var w=function(){var e=E[k];if(s.has(e))return"continue";var t="bg"+e[0].toUpperCase()+e.slice(1);f[t]={get:function(){var t=this.level;return function(){var r=a.bgColor[c[t]][e].apply(null,arguments),n={open:r,close:a.bgColor.close,closeRe:a.bgColor.closeRe};return S.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},k=0,E=Object.keys(a.bgColor.ansi);k<E.length;k++)w();var x=Object.defineProperties((function(){}),f);function S(e,t,r){var n=function e(){return _.apply(e,arguments)};n._styles=e,n._empty=t;var o=this;return Object.defineProperty(n,"level",{enumerable:!0,get:function(){return o.level},set:function(e){o.level=e}}),Object.defineProperty(n,"enabled",{enumerable:!0,get:function(){return o.enabled},set:function(e){o.enabled=e}}),n.hasGrey=this.hasGrey||"gray"===r||"grey"===r,n.__proto__=x,n}function _(){var e=arguments,t=e.length,r=String(arguments[0]);if(0===t)return"";if(t>1)for(var o=1;o<t;o++)r+=" "+e[o];if(!this.enabled||this.level<=0||!r)return this._empty?"":r;var i=a.dim.open;u&&this.hasGrey&&(a.dim.open="");var l,c=n(this._styles.slice().reverse());try{for(c.s();!(l=c.n()).done;){var s=l.value;r=(r=s.open+r.replace(s.closeRe,s.open)+s.close).replace(/\\r?\\n/g,"".concat(s.close,"$&").concat(s.open))}}catch(e){c.e(e)}finally{c.f()}return a.dim.open=i,r}function T(e,t){if(!Array.isArray(t))return[].slice.call(arguments,1).join(" ");for(var r=[].slice.call(arguments,2),n=[t.raw[0]],o=1;o<t.length;o++)n.push(String(r[o-1]).replace(/[{}\\\\]/g,"\\\\$&")),n.push(String(t.raw[o]));return l(e,n.join(""))}Object.defineProperties(p.prototype,f),e.exports=p(),e.exports.supportsColor=i,e.exports.default=e.exports}).call(this,r(51))},function(e,t,r){"use strict";var n=/[|\\\\{}()[\\]^$+*?.]/g;e.exports=function(e){if("string"!==typeof e)throw new TypeError("Expected a string");return e.replace(n,"\\\\$&")}},function(e,t,r){"use strict";(function(e){var t=r(203),n=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(n+r,"m")}},o=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(38+r,";5;").concat(n,"m")}},a=function(e,r){return function(){var n=e.apply(t,arguments);return"\x1b[".concat(38+r,";2;").concat(n[0],";").concat(n[1],";").concat(n[2],"m")}};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){var e=new Map,r={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};r.color.grey=r.color.gray;for(var i=0,l=Object.keys(r);i<l.length;i++){for(var u=l[i],c=r[u],s=0,f=Object.keys(c);s<f.length;s++){var d=f[s],p=c[d];r[d]={open:"\x1b[".concat(p[0],"m"),close:"\x1b[".concat(p[1],"m")},c[d]=r[d],e.set(p[0],p[1])}Object.defineProperty(r,u,{value:c,enumerable:!1}),Object.defineProperty(r,"codes",{value:e,enumerable:!1})}var h=function(e){return e},g=function(e,t,r){return[e,t,r]};r.color.close="\x1b[39m",r.bgColor.close="\x1b[49m",r.color.ansi={ansi:n(h,0)},r.color.ansi256={ansi256:o(h,0)},r.color.ansi16m={rgb:a(g,0)},r.bgColor.ansi={ansi:n(h,10)},r.bgColor.ansi256={ansi256:o(h,10)},r.bgColor.ansi16m={rgb:a(g,10)};for(var v=0,m=Object.keys(t);v<m.length;v++){var y=m[v];if("object"===typeof t[y]){var b=t[y];"ansi16"===y&&(y="ansi"),"ansi16"in b&&(r.color.ansi[y]=n(b.ansi16,0),r.bgColor.ansi[y]=n(b.ansi16,10)),"ansi256"in b&&(r.color.ansi256[y]=o(b.ansi256,0),r.bgColor.ansi256[y]=o(b.ansi256,10)),"rgb"in b&&(r.color.ansi16m[y]=a(b.rgb,0),r.bgColor.ansi16m[y]=a(b.rgb,10))}}return r}})}).call(this,r(202)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){var n=r(87),o=r(205),a={};Object.keys(n).forEach((function(e){a[e]={},Object.defineProperty(a[e],"channels",{value:n[e].channels}),Object.defineProperty(a[e],"labels",{value:n[e].labels});var t=o(e);Object.keys(t).forEach((function(r){var n=t[r];a[e][r]=function(e){var t=function(t){if(void 0===t||null===t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var r=e(t);if("object"===typeof r)for(var n=r.length,o=0;o<n;o++)r[o]=Math.round(r[o]);return r};return"conversion"in e&&(t.conversion=e.conversion),t}(n),a[e][r].raw=function(e){var t=function(t){return void 0===t||null===t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(n)}))})),e.exports=a},function(e,t,r){"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(e,t,r){var n=r(87);function o(e){var t=function(){for(var e={},t=Object.keys(n),r=t.length,o=0;o<r;o++)e[t[o]]={distance:-1,parent:null};return e}(),r=[e];for(t[e].distance=0;r.length;)for(var o=r.pop(),a=Object.keys(n[o]),i=a.length,l=0;l<i;l++){var u=a[l],c=t[u];-1===c.distance&&(c.distance=t[o].distance+1,c.parent=o,r.unshift(u))}return t}function a(e,t){return function(r){return t(e(r))}}function i(e,t){for(var r=[t[e].parent,e],o=n[t[e].parent][e],i=t[e].parent;t[i].parent;)r.unshift(t[i].parent),o=a(n[t[i].parent][i],o),i=t[i].parent;return o.conversion=r,o}e.exports=function(e){for(var t=o(e),r={},n=Object.keys(t),a=n.length,l=0;l<a;l++){var u=n[l];null!==t[u].parent&&(r[u]=i(u,t))}return r}},function(e,t,r){"use strict";e.exports={stdout:!1,stderr:!1}},function(e,t,r){"use strict";var n=r(52),o=/(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi,a=/(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g,i=/^([\'"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/,l=/\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi,u=new Map([["n","\\n"],["r","\\r"],["t","\\t"],["b","\\b"],["f","\\f"],["v","\\v"],["0","\\0"],["\\\\","\\\\"],["e","\x1b"],["a","\x07"]]);function c(e){return"u"===e[0]&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):u.get(e)||e}function s(e,t){var r,o,a=[],u=t.trim().split(/\\s*,\\s*/g),s=n(u);try{for(s.s();!(o=s.n()).done;){var f=o.value;if(isNaN(f)){if(!(r=f.match(i)))throw new Error("Invalid Chalk template style argument: ".concat(f," (in style \'").concat(e,"\')"));a.push(r[2].replace(l,(function(e,t,r){return t?c(t):r})))}else a.push(Number(f))}}catch(e){s.e(e)}finally{s.f()}return a}function f(e){a.lastIndex=0;for(var t,r=[];null!==(t=a.exec(e));){var n=t[1];if(t[2]){var o=s(n,t[2]);r.push([n].concat(o))}else r.push([n])}return r}function d(e,t){var r,o={},a=n(t);try{for(a.s();!(r=a.n()).done;){var i,l=r.value,u=n(l.styles);try{for(u.s();!(i=u.n()).done;){var c=i.value;o[c[0]]=l.inverse?null:c.slice(1)}}catch(e){u.e(e)}finally{u.f()}}}catch(e){a.e(e)}finally{a.f()}for(var s=e,f=0,d=Object.keys(o);f<d.length;f++){var p=d[f];if(Array.isArray(o[p])){if(!(p in s))throw new Error("Unknown Chalk style: ".concat(p));s=o[p].length>0?s[p].apply(s,o[p]):s[p]}}return s}e.exports=function(e,t){var r=[],n=[],a=[];if(t.replace(o,(function(t,o,i,l,u,s){if(o)a.push(c(o));else if(l){var p=a.join("");a=[],n.push(0===r.length?p:d(e,r)(p)),r.push({inverse:i,styles:f(l)})}else if(u){if(0===r.length)throw new Error("Found extraneous } in Chalk template literal");n.push(d(e,r)(a.join(""))),a=[],r.pop()}else a.push(s)})),n.push(a.join("")),r.length>0){var i="Chalk template literal is missing ".concat(r.length," closing bracket").concat(1===r.length?"":"s"," (`}`)");throw new Error(i)}return n.join("")}},function(e,t,r){"use strict";r.r(t),r.d(t,"ThemeContext",(function(){return me}));r(90);var n=r(0),o=r.n(n),a=r(53),i=r.n(a),l=function(e){return{position:"relative",display:"inline-flex",flexDirection:"column",height:"100%",width:"1024px",maxWidth:"100%",overflowX:"hidden",overflowY:"auto",padding:"0.5rem",boxSizing:"border-box",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"11px",whiteSpace:"pre-wrap",wordBreak:"break-word",lineHeight:1.5,color:e.color}},u=null;var c=function(e){var t=Object(n.useContext)(me),r=e.shortcutHandler;return Object(n.useEffect)((function(){var e=function(e){r&&r(e.key)};return window.addEventListener("keydown",e),u&&u.addEventListener("keydown",e),function(){window.removeEventListener("keydown",e),u&&u.removeEventListener("keydown",e)}}),[r]),o.a.createElement("div",{style:l(t),ref:function(e){if(e){var t=e.ownerDocument;u=t.defaultView}}},e.children)},s=function(e){return{fontFamily:"sans-serif",color:e.footer,marginTop:"0.5rem",flex:"0 0 auto"}};var f=function(e){var t=Object(n.useContext)(me);return o.a.createElement("div",{style:s(t)},e.line1,o.a.createElement("br",null),e.line2)},d=function(e){return{fontSize:"2em",fontFamily:"sans-serif",color:e.headerColor,whiteSpace:"pre-wrap",margin:"0 2rem 0.75rem 0",flex:"0 0 auto",maxHeight:"50%",overflow:"auto"}};var p=function(e){var t=Object(n.useContext)(me);return o.a.createElement("div",{style:d(t)},e.headerText)};function h(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function g(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function v(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?g(Object(r),!0).forEach((function(t){h(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):g(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var m={position:"relative",display:"block",padding:"0.5em",marginTop:"0.5em",marginBottom:"0.5em",overflowX:"auto",whiteSpace:"pre-wrap",borderRadius:"0.25rem"},y={fontFamily:"Consolas, Menlo, monospace"};var b=function(e){var t=e.main,r=e.codeHTML,a=Object(n.useContext)(me),i=v(v({},m),{},{backgroundColor:a.primaryPreBackground,color:a.primaryPreColor}),l=v(v({},m),{},{backgroundColor:a.secondaryPreBackground,color:a.secondaryPreColor}),u=t?i:l,c={__html:r};return o.a.createElement("pre",{style:u},o.a.createElement("code",{style:y,dangerouslySetInnerHTML:c}))},w=r(33),k=r.n(w),E=new(r(88).AllHtmlEntities),x=function(e){return{reset:[e.base05,"transparent"],black:e.base05,red:e.base08,green:e.base0B,yellow:e.base08,blue:e.base0C,magenta:e.base0C,cyan:e.base0E,gray:e.base03,lightgrey:e.base01,darkgrey:e.base03}},S={"ansi-bright-black":"black","ansi-bright-yellow":"yellow","ansi-yellow":"yellow","ansi-bright-green":"green","ansi-green":"green","ansi-bright-cyan":"cyan","ansi-cyan":"cyan","ansi-bright-red":"red","ansi-red":"red","ansi-bright-magenta":"magenta","ansi-magenta":"magenta","ansi-white":"darkgrey"};var _=function(e,t){for(var r=(new k.a).ansiToJson(E.encode(e),{use_classes:!0}),n="",o=!1,a=0;a<r.length;++a)for(var i=r[a],l=i.content,u=i.fg,c=l.split("\\n"),s=0;s<c.length;++s){o||(n+=\'<span data-ansi-line="true">\',o=!0);var f=c[s].replace("\\r",""),d=x(t)[S[u]];null!=d?n+=\'<span style="color: \'+d+\';">\'+f+"</span>":(null!=u&&console.log("Missing color mapping: ",u),n+="<span>"+f+"</span>"),s<c.length-1&&(n+="</span>",o=!1,n+="<br/>")}return o&&(n+="</span>",o=!1),n},T=/^\\.(\\/[^/\\n ]+)+\\.[^/\\n ]+$/,C=[/^.*\\((\\d+):(\\d+)\\)$/,/^Line (\\d+):.+$/];var O=function(e){for(var t=e.split("\\n"),r="",n=0,o=0,a=0;a<t.length;a++){var i=k.a.ansiToText(t[a]).trim();if(i){!r&&i.match(T)&&(r=i);for(var l=0;l<C.length;){var u=i.match(C[l]);if(u){n=parseInt(u[1],10),o=parseInt(u[2],10)+1||1;break}l++}if(r&&n)break}}return r&&n?{fileName:r,lineNumber:n,colNumber:o}:null},P={cursor:"pointer"};var R=function(e){var t=Object(n.useContext)(me),r=e.error,a=e.editorHandler,i=O(r),l=null!==i&&null!==a;return o.a.createElement(c,null,o.a.createElement(p,{headerText:"Failed to compile"}),o.a.createElement("div",{onClick:l&&i?function(){return a(i)}:null,style:l?P:null},o.a.createElement(b,{main:!0,codeHTML:_(r,t)})),o.a.createElement(f,{line1:"This error occurred during the build time and cannot be dismissed."}))};function N(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function L(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function A(e,t,r){return t&&L(e.prototype,t),r&&L(e,r),e}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function j(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}function M(e){return(M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function D(e){return(D="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){return!t||"object"!==D(t)&&"function"!==typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return e}(e):t}function z(e){var t=function(){if("undefined"===typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"===typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=M(e);if(t){var o=M(this).constructor;r=Reflect.construct(n,arguments,o)}else r=n.apply(this,arguments);return q(this,r)}}var U=function(e){return{color:e.closeColor,lineHeight:"1rem",fontSize:"1.5rem",padding:"1rem",cursor:"pointer",position:"absolute",right:0,top:0}};var F=function(e){var t=e.close,r=Object(n.useContext)(me);return o.a.createElement("span",{title:"Click or press Escape to dismiss.",onClick:t,style:U(r)},"\xd7")},B={marginBottom:"0.5rem"},V={marginRight:"1em"},H={border:"none",borderRadius:"4px",padding:"3px 6px",cursor:"pointer"},W=function(e){return v(v({},H),{},{backgroundColor:e.navBackground,color:e.navArrow,borderTopRightRadius:"0px",borderBottomRightRadius:"0px",marginRight:"1px"})},$=function(e){return v(v({},H),{},{backgroundColor:e.navBackground,color:e.navArrow,borderTopLeftRadius:"0px",borderBottomLeftRadius:"0px"})};var G=function(e){var t=Object(n.useContext)(me),r=e.currentError,a=e.totalErrors,i=e.previous,l=e.next;return o.a.createElement("div",{style:B},o.a.createElement("span",{style:V},o.a.createElement("button",{onClick:i,style:W(t)},"\u2190"),o.a.createElement("button",{onClick:l,style:$(t)},"\u2192")),"".concat(r," of ").concat(a," errors on the page"))};function Q(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function Y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(n=(i=l.next()).done)&&(r.push(i.value),!t||r.length!==t);n=!0);}catch(e){o=!0,a=e}finally{try{n||null==l.return||l.return()}finally{if(o)throw a}}return r}}(e,t)||function(e,t){if(e){if("string"===typeof e)return Q(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Q(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function K(e,t){for(;null!=t&&"br"!==t.tagName.toLowerCase();)t=t.nextElementSibling;null!=t&&e.removeChild(t)}var X=r(89);var J=function(e){var t=Object(n.useContext)(me),r=e.lines,a=e.lineNum,i=e.columnNum,l=e.contextSize,u=e.main,c=[],s=1/0;r.forEach((function(e){var t=e.content,r=t.match(/^\\s*/);""!==t&&(s=r&&r[0]?Math.min(s,r[0].length):0)})),r.forEach((function(e){var t=e.content,r=e.lineNumber;isFinite(s)&&(t=t.substring(s)),c[r-1]=t}));var f=Object(X.codeFrameColumns)(c.join("\\n"),{start:{line:a,column:null==i?0:i-(isFinite(s)?s:0)}},{forceColor:!0,linesAbove:l,linesBelow:l}),d=_(f,t),p=document.createElement("code");p.innerHTML=d,function(e){for(var t=e.childNodes,r=0;r<t.length;++r){var n=t[r];if("span"===n.tagName.toLowerCase()){var o=n.innerText;null!=o&&"|^"===o.replace(/\\s/g,"")&&(n.style.position="absolute",K(e,n))}}}(p);var h=p.childNodes;e:for(var g=0;g<h.length;++g)for(var v=h[g].childNodes,m=0;m<v.length;++m){var y=v[m].innerText;if(null!=y&&-1!==y.indexOf(" "+a+" |"))break e}return o.a.createElement(b,{main:u,codeHTML:p.innerHTML})};function Z(e,t,r,n,o,a,i){var l;if(!i&&e&&"number"===typeof t){var u=/^[/|\\\\].*?[/|\\\\]((src|node_modules)[/|\\\\].*)/.exec(e);l=u&&u[1]?u[1]:e,l+=":"+t,r&&(l+=":"+r)}else n&&"number"===typeof o?(l=n+":"+o,a&&(l+=":"+a)):l="unknown";return l.replace("webpack://",".")}var ee=function(e){return{textDecoration:"none",color:e.anchorColor,cursor:"pointer"}},te=function(e){return{marginBottom:"1.5em",color:e.toggleColor,cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",background:e.toggleBackground,fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"}};var re=function(e){var t=Object(n.useContext)(me),r=Y(Object(n.useState)(!1),2),a=r[0],i=r[1],l=function(){var t=e.frame,r=t._originalFileName,n=t._originalLineNumber;return r?-1!==r.trim().indexOf(" ")?null:{fileName:r,lineNumber:n||1}:null},u=function(){var t=l();t&&e.editorHandler(t)},c=e.frame,s=e.contextSize,f=e.critical,d=e.showCode,p=c.fileName,h=c.lineNumber,g=c.columnNumber,v=c._scriptCode,m=c._originalFileName,y=c._originalLineNumber,b=c._originalColumnNumber,w=c._originalScriptCode,k=c.getFunctionName(),E=Z(m,y,b,p,h,g,a),x=null;d&&(a&&v&&0!==v.length&&null!=h?x={lines:v,lineNum:h,columnNum:g,contextSize:s,main:f}:!a&&w&&0!==w.length&&null!=y&&(x={lines:w,lineNum:y,columnNum:b,contextSize:s,main:f}));var S=null!==l()&&null!==e.editorHandler;return o.a.createElement("div",null,o.a.createElement("div",null,k),o.a.createElement("div",{style:{fontSize:"0.9em",marginBottom:"0.9em"}},o.a.createElement("span",{style:S?ee(t):null,onClick:S?u:null,onKeyDown:S?function(e){"Enter"===e.key&&u()}:null,tabIndex:S?"0":null},E)),x&&o.a.createElement("span",null,o.a.createElement("span",{onClick:S?u:null,style:S?{cursor:"pointer"}:null},o.a.createElement(J,x)),o.a.createElement("button",{style:te(t),onClick:function(){i(!a)}},"View "+(a?"source":"compiled"))))},ne={cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"},oe=function(e){return v(v({},ne),{},{color:e.color,background:e.background,marginBottom:"1.5em"})},ae=function(e){return v(v({},ne),{},{color:e.color,background:e.background,marginBottom:"0.6em"})};var ie=function(e){var t=Object(n.useContext)(me),r=Y(Object(n.useState)(!0),2),a=r[0],i=r[1],l=function(){i(!a)},u=e.children.length;return o.a.createElement("div",null,o.a.createElement("button",{onClick:l,style:a?oe(t):ae(t)},(a?"\u25B6":"\u25BC")+" ".concat(u," stack frames were ")+(a?"collapsed.":"expanded.")),o.a.createElement("div",{style:{display:a?"none":"block"}},e.children,o.a.createElement("button",{onClick:l,style:ae(t)},"\u25B2 ".concat(u," stack frames were expanded."))))};function le(e){switch(e){case"EvalError":case"InternalError":case"RangeError":case"ReferenceError":case"SyntaxError":case"TypeError":case"URIError":return!0;default:return!1}}var ue={fontSize:"1em",flex:"0 1 auto",minHeight:"0px",overflow:"auto"},ce=function(e){j(r,e);var t=z(r);function r(){return N(this,r),t.apply(this,arguments)}return A(r,[{key:"renderFrames",value:function(){var e=this.props,t=e.stackFrames,r=e.errorName,n=e.contextSize,a=e.editorHandler,i=[],l=!1,u=[],c=0;return t.forEach((function(e,s){var f=e.fileName,d=function(e,t){return null==e||""===e||-1!==e.indexOf("/~/")||-1!==e.indexOf("/node_modules/")||-1!==e.trim().indexOf(" ")||null==t||""===t}(e._originalFileName,f),p=!le(r),h=d&&(p||l);d||(l=!0);var g=o.a.createElement(re,{key:"frame-"+s,frame:e,contextSize:n,critical:0===s,showCode:!h,editorHandler:a}),v=s===t.length-1;h&&u.push(g),h&&!v||(1===u.length?i.push(u[0]):u.length>1&&(c++,i.push(o.a.createElement(ie,{key:"bundle-"+c},u))),u=[]),h||i.push(g)})),i}},{key:"render",value:function(){return o.a.createElement("div",{style:ue},this.renderFrames())}}]),r}(n.Component),se={display:"flex",flexDirection:"column"};var fe=function(e){var t=e.errorRecord,r=e.editorHandler,n=t.error,a=t.unhandledRejection,i=t.contextSize,l=t.stackFrames,u=a?"Unhandled Rejection ("+n.name+")":n.name,c=n.message,s=c.match(/^\\w*:/)||!u?c:u+": "+c;return s=s.replace(/^Invariant Violation:\\s*/,"").replace(/^Warning:\\s*/,"").replace(" Check the render method","\\n\\nCheck the render method").replace(" Check your code at","\\n\\nCheck your code at"),o.a.createElement("div",{style:se},o.a.createElement(p,{headerText:s}),o.a.createElement(ce,{stackFrames:l,errorName:u,contextSize:i,editorHandler:r}))},de=function(e){j(r,e);var t=z(r);function r(){var e;N(this,r);for(var n=arguments.length,o=new Array(n),a=0;a<n;a++)o[a]=arguments[a];return(e=t.call.apply(t,[this].concat(o))).state={currentIndex:0},e.previous=function(){e.setState((function(e,t){return{currentIndex:e.currentIndex>0?e.currentIndex-1:t.errorRecords.length-1}}))},e.next=function(){e.setState((function(e,t){return{currentIndex:e.currentIndex<t.errorRecords.length-1?e.currentIndex+1:0}}))},e.shortcutHandler=function(t){"Escape"===t?e.props.close():"ArrowLeft"===t?e.previous():"ArrowRight"===t&&e.next()},e}return A(r,[{key:"render",value:function(){var e=this.props,t=e.errorRecords,r=e.close,n=t.length;return o.a.createElement(c,{shortcutHandler:this.shortcutHandler},o.a.createElement(F,{close:r}),n>1&&o.a.createElement(G,{currentError:this.state.currentIndex+1,totalErrors:n,previous:this.previous,next:this.next}),o.a.createElement(fe,{errorRecord:t[this.state.currentIndex],editorHandler:this.props.editorHandler}),o.a.createElement(f,{line1:"This screen is visible only in development. It will not appear if the app crashes in production.",line2:"Open your browser\u2019s developer console to further inspect this error.  Click the \'X\' or hit ESC to dismiss this message."}))}}]),r}(n.PureComponent),pe={background:"white",color:"black",headerColor:"#ce1126",primaryPreBackground:"rgba(206, 17, 38, 0.05)",primaryPreColor:"inherit",secondaryPreBackground:"rgba(251, 245, 180, 0.3)",secondaryPreColor:"inherit",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#293238",navBackground:"rgba(206, 17, 38, 0.05)",navArrow:"#ce1126",base01:"#f5f5f5",base03:"#6e6e6e",base05:"#333333",base08:"#881280",base0B:"#1155cc",base0C:"#994500",base0E:"#c80000"},he={background:"#353535",color:"white",headerColor:"#e83b46",primaryPreBackground:"rgba(206, 17, 38, 0.1)",primaryPreColor:"#fccfcf",secondaryPreBackground:"rgba(251, 245, 180, 0.1)",secondaryPreColor:"#fbf5b4",footer:"#878e91",anchorColor:"#878e91",toggleBackground:"transparent",toggleColor:"#878e91",closeColor:"#ffffff",navBackground:"rgba(206, 17, 38, 0.2)",navArrow:"#ce1126",base01:"#282a2e",base03:"#969896",base05:"#c5c8c6",base08:"#cc6666",base0B:"#b5bd68",base0C:"#8abeb7",base0E:"#b294bb"};var ge=null,ve=window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?he:pe,me=Object(n.createContext)();window.updateContent=function(e){var t,r,n,a,l,u=(r=(t=e).currentBuildError,n=t.currentRuntimeErrorRecords,a=t.dismissRuntimeErrors,l=t.editorHandler,r?o.a.createElement(me.Provider,{value:ve},o.a.createElement(R,{error:r,editorHandler:l})):n.length>0?o.a.createElement(me.Provider,{value:ve},o.a.createElement(de,{errorRecords:n,close:a,editorHandler:l})):null);return null===u?(i.a.unmountComponentAtNode(ge),!1):(i.a.render(u,ge),!0)},document.body.style.margin="0",document.body.style["max-width"]="100vw",function(e,t){for(var r in e.setAttribute("style",""),t)t.hasOwnProperty(r)&&(e.style[r]=t[r])}(ge=document.createElement("div"),{width:"100%",height:"100%","box-sizing":"border-box","text-align":"center","background-color":ve.background}),document.body.appendChild(ge),window.parent.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady()}]);', ee = null, te = !1, re = !1, ne = null, oe = null, ae = [], ie = null, le = null;
            function ue(e) {
                ne = e, ee && me();
            }
            function ce(e) {
                oe = e, me();
            }
            function se(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                ie = t, X(pe(t))(e);
            }
            function fe() {
                oe = null, me();
            }
            function de(e) {
                if (null !== le) throw new Error("Already listening");
                e.launchEditorEndpoint && console.warn("Warning: `startReportingRuntimeErrors` doesn\u2019t accept `launchEditorEndpoint` argument anymore. Use `listenToOpenInEditor` instead with your own implementation to open errors in editor "), ie = e, le = K(pe(e), e.filename);
            }
            var pe = function(e) {
                return function(t) {
                    try {
                        "function" == typeof e.onError && e.onError.call(null);
                    } finally{
                        if (ae.some(function(e) {
                            return e.error === t.error;
                        })) return;
                        ae = ae.concat([
                            t
                        ]), me();
                    }
                };
            };
            function he() {
                ae = [], me();
            }
            function ge() {
                if (null === le) throw new Error("Not currently listening");
                ie = null;
                try {
                    le();
                } finally{
                    le = null;
                }
            }
            function me() {
                if (!te) {
                    if (re) ve();
                    else {
                        te = !0;
                        var e = window.document.createElement("iframe");
                        !function(e, t) {
                            for(var r in e.setAttribute("style", ""), t)t.hasOwnProperty(r) && (e.style[r] = t[r]);
                        }(e, J), e.onload = function() {
                            var t = e.contentDocument;
                            if (null != t && null != t.body) {
                                ee = e;
                                var r = e.contentWindow.document.createElement("script");
                                r.type = "text/javascript", r.innerHTML = Z, t.body.appendChild(r);
                            }
                        }, window.document.body.appendChild(e);
                    }
                }
            }
            function ve() {
                if (!ie) throw new Error("Expected options to be injected.");
                if (!ee) throw new Error("Iframe has not been created yet.");
                ee.contentWindow.updateContent({
                    currentBuildError: oe,
                    currentRuntimeErrorRecords: ae,
                    dismissRuntimeErrors: he,
                    editorHandler: ne
                }) || (window.document.body.removeChild(ee), ee = null, re = !1);
            }
            window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ = window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ || {}, window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady = function() {
                re = !0, te = !1, ve();
            };
        }
    ]);
});

},{"d1546958eb39fdcf":"d5jf4"}],"d5jf4":[function(require,module,exports,__globalThis) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"dIizP":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "0a8ecb283d214d75";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , disposedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && ![
        'localhost',
        '127.0.0.1',
        '0.0.0.0'
    ].includes(hostname) ? 'wss' : 'ws';
    var ws;
    if (HMR_USE_SSE) ws = new EventSource('/__parcel_hmr');
    else try {
        ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes('test.js');
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        disposedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === 'reload') fullReload();
        else if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') window.dispatchEvent(new CustomEvent('parcelhmraccept'));
                await hmrApplyUpdates(assets);
                hmrDisposeQueue();
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                let processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    if (ws instanceof WebSocket) {
        ws.onerror = function(e) {
            if (e.message) console.error(e.message);
        };
        ws.onclose = function() {
            console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
        };
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, '') : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + '</div>').join('')}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ''}
      </div>
    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ('reload' in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute('href');
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    href.split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === 'js') {
        if (typeof document !== 'undefined') {
            let script = document.createElement('script');
            script.src = asset.url + '?t=' + Date.now();
            if (asset.outputFormat === 'esmodule') script.type = 'module';
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === 'function') {
            // Worker scripts
            if (asset.outputFormat === 'esmodule') return import(asset.url + '?t=' + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + '?t=' + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        }
        // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.
        // This is required in case modules are duplicated. We need to ensure all instances have the updated code.
        if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDisposeQueue() {
    // Dispose all old assets.
    for(let i = 0; i < assetsToDispose.length; i++){
        let id = assetsToDispose[i][1];
        if (!disposedAssets[id]) {
            hmrDispose(assetsToDispose[i][0], id);
            disposedAssets[id] = true;
        }
    }
    assetsToDispose = [];
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        let assetsToAlsoAccept = [];
        cached.hot._acceptCallbacks.forEach(function(cb) {
            let additionalAssets = cb(function() {
                return getParents(module.bundle.root, id);
            });
            if (Array.isArray(additionalAssets) && additionalAssets.length) assetsToAlsoAccept.push(...additionalAssets);
        });
        if (assetsToAlsoAccept.length) {
            let handled = assetsToAlsoAccept.every(function(a) {
                return hmrAcceptCheck(a[0], a[1]);
            });
            if (!handled) return fullReload();
            hmrDisposeQueue();
        }
    }
}

},{}],"bB7Pu":[function(require,module,exports,__globalThis) {
var $parcel$ReactRefreshHelpers$e4e3 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$e4e3.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _client = require("react-dom/client");
var _app = require("./App");
var _appDefault = parcelHelpers.interopDefault(_app);
const root = (0, _client.createRoot)(document.querySelector("#root"));
root.render(/*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _appDefault.default), {}, void 0, false, {
    fileName: "index.js",
    lineNumber: 7,
    columnNumber: 13
}, undefined));

  $parcel$ReactRefreshHelpers$e4e3.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","react-dom/client":"lOjBx","./App":"2Ew96","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"iTorj":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("ee51401569654d91");

},{"ee51401569654d91":"48uCM"}],"48uCM":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE$2 ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if ("object" === typeof type) switch("number" === typeof type.tag && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof){
            case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
            case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                    return getComponentNameFromType(type(innerType));
                } catch (x) {}
        }
        return null;
    }
    function testStringCoercion(value) {
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        try {
            testStringCoercion(value);
            var JSCompiler_inline_result = !1;
        } catch (e) {
            JSCompiler_inline_result = !0;
        }
        if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
            return testStringCoercion(value);
        }
    }
    function disabledLog() {}
    function disableLogs() {
        if (0 === disabledDepth) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
                configurable: !0,
                enumerable: !0,
                value: disabledLog,
                writable: !0
            };
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (0 === disabledDepth) {
            var props = {
                configurable: !0,
                enumerable: !0,
                writable: !0
            };
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        }
        0 > disabledDepth && console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function describeBuiltInComponentFrame(name) {
        if (void 0 === prefix) try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
            suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
        return "\n" + prefix + name + suffix;
    }
    function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (void 0 !== frame) return frame;
        reentry = !0;
        frame = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher = null;
        previousDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = null;
        disableLogs();
        try {
            var RunInRootFrame = {
                DetermineComponentFrameRoot: function() {
                    try {
                        if (construct) {
                            var Fake = function() {
                                throw Error();
                            };
                            Object.defineProperty(Fake.prototype, "props", {
                                set: function() {
                                    throw Error();
                                }
                            });
                            if ("object" === typeof Reflect && Reflect.construct) {
                                try {
                                    Reflect.construct(Fake, []);
                                } catch (x) {
                                    var control = x;
                                }
                                Reflect.construct(fn, [], Fake);
                            } else {
                                try {
                                    Fake.call();
                                } catch (x$0) {
                                    control = x$0;
                                }
                                fn.call(Fake.prototype);
                            }
                        } else {
                            try {
                                throw Error();
                            } catch (x$1) {
                                control = x$1;
                            }
                            (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {});
                        }
                    } catch (sample) {
                        if (sample && control && "string" === typeof sample.stack) return [
                            sample.stack,
                            control.stack
                        ];
                    }
                    return [
                        null,
                        null
                    ];
                }
            };
            RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
            namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
                value: "DetermineComponentFrameRoot"
            });
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
                var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
                for(_RunInRootFrame$Deter = namePropDescriptor = 0; namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes("DetermineComponentFrameRoot");)namePropDescriptor++;
                for(; _RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes("DetermineComponentFrameRoot");)_RunInRootFrame$Deter++;
                if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length) for(namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter];)_RunInRootFrame$Deter--;
                for(; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                    if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
                        do if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                            var _frame = "\n" + sampleLines[namePropDescriptor].replace(" at new ", " at ");
                            fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                            "function" === typeof fn && componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                        while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
                    }
                    break;
                }
            }
        } finally{
            reentry = !1, ReactSharedInternals.H = previousDispatcher, reenableLogs(), Error.prepareStackTrace = frame;
        }
        sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
        "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
        return sampleLines;
    }
    function describeUnknownElementTypeFrameInDEV(type) {
        if (null == type) return "";
        if ("function" === typeof type) {
            var prototype = type.prototype;
            return describeNativeComponentFrame(type, !(!prototype || !prototype.isReactComponent));
        }
        if ("string" === typeof type) return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if ("object" === typeof type) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return type = describeNativeComponentFrame(type.render, !1), type;
            case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type);
            case REACT_LAZY_TYPE:
                prototype = type._payload;
                type = type._init;
                try {
                    return describeUnknownElementTypeFrameInDEV(type(prototype));
                } catch (x) {}
        }
        return "";
    }
    function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return !1;
        }
        return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
        }
        warnAboutAccessingKey.isReactWarning = !0;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
        });
    }
    function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = !0, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(type, key, self, source, owner, props) {
        self = props.ref;
        type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            props: props,
            _owner: owner
        };
        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", {
            enumerable: !1,
            value: null
        });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: null
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
    }
    function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self) {
        if ("string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE$1 || void 0 !== type.getModuleId)) {
            var children = config.children;
            if (void 0 !== children) {
                if (isStaticChildren) {
                    if (isArrayImpl(children)) {
                        for(isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)validateChildKeys(children[isStaticChildren], type);
                        Object.freeze && Object.freeze(children);
                    } else console.error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        } else {
            children = "";
            if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length) children += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            null === type ? isStaticChildren = "null" : isArrayImpl(type) ? isStaticChildren = "array" : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE ? (isStaticChildren = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", children = " Did you accidentally export a JSX literal instead of a component?") : isStaticChildren = typeof type;
            console.error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", isStaticChildren, children);
        }
        if (hasOwnProperty.call(config, "key")) {
            children = getComponentNameFromType(type);
            var keys = Object.keys(config).filter(function(k) {
                return "key" !== k;
            });
            isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
            didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', isStaticChildren, children, keys, children), didWarnAboutKeySpread[children + isStaticChildren] = !0);
        }
        children = null;
        void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
        hasValidKey(config) && (checkKeyStringCoercion(config.key), children = "" + config.key);
        if ("key" in config) {
            maybeKey = {};
            for(var propName in config)"key" !== propName && (maybeKey[propName] = config[propName]);
        } else maybeKey = config;
        children && defineKeyPropWarningGetter(maybeKey, "function" === typeof type ? type.displayName || type.name || "Unknown" : type);
        return ReactElement(type, children, self, source, getOwner(), maybeKey);
    }
    function validateChildKeys(node, parentType) {
        if ("object" === typeof node && node && node.$$typeof !== REACT_CLIENT_REFERENCE) {
            if (isArrayImpl(node)) for(var i = 0; i < node.length; i++){
                var child = node[i];
                isValidElement(child) && validateExplicitKey(child, parentType);
            }
            else if (isValidElement(node)) node._store && (node._store.validated = 1);
            else if (null === node || "object" !== typeof node ? i = null : (i = MAYBE_ITERATOR_SYMBOL && node[MAYBE_ITERATOR_SYMBOL] || node["@@iterator"], i = "function" === typeof i ? i : null), "function" === typeof i && i !== node.entries && (i = i.call(node), i !== node)) for(; !(node = i.next()).done;)isValidElement(node.value) && validateExplicitKey(node.value, parentType);
        }
    }
    function isValidElement(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function validateExplicitKey(element, parentType) {
        if (element._store && !element._store.validated && null == element.key && (element._store.validated = 1, parentType = getCurrentComponentErrorInfo(parentType), !ownerHasKeyUseWarning[parentType])) {
            ownerHasKeyUseWarning[parentType] = !0;
            var childOwner = "";
            element && null != element._owner && element._owner !== getOwner() && (childOwner = null, "number" === typeof element._owner.tag ? childOwner = getComponentNameFromType(element._owner.type) : "string" === typeof element._owner.name && (childOwner = element._owner.name), childOwner = " It was passed a child from " + childOwner + ".");
            var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;
            ReactSharedInternals.getCurrentStack = function() {
                var stack = describeUnknownElementTypeFrameInDEV(element.type);
                prevGetCurrentStack && (stack += prevGetCurrentStack() || "");
                return stack;
            };
            console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.', parentType, childOwner);
            ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
        }
    }
    function getCurrentComponentErrorInfo(parentType) {
        var info = "", owner = getOwner();
        owner && (owner = getComponentNameFromType(owner.type)) && (info = "\n\nCheck the render method of `" + owner + "`.");
        info || (parentType = getComponentNameFromType(parentType)) && (info = "\n\nCheck the top-level render call using <" + parentType + ">.");
        return info;
    }
    var React = require("58362d9d82be395f"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, REACT_CLIENT_REFERENCE$2 = Symbol.for("react.client.reference"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, assign = Object.assign, REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference"), isArrayImpl = Array.isArray, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = !0;
    var prefix, suffix, reentry = !1;
    var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), specialPropKeyWarningShown;
    var didWarnAboutElementRef = {};
    var didWarnAboutKeySpread = {}, ownerHasKeyUseWarning = {};
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsxDEV = function(type, config, maybeKey, isStaticChildren, source, self) {
        return jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self);
    };
})();

},{"58362d9d82be395f":"21dqq"}],"21dqq":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("a569817e6ea559f6");

},{"a569817e6ea559f6":"6YvXz"}],"6YvXz":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var process = require("9ffea7b9cafb49c3");
"use strict";
(function() {
    function defineDeprecationWarning(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                console.warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
            }
        });
    }
    function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
    }
    function warnNoop(publicInstance, callerName) {
        publicInstance = (publicInstance = publicInstance.constructor) && (publicInstance.displayName || publicInstance.name) || "ReactClass";
        var warningKey = publicInstance + "." + callerName;
        didWarnStateUpdateForUnmountedComponent[warningKey] || (console.error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, publicInstance), didWarnStateUpdateForUnmountedComponent[warningKey] = !0);
    }
    function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    function ComponentDummy() {}
    function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    function testStringCoercion(value) {
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        try {
            testStringCoercion(value);
            var JSCompiler_inline_result = !1;
        } catch (e) {
            JSCompiler_inline_result = !0;
        }
        if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
            return testStringCoercion(value);
        }
    }
    function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE$2 ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if ("object" === typeof type) switch("number" === typeof type.tag && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof){
            case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
            case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                    return getComponentNameFromType(type(innerType));
                } catch (x) {}
        }
        return null;
    }
    function isValidElementType(type) {
        return "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE$1 || void 0 !== type.getModuleId) ? !0 : !1;
    }
    function disabledLog() {}
    function disableLogs() {
        if (0 === disabledDepth) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
                configurable: !0,
                enumerable: !0,
                value: disabledLog,
                writable: !0
            };
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (0 === disabledDepth) {
            var props = {
                configurable: !0,
                enumerable: !0,
                writable: !0
            };
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        }
        0 > disabledDepth && console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function describeBuiltInComponentFrame(name) {
        if (void 0 === prefix) try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
            suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
        return "\n" + prefix + name + suffix;
    }
    function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (void 0 !== frame) return frame;
        reentry = !0;
        frame = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher = null;
        previousDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = null;
        disableLogs();
        try {
            var RunInRootFrame = {
                DetermineComponentFrameRoot: function() {
                    try {
                        if (construct) {
                            var Fake = function() {
                                throw Error();
                            };
                            Object.defineProperty(Fake.prototype, "props", {
                                set: function() {
                                    throw Error();
                                }
                            });
                            if ("object" === typeof Reflect && Reflect.construct) {
                                try {
                                    Reflect.construct(Fake, []);
                                } catch (x) {
                                    var control = x;
                                }
                                Reflect.construct(fn, [], Fake);
                            } else {
                                try {
                                    Fake.call();
                                } catch (x$0) {
                                    control = x$0;
                                }
                                fn.call(Fake.prototype);
                            }
                        } else {
                            try {
                                throw Error();
                            } catch (x$1) {
                                control = x$1;
                            }
                            (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {});
                        }
                    } catch (sample) {
                        if (sample && control && "string" === typeof sample.stack) return [
                            sample.stack,
                            control.stack
                        ];
                    }
                    return [
                        null,
                        null
                    ];
                }
            };
            RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
            namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
                value: "DetermineComponentFrameRoot"
            });
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
                var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
                for(_RunInRootFrame$Deter = namePropDescriptor = 0; namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes("DetermineComponentFrameRoot");)namePropDescriptor++;
                for(; _RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes("DetermineComponentFrameRoot");)_RunInRootFrame$Deter++;
                if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length) for(namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter];)_RunInRootFrame$Deter--;
                for(; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                    if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
                        do if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                            var _frame = "\n" + sampleLines[namePropDescriptor].replace(" at new ", " at ");
                            fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                            "function" === typeof fn && componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                        while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
                    }
                    break;
                }
            }
        } finally{
            reentry = !1, ReactSharedInternals.H = previousDispatcher, reenableLogs(), Error.prepareStackTrace = frame;
        }
        sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
        "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
        return sampleLines;
    }
    function describeUnknownElementTypeFrameInDEV(type) {
        if (null == type) return "";
        if ("function" === typeof type) {
            var prototype = type.prototype;
            return describeNativeComponentFrame(type, !(!prototype || !prototype.isReactComponent));
        }
        if ("string" === typeof type) return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if ("object" === typeof type) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return type = describeNativeComponentFrame(type.render, !1), type;
            case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type);
            case REACT_LAZY_TYPE:
                prototype = type._payload;
                type = type._init;
                try {
                    return describeUnknownElementTypeFrameInDEV(type(prototype));
                } catch (x) {}
        }
        return "";
    }
    function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return !1;
        }
        return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
        }
        warnAboutAccessingKey.isReactWarning = !0;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
        });
    }
    function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = !0, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(type, key, self, source, owner, props) {
        self = props.ref;
        type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            props: props,
            _owner: owner
        };
        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", {
            enumerable: !1,
            value: null
        });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: null
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        newKey = ReactElement(oldElement.type, newKey, void 0, void 0, oldElement._owner, oldElement.props);
        newKey._store.validated = oldElement._store.validated;
        return newKey;
    }
    function validateChildKeys(node, parentType) {
        if ("object" === typeof node && node && node.$$typeof !== REACT_CLIENT_REFERENCE) {
            if (isArrayImpl(node)) for(var i = 0; i < node.length; i++){
                var child = node[i];
                isValidElement(child) && validateExplicitKey(child, parentType);
            }
            else if (isValidElement(node)) node._store && (node._store.validated = 1);
            else if (i = getIteratorFn(node), "function" === typeof i && i !== node.entries && (i = i.call(node), i !== node)) for(; !(node = i.next()).done;)isValidElement(node.value) && validateExplicitKey(node.value, parentType);
        }
    }
    function isValidElement(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function validateExplicitKey(element, parentType) {
        if (element._store && !element._store.validated && null == element.key && (element._store.validated = 1, parentType = getCurrentComponentErrorInfo(parentType), !ownerHasKeyUseWarning[parentType])) {
            ownerHasKeyUseWarning[parentType] = !0;
            var childOwner = "";
            element && null != element._owner && element._owner !== getOwner() && (childOwner = null, "number" === typeof element._owner.tag ? childOwner = getComponentNameFromType(element._owner.type) : "string" === typeof element._owner.name && (childOwner = element._owner.name), childOwner = " It was passed a child from " + childOwner + ".");
            var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;
            ReactSharedInternals.getCurrentStack = function() {
                var stack = describeUnknownElementTypeFrameInDEV(element.type);
                prevGetCurrentStack && (stack += prevGetCurrentStack() || "");
                return stack;
            };
            console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.', parentType, childOwner);
            ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
        }
    }
    function getCurrentComponentErrorInfo(parentType) {
        var info = "", owner = getOwner();
        owner && (owner = getComponentNameFromType(owner.type)) && (info = "\n\nCheck the render method of `" + owner + "`.");
        info || (parentType = getComponentNameFromType(parentType)) && (info = "\n\nCheck the top-level render call using <" + parentType + ">.");
        return info;
    }
    function escape(key) {
        var escaperLookup = {
            "=": "=0",
            ":": "=2"
        };
        return "$" + key.replace(/[=:]/g, function(match) {
            return escaperLookup[match];
        });
    }
    function getElementKey(element, index) {
        return "object" === typeof element && null !== element && null != element.key ? (checkKeyStringCoercion(element.key), escape("" + element.key)) : index.toString(36);
    }
    function noop$1() {}
    function resolveThenable(thenable) {
        switch(thenable.status){
            case "fulfilled":
                return thenable.value;
            case "rejected":
                throw thenable.reason;
            default:
                switch("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(function(fulfilledValue) {
                    "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
                }, function(error) {
                    "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
                })), thenable.status){
                    case "fulfilled":
                        return thenable.value;
                    case "rejected":
                        throw thenable.reason;
                }
        }
        throw thenable;
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if ("undefined" === type || "boolean" === type) children = null;
        var invokeCallback = !1;
        if (null === children) invokeCallback = !0;
        else switch(type){
            case "bigint":
            case "string":
            case "number":
                invokeCallback = !0;
                break;
            case "object":
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = !0;
                        break;
                    case REACT_LAZY_TYPE:
                        return invokeCallback = children._init, mapIntoArray(invokeCallback(children._payload), array, escapedPrefix, nameSoFar, callback);
                }
        }
        if (invokeCallback) {
            invokeCallback = children;
            callback = callback(invokeCallback);
            var childKey = "" === nameSoFar ? "." + getElementKey(invokeCallback, 0) : nameSoFar;
            isArrayImpl(callback) ? (escapedPrefix = "", null != childKey && (escapedPrefix = childKey.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
                return c;
            })) : null != callback && (isValidElement(callback) && (null != callback.key && (invokeCallback && invokeCallback.key === callback.key || checkKeyStringCoercion(callback.key)), escapedPrefix = cloneAndReplaceKey(callback, escapedPrefix + (null == callback.key || invokeCallback && invokeCallback.key === callback.key ? "" : ("" + callback.key).replace(userProvidedKeyEscapeRegex, "$&/") + "/") + childKey), "" !== nameSoFar && null != invokeCallback && isValidElement(invokeCallback) && null == invokeCallback.key && invokeCallback._store && !invokeCallback._store.validated && (escapedPrefix._store.validated = 2), callback = escapedPrefix), array.push(callback));
            return 1;
        }
        invokeCallback = 0;
        childKey = "" === nameSoFar ? "." : nameSoFar + ":";
        if (isArrayImpl(children)) for(var i = 0; i < children.length; i++)nameSoFar = children[i], type = childKey + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
        else if (i = getIteratorFn(children), "function" === typeof i) for(i === children.entries && (didWarnAboutMaps || console.warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0), children = i.call(children), i = 0; !(nameSoFar = children.next()).done;)nameSoFar = nameSoFar.value, type = childKey + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
        else if ("object" === type) {
            if ("function" === typeof children.then) return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);
            array = String(children);
            throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead.");
        }
        return invokeCallback;
    }
    function mapChildren(children, func, context) {
        if (null == children) return children;
        var result = [], count = 0;
        mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    function lazyInitializer(payload) {
        if (-1 === payload._status) {
            var ctor = payload._result;
            ctor = ctor();
            ctor.then(function(moduleObject) {
                if (0 === payload._status || -1 === payload._status) payload._status = 1, payload._result = moduleObject;
            }, function(error) {
                if (0 === payload._status || -1 === payload._status) payload._status = 2, payload._result = error;
            });
            -1 === payload._status && (payload._status = 0, payload._result = ctor);
        }
        if (1 === payload._status) return ctor = payload._result, void 0 === ctor && console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", ctor), "default" in ctor || console.error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", ctor), ctor.default;
        throw payload._result;
    }
    function resolveDispatcher() {
        var dispatcher = ReactSharedInternals.H;
        null === dispatcher && console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function noop() {}
    function enqueueTask(task) {
        if (null === enqueueTaskImpl) try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            enqueueTaskImpl = (module && module[requireString]).call(module, "timers").setImmediate;
        } catch (_err) {
            enqueueTaskImpl = function(callback) {
                !1 === didWarnAboutMessageChannel && (didWarnAboutMessageChannel = !0, "undefined" === typeof MessageChannel && console.error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
            };
        }
        return enqueueTaskImpl(task);
    }
    function aggregateErrors(errors) {
        return 1 < errors.length && "function" === typeof AggregateError ? new AggregateError(errors) : errors[0];
    }
    function popActScope(prevActQueue, prevActScopeDepth) {
        prevActScopeDepth !== actScopeDepth - 1 && console.error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
        actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactSharedInternals.actQueue;
        if (null !== queue) {
            if (0 !== queue.length) try {
                flushActQueue(queue);
                enqueueTask(function() {
                    return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                });
                return;
            } catch (error) {
                ReactSharedInternals.thrownErrors.push(error);
            }
            else ReactSharedInternals.actQueue = null;
        }
        0 < ReactSharedInternals.thrownErrors.length ? (queue = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(queue)) : resolve(returnValue);
    }
    function flushActQueue(queue) {
        if (!isFlushing) {
            isFlushing = !0;
            var i = 0;
            try {
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do {
                        ReactSharedInternals.didUsePromise = !1;
                        var continuation = callback(!1);
                        if (null !== continuation) {
                            if (ReactSharedInternals.didUsePromise) {
                                queue[i] = callback;
                                queue.splice(0, i);
                                return;
                            }
                            callback = continuation;
                        } else break;
                    }while (1);
                }
                queue.length = 0;
            } catch (error) {
                queue.splice(0, i + 1), ReactSharedInternals.thrownErrors.push(error);
            } finally{
                isFlushing = !1;
            }
        }
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, didWarnStateUpdateForUnmountedComponent = {}, ReactNoopUpdateQueue = {
        isMounted: function() {
            return !1;
        },
        enqueueForceUpdate: function(publicInstance) {
            warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance) {
            warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance) {
            warnNoop(publicInstance, "setState");
        }
    }, assign = Object.assign, emptyObject = {};
    Object.freeze(emptyObject);
    Component.prototype.isReactComponent = {};
    Component.prototype.setState = function(partialState, callback) {
        if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState) throw Error("takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    var deprecatedAPIs = {
        isMounted: [
            "isMounted",
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            "replaceState",
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    }, fnName;
    for(fnName in deprecatedAPIs)deprecatedAPIs.hasOwnProperty(fnName) && defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    ComponentDummy.prototype = Component.prototype;
    deprecatedAPIs = PureComponent.prototype = new ComponentDummy();
    deprecatedAPIs.constructor = PureComponent;
    assign(deprecatedAPIs, Component.prototype);
    deprecatedAPIs.isPureReactComponent = !0;
    var isArrayImpl = Array.isArray, REACT_CLIENT_REFERENCE$2 = Symbol.for("react.client.reference"), ReactSharedInternals = {
        H: null,
        A: null,
        T: null,
        S: null,
        actQueue: null,
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1,
        didUsePromise: !1,
        thrownErrors: [],
        getCurrentStack: null
    }, hasOwnProperty = Object.prototype.hasOwnProperty, REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference"), disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = !0;
    var prefix, suffix, reentry = !1;
    var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), specialPropKeyWarningShown, didWarnAboutOldJSXRuntime;
    var didWarnAboutElementRef = {};
    var ownerHasKeyUseWarning = {}, didWarnAboutMaps = !1, userProvidedKeyEscapeRegex = /\/+/g, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
            var event = new window.ErrorEvent("error", {
                bubbles: !0,
                cancelable: !0,
                message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
                error: error
            });
            if (!window.dispatchEvent(event)) return;
        } else if ("object" === typeof process && "function" === typeof process.emit) {
            process.emit("uncaughtException", error);
            return;
        }
        console.error(error);
    }, didWarnAboutMessageChannel = !1, enqueueTaskImpl = null, actScopeDepth = 0, didWarnNoAwaitAct = !1, isFlushing = !1, queueSeveralMicrotasks = "function" === typeof queueMicrotask ? function(callback) {
        queueMicrotask(function() {
            return queueMicrotask(callback);
        });
    } : enqueueTask;
    exports.Children = {
        map: mapChildren,
        forEach: function(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
                forEachFunc.apply(this, arguments);
            }, forEachContext);
        },
        count: function(children) {
            var n = 0;
            mapChildren(children, function() {
                n++;
            });
            return n;
        },
        toArray: function(children) {
            return mapChildren(children, function(child) {
                return child;
            }) || [];
        },
        only: function(children) {
            if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
            return children;
        }
    };
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
    exports.act = function(callback) {
        var prevActQueue = ReactSharedInternals.actQueue, prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        var queue = ReactSharedInternals.actQueue = null !== prevActQueue ? prevActQueue : [], didAwaitActCall = !1;
        try {
            var result = callback();
        } catch (error) {
            ReactSharedInternals.thrownErrors.push(error);
        }
        if (0 < ReactSharedInternals.thrownErrors.length) throw popActScope(prevActQueue, prevActScopeDepth), callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
        if (null !== result && "object" === typeof result && "function" === typeof result.then) {
            var thenable = result;
            queueSeveralMicrotasks(function() {
                didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = !0, console.error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"));
            });
            return {
                then: function(resolve, reject) {
                    didAwaitActCall = !0;
                    thenable.then(function(returnValue) {
                        popActScope(prevActQueue, prevActScopeDepth);
                        if (0 === prevActScopeDepth) {
                            try {
                                flushActQueue(queue), enqueueTask(function() {
                                    return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                                });
                            } catch (error$2) {
                                ReactSharedInternals.thrownErrors.push(error$2);
                            }
                            if (0 < ReactSharedInternals.thrownErrors.length) {
                                var _thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);
                                ReactSharedInternals.thrownErrors.length = 0;
                                reject(_thrownError);
                            }
                        } else resolve(returnValue);
                    }, function(error) {
                        popActScope(prevActQueue, prevActScopeDepth);
                        0 < ReactSharedInternals.thrownErrors.length ? (error = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, reject(error)) : reject(error);
                    });
                }
            };
        }
        var returnValue$jscomp$0 = result;
        popActScope(prevActQueue, prevActScopeDepth);
        0 === prevActScopeDepth && (flushActQueue(queue), 0 !== queue.length && queueSeveralMicrotasks(function() {
            didAwaitActCall || didWarnNoAwaitAct || (didWarnNoAwaitAct = !0, console.error("A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)"));
        }), ReactSharedInternals.actQueue = null);
        if (0 < ReactSharedInternals.thrownErrors.length) throw callback = aggregateErrors(ReactSharedInternals.thrownErrors), ReactSharedInternals.thrownErrors.length = 0, callback;
        return {
            then: function(resolve, reject) {
                didAwaitActCall = !0;
                0 === prevActScopeDepth ? (ReactSharedInternals.actQueue = queue, enqueueTask(function() {
                    return recursivelyFlushAsyncActWork(returnValue$jscomp$0, resolve, reject);
                })) : resolve(returnValue$jscomp$0);
            }
        };
    };
    exports.cache = function(fn) {
        return function() {
            return fn.apply(null, arguments);
        };
    };
    exports.cloneElement = function(element, config, children) {
        if (null === element || void 0 === element) throw Error("The argument must be a React element, but you passed " + element + ".");
        var props = assign({}, element.props), key = element.key, owner = element._owner;
        if (null != config) {
            var JSCompiler_inline_result;
            a: {
                if (hasOwnProperty.call(config, "ref") && (JSCompiler_inline_result = Object.getOwnPropertyDescriptor(config, "ref").get) && JSCompiler_inline_result.isReactWarning) {
                    JSCompiler_inline_result = !1;
                    break a;
                }
                JSCompiler_inline_result = void 0 !== config.ref;
            }
            JSCompiler_inline_result && (owner = getOwner());
            hasValidKey(config) && (checkKeyStringCoercion(config.key), key = "" + config.key);
            for(propName in config)!hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
        }
        var propName = arguments.length - 2;
        if (1 === propName) props.children = children;
        else if (1 < propName) {
            JSCompiler_inline_result = Array(propName);
            for(var i = 0; i < propName; i++)JSCompiler_inline_result[i] = arguments[i + 2];
            props.children = JSCompiler_inline_result;
        }
        props = ReactElement(element.type, key, void 0, void 0, owner, props);
        for(key = 2; key < arguments.length; key++)validateChildKeys(arguments[key], props.type);
        return props;
    };
    exports.createContext = function(defaultValue) {
        defaultValue = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
        };
        defaultValue.Provider = defaultValue;
        defaultValue.Consumer = {
            $$typeof: REACT_CONSUMER_TYPE,
            _context: defaultValue
        };
        defaultValue._currentRenderer = null;
        defaultValue._currentRenderer2 = null;
        return defaultValue;
    };
    exports.createElement = function(type, config, children) {
        if (isValidElementType(type)) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        else {
            i = "";
            if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length) i += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            if (null === type) var typeString = "null";
            else isArrayImpl(type) ? typeString = "array" : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE ? (typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", i = " Did you accidentally export a JSX literal instead of a component?") : typeString = typeof type;
            console.error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, i);
        }
        var propName;
        i = {};
        typeString = null;
        if (null != config) for(propName in didWarnAboutOldJSXRuntime || !("__self" in config) || "key" in config || (didWarnAboutOldJSXRuntime = !0, console.warn("Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform")), hasValidKey(config) && (checkKeyStringCoercion(config.key), typeString = "" + config.key), config)hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (i[propName] = config[propName]);
        var childrenLength = arguments.length - 2;
        if (1 === childrenLength) i.children = children;
        else if (1 < childrenLength) {
            for(var childArray = Array(childrenLength), _i = 0; _i < childrenLength; _i++)childArray[_i] = arguments[_i + 2];
            Object.freeze && Object.freeze(childArray);
            i.children = childArray;
        }
        if (type && type.defaultProps) for(propName in childrenLength = type.defaultProps, childrenLength)void 0 === i[propName] && (i[propName] = childrenLength[propName]);
        typeString && defineKeyPropWarningGetter(i, "function" === typeof type ? type.displayName || type.name || "Unknown" : type);
        return ReactElement(type, typeString, void 0, void 0, getOwner(), i);
    };
    exports.createRef = function() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    };
    exports.forwardRef = function(render) {
        null != render && render.$$typeof === REACT_MEMO_TYPE ? console.error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : "function" !== typeof render ? console.error("forwardRef requires a render function but was given %s.", null === render ? "null" : typeof render) : 0 !== render.length && 2 !== render.length && console.error("forwardRef render functions accept exactly two parameters: props and ref. %s", 1 === render.length ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
        null != render && null != render.defaultProps && console.error("forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?");
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        }, ownName;
        Object.defineProperty(elementType, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                render.name || render.displayName || (Object.defineProperty(render, "name", {
                    value: name
                }), render.displayName = name);
            }
        });
        return elementType;
    };
    exports.isValidElement = isValidElement;
    exports.lazy = function(ctor) {
        return {
            $$typeof: REACT_LAZY_TYPE,
            _payload: {
                _status: -1,
                _result: ctor
            },
            _init: lazyInitializer
        };
    };
    exports.memo = function(type, compare) {
        isValidElementType(type) || console.error("memo: The first argument must be a component. Instead received: %s", null === type ? "null" : typeof type);
        compare = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: void 0 === compare ? null : compare
        };
        var ownName;
        Object.defineProperty(compare, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                type.name || type.displayName || (Object.defineProperty(type, "name", {
                    value: name
                }), type.displayName = name);
            }
        });
        return compare;
    };
    exports.startTransition = function(scope) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        currentTransition._updatedFibers = new Set();
        try {
            var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop, reportGlobalError);
        } catch (error) {
            reportGlobalError(error);
        } finally{
            null === prevTransition && currentTransition._updatedFibers && (scope = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < scope && console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.")), ReactSharedInternals.T = prevTransition;
        }
    };
    exports.unstable_useCacheRefresh = function() {
        return resolveDispatcher().useCacheRefresh();
    };
    exports.use = function(usable) {
        return resolveDispatcher().use(usable);
    };
    exports.useActionState = function(action, initialState, permalink) {
        return resolveDispatcher().useActionState(action, initialState, permalink);
    };
    exports.useCallback = function(callback, deps) {
        return resolveDispatcher().useCallback(callback, deps);
    };
    exports.useContext = function(Context) {
        var dispatcher = resolveDispatcher();
        Context.$$typeof === REACT_CONSUMER_TYPE && console.error("Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?");
        return dispatcher.useContext(Context);
    };
    exports.useDebugValue = function(value, formatterFn) {
        return resolveDispatcher().useDebugValue(value, formatterFn);
    };
    exports.useDeferredValue = function(value, initialValue) {
        return resolveDispatcher().useDeferredValue(value, initialValue);
    };
    exports.useEffect = function(create, deps) {
        return resolveDispatcher().useEffect(create, deps);
    };
    exports.useId = function() {
        return resolveDispatcher().useId();
    };
    exports.useImperativeHandle = function(ref, create, deps) {
        return resolveDispatcher().useImperativeHandle(ref, create, deps);
    };
    exports.useInsertionEffect = function(create, deps) {
        return resolveDispatcher().useInsertionEffect(create, deps);
    };
    exports.useLayoutEffect = function(create, deps) {
        return resolveDispatcher().useLayoutEffect(create, deps);
    };
    exports.useMemo = function(create, deps) {
        return resolveDispatcher().useMemo(create, deps);
    };
    exports.useOptimistic = function(passthrough, reducer) {
        return resolveDispatcher().useOptimistic(passthrough, reducer);
    };
    exports.useReducer = function(reducer, initialArg, init) {
        return resolveDispatcher().useReducer(reducer, initialArg, init);
    };
    exports.useRef = function(initialValue) {
        return resolveDispatcher().useRef(initialValue);
    };
    exports.useState = function(initialState) {
        return resolveDispatcher().useState(initialState);
    };
    exports.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
        return resolveDispatcher().useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    };
    exports.useTransition = function() {
        return resolveDispatcher().useTransition();
    };
    exports.version = "19.0.0";
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
})();

},{"9ffea7b9cafb49c3":"d5jf4"}],"lOjBx":[function(require,module,exports,__globalThis) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require("2b53550ce04dc092");

},{"2b53550ce04dc092":"dztFz"}],"dztFz":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * react-dom-client.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/ var process = require("4a48913baa1a8f0");
"use strict";
(function() {
    function findHook(fiber, id) {
        for(fiber = fiber.memoizedState; null !== fiber && 0 < id;)fiber = fiber.next, id--;
        return fiber;
    }
    function copyWithSetImpl(obj, path, index, value) {
        if (index >= path.length) return value;
        var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
    }
    function copyWithRename(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) console.warn("copyWithRename() expects paths of the same length");
        else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                console.warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
        }
    }
    function copyWithRenameImpl(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
        index + 1 === oldPath.length ? (updated[newPath[index]] = updated[oldKey], isArrayImpl(updated) ? updated.splice(oldKey, 1) : delete updated[oldKey]) : updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
        return updated;
    }
    function copyWithDeleteImpl(obj, path, index) {
        var key = path[index], updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === path.length) return isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key], updated;
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
    }
    function shouldSuspendImpl() {
        return !1;
    }
    function shouldErrorImpl() {
        return null;
    }
    function createFiber(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
    }
    function warnInvalidHookAccess() {
        console.error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks");
    }
    function warnInvalidContextAccess() {
        console.error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    }
    function noop$2() {}
    function warnForMissingKey() {}
    function setToSortedString(set) {
        var array = [];
        set.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(", ");
    }
    function scheduleRoot(root, element) {
        root.context === emptyContextObject && (updateContainerSync(element, root, null, null), flushSyncWork$1());
    }
    function scheduleRefresh(root, update) {
        if (null !== resolveFamily) {
            var staleFamilies = update.staleFamilies;
            update = update.updatedFamilies;
            flushPassiveEffects();
            scheduleFibersWithFamiliesRecursively(root.current, update, staleFamilies);
            flushSyncWork$1();
        }
    }
    function setRefreshHandler(handler) {
        resolveFamily = handler;
    }
    function isValidContainer(node) {
        return !(!node || 1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType);
    }
    function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
    }
    function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if ("object" === typeof type) switch("number" === typeof type.tag && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof){
            case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
            case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                    return getComponentNameFromType(type(innerType));
                } catch (x) {}
        }
        return null;
    }
    function getComponentNameFromOwner(owner) {
        return "number" === typeof owner.tag ? getComponentNameFromFiber(owner) : "string" === typeof owner.name ? owner.name : null;
    }
    function getComponentNameFromFiber(fiber) {
        var type = fiber.type;
        switch(fiber.tag){
            case 24:
                return "Cache";
            case 9:
                return (type._context.displayName || "Context") + ".Consumer";
            case 10:
                return (type.displayName || "Context") + ".Provider";
            case 18:
                return "DehydratedFragment";
            case 11:
                return fiber = type.render, fiber = fiber.displayName || fiber.name || "", type.displayName || ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef");
            case 7:
                return "Fragment";
            case 26:
            case 27:
            case 5:
                return type;
            case 4:
                return "Portal";
            case 3:
                return "Root";
            case 6:
                return "Text";
            case 16:
                return getComponentNameFromType(type);
            case 8:
                return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
            case 22:
                return "Offscreen";
            case 12:
                return "Profiler";
            case 21:
                return "Scope";
            case 13:
                return "Suspense";
            case 19:
                return "SuspenseList";
            case 25:
                return "TracingMarker";
            case 1:
            case 0:
            case 14:
            case 15:
                if ("function" === typeof type) return type.displayName || type.name || null;
                if ("string" === typeof type) return type;
                break;
            case 29:
                type = fiber._debugInfo;
                if (null != type) {
                    for(var i = type.length - 1; 0 <= i; i--)if ("string" === typeof type[i].name) return type[i].name;
                }
                if (null !== fiber.return) return getComponentNameFromFiber(fiber.return);
        }
        return null;
    }
    function disabledLog() {}
    function disableLogs() {
        if (0 === disabledDepth) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
                configurable: !0,
                enumerable: !0,
                value: disabledLog,
                writable: !0
            };
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (0 === disabledDepth) {
            var props = {
                configurable: !0,
                enumerable: !0,
                writable: !0
            };
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        }
        0 > disabledDepth && console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function describeBuiltInComponentFrame(name) {
        if (void 0 === prefix) try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
            suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
        return "\n" + prefix + name + suffix;
    }
    function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (void 0 !== frame) return frame;
        reentry = !0;
        frame = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher = null;
        previousDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = null;
        disableLogs();
        try {
            var RunInRootFrame = {
                DetermineComponentFrameRoot: function() {
                    try {
                        if (construct) {
                            var Fake = function() {
                                throw Error();
                            };
                            Object.defineProperty(Fake.prototype, "props", {
                                set: function() {
                                    throw Error();
                                }
                            });
                            if ("object" === typeof Reflect && Reflect.construct) {
                                try {
                                    Reflect.construct(Fake, []);
                                } catch (x) {
                                    var control = x;
                                }
                                Reflect.construct(fn, [], Fake);
                            } else {
                                try {
                                    Fake.call();
                                } catch (x$0) {
                                    control = x$0;
                                }
                                fn.call(Fake.prototype);
                            }
                        } else {
                            try {
                                throw Error();
                            } catch (x$1) {
                                control = x$1;
                            }
                            (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {});
                        }
                    } catch (sample) {
                        if (sample && control && "string" === typeof sample.stack) return [
                            sample.stack,
                            control.stack
                        ];
                    }
                    return [
                        null,
                        null
                    ];
                }
            };
            RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
            namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
                value: "DetermineComponentFrameRoot"
            });
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
                var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
                for(_RunInRootFrame$Deter = namePropDescriptor = 0; namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes("DetermineComponentFrameRoot");)namePropDescriptor++;
                for(; _RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes("DetermineComponentFrameRoot");)_RunInRootFrame$Deter++;
                if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length) for(namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter];)_RunInRootFrame$Deter--;
                for(; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                    if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
                        do if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                            var _frame = "\n" + sampleLines[namePropDescriptor].replace(" at new ", " at ");
                            fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                            "function" === typeof fn && componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                        while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
                    }
                    break;
                }
            }
        } finally{
            reentry = !1, ReactSharedInternals.H = previousDispatcher, reenableLogs(), Error.prepareStackTrace = frame;
        }
        sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
        "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
        return sampleLines;
    }
    function describeFiber(fiber) {
        switch(fiber.tag){
            case 26:
            case 27:
            case 5:
                return describeBuiltInComponentFrame(fiber.type);
            case 16:
                return describeBuiltInComponentFrame("Lazy");
            case 13:
                return describeBuiltInComponentFrame("Suspense");
            case 19:
                return describeBuiltInComponentFrame("SuspenseList");
            case 0:
            case 15:
                return fiber = describeNativeComponentFrame(fiber.type, !1), fiber;
            case 11:
                return fiber = describeNativeComponentFrame(fiber.type.render, !1), fiber;
            case 1:
                return fiber = describeNativeComponentFrame(fiber.type, !0), fiber;
            default:
                return "";
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = "";
            do {
                info += describeFiber(workInProgress);
                var debugInfo = workInProgress._debugInfo;
                if (debugInfo) for(var i = debugInfo.length - 1; 0 <= i; i--){
                    var entry = debugInfo[i];
                    if ("string" === typeof entry.name) {
                        var JSCompiler_temp_const = info, env = entry.env;
                        var JSCompiler_inline_result = describeBuiltInComponentFrame(entry.name + (env ? " [" + env + "]" : ""));
                        info = JSCompiler_temp_const + JSCompiler_inline_result;
                    }
                }
                workInProgress = workInProgress.return;
            }while (workInProgress);
            return info;
        } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
    }
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (null === current) return null;
        var owner = current._debugOwner;
        return null != owner ? getComponentNameFromOwner(owner) : null;
    }
    function getCurrentFiberStackInDev() {
        return null === current ? "" : getStackByFiberInDevAndProd(current);
    }
    function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {
        var previousFiber = current;
        ReactSharedInternals.getCurrentStack = null === fiber ? null : getCurrentFiberStackInDev;
        isRendering = !1;
        current = fiber;
        try {
            return callback(arg0, arg1, arg2, arg3, arg4);
        } finally{
            current = previousFiber;
        }
        throw Error("runWithFiberInDEV should never be called in production. This is a bug in React.");
    }
    function getNearestMountedFiber(fiber) {
        var node = fiber, nearestMounted = fiber;
        if (fiber.alternate) for(; node.return;)node = node.return;
        else {
            fiber = node;
            do node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
            while (fiber);
        }
        return 3 === node.tag ? nearestMounted : null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (13 === fiber.tag) {
            var suspenseState = fiber.memoizedState;
            null === suspenseState && (fiber = fiber.alternate, null !== fiber && (suspenseState = fiber.memoizedState));
            if (null !== suspenseState) return suspenseState.dehydrated;
        }
        return null;
    }
    function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            alternate = getNearestMountedFiber(fiber);
            if (null === alternate) throw Error("Unable to find node on an unmounted component.");
            return alternate !== fiber ? null : fiber;
        }
        for(var a = fiber, b = alternate;;){
            var parentA = a.return;
            if (null === parentA) break;
            var parentB = parentA.alternate;
            if (null === parentB) {
                b = parentA.return;
                if (null !== b) {
                    a = b;
                    continue;
                }
                break;
            }
            if (parentA.child === parentB.child) {
                for(parentB = parentA.child; parentB;){
                    if (parentB === a) return assertIsMounted(parentA), fiber;
                    if (parentB === b) return assertIsMounted(parentA), alternate;
                    parentB = parentB.sibling;
                }
                throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) a = parentA, b = parentB;
            else {
                for(var didFindChild = !1, _child = parentA.child; _child;){
                    if (_child === a) {
                        didFindChild = !0;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = !0;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    for(_child = parentB.child; _child;){
                        if (_child === a) {
                            didFindChild = !0;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = !0;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (a.alternate !== b) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (3 !== a.tag) throw Error("Unable to find node on an unmounted component.");
        return a.stateNode.current === a ? fiber : alternate;
    }
    function findCurrentHostFiberImpl(node) {
        var tag = node.tag;
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
        for(node = node.child; null !== node;){
            tag = findCurrentHostFiberImpl(node);
            if (null !== tag) return tag;
            node = node.sibling;
        }
        return null;
    }
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        0 > index$jscomp$0 ? console.error("Unexpected pop.") : (fiber !== fiberStack[index$jscomp$0] && console.error("Unexpected Fiber popped."), cursor.current = valueStack[index$jscomp$0], valueStack[index$jscomp$0] = null, fiberStack[index$jscomp$0] = null, index$jscomp$0--);
    }
    function push(cursor, value, fiber) {
        index$jscomp$0++;
        valueStack[index$jscomp$0] = cursor.current;
        fiberStack[index$jscomp$0] = fiber;
        cursor.current = value;
    }
    function requiredContext(c) {
        null === c && console.error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor, null, fiber);
        var nextRootContext = nextRootInstance.nodeType;
        switch(nextRootContext){
            case 9:
            case 11:
                nextRootContext = 9 === nextRootContext ? "#document" : "#fragment";
                nextRootInstance = (nextRootInstance = nextRootInstance.documentElement) ? (nextRootInstance = nextRootInstance.namespaceURI) ? getOwnHostContext(nextRootInstance) : HostContextNamespaceNone : HostContextNamespaceNone;
                break;
            default:
                if (nextRootInstance = 8 === nextRootContext ? nextRootInstance.parentNode : nextRootInstance, nextRootContext = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI) nextRootInstance = getOwnHostContext(nextRootInstance), nextRootInstance = getChildHostContextProd(nextRootInstance, nextRootContext);
                else switch(nextRootContext){
                    case "svg":
                        nextRootInstance = HostContextNamespaceSvg;
                        break;
                    case "math":
                        nextRootInstance = HostContextNamespaceMath;
                        break;
                    default:
                        nextRootInstance = HostContextNamespaceNone;
                }
        }
        nextRootContext = nextRootContext.toLowerCase();
        nextRootContext = updatedAncestorInfoDev(null, nextRootContext);
        nextRootContext = {
            context: nextRootInstance,
            ancestorInfo: nextRootContext
        };
        pop(contextStackCursor, fiber);
        push(contextStackCursor, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        return requiredContext(contextStackCursor.current);
    }
    function pushHostContext(fiber) {
        null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber, fiber);
        var context = requiredContext(contextStackCursor.current);
        var type = fiber.type;
        var nextContext = getChildHostContextProd(context.context, type);
        type = updatedAncestorInfoDev(context.ancestorInfo, type);
        nextContext = {
            context: nextContext,
            ancestorInfo: type
        };
        context !== nextContext && (push(contextFiberStackCursor, fiber, fiber), push(contextStackCursor, nextContext, fiber));
    }
    function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
        hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor, fiber), HostTransitionContext._currentValue = NotPendingTransition);
    }
    function typeName(value) {
        return "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
    }
    function willCoercionThrow(value) {
        try {
            return testStringCoercion(value), !1;
        } catch (e) {
            return !0;
        }
    }
    function testStringCoercion(value) {
        return "" + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value)) return console.error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.", attributeName, typeName(value)), testStringCoercion(value);
    }
    function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value)) return console.error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.", propName, typeName(value)), testStringCoercion(value);
    }
    function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value)) return console.error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before using it here.", typeName(value)), testStringCoercion(value);
    }
    function injectInternals(internals) {
        if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) return !0;
        if (!hook.supportsFiber) return console.error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"), !0;
        try {
            rendererID = hook.inject(internals), injectedHook = hook;
        } catch (err) {
            console.error("React instrumentation encountered an error: %s.", err);
        }
        return hook.checkDCE ? !0 : !1;
    }
    function onCommitRoot$1(root, eventPriority) {
        if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot) try {
            var didError = 128 === (root.current.flags & 128);
            switch(eventPriority){
                case DiscreteEventPriority:
                    var schedulerPriority = ImmediatePriority;
                    break;
                case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                case DefaultEventPriority:
                    schedulerPriority = NormalPriority$1;
                    break;
                case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                default:
                    schedulerPriority = NormalPriority$1;
            }
            injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
        } catch (err) {
            hasLoggedError || (hasLoggedError = !0, console.error("React instrumentation encountered an error: %s", err));
        }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
        "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
        if (injectedHook && "function" === typeof injectedHook.setStrictMode) try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
            hasLoggedError || (hasLoggedError = !0, console.error("React instrumentation encountered an error: %s", err));
        }
    }
    function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
    }
    function markCommitStopped() {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStopped && injectedProfilingHooks.markCommitStopped();
    }
    function markComponentRenderStarted(fiber) {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStarted && injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
    function markComponentRenderStopped() {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentRenderStopped && injectedProfilingHooks.markComponentRenderStopped();
    }
    function markRenderStarted(lanes) {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStarted && injectedProfilingHooks.markRenderStarted(lanes);
    }
    function markRenderStopped() {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderStopped && injectedProfilingHooks.markRenderStopped();
    }
    function markStateUpdateScheduled(fiber, lane) {
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markStateUpdateScheduled && injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
    function clz32Fallback(x) {
        x >>>= 0;
        return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
    }
    function getLabelForLane(lane) {
        if (lane & 1) return "SyncHydrationLane";
        if (lane & 2) return "Sync";
        if (lane & 4) return "InputContinuousHydration";
        if (lane & 8) return "InputContinuous";
        if (lane & 16) return "DefaultHydration";
        if (lane & 32) return "Default";
        if (lane & 64) return "TransitionHydration";
        if (lane & 4194176) return "Transition";
        if (lane & 62914560) return "Retry";
        if (lane & 67108864) return "SelectiveHydration";
        if (lane & 134217728) return "IdleHydration";
        if (lane & 268435456) return "Idle";
        if (lane & 536870912) return "Offscreen";
        if (lane & 1073741824) return "Deferred";
    }
    function getHighestPriorityLanes(lanes) {
        var pendingSyncLanes = lanes & 42;
        if (0 !== pendingSyncLanes) return pendingSyncLanes;
        switch(lanes & -lanes){
            case 1:
                return 1;
            case 2:
                return 2;
            case 4:
                return 4;
            case 8:
                return 8;
            case 16:
                return 16;
            case 32:
                return 32;
            case 64:
                return 64;
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
                return lanes & 4194176;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
                return lanes & 62914560;
            case 67108864:
                return 67108864;
            case 134217728:
                return 134217728;
            case 268435456:
                return 268435456;
            case 536870912:
                return 536870912;
            case 1073741824:
                return 0;
            default:
                return console.error("Should have found matching lanes. This is a bug in React."), lanes;
        }
    }
    function getNextLanes(root, wipLanes) {
        var pendingLanes = root.pendingLanes;
        if (0 === pendingLanes) return 0;
        var nextLanes = 0, suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, warmLanes = root.warmLanes;
        root = 0 !== root.finishedLanes;
        var nonIdlePendingLanes = pendingLanes & 134217727;
        0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = nonIdlePendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : root || (warmLanes = pendingLanes & ~warmLanes, 0 !== warmLanes && (nextLanes = getHighestPriorityLanes(warmLanes))));
        return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, warmLanes = wipLanes & -wipLanes, suspendedLanes >= warmLanes || 32 === suspendedLanes && 0 !== (warmLanes & 4194176)) ? wipLanes : nextLanes;
    }
    function checkIfRootIsPrerendering(root, renderLanes) {
        return 0 === (root.pendingLanes & ~(root.suspendedLanes & ~root.pingedLanes) & renderLanes);
    }
    function computeExpirationTime(lane, currentTime) {
        switch(lane){
            case 1:
            case 2:
            case 4:
            case 8:
                return currentTime + 250;
            case 16:
            case 32:
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
                return currentTime + 5e3;
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
                return -1;
            case 67108864:
            case 134217728:
            case 268435456:
            case 536870912:
            case 1073741824:
                return -1;
            default:
                return console.error("Should have found matching lanes. This is a bug in React."), -1;
        }
    }
    function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
        return lane;
    }
    function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
        return lane;
    }
    function createLaneMap(initial) {
        for(var laneMap = [], i = 0; 31 > i; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated$1(root, updateLane) {
        root.pendingLanes |= updateLane;
        268435456 !== updateLane && (root.suspendedLanes = 0, root.pingedLanes = 0, root.warmLanes = 0);
    }
    function markRootFinished(root, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
        var previouslyPendingLanes = root.pendingLanes;
        root.pendingLanes = remainingLanes;
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.warmLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        root.errorRecoveryDisabledLanes &= remainingLanes;
        root.shellSuspendCounter = 0;
        var entanglements = root.entanglements, expirationTimes = root.expirationTimes, hiddenUpdates = root.hiddenUpdates;
        for(remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes;){
            var index = 31 - clz32(remainingLanes), lane = 1 << index;
            entanglements[index] = 0;
            expirationTimes[index] = -1;
            var hiddenUpdatesForLane = hiddenUpdates[index];
            if (null !== hiddenUpdatesForLane) for(hiddenUpdates[index] = null, index = 0; index < hiddenUpdatesForLane.length; index++){
                var update = hiddenUpdatesForLane[index];
                null !== update && (update.lane &= -536870913);
            }
            remainingLanes &= ~lane;
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
        0 !== suspendedRetryLanes && 0 === updatedLanes && 0 !== root.tag && (root.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
    }
    function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
        root.pendingLanes |= spawnedLane;
        root.suspendedLanes &= ~spawnedLane;
        var spawnedLaneIndex = 31 - clz32(spawnedLane);
        root.entangledLanes |= spawnedLane;
        root.entanglements[spawnedLaneIndex] = root.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194218;
    }
    function markRootEntangled(root, entangledLanes) {
        var rootEntangledLanes = root.entangledLanes |= entangledLanes;
        for(root = root.entanglements; rootEntangledLanes;){
            var index = 31 - clz32(rootEntangledLanes), lane = 1 << index;
            lane & entangledLanes | root[index] & entangledLanes && (root[index] |= entangledLanes);
            rootEntangledLanes &= ~lane;
        }
    }
    function addFiberToLanesMap(root, fiber, lanes) {
        if (isDevToolsPresent) for(root = root.pendingUpdatersLaneMap; 0 < lanes;){
            var index = 31 - clz32(lanes), lane = 1 << index;
            root[index].add(fiber);
            lanes &= ~lane;
        }
    }
    function movePendingFibersToMemoized(root, lanes) {
        if (isDevToolsPresent) for(var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap, memoizedUpdaters = root.memoizedUpdaters; 0 < lanes;){
            var index = 31 - clz32(lanes);
            root = 1 << index;
            index = pendingUpdatersLaneMap[index];
            0 < index.size && (index.forEach(function(fiber) {
                var alternate = fiber.alternate;
                null !== alternate && memoizedUpdaters.has(alternate) || memoizedUpdaters.add(fiber);
            }), index.clear());
            lanes &= ~root;
        }
    }
    function lanesToEventPriority(lanes) {
        lanes &= -lanes;
        return 0 !== DiscreteEventPriority && DiscreteEventPriority < lanes ? 0 !== ContinuousEventPriority && ContinuousEventPriority < lanes ? 0 !== (lanes & 134217727) ? DefaultEventPriority : IdleEventPriority : ContinuousEventPriority : DiscreteEventPriority;
    }
    function resolveUpdatePriority() {
        var updatePriority = ReactDOMSharedInternals.p;
        if (0 !== updatePriority) return updatePriority;
        updatePriority = window.event;
        return void 0 === updatePriority ? DefaultEventPriority : getEventPriority(updatePriority.type);
    }
    function runWithPriority(priority, fn) {
        var previousPriority = ReactDOMSharedInternals.p;
        try {
            return ReactDOMSharedInternals.p = priority, fn();
        } finally{
            ReactDOMSharedInternals.p = previousPriority;
        }
    }
    function detachDeletedInstance(node) {
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
    }
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) return targetInst;
        for(var parentNode = targetNode.parentNode; parentNode;){
            if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
                parentNode = targetInst.alternate;
                if (null !== targetInst.child || null !== parentNode && null !== parentNode.child) for(targetNode = getParentSuspenseInstance(targetNode); null !== targetNode;){
                    if (parentNode = targetNode[internalInstanceKey]) return parentNode;
                    targetNode = getParentSuspenseInstance(targetNode);
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    function getInstanceFromNode(node) {
        if (node = node[internalInstanceKey] || node[internalContainerInstanceKey]) {
            var tag = node.tag;
            if (5 === tag || 6 === tag || 13 === tag || 26 === tag || 27 === tag || 3 === tag) return node;
        }
        return null;
    }
    function getNodeFromInstance(inst) {
        var tag = inst.tag;
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return inst.stateNode;
        throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getResourcesFromRoot(root) {
        var resources = root[internalRootNodeResourcesKey];
        resources || (resources = root[internalRootNodeResourcesKey] = {
            hoistableStyles: new Map(),
            hoistableScripts: new Map()
        });
        return resources;
    }
    function markNodeAsHoistable(node) {
        node[internalHoistableMarker] = !0;
    }
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        registrationNameDependencies[registrationName] && console.error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        "onDoubleClick" === registrationName && (possibleRegistrationNames.ondblclick = registrationName);
        for(registrationName = 0; registrationName < dependencies.length; registrationName++)allNativeEvents.add(dependencies[registrationName]);
    }
    function checkControlledValueProps(tagName, props) {
        hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || null == props.value || ("select" === tagName ? console.error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`.") : console.error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."));
        props.onChange || props.readOnly || props.disabled || null == props.checked || console.error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return !0;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return !1;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) return validatedAttributeNameCache[attributeName] = !0;
        illegalAttributeNameCache[attributeName] = !0;
        console.error("Invalid attribute name: `%s`", attributeName);
        return !1;
    }
    function getValueForAttributeOnCustomComponent(node, name, expected) {
        if (isAttributeNameSafe(name)) {
            if (!node.hasAttribute(name)) {
                switch(typeof expected){
                    case "symbol":
                    case "object":
                        return expected;
                    case "function":
                        return expected;
                    case "boolean":
                        if (!1 === expected) return expected;
                }
                return void 0 === expected ? void 0 : null;
            }
            node = node.getAttribute(name);
            if ("" === node && !0 === expected) return !0;
            checkAttributeStringCoercion(expected, name);
            return node === "" + expected ? expected : node;
        }
    }
    function setValueForAttribute(node, name, value) {
        if (isAttributeNameSafe(name)) {
            if (null === value) node.removeAttribute(name);
            else {
                switch(typeof value){
                    case "undefined":
                    case "function":
                    case "symbol":
                        node.removeAttribute(name);
                        return;
                    case "boolean":
                        var prefix = name.toLowerCase().slice(0, 5);
                        if ("data-" !== prefix && "aria-" !== prefix) {
                            node.removeAttribute(name);
                            return;
                        }
                }
                checkAttributeStringCoercion(value, name);
                node.setAttribute(name, "" + value);
            }
        }
    }
    function setValueForKnownAttribute(node, name, value) {
        if (null === value) node.removeAttribute(name);
        else {
            switch(typeof value){
                case "undefined":
                case "function":
                case "symbol":
                case "boolean":
                    node.removeAttribute(name);
                    return;
            }
            checkAttributeStringCoercion(value, name);
            node.setAttribute(name, "" + value);
        }
    }
    function setValueForNamespacedAttribute(node, namespace, name, value) {
        if (null === value) node.removeAttribute(name);
        else {
            switch(typeof value){
                case "undefined":
                case "function":
                case "symbol":
                case "boolean":
                    node.removeAttribute(name);
                    return;
            }
            checkAttributeStringCoercion(value, name);
            node.setAttributeNS(namespace, name, "" + value);
        }
    }
    function getToStringValue(value) {
        switch(typeof value){
            case "bigint":
            case "boolean":
            case "number":
            case "string":
            case "undefined":
                return value;
            case "object":
                return checkFormFieldValueStringCoercion(value), value;
            default:
                return "";
        }
    }
    function isCheckable(elem) {
        var type = elem.type;
        return (elem = elem.nodeName) && "input" === elem.toLowerCase() && ("checkbox" === type || "radio" === type);
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = "" + node[valueField];
        if (!node.hasOwnProperty(valueField) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
            var get = descriptor.get, set = descriptor.set;
            Object.defineProperty(node, valueField, {
                configurable: !0,
                get: function() {
                    return get.call(this);
                },
                set: function(value) {
                    checkFormFieldValueStringCoercion(value);
                    currentValue = "" + value;
                    set.call(this, value);
                }
            });
            Object.defineProperty(node, valueField, {
                enumerable: descriptor.enumerable
            });
            return {
                getValue: function() {
                    return currentValue;
                },
                setValue: function(value) {
                    checkFormFieldValueStringCoercion(value);
                    currentValue = "" + value;
                },
                stopTracking: function() {
                    node._valueTracker = null;
                    delete node[valueField];
                }
            };
        }
    }
    function track(node) {
        node._valueTracker || (node._valueTracker = trackValueOnNode(node));
    }
    function updateValueIfChanged(node) {
        if (!node) return !1;
        var tracker = node._valueTracker;
        if (!tracker) return !0;
        var lastValue = tracker.getValue();
        var value = "";
        node && (value = isCheckable(node) ? node.checked ? "true" : "false" : node.value);
        node = value;
        return node !== lastValue ? (tracker.setValue(node), !0) : !1;
    }
    function getActiveElement(doc) {
        doc = doc || ("undefined" !== typeof document ? document : void 0);
        if ("undefined" === typeof doc) return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
        return value.replace(escapeSelectorAttributeValueInsideDoubleQuotesRegex, function(ch) {
            return "\\" + ch.charCodeAt(0).toString(16) + " ";
        });
    }
    function validateInputProps(element, props) {
        void 0 === props.checked || void 0 === props.defaultChecked || didWarnCheckedDefaultChecked || (console.error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnCheckedDefaultChecked = !0);
        void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue$1 || (console.error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type), didWarnValueDefaultValue$1 = !0);
    }
    function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
        element.name = "";
        null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type ? (checkAttributeStringCoercion(type, "type"), element.type = type) : element.removeAttribute("type");
        if (null != value) {
            if ("number" === type) {
                if (0 === value && "" === element.value || element.value != value) element.value = "" + getToStringValue(value);
            } else element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
        } else "submit" !== type && "reset" !== type || element.removeAttribute("value");
        null != value ? setDefaultValue(element, type, getToStringValue(value)) : null != defaultValue ? setDefaultValue(element, type, getToStringValue(defaultValue)) : null != lastDefaultValue && element.removeAttribute("value");
        null == checked && null != defaultChecked && (element.defaultChecked = !!defaultChecked);
        null != checked && (element.checked = checked && "function" !== typeof checked && "symbol" !== typeof checked);
        null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name ? (checkAttributeStringCoercion(name, "name"), element.name = "" + getToStringValue(name)) : element.removeAttribute("name");
    }
    function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating) {
        null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type && (checkAttributeStringCoercion(type, "type"), element.type = type);
        if (null != value || null != defaultValue) {
            if (!("submit" !== type && "reset" !== type || void 0 !== value && null !== value)) return;
            defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
            value = null != value ? "" + getToStringValue(value) : defaultValue;
            isHydrating || value === element.value || (element.value = value);
            element.defaultValue = value;
        }
        checked = null != checked ? checked : defaultChecked;
        checked = "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
        element.checked = isHydrating ? element.checked : !!checked;
        element.defaultChecked = !!checked;
        null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name && (checkAttributeStringCoercion(name, "name"), element.name = name);
    }
    function setDefaultValue(node, type, value) {
        "number" === type && getActiveElement(node.ownerDocument) === node || node.defaultValue === "" + value || (node.defaultValue = "" + value);
    }
    function validateOptionProps(element, props) {
        null == props.value && ("object" === typeof props.children && null !== props.children ? React.Children.forEach(props.children, function(child) {
            null == child || "string" === typeof child || "number" === typeof child || "bigint" === typeof child || didWarnInvalidChild || (didWarnInvalidChild = !0, console.error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>."));
        }) : null == props.dangerouslySetInnerHTML || didWarnInvalidInnerHTML || (didWarnInvalidInnerHTML = !0, console.error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")));
        null == props.selected || didWarnSelectedSetOnOption || (console.error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."), didWarnSelectedSetOnOption = !0);
    }
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        return ownerName ? "\n\nCheck the render method of `" + ownerName + "`." : "";
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        node = node.options;
        if (multiple) {
            multiple = {};
            for(var i = 0; i < propValue.length; i++)multiple["$" + propValue[i]] = !0;
            for(propValue = 0; propValue < node.length; propValue++)i = multiple.hasOwnProperty("$" + node[propValue].value), node[propValue].selected !== i && (node[propValue].selected = i), i && setDefaultSelected && (node[propValue].defaultSelected = !0);
        } else {
            propValue = "" + getToStringValue(propValue);
            multiple = null;
            for(i = 0; i < node.length; i++){
                if (node[i].value === propValue) {
                    node[i].selected = !0;
                    setDefaultSelected && (node[i].defaultSelected = !0);
                    return;
                }
                null !== multiple || node[i].disabled || (multiple = node[i]);
            }
            null !== multiple && (multiple.selected = !0);
        }
    }
    function validateSelectProps(element, props) {
        for(element = 0; element < valuePropNames.length; element++){
            var propName = valuePropNames[element];
            if (null != props[propName]) {
                var propNameIsArray = isArrayImpl(props[propName]);
                props.multiple && !propNameIsArray ? console.error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum()) : !props.multiple && propNameIsArray && console.error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
        }
        void 0 === props.value || void 0 === props.defaultValue || didWarnValueDefaultValue || (console.error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components"), didWarnValueDefaultValue = !0);
    }
    function validateTextareaProps(element, props) {
        void 0 === props.value || void 0 === props.defaultValue || didWarnValDefaultVal || (console.error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component"), didWarnValDefaultVal = !0);
        null != props.children && null == props.value && console.error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
    }
    function updateTextarea(element, value, defaultValue) {
        if (null != value && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), null == defaultValue)) {
            element.defaultValue !== value && (element.defaultValue = value);
            return;
        }
        element.defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
    }
    function initTextarea(element, value, defaultValue, children) {
        if (null == value) {
            if (null != children) {
                if (null != defaultValue) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (isArrayImpl(children)) {
                    if (1 < children.length) throw Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            null == defaultValue && (defaultValue = "");
            value = defaultValue;
        }
        defaultValue = getToStringValue(value);
        element.defaultValue = defaultValue;
        children = element.textContent;
        children === defaultValue && "" !== children && null !== children && (element.value = children);
    }
    function findNotableNode(node, indent) {
        return void 0 === node.serverProps && 0 === node.serverTail.length && 1 === node.children.length && 3 < node.distanceFromLeaf && node.distanceFromLeaf > 15 - indent ? findNotableNode(node.children[0], indent) : node;
    }
    function indentation(indent) {
        return "  " + "  ".repeat(indent);
    }
    function added(indent) {
        return "+ " + "  ".repeat(indent);
    }
    function removed(indent) {
        return "- " + "  ".repeat(indent);
    }
    function describeFiberType(fiber) {
        switch(fiber.tag){
            case 26:
            case 27:
            case 5:
                return fiber.type;
            case 16:
                return "Lazy";
            case 13:
                return "Suspense";
            case 19:
                return "SuspenseList";
            case 0:
            case 15:
                return fiber = fiber.type, fiber.displayName || fiber.name || null;
            case 11:
                return fiber = fiber.type.render, fiber.displayName || fiber.name || null;
            case 1:
                return fiber = fiber.type, fiber.displayName || fiber.name || null;
            default:
                return null;
        }
    }
    function describeTextNode(content, maxLength) {
        return needsEscaping.test(content) ? (content = JSON.stringify(content), content.length > maxLength - 2 ? 8 > maxLength ? '{"..."}' : "{" + content.slice(0, maxLength - 7) + '..."}' : "{" + content + "}") : content.length > maxLength ? 5 > maxLength ? '{"..."}' : content.slice(0, maxLength - 3) + "..." : content;
    }
    function describeTextDiff(clientText, serverProps, indent) {
        var maxLength = 120 - 2 * indent;
        if (null === serverProps) return added(indent) + describeTextNode(clientText, maxLength) + "\n";
        if ("string" === typeof serverProps) {
            for(var firstDiff = 0; firstDiff < serverProps.length && firstDiff < clientText.length && serverProps.charCodeAt(firstDiff) === clientText.charCodeAt(firstDiff); firstDiff++);
            firstDiff > maxLength - 8 && 10 < firstDiff && (clientText = "..." + clientText.slice(firstDiff - 8), serverProps = "..." + serverProps.slice(firstDiff - 8));
            return added(indent) + describeTextNode(clientText, maxLength) + "\n" + removed(indent) + describeTextNode(serverProps, maxLength) + "\n";
        }
        return indentation(indent) + describeTextNode(clientText, maxLength) + "\n";
    }
    function objectName(object) {
        return Object.prototype.toString.call(object).replace(/^\[object (.*)\]$/, function(m, p0) {
            return p0;
        });
    }
    function describeValue(value, maxLength) {
        switch(typeof value){
            case "string":
                return value = JSON.stringify(value), value.length > maxLength ? 5 > maxLength ? '"..."' : value.slice(0, maxLength - 4) + '..."' : value;
            case "object":
                if (null === value) return "null";
                if (isArrayImpl(value)) return "[...]";
                if (value.$$typeof === REACT_ELEMENT_TYPE) return (maxLength = getComponentNameFromType(value.type)) ? "<" + maxLength + ">" : "<...>";
                var name = objectName(value);
                if ("Object" === name) {
                    name = "";
                    maxLength -= 2;
                    for(var propName in value)if (value.hasOwnProperty(propName)) {
                        var jsonPropName = JSON.stringify(propName);
                        jsonPropName !== '"' + propName + '"' && (propName = jsonPropName);
                        maxLength -= propName.length - 2;
                        jsonPropName = describeValue(value[propName], 15 > maxLength ? maxLength : 15);
                        maxLength -= jsonPropName.length;
                        if (0 > maxLength) {
                            name += "" === name ? "..." : ", ...";
                            break;
                        }
                        name += ("" === name ? "" : ",") + propName + ":" + jsonPropName;
                    }
                    return "{" + name + "}";
                }
                return name;
            case "function":
                return (maxLength = value.displayName || value.name) ? "function " + maxLength : "function";
            default:
                return String(value);
        }
    }
    function describePropValue(value, maxLength) {
        return "string" !== typeof value || needsEscaping.test(value) ? "{" + describeValue(value, maxLength - 2) + "}" : value.length > maxLength - 2 ? 5 > maxLength ? '"..."' : '"' + value.slice(0, maxLength - 5) + '..."' : '"' + value + '"';
    }
    function describeExpandedElement(type, props, rowPrefix) {
        var remainingRowLength = 120 - rowPrefix.length - type.length, properties = [], propName;
        for(propName in props)if (props.hasOwnProperty(propName) && "children" !== propName) {
            var propValue = describePropValue(props[propName], 120 - rowPrefix.length - propName.length - 1);
            remainingRowLength -= propName.length + propValue.length + 2;
            properties.push(propName + "=" + propValue);
        }
        return 0 === properties.length ? rowPrefix + "<" + type + ">\n" : 0 < remainingRowLength ? rowPrefix + "<" + type + " " + properties.join(" ") + ">\n" : rowPrefix + "<" + type + "\n" + rowPrefix + "  " + properties.join("\n" + rowPrefix + "  ") + "\n" + rowPrefix + ">\n";
    }
    function describePropertiesDiff(clientObject, serverObject, indent) {
        var properties = "", remainingServerProperties = assign({}, serverObject), propName;
        for(propName in clientObject)if (clientObject.hasOwnProperty(propName)) {
            delete remainingServerProperties[propName];
            var maxLength = 120 - 2 * indent - propName.length - 2, clientPropValue = describeValue(clientObject[propName], maxLength);
            serverObject.hasOwnProperty(propName) ? (maxLength = describeValue(serverObject[propName], maxLength), properties += added(indent) + propName + ": " + clientPropValue + "\n", properties += removed(indent) + propName + ": " + maxLength + "\n") : properties += added(indent) + propName + ": " + clientPropValue + "\n";
        }
        for(var _propName in remainingServerProperties)remainingServerProperties.hasOwnProperty(_propName) && (clientObject = describeValue(remainingServerProperties[_propName], 120 - 2 * indent - _propName.length - 2), properties += removed(indent) + _propName + ": " + clientObject + "\n");
        return properties;
    }
    function describeElementDiff(type, clientProps, serverProps, indent) {
        var content = "", serverPropNames = new Map();
        for(propName$jscomp$0 in serverProps)serverProps.hasOwnProperty(propName$jscomp$0) && serverPropNames.set(propName$jscomp$0.toLowerCase(), propName$jscomp$0);
        if (1 === serverPropNames.size && serverPropNames.has("children")) content += describeExpandedElement(type, clientProps, indentation(indent));
        else {
            for(var _propName2 in clientProps)if (clientProps.hasOwnProperty(_propName2) && "children" !== _propName2) {
                var maxLength$jscomp$0 = 120 - 2 * (indent + 1) - _propName2.length - 1, serverPropName = serverPropNames.get(_propName2.toLowerCase());
                if (void 0 !== serverPropName) {
                    serverPropNames.delete(_propName2.toLowerCase());
                    var propName$jscomp$0 = clientProps[_propName2];
                    serverPropName = serverProps[serverPropName];
                    var clientPropValue = describePropValue(propName$jscomp$0, maxLength$jscomp$0);
                    maxLength$jscomp$0 = describePropValue(serverPropName, maxLength$jscomp$0);
                    "object" === typeof propName$jscomp$0 && null !== propName$jscomp$0 && "object" === typeof serverPropName && null !== serverPropName && "Object" === objectName(propName$jscomp$0) && "Object" === objectName(serverPropName) && (2 < Object.keys(propName$jscomp$0).length || 2 < Object.keys(serverPropName).length || -1 < clientPropValue.indexOf("...") || -1 < maxLength$jscomp$0.indexOf("...")) ? content += indentation(indent + 1) + _propName2 + "={{\n" + describePropertiesDiff(propName$jscomp$0, serverPropName, indent + 2) + indentation(indent + 1) + "}}\n" : (content += added(indent + 1) + _propName2 + "=" + clientPropValue + "\n", content += removed(indent + 1) + _propName2 + "=" + maxLength$jscomp$0 + "\n");
                } else content += indentation(indent + 1) + _propName2 + "=" + describePropValue(clientProps[_propName2], maxLength$jscomp$0) + "\n";
            }
            serverPropNames.forEach(function(propName) {
                if ("children" !== propName) {
                    var maxLength = 120 - 2 * (indent + 1) - propName.length - 1;
                    content += removed(indent + 1) + propName + "=" + describePropValue(serverProps[propName], maxLength) + "\n";
                }
            });
            content = "" === content ? indentation(indent) + "<" + type + ">\n" : indentation(indent) + "<" + type + "\n" + content + indentation(indent) + ">\n";
        }
        type = serverProps.children;
        clientProps = clientProps.children;
        if ("string" === typeof type || "number" === typeof type || "bigint" === typeof type) {
            serverPropNames = "";
            if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps) serverPropNames = "" + clientProps;
            content += describeTextDiff(serverPropNames, "" + type, indent + 1);
        } else if ("string" === typeof clientProps || "number" === typeof clientProps || "bigint" === typeof clientProps) content = null == type ? content + describeTextDiff("" + clientProps, null, indent + 1) : content + describeTextDiff("" + clientProps, void 0, indent + 1);
        return content;
    }
    function describeSiblingFiber(fiber, indent) {
        var type = describeFiberType(fiber);
        if (null === type) {
            type = "";
            for(fiber = fiber.child; fiber;)type += describeSiblingFiber(fiber, indent), fiber = fiber.sibling;
            return type;
        }
        return indentation(indent) + "<" + type + ">\n";
    }
    function describeNode(node, indent) {
        var skipToNode = findNotableNode(node, indent);
        if (skipToNode !== node && (1 !== node.children.length || node.children[0] !== skipToNode)) return indentation(indent) + "...\n" + describeNode(skipToNode, indent + 1);
        skipToNode = "";
        var debugInfo = node.fiber._debugInfo;
        if (debugInfo) for(var i = 0; i < debugInfo.length; i++){
            var serverComponentName = debugInfo[i].name;
            "string" === typeof serverComponentName && (skipToNode += indentation(indent) + "<" + serverComponentName + ">\n", indent++);
        }
        debugInfo = "";
        i = node.fiber.pendingProps;
        if (6 === node.fiber.tag) debugInfo = describeTextDiff(i, node.serverProps, indent), indent++;
        else if (serverComponentName = describeFiberType(node.fiber), null !== serverComponentName) {
            if (void 0 === node.serverProps) {
                debugInfo = indent;
                var maxLength = 120 - 2 * debugInfo - serverComponentName.length - 2, content = "";
                for(propName in i)if (i.hasOwnProperty(propName) && "children" !== propName) {
                    var propValue = describePropValue(i[propName], 15);
                    maxLength -= propName.length + propValue.length + 2;
                    if (0 > maxLength) {
                        content += " ...";
                        break;
                    }
                    content += " " + propName + "=" + propValue;
                }
                debugInfo = indentation(debugInfo) + "<" + serverComponentName + content + ">\n";
                indent++;
            } else null === node.serverProps ? (debugInfo = describeExpandedElement(serverComponentName, i, added(indent)), indent++) : "string" === typeof node.serverProps ? console.error("Should not have matched a non HostText fiber to a Text node. This is a bug in React.") : (debugInfo = describeElementDiff(serverComponentName, i, node.serverProps, indent), indent++);
        }
        var propName = "";
        i = node.fiber.child;
        for(serverComponentName = 0; i && serverComponentName < node.children.length;)maxLength = node.children[serverComponentName], maxLength.fiber === i ? (propName += describeNode(maxLength, indent), serverComponentName++) : propName += describeSiblingFiber(i, indent), i = i.sibling;
        i && 0 < node.children.length && (propName += indentation(indent) + "...\n");
        i = node.serverTail;
        null === node.serverProps && indent--;
        for(node = 0; node < i.length; node++)serverComponentName = i[node], propName = "string" === typeof serverComponentName ? propName + (removed(indent) + describeTextNode(serverComponentName, 120 - 2 * indent) + "\n") : propName + describeExpandedElement(serverComponentName.type, serverComponentName.props, removed(indent));
        return skipToNode + debugInfo + propName;
    }
    function describeDiff(rootNode) {
        try {
            return "\n\n" + describeNode(rootNode, 0);
        } catch (x) {
            return "";
        }
    }
    function describeAncestors(ancestor, child, props) {
        for(var fiber = child, node = null, distanceFromLeaf = 0; fiber;)fiber === ancestor && (distanceFromLeaf = 0), node = {
            fiber: fiber,
            children: null !== node ? [
                node
            ] : [],
            serverProps: fiber === child ? props : fiber === ancestor ? null : void 0,
            serverTail: [],
            distanceFromLeaf: distanceFromLeaf
        }, distanceFromLeaf++, fiber = fiber.return;
        return null !== node ? describeDiff(node).replaceAll(/^[+-]/gm, ">") : "";
    }
    function updatedAncestorInfoDev(oldInfo, tag) {
        oldInfo = assign({}, oldInfo || emptyAncestorInfoDev);
        var info = {
            tag: tag
        };
        -1 !== inScopeTags.indexOf(tag) && (oldInfo.aTagInScope = null, oldInfo.buttonTagInScope = null, oldInfo.nobrTagInScope = null);
        -1 !== buttonScopeTags.indexOf(tag) && (oldInfo.pTagInButtonScope = null);
        -1 !== specialTags.indexOf(tag) && "address" !== tag && "div" !== tag && "p" !== tag && (oldInfo.listItemTagAutoclosing = null, oldInfo.dlItemTagAutoclosing = null);
        oldInfo.current = info;
        "form" === tag && (oldInfo.formTag = info);
        "a" === tag && (oldInfo.aTagInScope = info);
        "button" === tag && (oldInfo.buttonTagInScope = info);
        "nobr" === tag && (oldInfo.nobrTagInScope = info);
        "p" === tag && (oldInfo.pTagInButtonScope = info);
        "li" === tag && (oldInfo.listItemTagAutoclosing = info);
        if ("dd" === tag || "dt" === tag) oldInfo.dlItemTagAutoclosing = info;
        "#document" === tag || "html" === tag ? oldInfo.containerTagInScope = null : oldInfo.containerTagInScope || (oldInfo.containerTagInScope = info);
        return oldInfo;
    }
    function isTagValidWithParent(tag, parentTag) {
        switch(parentTag){
            case "select":
                return "hr" === tag || "option" === tag || "optgroup" === tag || "#text" === tag;
            case "optgroup":
                return "option" === tag || "#text" === tag;
            case "option":
                return "#text" === tag;
            case "tr":
                return "th" === tag || "td" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "tbody":
            case "thead":
            case "tfoot":
                return "tr" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "colgroup":
                return "col" === tag || "template" === tag;
            case "table":
                return "caption" === tag || "colgroup" === tag || "tbody" === tag || "tfoot" === tag || "thead" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "head":
                return "base" === tag || "basefont" === tag || "bgsound" === tag || "link" === tag || "meta" === tag || "title" === tag || "noscript" === tag || "noframes" === tag || "style" === tag || "script" === tag || "template" === tag;
            case "html":
                return "head" === tag || "body" === tag || "frameset" === tag;
            case "frameset":
                return "frame" === tag;
            case "#document":
                return "html" === tag;
        }
        switch(tag){
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
                return "h1" !== parentTag && "h2" !== parentTag && "h3" !== parentTag && "h4" !== parentTag && "h5" !== parentTag && "h6" !== parentTag;
            case "rp":
            case "rt":
                return -1 === impliedEndTags.indexOf(parentTag);
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
                return null == parentTag;
        }
        return !0;
    }
    function findInvalidAncestorForTag(tag, ancestorInfo) {
        switch(tag){
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
                return ancestorInfo.pTagInButtonScope;
            case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
                return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
            case "button":
                return ancestorInfo.buttonTagInScope;
            case "a":
                return ancestorInfo.aTagInScope;
            case "nobr":
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    }
    function findAncestor(parent, tagName) {
        for(; parent;){
            switch(parent.tag){
                case 5:
                case 26:
                case 27:
                    if (parent.type === tagName) return parent;
            }
            parent = parent.return;
        }
        return null;
    }
    function validateDOMNesting(childTag, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfoDev;
        var parentInfo = ancestorInfo.current;
        ancestorInfo = (parentInfo = isTagValidWithParent(childTag, parentInfo && parentInfo.tag) ? null : parentInfo) ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        ancestorInfo = parentInfo || ancestorInfo;
        if (!ancestorInfo) return !0;
        ancestorInfo = ancestorInfo.tag;
        var warnKey = String(!!parentInfo) + "|" + childTag + "|" + ancestorInfo;
        if (didWarn[warnKey]) return !1;
        didWarn[warnKey] = !0;
        var ancestor = (warnKey = current) ? findAncestor(warnKey.return, ancestorInfo) : null;
        warnKey = null !== warnKey && null !== ancestor ? describeAncestors(ancestor, warnKey, null) : "";
        ancestor = "<" + childTag + ">";
        parentInfo ? (parentInfo = "", "table" === ancestorInfo && "tr" === childTag && (parentInfo += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), console.error("In HTML, %s cannot be a child of <%s>.%s\nThis will cause a hydration error.%s", ancestor, ancestorInfo, parentInfo, warnKey)) : console.error("In HTML, %s cannot be a descendant of <%s>.\nThis will cause a hydration error.%s", ancestor, ancestorInfo, warnKey);
        return !1;
    }
    function validateTextNesting(childText, parentTag) {
        if (isTagValidWithParent("#text", parentTag)) return !0;
        var warnKey = "#text|" + parentTag;
        if (didWarn[warnKey]) return !1;
        didWarn[warnKey] = !0;
        var ancestor = (warnKey = current) ? findAncestor(warnKey, parentTag) : null;
        warnKey = null !== warnKey && null !== ancestor ? describeAncestors(ancestor, warnKey, 6 !== warnKey.tag ? {
            children: null
        } : null) : "";
        /\S/.test(childText) ? console.error("In HTML, text nodes cannot be a child of <%s>.\nThis will cause a hydration error.%s", parentTag, warnKey) : console.error("In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\nThis will cause a hydration error.%s", parentTag, warnKey);
        return !1;
    }
    function setTextContent(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && 3 === firstChild.nodeType) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    }
    function camelize(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    }
    function setValueForStyle(style, styleName, value) {
        var isCustomProperty = 0 === styleName.indexOf("--");
        isCustomProperty || (-1 < styleName.indexOf("-") ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = !0, console.error("Unsupported style property %s. Did you mean %s?", styleName, camelize(styleName.replace(msPattern, "ms-")))) : badVendoredStyleNamePattern.test(styleName) ? warnedStyleNames.hasOwnProperty(styleName) && warnedStyleNames[styleName] || (warnedStyleNames[styleName] = !0, console.error("Unsupported vendor-prefixed style property %s. Did you mean %s?", styleName, styleName.charAt(0).toUpperCase() + styleName.slice(1))) : !badStyleValueWithSemicolonPattern.test(value) || warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, console.error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', styleName, value.replace(badStyleValueWithSemicolonPattern, ""))), "number" === typeof value && (isNaN(value) ? warnedForNaNValue || (warnedForNaNValue = !0, console.error("`NaN` is an invalid value for the `%s` css style property.", styleName)) : isFinite(value) || warnedForInfinityValue || (warnedForInfinityValue = !0, console.error("`Infinity` is an invalid value for the `%s` css style property.", styleName))));
        null == value || "boolean" === typeof value || "" === value ? isCustomProperty ? style.setProperty(styleName, "") : "float" === styleName ? style.cssFloat = "" : style[styleName] = "" : isCustomProperty ? style.setProperty(styleName, value) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? "float" === styleName ? style.cssFloat = value : (checkCSSPropertyStringCoercion(value, styleName), style[styleName] = ("" + value).trim()) : style[styleName] = value + "px";
    }
    function setValueForStyles(node, styles, prevStyles) {
        if (null != styles && "object" !== typeof styles) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        styles && Object.freeze(styles);
        node = node.style;
        if (null != prevStyles) {
            if (styles) {
                var expandedUpdates = {};
                if (prevStyles) {
                    for(var key in prevStyles)if (prevStyles.hasOwnProperty(key) && !styles.hasOwnProperty(key)) for(var longhands = shorthandToLonghand[key] || [
                        key
                    ], i = 0; i < longhands.length; i++)expandedUpdates[longhands[i]] = key;
                }
                for(var _key in styles)if (styles.hasOwnProperty(_key) && (!prevStyles || prevStyles[_key] !== styles[_key])) for(key = shorthandToLonghand[_key] || [
                    _key
                ], longhands = 0; longhands < key.length; longhands++)expandedUpdates[key[longhands]] = _key;
                _key = {};
                for(var key$jscomp$0 in styles)for(key = shorthandToLonghand[key$jscomp$0] || [
                    key$jscomp$0
                ], longhands = 0; longhands < key.length; longhands++)_key[key[longhands]] = key$jscomp$0;
                key$jscomp$0 = {};
                for(var _key2 in expandedUpdates)if (key = expandedUpdates[_key2], (longhands = _key[_key2]) && key !== longhands && (i = key + "," + longhands, !key$jscomp$0[i])) {
                    key$jscomp$0[i] = !0;
                    i = console;
                    var value = styles[key];
                    i.error.call(i, "%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", null == value || "boolean" === typeof value || "" === value ? "Removing" : "Updating", key, longhands);
                }
            }
            for(var styleName in prevStyles)!prevStyles.hasOwnProperty(styleName) || null != styles && styles.hasOwnProperty(styleName) || (0 === styleName.indexOf("--") ? node.setProperty(styleName, "") : "float" === styleName ? node.cssFloat = "" : node[styleName] = "");
            for(var _styleName in styles)_key2 = styles[_styleName], styles.hasOwnProperty(_styleName) && prevStyles[_styleName] !== _key2 && setValueForStyle(node, _styleName, _key2);
        } else for(expandedUpdates in styles)styles.hasOwnProperty(expandedUpdates) && setValueForStyle(node, expandedUpdates, styles[expandedUpdates]);
    }
    function isCustomElement(tagName) {
        if (-1 === tagName.indexOf("-")) return !1;
        switch(tagName){
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
                return !1;
            default:
                return !0;
        }
    }
    function getAttributeAlias(name) {
        return aliases.get(name) || name;
    }
    function validateProperty$1(tagName, name) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return !0;
        if (rARIACamel$1.test(name)) {
            tagName = "aria-" + name.slice(4).toLowerCase();
            tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
            if (null == tagName) return console.error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties$1[name] = !0;
            if (name !== tagName) return console.error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, tagName), warnedProperties$1[name] = !0;
        }
        if (rARIA$1.test(name)) {
            tagName = name.toLowerCase();
            tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
            if (null == tagName) return warnedProperties$1[name] = !0, !1;
            name !== tagName && (console.error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, tagName), warnedProperties$1[name] = !0);
        }
        return !0;
    }
    function validateProperties$2(type, props) {
        var invalidProps = [], key;
        for(key in props)validateProperty$1(type, key) || invalidProps.push(key);
        props = invalidProps.map(function(prop) {
            return "`" + prop + "`";
        }).join(", ");
        1 === invalidProps.length ? console.error("Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props", props, type) : 1 < invalidProps.length && console.error("Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props", props, type);
    }
    function validateProperty(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) return !0;
        var lowerCasedName = name.toLowerCase();
        if ("onfocusin" === lowerCasedName || "onfocusout" === lowerCasedName) return console.error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties[name] = !0;
        if ("function" === typeof value && ("form" === tagName && "action" === name || "input" === tagName && "formAction" === name || "button" === tagName && "formAction" === name)) return !0;
        if (null != eventRegistry) {
            tagName = eventRegistry.possibleRegistrationNames;
            if (eventRegistry.registrationNameDependencies.hasOwnProperty(name)) return !0;
            eventRegistry = tagName.hasOwnProperty(lowerCasedName) ? tagName[lowerCasedName] : null;
            if (null != eventRegistry) return console.error("Invalid event handler property `%s`. Did you mean `%s`?", name, eventRegistry), warnedProperties[name] = !0;
            if (EVENT_NAME_REGEX.test(name)) return console.error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties[name] = !0;
        } else if (EVENT_NAME_REGEX.test(name)) return INVALID_EVENT_NAME_REGEX.test(name) && console.error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties[name] = !0;
        if (rARIA.test(name) || rARIACamel.test(name)) return !0;
        if ("innerhtml" === lowerCasedName) return console.error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties[name] = !0;
        if ("aria" === lowerCasedName) return console.error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties[name] = !0;
        if ("is" === lowerCasedName && null !== value && void 0 !== value && "string" !== typeof value) return console.error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties[name] = !0;
        if ("number" === typeof value && isNaN(value)) return console.error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties[name] = !0;
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            if (lowerCasedName = possibleStandardNames[lowerCasedName], lowerCasedName !== name) return console.error("Invalid DOM property `%s`. Did you mean `%s`?", name, lowerCasedName), warnedProperties[name] = !0;
        } else if (name !== lowerCasedName) return console.error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName), warnedProperties[name] = !0;
        switch(name){
            case "dangerouslySetInnerHTML":
            case "children":
            case "style":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "ref":
                return !0;
            case "innerText":
            case "textContent":
                return !0;
        }
        switch(typeof value){
            case "boolean":
                switch(name){
                    case "autoFocus":
                    case "checked":
                    case "multiple":
                    case "muted":
                    case "selected":
                    case "contentEditable":
                    case "spellCheck":
                    case "draggable":
                    case "value":
                    case "autoReverse":
                    case "externalResourcesRequired":
                    case "focusable":
                    case "preserveAlpha":
                    case "allowFullScreen":
                    case "async":
                    case "autoPlay":
                    case "controls":
                    case "default":
                    case "defer":
                    case "disabled":
                    case "disablePictureInPicture":
                    case "disableRemotePlayback":
                    case "formNoValidate":
                    case "hidden":
                    case "loop":
                    case "noModule":
                    case "noValidate":
                    case "open":
                    case "playsInline":
                    case "readOnly":
                    case "required":
                    case "reversed":
                    case "scoped":
                    case "seamless":
                    case "itemScope":
                    case "capture":
                    case "download":
                    case "inert":
                        return !0;
                    default:
                        lowerCasedName = name.toLowerCase().slice(0, 5);
                        if ("data-" === lowerCasedName || "aria-" === lowerCasedName) return !0;
                        value ? console.error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name) : console.error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                        return warnedProperties[name] = !0;
                }
            case "function":
            case "symbol":
                return warnedProperties[name] = !0, !1;
            case "string":
                if ("false" === value || "true" === value) {
                    switch(name){
                        case "checked":
                        case "selected":
                        case "multiple":
                        case "muted":
                        case "allowFullScreen":
                        case "async":
                        case "autoPlay":
                        case "controls":
                        case "default":
                        case "defer":
                        case "disabled":
                        case "disablePictureInPicture":
                        case "disableRemotePlayback":
                        case "formNoValidate":
                        case "hidden":
                        case "loop":
                        case "noModule":
                        case "noValidate":
                        case "open":
                        case "playsInline":
                        case "readOnly":
                        case "required":
                        case "reversed":
                        case "scoped":
                        case "seamless":
                        case "itemScope":
                        case "inert":
                            break;
                        default:
                            return !0;
                    }
                    console.error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, "false" === value ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                    warnedProperties[name] = !0;
                }
        }
        return !0;
    }
    function warnUnknownProperties(type, props, eventRegistry) {
        var unknownProps = [], key;
        for(key in props)validateProperty(type, key, props[key], eventRegistry) || unknownProps.push(key);
        props = unknownProps.map(function(prop) {
            return "`" + prop + "`";
        }).join(", ");
        1 === unknownProps.length ? console.error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ", props, type) : 1 < unknownProps.length && console.error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ", props, type);
    }
    function sanitizeURL(url) {
        return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
    }
    function getEventTarget(nativeEvent) {
        nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
        nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
        return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
    }
    function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (internalInstance && (target = internalInstance.stateNode)) {
            var props = target[internalPropsKey] || null;
            a: switch(target = internalInstance.stateNode, internalInstance.type){
                case "input":
                    updateInput(target, props.value, props.defaultValue, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name);
                    internalInstance = props.name;
                    if ("radio" === props.type && null != internalInstance) {
                        for(props = target; props.parentNode;)props = props.parentNode;
                        checkAttributeStringCoercion(internalInstance, "name");
                        props = props.querySelectorAll('input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes("" + internalInstance) + '"][type="radio"]');
                        for(internalInstance = 0; internalInstance < props.length; internalInstance++){
                            var otherNode = props[internalInstance];
                            if (otherNode !== target && otherNode.form === target.form) {
                                var otherProps = otherNode[internalPropsKey] || null;
                                if (!otherProps) throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                                updateInput(otherNode, otherProps.value, otherProps.defaultValue, otherProps.defaultValue, otherProps.checked, otherProps.defaultChecked, otherProps.type, otherProps.name);
                            }
                        }
                        for(internalInstance = 0; internalInstance < props.length; internalInstance++)otherNode = props[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
                    }
                    break a;
                case "textarea":
                    updateTextarea(target, props.value, props.defaultValue);
                    break a;
                case "select":
                    internalInstance = props.value, null != internalInstance && updateOptions(target, !!props.multiple, internalInstance, !1);
            }
        }
    }
    function batchedUpdates$1(fn, a, b) {
        if (isInsideEventHandler) return fn(a, b);
        isInsideEventHandler = !0;
        try {
            var JSCompiler_inline_result = fn(a);
            return JSCompiler_inline_result;
        } finally{
            if (isInsideEventHandler = !1, null !== restoreTarget || null !== restoreQueue) {
                if (flushSyncWork$1(), restoreTarget && (a = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a), fn)) for(a = 0; a < fn.length; a++)restoreStateOfTarget(fn[a]);
            }
        }
    }
    function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (null === stateNode) return null;
        var props = stateNode[internalPropsKey] || null;
        if (null === props) return null;
        stateNode = props[registrationName];
        a: switch(registrationName){
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
                (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
                inst = !props;
                break a;
            default:
                inst = !1;
        }
        if (inst) return null;
        if (stateNode && "function" !== typeof stateNode) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof stateNode + "` type.");
        return stateNode;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root ? root.value : root.textContent, endLength = endValue.length;
        for(start = 0; start < startLength && startValue[start] === endValue[start]; start++);
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++);
        return fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0);
    }
    function getEventCharCode(nativeEvent) {
        var keyCode = nativeEvent.keyCode;
        "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, 0 === nativeEvent && 13 === keyCode && (nativeEvent = 13)) : nativeEvent = keyCode;
        10 === nativeEvent && (nativeEvent = 13);
        return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
    }
    function functionThatReturnsTrue() {
        return !0;
    }
    function functionThatReturnsFalse() {
        return !1;
    }
    function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var propName in Interface)Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
            this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = !0;
                var event = this.nativeEvent;
                event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = functionThatReturnsTrue);
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = functionThatReturnsTrue);
            },
            persist: function() {},
            isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    function modifierStateGetter(keyArg) {
        var nativeEvent = this.nativeEvent;
        return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : !1;
    }
    function getEventModifierState() {
        return modifierStateGetter;
    }
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case "keyup":
                return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
            case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
                return !0;
            default:
                return !1;
        }
    }
    function getDataFromCustomEvent(nativeEvent) {
        nativeEvent = nativeEvent.detail;
        return "object" === typeof nativeEvent && "data" in nativeEvent ? nativeEvent.data : null;
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
            case "keypress":
                if (nativeEvent.which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = !0;
                return SPACEBAR_CHAR;
            case "textInput":
                return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
            default:
                return null;
        }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) return "compositionend" === domEventName || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root = null, isComposing = !1, domEventName) : null;
        switch(domEventName){
            case "paste":
                return null;
            case "keypress":
                if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
                    if (nativeEvent.char && 1 < nativeEvent.char.length) return nativeEvent.char;
                    if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case "compositionend":
                return useFallbackCompositionData && "ko" !== nativeEvent.locale ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return "input" === nodeName ? !!supportedInputTypes[elem.type] : "textarea" === nodeName ? !0 : !1;
    }
    function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return !1;
        eventNameSuffix = "on" + eventNameSuffix;
        var isSupported = eventNameSuffix in document;
        isSupported || (isSupported = document.createElement("div"), isSupported.setAttribute(eventNameSuffix, "return;"), isSupported = "function" === typeof isSupported[eventNameSuffix]);
        return isSupported;
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [
            target
        ] : restoreTarget = target;
        inst = accumulateTwoPhaseListeners(inst, "onChange");
        0 < inst.length && (nativeEvent = new SyntheticEvent("onChange", "change", null, nativeEvent, target), dispatchQueue.push({
            event: nativeEvent,
            listeners: inst
        }));
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if ("change" === domEventName) return targetInst;
    }
    function stopWatchingForValueChange() {
        activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
    }
    function handlePropertyChange(nativeEvent) {
        if ("value" === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst$1)) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst$1, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates$1(runEventInBatch, dispatchQueue);
        }
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        "focusin" === domEventName ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : "focusout" === domEventName && stopWatchingForValueChange();
    }
    function getTargetInstForInputEventPolyfill(domEventName) {
        if ("selectionchange" === domEventName || "keyup" === domEventName || "keydown" === domEventName) return getInstIfValueChanged(activeElementInst$1);
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if ("click" === domEventName) return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if ("input" === domEventName || "change" === domEventName) return getInstIfValueChanged(targetInst);
    }
    function is(x, y) {
        return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
    }
    function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return !0;
        if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB) return !1;
        var keysA = Object.keys(objA), keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return !1;
        for(keysB = 0; keysB < keysA.length; keysB++){
            var currentKey = keysA[keysB];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return !1;
        }
        return !0;
    }
    function getLeafNode(node) {
        for(; node && node.firstChild;)node = node.firstChild;
        return node;
    }
    function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        root = 0;
        for(var nodeEnd; node;){
            if (3 === node.nodeType) {
                nodeEnd = root + node.textContent.length;
                if (root <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - root
                };
                root = nodeEnd;
            }
            a: {
                for(; node;){
                    if (node.nextSibling) {
                        node = node.nextSibling;
                        break a;
                    }
                    node = node.parentNode;
                }
                node = void 0;
            }
            node = getLeafNode(node);
        }
    }
    function containsNode(outerNode, innerNode) {
        return outerNode && innerNode ? outerNode === innerNode ? !0 : outerNode && 3 === outerNode.nodeType ? !1 : innerNode && 3 === innerNode.nodeType ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : !1 : !1;
    }
    function getActiveElementDeep(containerInfo) {
        containerInfo = null != containerInfo && null != containerInfo.ownerDocument && null != containerInfo.ownerDocument.defaultView ? containerInfo.ownerDocument.defaultView : window;
        for(var element = getActiveElement(containerInfo.document); element instanceof containerInfo.HTMLIFrameElement;){
            try {
                var JSCompiler_inline_result = "string" === typeof element.contentWindow.location.href;
            } catch (err) {
                JSCompiler_inline_result = !1;
            }
            if (JSCompiler_inline_result) containerInfo = element.contentWindow;
            else break;
            element = getActiveElement(containerInfo.document);
        }
        return element;
    }
    function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && ("input" === nodeName && ("text" === elem.type || "search" === elem.type || "tel" === elem.type || "url" === elem.type || "password" === elem.type) || "textarea" === nodeName || "true" === elem.contentEditable);
    }
    function restoreSelection(priorSelectionInformation, containerInfo) {
        var curFocusedElem = getActiveElementDeep(containerInfo);
        containerInfo = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== containerInfo && containerInfo && containerInfo.ownerDocument && containsNode(containerInfo.ownerDocument.documentElement, containerInfo)) {
            if (null !== priorSelectionRange && hasSelectionCapabilities(containerInfo)) {
                if (priorSelectionInformation = priorSelectionRange.start, curFocusedElem = priorSelectionRange.end, void 0 === curFocusedElem && (curFocusedElem = priorSelectionInformation), "selectionStart" in containerInfo) containerInfo.selectionStart = priorSelectionInformation, containerInfo.selectionEnd = Math.min(curFocusedElem, containerInfo.value.length);
                else if (curFocusedElem = (priorSelectionInformation = containerInfo.ownerDocument || document) && priorSelectionInformation.defaultView || window, curFocusedElem.getSelection) {
                    curFocusedElem = curFocusedElem.getSelection();
                    var length = containerInfo.textContent.length, start = Math.min(priorSelectionRange.start, length);
                    priorSelectionRange = void 0 === priorSelectionRange.end ? start : Math.min(priorSelectionRange.end, length);
                    !curFocusedElem.extend && start > priorSelectionRange && (length = priorSelectionRange, priorSelectionRange = start, start = length);
                    length = getNodeForCharacterOffset(containerInfo, start);
                    var endMarker = getNodeForCharacterOffset(containerInfo, priorSelectionRange);
                    length && endMarker && (1 !== curFocusedElem.rangeCount || curFocusedElem.anchorNode !== length.node || curFocusedElem.anchorOffset !== length.offset || curFocusedElem.focusNode !== endMarker.node || curFocusedElem.focusOffset !== endMarker.offset) && (priorSelectionInformation = priorSelectionInformation.createRange(), priorSelectionInformation.setStart(length.node, length.offset), curFocusedElem.removeAllRanges(), start > priorSelectionRange ? (curFocusedElem.addRange(priorSelectionInformation), curFocusedElem.extend(endMarker.node, endMarker.offset)) : (priorSelectionInformation.setEnd(endMarker.node, endMarker.offset), curFocusedElem.addRange(priorSelectionInformation)));
                }
            }
            priorSelectionInformation = [];
            for(curFocusedElem = containerInfo; curFocusedElem = curFocusedElem.parentNode;)1 === curFocusedElem.nodeType && priorSelectionInformation.push({
                element: curFocusedElem,
                left: curFocusedElem.scrollLeft,
                top: curFocusedElem.scrollTop
            });
            "function" === typeof containerInfo.focus && containerInfo.focus();
            for(containerInfo = 0; containerInfo < priorSelectionInformation.length; containerInfo++)curFocusedElem = priorSelectionInformation[containerInfo], curFocusedElem.element.scrollLeft = curFocusedElem.left, curFocusedElem.element.scrollTop = curFocusedElem.top;
        }
    }
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : 9 === nativeEventTarget.nodeType ? nativeEventTarget : nativeEventTarget.ownerDocument;
        mouseDown || null == activeElement || activeElement !== getActiveElement(doc) || (doc = activeElement, "selectionStart" in doc && hasSelectionCapabilities(doc) ? doc = {
            start: doc.selectionStart,
            end: doc.selectionEnd
        } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
            anchorNode: doc.anchorNode,
            anchorOffset: doc.anchorOffset,
            focusNode: doc.focusNode,
            focusOffset: doc.focusOffset
        }), lastSelection && shallowEqual(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget), dispatchQueue.push({
            event: nativeEvent,
            listeners: doc
        }), nativeEvent.target = activeElement)));
    }
    function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes["Webkit" + styleProp] = "webkit" + eventName;
        prefixes["Moz" + styleProp] = "moz" + eventName;
        return prefixes;
    }
    function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName], styleProp;
        for(styleProp in prefixMap)if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        return eventName;
    }
    function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [
            domEventName
        ]);
    }
    function finishQueueingConcurrentUpdates() {
        for(var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex;){
            var fiber = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var queue = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var update = concurrentQueues[i];
            concurrentQueues[i++] = null;
            var lane = concurrentQueues[i];
            concurrentQueues[i++] = null;
            if (null !== queue && null !== update) {
                var pending = queue.pending;
                null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
                queue.pending = update;
            }
            0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
        }
    }
    function enqueueUpdate$1(fiber, queue, update, lane) {
        concurrentQueues[concurrentQueuesIndex++] = fiber;
        concurrentQueues[concurrentQueuesIndex++] = queue;
        concurrentQueues[concurrentQueuesIndex++] = update;
        concurrentQueues[concurrentQueuesIndex++] = lane;
        concurrentlyUpdatedLanes |= lane;
        fiber.lanes |= lane;
        fiber = fiber.alternate;
        null !== fiber && (fiber.lanes |= lane);
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        enqueueUpdate$1(fiber, queue, update, lane);
        return getRootForUpdatedFiber(fiber);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
        enqueueUpdate$1(fiber, null, null, lane);
        return getRootForUpdatedFiber(fiber);
    }
    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
        sourceFiber.lanes |= lane;
        var alternate = sourceFiber.alternate;
        null !== alternate && (alternate.lanes |= lane);
        for(var isHidden = !1, parent = sourceFiber.return; null !== parent;)parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & OffscreenVisible || (isHidden = !0)), sourceFiber = parent, parent = parent.return;
        isHidden && null !== update && 3 === sourceFiber.tag && (parent = sourceFiber.stateNode, isHidden = 31 - clz32(lane), parent = parent.hiddenUpdates, sourceFiber = parent[isHidden], null === sourceFiber ? parent[isHidden] = [
            update
        ] : sourceFiber.push(update), update.lane = lane | 536870912);
    }
    function getRootForUpdatedFiber(sourceFiber) {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) throw nestedPassiveUpdateCount = nestedUpdateCount = 0, rootWithPassiveNestedUpdates = rootWithNestedUpdates = null, Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT && (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, console.error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
        null === sourceFiber.alternate && 0 !== (sourceFiber.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        for(var node = sourceFiber, parent = node.return; null !== parent;)null === node.alternate && 0 !== (node.flags & 4098) && warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber), node = parent, parent = node.return;
        return 3 === node.tag ? node.stateNode : null;
    }
    function resolveFunctionForHotReloading(type) {
        if (null === resolveFamily) return type;
        var family = resolveFamily(type);
        return void 0 === family ? type : family.current;
    }
    function resolveForwardRefForHotReloading(type) {
        if (null === resolveFamily) return type;
        var family = resolveFamily(type);
        return void 0 === family ? null !== type && void 0 !== type && "function" === typeof type.render && (family = resolveFunctionForHotReloading(type.render), type.render !== family) ? (family = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: family
        }, void 0 !== type.displayName && (family.displayName = type.displayName), family) : type : family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (null === resolveFamily) return !1;
        var prevType = fiber.elementType;
        element = element.type;
        var needsCompareFamilies = !1, $$typeofNextType = "object" === typeof element && null !== element ? element.$$typeof : null;
        switch(fiber.tag){
            case 1:
                "function" === typeof element && (needsCompareFamilies = !0);
                break;
            case 0:
                "function" === typeof element ? needsCompareFamilies = !0 : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = !0);
                break;
            case 11:
                $$typeofNextType === REACT_FORWARD_REF_TYPE ? needsCompareFamilies = !0 : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = !0);
                break;
            case 14:
            case 15:
                $$typeofNextType === REACT_MEMO_TYPE ? needsCompareFamilies = !0 : $$typeofNextType === REACT_LAZY_TYPE && (needsCompareFamilies = !0);
                break;
            default:
                return !1;
        }
        return needsCompareFamilies && (fiber = resolveFamily(prevType), void 0 !== fiber && fiber === resolveFamily(element)) ? !0 : !1;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        null !== resolveFamily && "function" === typeof WeakSet && (null === failedBoundaries && (failedBoundaries = new WeakSet()), failedBoundaries.add(fiber));
    }
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type, candidateType = null;
        switch(tag){
            case 0:
            case 15:
            case 1:
                candidateType = type;
                break;
            case 11:
                candidateType = type.render;
        }
        if (null === resolveFamily) throw Error("Expected resolveFamily to be set during hot reload.");
        var needsRender = !1;
        type = !1;
        null !== candidateType && (candidateType = resolveFamily(candidateType), void 0 !== candidateType && (staleFamilies.has(candidateType) ? type = !0 : updatedFamilies.has(candidateType) && (1 === tag ? type = !0 : needsRender = !0)));
        null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== alternate && failedBoundaries.has(alternate)) && (type = !0);
        type && (fiber._debugNeedsRemount = !0);
        if (type || needsRender) alternate = enqueueConcurrentRenderForLane(fiber, 2), null !== alternate && scheduleUpdateOnFiber(alternate, fiber, 2);
        null === child || type || scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        null !== sibling && scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    function pushNestedEffectDurations() {
        var prevEffectDuration = profilerEffectDuration;
        profilerEffectDuration = 0;
        return prevEffectDuration;
    }
    function popNestedEffectDurations(prevEffectDuration) {
        var elapsedTime = profilerEffectDuration;
        profilerEffectDuration = prevEffectDuration;
        return elapsedTime;
    }
    function bubbleNestedEffectDurations(prevEffectDuration) {
        var elapsedTime = profilerEffectDuration;
        profilerEffectDuration += prevEffectDuration;
        return elapsedTime;
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now();
        0 > fiber.actualStartTime && (fiber.actualStartTime = profilerStartTime);
    }
    function stopProfilerTimerIfRunningAndRecordDuration(fiber) {
        if (0 <= profilerStartTime) {
            var elapsedTime = now() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function stopProfilerTimerIfRunningAndRecordIncompleteDuration(fiber) {
        if (0 <= profilerStartTime) {
            var elapsedTime = now() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            profilerStartTime = -1;
        }
    }
    function recordEffectDuration() {
        if (0 <= profilerStartTime) {
            var elapsedTime = now() - profilerStartTime;
            profilerStartTime = -1;
            profilerEffectDuration += elapsedTime;
        }
    }
    function startEffectTimer() {
        profilerStartTime = now();
    }
    function transferActualDuration(fiber) {
        for(var child = fiber.child; child;)fiber.actualDuration += child.actualDuration, child = child.sibling;
    }
    function createCapturedValueAtFiber(value, source) {
        if ("object" === typeof value && null !== value) {
            var existing = CapturedStacks.get(value);
            if (void 0 !== existing) return existing;
            source = {
                value: value,
                source: source,
                stack: getStackByFiberInDevAndProd(source)
            };
            CapturedStacks.set(value, source);
            return source;
        }
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    function pushTreeFork(workInProgress, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress;
        treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress, totalChildren, index) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress;
        var baseIdWithLeadingBit = treeContextId;
        workInProgress = treeContextOverflow;
        var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
        baseIdWithLeadingBit &= ~(1 << baseLength);
        index += 1;
        var length = 32 - clz32(totalChildren) + baseLength;
        if (30 < length) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            length = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
            baseIdWithLeadingBit >>= numberOfOverflowBits;
            baseLength -= numberOfOverflowBits;
            treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index << baseLength | baseIdWithLeadingBit;
            treeContextOverflow = length + workInProgress;
        } else treeContextId = 1 << length | index << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress;
    }
    function pushMaterializedTreeId(workInProgress) {
        warnIfNotHydrating();
        null !== workInProgress.return && (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));
    }
    function popTreeContext(workInProgress) {
        for(; workInProgress === treeForkProvider;)treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
        for(; workInProgress === treeContextProvider;)treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
    }
    function warnIfNotHydrating() {
        isHydrating || console.error("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    function buildHydrationDiffNode(fiber, distanceFromLeaf) {
        if (null === fiber.return) {
            if (null === hydrationDiffRootDEV) hydrationDiffRootDEV = {
                fiber: fiber,
                children: [],
                serverProps: void 0,
                serverTail: [],
                distanceFromLeaf: distanceFromLeaf
            };
            else {
                if (hydrationDiffRootDEV.fiber !== fiber) throw Error("Saw multiple hydration diff roots in a pass. This is a bug in React.");
                hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf && (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);
            }
            return hydrationDiffRootDEV;
        }
        var siblings = buildHydrationDiffNode(fiber.return, distanceFromLeaf + 1).children;
        if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber) return siblings = siblings[siblings.length - 1], siblings.distanceFromLeaf > distanceFromLeaf && (siblings.distanceFromLeaf = distanceFromLeaf), siblings;
        distanceFromLeaf = {
            fiber: fiber,
            children: [],
            serverProps: void 0,
            serverTail: [],
            distanceFromLeaf: distanceFromLeaf
        };
        siblings.push(distanceFromLeaf);
        return distanceFromLeaf;
    }
    function warnNonHydratedInstance(fiber, rejectedCandidate) {
        didSuspendOrErrorDEV || (fiber = buildHydrationDiffNode(fiber, 0), fiber.serverProps = null, null !== rejectedCandidate && (rejectedCandidate = describeHydratableInstanceForDevWarnings(rejectedCandidate), fiber.serverTail.push(rejectedCandidate)));
    }
    function throwOnHydrationMismatch(fiber) {
        var diff = "", diffRoot = hydrationDiffRootDEV;
        null !== diffRoot && (hydrationDiffRootDEV = null, diff = describeDiff(diffRoot));
        queueHydrationError(createCapturedValueAtFiber(Error("Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch" + diff), fiber));
        throw HydrationMismatchException;
    }
    function prepareToHydrateHostInstance(fiber) {
        var didHydrate = fiber.stateNode;
        var type = fiber.type, props = fiber.memoizedProps;
        didHydrate[internalInstanceKey] = fiber;
        didHydrate[internalPropsKey] = props;
        validatePropertiesInDevelopment(type, props);
        switch(type){
            case "dialog":
                listenToNonDelegatedEvent("cancel", didHydrate);
                listenToNonDelegatedEvent("close", didHydrate);
                break;
            case "iframe":
            case "object":
            case "embed":
                listenToNonDelegatedEvent("load", didHydrate);
                break;
            case "video":
            case "audio":
                for(type = 0; type < mediaEventTypes.length; type++)listenToNonDelegatedEvent(mediaEventTypes[type], didHydrate);
                break;
            case "source":
                listenToNonDelegatedEvent("error", didHydrate);
                break;
            case "img":
            case "image":
            case "link":
                listenToNonDelegatedEvent("error", didHydrate);
                listenToNonDelegatedEvent("load", didHydrate);
                break;
            case "details":
                listenToNonDelegatedEvent("toggle", didHydrate);
                break;
            case "input":
                checkControlledValueProps("input", props);
                listenToNonDelegatedEvent("invalid", didHydrate);
                validateInputProps(didHydrate, props);
                initInput(didHydrate, props.value, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name, !0);
                track(didHydrate);
                break;
            case "option":
                validateOptionProps(didHydrate, props);
                break;
            case "select":
                checkControlledValueProps("select", props);
                listenToNonDelegatedEvent("invalid", didHydrate);
                validateSelectProps(didHydrate, props);
                break;
            case "textarea":
                checkControlledValueProps("textarea", props), listenToNonDelegatedEvent("invalid", didHydrate), validateTextareaProps(didHydrate, props), initTextarea(didHydrate, props.value, props.defaultValue, props.children), track(didHydrate);
        }
        type = props.children;
        "string" !== typeof type && "number" !== typeof type && "bigint" !== typeof type || didHydrate.textContent === "" + type || !0 === props.suppressHydrationWarning || checkForUnmatchedText(didHydrate.textContent, type) ? (null != props.popover && (listenToNonDelegatedEvent("beforetoggle", didHydrate), listenToNonDelegatedEvent("toggle", didHydrate)), null != props.onScroll && listenToNonDelegatedEvent("scroll", didHydrate), null != props.onScrollEnd && listenToNonDelegatedEvent("scrollend", didHydrate), null != props.onClick && (didHydrate.onclick = noop$1), didHydrate = !0) : didHydrate = !1;
        didHydrate || throwOnHydrationMismatch(fiber);
    }
    function popToNextHostParent(fiber) {
        for(hydrationParentFiber = fiber.return; hydrationParentFiber;)switch(hydrationParentFiber.tag){
            case 3:
            case 27:
                rootOrSingletonContext = !0;
                return;
            case 5:
            case 13:
                rootOrSingletonContext = !1;
                return;
            default:
                hydrationParentFiber = hydrationParentFiber.return;
        }
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return !1;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = !0, !1;
        var shouldClear = !1, JSCompiler_temp;
        if (JSCompiler_temp = 3 !== fiber.tag && 27 !== fiber.tag) {
            if (JSCompiler_temp = 5 === fiber.tag) JSCompiler_temp = fiber.type, JSCompiler_temp = !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) || shouldSetTextContent(fiber.type, fiber.memoizedProps);
            JSCompiler_temp = !JSCompiler_temp;
        }
        JSCompiler_temp && (shouldClear = !0);
        if (shouldClear && nextHydratableInstance) {
            for(shouldClear = nextHydratableInstance; shouldClear;){
                JSCompiler_temp = buildHydrationDiffNode(fiber, 0);
                var description = describeHydratableInstanceForDevWarnings(shouldClear);
                JSCompiler_temp.serverTail.push(description);
                shouldClear = "Suspense" === description.type ? getNextHydratableInstanceAfterSuspenseInstance(shouldClear) : getNextHydratable(shouldClear.nextSibling);
            }
            throwOnHydrationMismatch(fiber);
        }
        popToNextHostParent(fiber);
        if (13 === fiber.tag) {
            fiber = fiber.memoizedState;
            fiber = null !== fiber ? fiber.dehydrated : null;
            if (!fiber) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(fiber);
        } else nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
        return !0;
    }
    function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null;
        didSuspendOrErrorDEV = isHydrating = !1;
    }
    function queueHydrationError(error) {
        null === hydrationErrors ? hydrationErrors = [
            error
        ] : hydrationErrors.push(error);
    }
    function emitPendingHydrationWarnings() {
        var diffRoot = hydrationDiffRootDEV;
        null !== diffRoot && (hydrationDiffRootDEV = null, diffRoot = describeDiff(diffRoot), console.error("A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s", "https://react.dev/link/hydration-mismatch", diffRoot));
    }
    function createThenableState() {
        return {
            didWarnAboutUncachedPromise: !1,
            thenables: []
        };
    }
    function isThenableResolved(thenable) {
        thenable = thenable.status;
        return "fulfilled" === thenable || "rejected" === thenable;
    }
    function noop$3() {}
    function trackUsedThenable(thenableState, thenable, index) {
        null !== ReactSharedInternals.actQueue && (ReactSharedInternals.didUsePromise = !0);
        var trackedThenables = thenableState.thenables;
        index = trackedThenables[index];
        void 0 === index ? trackedThenables.push(thenable) : index !== thenable && (thenableState.didWarnAboutUncachedPromise || (thenableState.didWarnAboutUncachedPromise = !0, console.error("A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework.")), thenable.then(noop$3, noop$3), thenable = index);
        switch(thenable.status){
            case "fulfilled":
                return thenable.value;
            case "rejected":
                throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
            default:
                if ("string" === typeof thenable.status) thenable.then(noop$3, noop$3);
                else {
                    thenableState = workInProgressRoot;
                    if (null !== thenableState && 100 < thenableState.shellSuspendCounter) throw Error("async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
                    thenableState = thenable;
                    thenableState.status = "pending";
                    thenableState.then(function(fulfilledValue) {
                        if ("pending" === thenable.status) {
                            var fulfilledThenable = thenable;
                            fulfilledThenable.status = "fulfilled";
                            fulfilledThenable.value = fulfilledValue;
                        }
                    }, function(error) {
                        if ("pending" === thenable.status) {
                            var rejectedThenable = thenable;
                            rejectedThenable.status = "rejected";
                            rejectedThenable.reason = error;
                        }
                    });
                }
                switch(thenable.status){
                    case "fulfilled":
                        return thenable.value;
                    case "rejected":
                        throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
                }
                suspendedThenable = thenable;
                needsToResetSuspendedThenableDEV = !0;
                throw SuspenseException;
        }
    }
    function getSuspendedThenable() {
        if (null === suspendedThenable) throw Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
        var thenable = suspendedThenable;
        suspendedThenable = null;
        needsToResetSuspendedThenableDEV = !1;
        return thenable;
    }
    function checkIfUseWrappedInAsyncCatch(rejectedReason) {
        if (rejectedReason === SuspenseException) throw Error("Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server.");
    }
    function pushDebugInfo(debugInfo) {
        var previousDebugInfo = currentDebugInfo;
        null != debugInfo && (currentDebugInfo = null === previousDebugInfo ? debugInfo : previousDebugInfo.concat(debugInfo));
        return previousDebugInfo;
    }
    function validateFragmentProps(element, fiber, returnFiber) {
        for(var keys = Object.keys(element.props), i = 0; i < keys.length; i++){
            var key = keys[i];
            if ("children" !== key && "key" !== key) {
                null === fiber && (fiber = createFiberFromElement(element, returnFiber.mode, 0), fiber._debugInfo = currentDebugInfo, fiber.return = returnFiber);
                runWithFiberInDEV(fiber, function(erroredKey) {
                    console.error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", erroredKey);
                }, key);
                break;
            }
        }
    }
    function unwrapThenable(thenable) {
        var index = thenableIndexCounter$1;
        thenableIndexCounter$1 += 1;
        null === thenableState$1 && (thenableState$1 = createThenableState());
        return trackUsedThenable(thenableState$1, thenable, index);
    }
    function coerceRef(workInProgress, element) {
        element = element.props.ref;
        workInProgress.ref = void 0 !== element ? element : null;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE) throw Error('A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.');
        returnFiber = Object.prototype.toString.call(newChild);
        throw Error("Objects are not valid as a React child (found: " + ("[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber, invalidChild) {
        var parentName = getComponentNameFromFiber(returnFiber) || "Component";
        ownerHasFunctionTypeWarning[parentName] || (ownerHasFunctionTypeWarning[parentName] = !0, invalidChild = invalidChild.displayName || invalidChild.name || "Component", 3 === returnFiber.tag ? console.error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)", invalidChild, invalidChild, invalidChild) : console.error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>", invalidChild, invalidChild, parentName, invalidChild, parentName));
    }
    function warnOnSymbolType(returnFiber, invalidChild) {
        var parentName = getComponentNameFromFiber(returnFiber) || "Component";
        ownerHasSymbolTypeWarning[parentName] || (ownerHasSymbolTypeWarning[parentName] = !0, invalidChild = String(invalidChild), 3 === returnFiber.tag ? console.error("Symbols are not valid as a React child.\n  root.render(%s)", invalidChild) : console.error("Symbols are not valid as a React child.\n  <%s>%s</%s>", parentName, invalidChild, parentName));
    }
    function createChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (shouldTrackSideEffects) {
                var deletions = returnFiber.deletions;
                null === deletions ? (returnFiber.deletions = [
                    childToDelete
                ], returnFiber.flags |= 16) : deletions.push(childToDelete);
            }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) return null;
            for(; null !== currentFirstChild;)deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
            return null;
        }
        function mapRemainingChildren(currentFirstChild) {
            for(var existingChildren = new Map(); null !== currentFirstChild;)null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            fiber = createWorkInProgress(fiber, pendingProps);
            fiber.index = 0;
            fiber.sibling = null;
            return fiber;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) return newFiber.flags |= 1048576, lastPlacedIndex;
            newIndex = newFiber.alternate;
            if (null !== newIndex) return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 33554434, lastPlacedIndex) : newIndex;
            newFiber.flags |= 33554434;
            return lastPlacedIndex;
        }
        function placeSingleChild(newFiber) {
            shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 33554434);
            return newFiber;
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
            if (null === current || 6 !== current.tag) return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current._debugOwner = returnFiber, current._debugInfo = currentDebugInfo, current;
            current = useFiber(current, textContent);
            current.return = returnFiber;
            current._debugInfo = currentDebugInfo;
            return current;
        }
        function updateElement(returnFiber, current, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) return current = updateFragment(returnFiber, current, element.props.children, lanes, element.key), validateFragmentProps(element, current, returnFiber), current;
            if (null !== current && (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && callLazyInitInDEV(elementType) === current.type)) return current = useFiber(current, element.props), coerceRef(current, element), current.return = returnFiber, current._debugOwner = element._owner, current._debugInfo = currentDebugInfo, current;
            current = createFiberFromElement(element, returnFiber.mode, lanes);
            coerceRef(current, element);
            current.return = returnFiber;
            current._debugInfo = currentDebugInfo;
            return current;
        }
        function updatePortal(returnFiber, current, portal, lanes) {
            if (null === current || 4 !== current.tag || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current._debugInfo = currentDebugInfo, current;
            current = useFiber(current, portal.children || []);
            current.return = returnFiber;
            current._debugInfo = currentDebugInfo;
            return current;
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (null === current || 7 !== current.tag) return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current._debugOwner = returnFiber, current._debugInfo = currentDebugInfo, current;
            current = useFiber(current, fragment);
            current.return = returnFiber;
            current._debugInfo = currentDebugInfo;
            return current;
        }
        function createChild(returnFiber, newChild, lanes) {
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild._debugOwner = returnFiber, newChild._debugInfo = currentDebugInfo, newChild;
            if ("object" === typeof newChild && null !== newChild) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        return lanes = createFiberFromElement(newChild, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
                    case REACT_PORTAL_TYPE:
                        return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild._debugInfo = currentDebugInfo, newChild;
                    case REACT_LAZY_TYPE:
                        var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                        newChild = callLazyInitInDEV(newChild);
                        returnFiber = createChild(returnFiber, newChild, lanes);
                        currentDebugInfo = _prevDebugInfo;
                        return returnFiber;
                }
                if (isArrayImpl(newChild) || getIteratorFn(newChild)) return lanes = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), lanes.return = returnFiber, lanes._debugOwner = returnFiber, returnFiber = pushDebugInfo(newChild._debugInfo), lanes._debugInfo = currentDebugInfo, currentDebugInfo = returnFiber, lanes;
                if ("function" === typeof newChild.then) return _prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = createChild(returnFiber, unwrapThenable(newChild), lanes), currentDebugInfo = _prevDebugInfo, returnFiber;
                if (newChild.$$typeof === REACT_CONTEXT_TYPE) return createChild(returnFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = null !== oldFiber ? oldFiber.key : null;
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            if ("object" === typeof newChild && null !== newChild) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        return newChild.key === key ? (key = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(returnFiber, oldFiber, newChild, lanes), currentDebugInfo = key, returnFiber) : null;
                    case REACT_PORTAL_TYPE:
                        return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
                    case REACT_LAZY_TYPE:
                        return key = pushDebugInfo(newChild._debugInfo), newChild = callLazyInitInDEV(newChild), returnFiber = updateSlot(returnFiber, oldFiber, newChild, lanes), currentDebugInfo = key, returnFiber;
                }
                if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
                    if (null !== key) return null;
                    key = pushDebugInfo(newChild._debugInfo);
                    returnFiber = updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                    currentDebugInfo = key;
                    return returnFiber;
                }
                if ("function" === typeof newChild.then) return key = pushDebugInfo(newChild._debugInfo), returnFiber = updateSlot(returnFiber, oldFiber, unwrapThenable(newChild), lanes), currentDebugInfo = key, returnFiber;
                if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
            if ("object" === typeof newChild && null !== newChild) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        return newIdx = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateElement(returnFiber, newIdx, newChild, lanes), currentDebugInfo = existingChildren, returnFiber;
                    case REACT_PORTAL_TYPE:
                        return existingChildren = existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
                    case REACT_LAZY_TYPE:
                        var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);
                        newChild = callLazyInitInDEV(newChild);
                        returnFiber = updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes);
                        currentDebugInfo = _prevDebugInfo7;
                        return returnFiber;
                }
                if (isArrayImpl(newChild) || getIteratorFn(newChild)) return newIdx = existingChildren.get(newIdx) || null, existingChildren = pushDebugInfo(newChild._debugInfo), returnFiber = updateFragment(returnFiber, newIdx, newChild, lanes, null), currentDebugInfo = existingChildren, returnFiber;
                if ("function" === typeof newChild.then) return _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo), returnFiber = updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(newChild), lanes), currentDebugInfo = _prevDebugInfo7, returnFiber;
                if (newChild.$$typeof === REACT_CONTEXT_TYPE) return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, newChild), lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return null;
        }
        function warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys) {
            if ("object" !== typeof child || null === child) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(returnFiber, workInProgress, child);
                    var key = child.key;
                    if ("string" !== typeof key) break;
                    if (null === knownKeys) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    runWithFiberInDEV(workInProgress, function() {
                        console.error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    });
                    break;
                case REACT_LAZY_TYPE:
                    child = callLazyInitInDEV(child), warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys);
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            for(var knownKeys = null, resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++){
                oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (null === newFiber) {
                    null === oldFiber && (oldFiber = nextOldFiber);
                    break;
                }
                knownKeys = warnOnInvalidKey(returnFiber, newFiber, newChildren[newIdx], knownKeys);
                shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
                currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
                null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
            if (null === oldFiber) {
                for(; newIdx < newChildren.length; newIdx++)oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(returnFiber, oldFiber, newChildren[newIdx], knownKeys), currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
                isHydrating && pushTreeFork(returnFiber, newIdx);
                return resultingFirstChild;
            }
            for(oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(returnFiber, nextOldFiber, newChildren[newIdx], knownKeys), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
            shouldTrackSideEffects && oldFiber.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
            if (null == newChildren) throw Error("An iterable object provided no iterator.");
            for(var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, knownKeys = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()){
                oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (null === newFiber) {
                    null === oldFiber && (oldFiber = nextOldFiber);
                    break;
                }
                knownKeys = warnOnInvalidKey(returnFiber, newFiber, step.value, knownKeys);
                shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
                currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
                null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
            if (null === oldFiber) {
                for(; !step.done; newIdx++, step = newChildren.next())oldFiber = createChild(returnFiber, step.value, lanes), null !== oldFiber && (knownKeys = warnOnInvalidKey(returnFiber, oldFiber, step.value, knownKeys), currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
                isHydrating && pushTreeFork(returnFiber, newIdx);
                return resultingFirstChild;
            }
            for(oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== nextOldFiber && (knownKeys = warnOnInvalidKey(returnFiber, nextOldFiber, step.value, knownKeys), shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(null === nextOldFiber.key ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
            shouldTrackSideEffects && oldFiber.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
        }
        function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
            "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (validateFragmentProps(newChild, null, returnFiber), newChild = newChild.props.children);
            if ("object" === typeof newChild && null !== newChild) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                        a: {
                            for(var key = newChild.key; null !== currentFirstChild;){
                                if (currentFirstChild.key === key) {
                                    key = newChild.type;
                                    if (key === REACT_FRAGMENT_TYPE) {
                                        if (7 === currentFirstChild.tag) {
                                            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                            lanes = useFiber(currentFirstChild, newChild.props.children);
                                            lanes.return = returnFiber;
                                            lanes._debugOwner = newChild._owner;
                                            lanes._debugInfo = currentDebugInfo;
                                            validateFragmentProps(newChild, lanes, returnFiber);
                                            returnFiber = lanes;
                                            break a;
                                        }
                                    } else if (currentFirstChild.elementType === key || isCompatibleFamilyForHotReloading(currentFirstChild, newChild) || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && callLazyInitInDEV(key) === currentFirstChild.type) {
                                        deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                        lanes = useFiber(currentFirstChild, newChild.props);
                                        coerceRef(lanes, newChild);
                                        lanes.return = returnFiber;
                                        lanes._debugOwner = newChild._owner;
                                        lanes._debugInfo = currentDebugInfo;
                                        returnFiber = lanes;
                                        break a;
                                    }
                                    deleteRemainingChildren(returnFiber, currentFirstChild);
                                    break;
                                } else deleteChild(returnFiber, currentFirstChild);
                                currentFirstChild = currentFirstChild.sibling;
                            }
                            newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugInfo = currentDebugInfo, validateFragmentProps(newChild, lanes, returnFiber), returnFiber = lanes) : (lanes = createFiberFromElement(newChild, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes._debugInfo = currentDebugInfo, returnFiber = lanes);
                        }
                        returnFiber = placeSingleChild(returnFiber);
                        currentDebugInfo = prevDebugInfo;
                        return returnFiber;
                    case REACT_PORTAL_TYPE:
                        a: {
                            prevDebugInfo = newChild;
                            for(newChild = prevDebugInfo.key; null !== currentFirstChild;){
                                if (currentFirstChild.key === newChild) {
                                    if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === prevDebugInfo.containerInfo && currentFirstChild.stateNode.implementation === prevDebugInfo.implementation) {
                                        deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                                        lanes = useFiber(currentFirstChild, prevDebugInfo.children || []);
                                        lanes.return = returnFiber;
                                        returnFiber = lanes;
                                        break a;
                                    } else {
                                        deleteRemainingChildren(returnFiber, currentFirstChild);
                                        break;
                                    }
                                } else deleteChild(returnFiber, currentFirstChild);
                                currentFirstChild = currentFirstChild.sibling;
                            }
                            lanes = createFiberFromPortal(prevDebugInfo, returnFiber.mode, lanes);
                            lanes.return = returnFiber;
                            returnFiber = lanes;
                        }
                        return placeSingleChild(returnFiber);
                    case REACT_LAZY_TYPE:
                        return prevDebugInfo = pushDebugInfo(newChild._debugInfo), newChild = callLazyInitInDEV(newChild), returnFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes), currentDebugInfo = prevDebugInfo, returnFiber;
                }
                if (isArrayImpl(newChild)) return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes), currentDebugInfo = prevDebugInfo, returnFiber;
                if (getIteratorFn(newChild)) {
                    prevDebugInfo = pushDebugInfo(newChild._debugInfo);
                    key = getIteratorFn(newChild);
                    if ("function" !== typeof key) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                    var newChildren = key.call(newChild);
                    if (newChildren === newChild) {
                        if (0 !== returnFiber.tag || "[object GeneratorFunction]" !== Object.prototype.toString.call(returnFiber.type) || "[object Generator]" !== Object.prototype.toString.call(newChildren)) didWarnAboutGenerators || console.error("Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."), didWarnAboutGenerators = !0;
                    } else newChild.entries !== key || didWarnAboutMaps || (console.error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
                    returnFiber = reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes);
                    currentDebugInfo = prevDebugInfo;
                    return returnFiber;
                }
                if ("function" === typeof newChild.then) return prevDebugInfo = pushDebugInfo(newChild._debugInfo), returnFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(newChild), lanes), currentDebugInfo = prevDebugInfo, returnFiber;
                if (newChild.$$typeof === REACT_CONTEXT_TYPE) return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, newChild), lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild) return prevDebugInfo = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, prevDebugInfo), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(prevDebugInfo, returnFiber.mode, lanes), lanes.return = returnFiber, lanes._debugOwner = returnFiber, lanes._debugInfo = currentDebugInfo, returnFiber = lanes), placeSingleChild(returnFiber);
            "function" === typeof newChild && warnOnFunctionType(returnFiber, newChild);
            "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return function(returnFiber, currentFirstChild, newChild, lanes) {
            var prevDebugInfo = currentDebugInfo;
            currentDebugInfo = null;
            try {
                thenableIndexCounter$1 = 0;
                var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
                thenableState$1 = null;
                return firstChildFiber;
            } catch (x) {
                if (x === SuspenseException) throw x;
                var fiber = createFiber(29, x, null, returnFiber.mode);
                fiber.lanes = lanes;
                fiber.return = returnFiber;
                var debugInfo = fiber._debugInfo = currentDebugInfo;
                fiber._debugOwner = returnFiber._debugOwner;
                if (null != debugInfo) {
                    for(var i = debugInfo.length - 1; 0 <= i; i--)if ("string" === typeof debugInfo[i].stack) {
                        fiber._debugOwner = debugInfo[i];
                        break;
                    }
                }
                return fiber;
            } finally{
                currentDebugInfo = prevDebugInfo;
            }
        };
    }
    function pushHiddenContext(fiber, context) {
        var prevEntangledRenderLanes = entangledRenderLanes;
        push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);
        push(currentTreeHiddenStackCursor, context, fiber);
        entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;
    }
    function reuseHiddenContextOnStack(fiber) {
        push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);
        push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current, fiber);
    }
    function popHiddenContext(fiber) {
        entangledRenderLanes = prevEntangledRenderLanesCursor.current;
        pop(currentTreeHiddenStackCursor, fiber);
        pop(prevEntangledRenderLanesCursor, fiber);
    }
    function pushPrimaryTreeSuspenseHandler(handler) {
        var current = handler.alternate;
        push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask, handler);
        push(suspenseHandlerStackCursor, handler, handler);
        null === shellBoundary && (null === current || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current.memoizedState && (shellBoundary = handler));
    }
    function pushOffscreenSuspenseHandler(fiber) {
        if (22 === fiber.tag) {
            if (push(suspenseStackCursor, suspenseStackCursor.current, fiber), push(suspenseHandlerStackCursor, fiber, fiber), null === shellBoundary) {
                var current = fiber.alternate;
                null !== current && null !== current.memoizedState && (shellBoundary = fiber);
            }
        } else reuseSuspenseHandlerOnStack(fiber);
    }
    function reuseSuspenseHandlerOnStack(fiber) {
        push(suspenseStackCursor, suspenseStackCursor.current, fiber);
        push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current, fiber);
    }
    function popSuspenseHandler(fiber) {
        pop(suspenseHandlerStackCursor, fiber);
        shellBoundary === fiber && (shellBoundary = null);
        pop(suspenseStackCursor, fiber);
    }
    function findFirstSuspended(row) {
        for(var node = row; null !== node;){
            if (13 === node.tag) {
                var state = node.memoizedState;
                if (null !== state && (state = state.dehydrated, null === state || state.data === SUSPENSE_PENDING_START_DATA || state.data === SUSPENSE_FALLBACK_START_DATA)) return node;
            } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
                if (0 !== (node.flags & 128)) return node;
            } else if (null !== node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) break;
            for(; null === node.sibling;){
                if (null === node.return || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    function createCache() {
        return {
            controller: new AbortControllerLocal(),
            data: new Map(),
            refCount: 0
        };
    }
    function retainCache(cache) {
        cache.controller.signal.aborted && console.warn("A cache instance was retained after it was already freed. This likely indicates a bug in React.");
        cache.refCount++;
    }
    function releaseCache(cache) {
        cache.refCount--;
        0 > cache.refCount && console.warn("A cache instance was released after it was already freed. This likely indicates a bug in React.");
        0 === cache.refCount && scheduleCallback$2(NormalPriority, function() {
            cache.controller.abort();
        });
    }
    function entangleAsyncAction(transition, thenable) {
        if (null === currentEntangledListeners) {
            var entangledListeners = currentEntangledListeners = [];
            currentEntangledPendingCount = 0;
            currentEntangledLane = requestTransitionLane();
            currentEntangledActionThenable = {
                status: "pending",
                value: void 0,
                then: function(resolve) {
                    entangledListeners.push(resolve);
                }
            };
        }
        currentEntangledPendingCount++;
        thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
        return thenable;
    }
    function pingEngtangledActionScope() {
        if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
            null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
            var listeners = currentEntangledListeners;
            currentEntangledListeners = null;
            currentEntangledLane = 0;
            currentEntangledActionThenable = null;
            for(var i = 0; i < listeners.length; i++)(0, listeners[i])();
        }
    }
    function chainThenableValue(thenable, result) {
        var listeners = [], thenableWithOverride = {
            status: "pending",
            value: null,
            reason: null,
            then: function(resolve) {
                listeners.push(resolve);
            }
        };
        thenable.then(function() {
            thenableWithOverride.status = "fulfilled";
            thenableWithOverride.value = result;
            for(var i = 0; i < listeners.length; i++)(0, listeners[i])(result);
        }, function(error) {
            thenableWithOverride.status = "rejected";
            thenableWithOverride.reason = error;
            for(error = 0; error < listeners.length; error++)(0, listeners[error])(void 0);
        });
        return thenableWithOverride;
    }
    function peekCacheFromPool() {
        var cacheResumedFromPreviousRender = resumedCache.current;
        return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
    }
    function pushTransition(offscreenWorkInProgress, prevCachePool) {
        null === prevCachePool ? push(resumedCache, resumedCache.current, offscreenWorkInProgress) : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
    }
    function getSuspendedCache() {
        var cacheFromPool = peekCacheFromPool();
        return null === cacheFromPool ? null : {
            parent: CacheContext._currentValue,
            pool: cacheFromPool
        };
    }
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        null === hookTypesDev ? hookTypesDev = [
            hookName
        ] : hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (null !== hookTypesDev && (hookTypesUpdateIndexDev++, hookTypesDev[hookTypesUpdateIndexDev] !== hookName)) {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName) && (didWarnAboutMismatchedHooksForComponent.add(componentName), null !== hookTypesDev)) {
                for(var table = "", i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i], newHookName = i === hookTypesUpdateIndexDev ? hookName : oldHookName;
                    for(oldHookName = i + 1 + ". " + oldHookName; 30 > oldHookName.length;)oldHookName += " ";
                    oldHookName += newHookName + "\n";
                    table += oldHookName;
                }
                console.error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function checkDepsAreArrayDev(deps) {
        void 0 === deps || null === deps || isArrayImpl(deps) || console.error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnUseFormStateInDev() {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        didWarnAboutUseFormState.has(componentName) || (didWarnAboutUseFormState.add(componentName), console.error("ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.", componentName));
    }
    function throwInvalidHookError() {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) return !1;
        if (null === prevDeps) return console.error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), !1;
        nextDeps.length !== prevDeps.length && console.error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++)if (!objectIs(nextDeps[i], prevDeps[i])) return !1;
        return !0;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = null !== current ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = null !== current && current.type !== workInProgress.type;
        if ("[object AsyncFunction]" === Object.prototype.toString.call(Component) || "[object AsyncGeneratorFunction]" === Object.prototype.toString.call(Component)) nextRenderLanes = getComponentNameFromFiber(currentlyRenderingFiber$1), didWarnAboutAsyncClientComponent.has(nextRenderLanes) || (didWarnAboutAsyncClientComponent.add(nextRenderLanes), console.error("async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."));
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = 0;
        ReactSharedInternals.H = null !== current && null !== current.memoizedState ? HooksDispatcherOnUpdateInDEV : null !== hookTypesDev ? HooksDispatcherOnMountWithHookTypesInDEV : HooksDispatcherOnMountInDEV;
        shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes = (workInProgress.mode & StrictLegacyMode) !== NoMode;
        var children = callComponentInDEV(Component, props, secondArg);
        shouldDoubleInvokeUserFnsInHooksDEV = !1;
        didScheduleRenderPhaseUpdateDuringThisPass && (children = renderWithHooksAgain(workInProgress, Component, props, secondArg));
        if (nextRenderLanes) {
            setIsStrictModeForDevtools(!0);
            try {
                children = renderWithHooksAgain(workInProgress, Component, props, secondArg);
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
        finishRenderingHooks(current, workInProgress);
        return children;
    }
    function finishRenderingHooks(current, workInProgress) {
        workInProgress._debugHookTypes = hookTypesDev;
        null === workInProgress.dependencies ? null !== thenableState && (workInProgress.dependencies = {
            lanes: 0,
            firstContext: null,
            _debugThenableState: thenableState
        }) : workInProgress.dependencies._debugThenableState = thenableState;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
        renderLanes = 0;
        hookTypesDev = currentHookNameInDev = workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
        hookTypesUpdateIndexDev = -1;
        null !== current && (current.flags & 31457280) !== (workInProgress.flags & 31457280) && console.error("Internal React error: Expected static flag was missing. Please notify the React team.");
        didScheduleRenderPhaseUpdate = !1;
        thenableIndexCounter = 0;
        thenableState = null;
        if (didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        null === current || didReceiveUpdate || (current = current.dependencies, null !== current && checkIfContextChanged(current) && (didReceiveUpdate = !0));
        needsToResetSuspendedThenableDEV ? (needsToResetSuspendedThenableDEV = !1, current = !0) : current = !1;
        current && (workInProgress = getComponentNameFromFiber(workInProgress) || "Unknown", didWarnAboutUseWrappedInTryCatch.has(workInProgress) || didWarnAboutAsyncClientComponent.has(workInProgress) || (didWarnAboutUseWrappedInTryCatch.add(workInProgress), console.error("`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary.")));
    }
    function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
        currentlyRenderingFiber$1 = workInProgress;
        var numberOfReRenders = 0;
        do {
            didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
            thenableIndexCounter = 0;
            didScheduleRenderPhaseUpdateDuringThisPass = !1;
            if (numberOfReRenders >= RE_RENDER_LIMIT) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            numberOfReRenders += 1;
            ignorePreviousDependencies = !1;
            workInProgressHook = currentHook = null;
            if (null != workInProgress.updateQueue) {
                var children = workInProgress.updateQueue;
                children.lastEffect = null;
                children.events = null;
                children.stores = null;
                null != children.memoCache && (children.memoCache.index = 0);
            }
            hookTypesUpdateIndexDev = -1;
            ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;
            children = callComponentInDEV(Component, props, secondArg);
        }while (didScheduleRenderPhaseUpdateDuringThisPass);
        return children;
    }
    function TransitionAwareHostComponent() {
        var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
        maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
        dispatcher = dispatcher.useState()[0];
        (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber$1.flags |= 1024);
        return maybeThenable;
    }
    function checkDidRenderIdHook() {
        var didRenderIdHook = 0 !== localIdCounter;
        localIdCounter = 0;
        return didRenderIdHook;
    }
    function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.flags = (workInProgress.mode & StrictEffectsMode) !== NoMode ? workInProgress.flags & -201328645 : workInProgress.flags & -2053;
        current.lanes &= ~lanes;
    }
    function resetHooksOnUnwind(workInProgress) {
        if (didScheduleRenderPhaseUpdate) {
            for(workInProgress = workInProgress.memoizedState; null !== workInProgress;){
                var queue = workInProgress.queue;
                null !== queue && (queue.pending = null);
                workInProgress = workInProgress.next;
            }
            didScheduleRenderPhaseUpdate = !1;
        }
        renderLanes = 0;
        hookTypesDev = workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        didScheduleRenderPhaseUpdateDuringThisPass = !1;
        thenableIndexCounter = localIdCounter = 0;
        thenableState = null;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        if (null === currentHook) {
            var nextCurrentHook = currentlyRenderingFiber$1.alternate;
            nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState : workInProgressHook.next;
        if (null !== nextWorkInProgressHook) workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
        else {
            if (null === nextCurrentHook) {
                if (null === currentlyRenderingFiber$1.alternate) throw Error("Update hook called on initial render. This is likely a bug in React. Please file an issue.");
                throw Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            nextCurrentHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            null === workInProgressHook ? currentlyRenderingFiber$1.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
        }
        return workInProgressHook;
    }
    function useThenable(thenable) {
        var index = thenableIndexCounter;
        thenableIndexCounter += 1;
        null === thenableState && (thenableState = createThenableState());
        thenable = trackUsedThenable(thenableState, thenable, index);
        index = currentlyRenderingFiber$1;
        null === (null === workInProgressHook ? index.memoizedState : workInProgressHook.next) && (index = index.alternate, ReactSharedInternals.H = null !== index && null !== index.memoizedState ? HooksDispatcherOnUpdateInDEV : HooksDispatcherOnMountInDEV);
        return thenable;
    }
    function use(usable) {
        if (null !== usable && "object" === typeof usable) {
            if ("function" === typeof usable.then) return useThenable(usable);
            if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
        }
        throw Error("An unsupported type was passed to use(): " + String(usable));
    }
    function useMemoCache(size) {
        var memoCache = null, updateQueue = currentlyRenderingFiber$1.updateQueue;
        null !== updateQueue && (memoCache = updateQueue.memoCache);
        if (null == memoCache) {
            var current = currentlyRenderingFiber$1.alternate;
            null !== current && (current = current.updateQueue, null !== current && (current = current.memoCache, null != current && (memoCache = {
                data: current.data.map(function(array) {
                    return array.slice();
                }),
                index: 0
            })));
        }
        null == memoCache && (memoCache = {
            data: [],
            index: 0
        });
        null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = updateQueue);
        updateQueue.memoCache = memoCache;
        updateQueue = memoCache.data[memoCache.index];
        if (void 0 === updateQueue || ignorePreviousDependencies) for(updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0; current < size; current++)updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
        else updateQueue.length !== size && console.error("Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.", updateQueue.length, size);
        memoCache.index++;
        return updateQueue;
    }
    function basicStateReducer(state, action) {
        return "function" === typeof action ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        if (void 0 !== init) {
            var initialState = init(initialArg);
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
                setIsStrictModeForDevtools(!0);
                try {
                    init(initialArg);
                } finally{
                    setIsStrictModeForDevtools(!1);
                }
            }
        } else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        reducer = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = reducer;
        reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, reducer);
        return [
            hook.memoizedState,
            reducer
        ];
    }
    function updateReducer(reducer) {
        var hook = updateWorkInProgressHook();
        return updateReducerImpl(hook, currentHook, reducer);
    }
    function updateReducerImpl(hook, current, reducer) {
        var queue = hook.queue;
        if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
        queue.lastRenderedReducer = reducer;
        var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
        if (null !== pendingQueue) {
            if (null !== baseQueue) {
                var baseFirst = baseQueue.next;
                baseQueue.next = pendingQueue.next;
                pendingQueue.next = baseFirst;
            }
            current.baseQueue !== baseQueue && console.error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        pendingQueue = hook.baseState;
        if (null === baseQueue) hook.memoizedState = pendingQueue;
        else {
            current = baseQueue.next;
            var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current, didReadFromEntangledAsyncAction = !1;
            do {
                var updateLane = update.lane & -536870913;
                if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                    var revertLane = update.revertLane;
                    if (0 === revertLane) null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                        lane: 0,
                        revertLane: 0,
                        action: update.action,
                        hasEagerState: update.hasEagerState,
                        eagerState: update.eagerState,
                        next: null
                    }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = !0);
                    else if ((renderLanes & revertLane) === revertLane) {
                        update = update.next;
                        revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction = !0);
                        continue;
                    } else updateLane = {
                        lane: 0,
                        revertLane: update.revertLane,
                        action: update.action,
                        hasEagerState: update.hasEagerState,
                        eagerState: update.eagerState,
                        next: null
                    }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber$1.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
                    updateLane = update.action;
                    shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
                    pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
                } else revertLane = {
                    lane: updateLane,
                    revertLane: update.revertLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber$1.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
                update = update.next;
            }while (null !== update && update !== current);
            null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
            if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = !0, didReadFromEntangledAsyncAction && (reducer = currentEntangledActionThenable, null !== reducer))) throw reducer;
            hook.memoizedState = pendingQueue;
            hook.baseState = baseFirst;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = pendingQueue;
        }
        null === baseQueue && (queue.lanes = 0);
        return [
            hook.memoizedState,
            queue.dispatch
        ];
    }
    function rerenderReducer(reducer) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (null === queue) throw Error("Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)");
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
        if (null !== lastRenderPhaseUpdate) {
            queue.pending = null;
            var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            do newState = reducer(newState, update.action), update = update.next;
            while (update !== lastRenderPhaseUpdate);
            objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);
            hook.memoizedState = newState;
            null === hook.baseQueue && (hook.baseState = newState);
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = mountWorkInProgressHook();
        if (isHydrating) {
            if (void 0 === getServerSnapshot) throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            var nextSnapshot = getServerSnapshot();
            didWarnUncachedGetSnapshot || nextSnapshot === getServerSnapshot() || (console.error("The result of getServerSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
        } else {
            nextSnapshot = getSnapshot();
            didWarnUncachedGetSnapshot || (getServerSnapshot = getSnapshot(), objectIs(nextSnapshot, getServerSnapshot) || (console.error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0));
            if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            0 !== (workInProgressRootRenderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        hook.memoizedState = nextSnapshot;
        getServerSnapshot = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = getServerSnapshot;
        mountEffect(subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe), [
            subscribe
        ]);
        fiber.flags |= 2048;
        pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, getServerSnapshot, nextSnapshot, getSnapshot), {
            destroy: void 0
        }, null);
        return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
        if (isHydrating$jscomp$0) {
            if (void 0 === getServerSnapshot) throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            getServerSnapshot = getServerSnapshot();
        } else if (getServerSnapshot = getSnapshot(), !didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            objectIs(getServerSnapshot, cachedSnapshot) || (console.error("The result of getSnapshot should be cached to avoid an infinite loop"), didWarnUncachedGetSnapshot = !0);
        }
        if (cachedSnapshot = !objectIs((currentHook || hook).memoizedState, getServerSnapshot)) hook.memoizedState = getServerSnapshot, didReceiveUpdate = !0;
        hook = hook.queue;
        var create = subscribeToStore.bind(null, fiber, hook, subscribe);
        updateEffectImpl(2048, Passive, create, [
            subscribe
        ]);
        if (hook.getSnapshot !== getSnapshot || cachedSnapshot || null !== workInProgressHook && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= 2048;
            pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, hook, getServerSnapshot, getSnapshot), {
                destroy: void 0
            }, null);
            if (null === workInProgressRoot) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            isHydrating$jscomp$0 || 0 !== (renderLanes & 60) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
        }
        return getServerSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= 16384;
        fiber = {
            getSnapshot: getSnapshot,
            value: renderedSnapshot
        };
        getSnapshot = currentlyRenderingFiber$1.updateQueue;
        null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = getSnapshot, getSnapshot.stores = [
            fiber
        ]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [
            fiber
        ] : renderedSnapshot.push(fiber));
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
        return subscribe(function() {
            checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
        });
    }
    function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
            var nextValue = latestGetSnapshot();
            return !objectIs(inst, nextValue);
        } catch (error) {
            return !0;
        }
    }
    function forceStoreRerender(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, 2);
        null !== root && scheduleUpdateOnFiber(root, fiber, 2);
    }
    function mountStateImpl(initialState) {
        var hook = mountWorkInProgressHook();
        if ("function" === typeof initialState) {
            var initialStateInitializer = initialState;
            initialState = initialStateInitializer();
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
                setIsStrictModeForDevtools(!0);
                try {
                    initialStateInitializer();
                } finally{
                    setIsStrictModeForDevtools(!1);
                }
            }
        }
        hook.memoizedState = hook.baseState = initialState;
        hook.queue = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        return hook;
    }
    function mountState(initialState) {
        initialState = mountStateImpl(initialState);
        var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        queue.dispatch = dispatch;
        return [
            initialState.memoizedState,
            dispatch
        ];
    }
    function mountOptimistic(passthrough) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = hook.baseState = passthrough;
        var queue = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: null,
            lastRenderedState: null
        };
        hook.queue = queue;
        hook = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, !0, queue);
        queue.dispatch = hook;
        return [
            passthrough,
            hook
        ];
    }
    function updateOptimistic(passthrough, reducer) {
        var hook = updateWorkInProgressHook();
        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
    }
    function updateOptimisticImpl(hook, current, passthrough, reducer) {
        hook.baseState = passthrough;
        return updateReducerImpl(hook, currentHook, "function" === typeof reducer ? reducer : basicStateReducer);
    }
    function rerenderOptimistic(passthrough, reducer) {
        var hook = updateWorkInProgressHook();
        if (null !== currentHook) return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
        hook.baseState = passthrough;
        return [
            passthrough,
            hook.queue.dispatch
        ];
    }
    function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
        if (isRenderPhaseUpdate(fiber)) throw Error("Cannot update form state while rendering.");
        fiber = actionQueue.action;
        if (null !== fiber) {
            var actionNode = {
                payload: payload,
                action: fiber,
                next: null,
                isTransition: !0,
                status: "pending",
                value: null,
                reason: null,
                listeners: [],
                then: function(listener) {
                    actionNode.listeners.push(listener);
                }
            };
            null !== ReactSharedInternals.T ? setPendingState(!0) : actionNode.isTransition = !1;
            setState(actionNode);
            setPendingState = actionQueue.pending;
            null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
        }
    }
    function runActionStateAction(actionQueue, node) {
        var action = node.action, payload = node.payload, prevState = actionQueue.state;
        if (node.isTransition) {
            var prevTransition = ReactSharedInternals.T, currentTransition = {};
            ReactSharedInternals.T = currentTransition;
            ReactSharedInternals.T._updatedFibers = new Set();
            try {
                var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
                null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
                handleActionReturnValue(actionQueue, node, returnValue);
            } catch (error) {
                onActionError(actionQueue, node, error);
            } finally{
                ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (actionQueue = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < actionQueue && console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."));
            }
        } else try {
            currentTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, currentTransition);
        } catch (error$3) {
            onActionError(actionQueue, node, error$3);
        }
    }
    function handleActionReturnValue(actionQueue, node, returnValue) {
        null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? (returnValue.then(function(nextState) {
            onActionSuccess(actionQueue, node, nextState);
        }, function(error) {
            return onActionError(actionQueue, node, error);
        }), node.isTransition || console.error("An async function was passed to useActionState, but it was dispatched outside of an action context. This is likely not what you intended. Either pass the dispatch function to an `action` prop, or dispatch manually inside `startTransition`")) : onActionSuccess(actionQueue, node, returnValue);
    }
    function onActionSuccess(actionQueue, actionNode, nextState) {
        actionNode.status = "fulfilled";
        actionNode.value = nextState;
        notifyActionListeners(actionNode);
        actionQueue.state = nextState;
        actionNode = actionQueue.pending;
        null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
    }
    function onActionError(actionQueue, actionNode, error) {
        var last = actionQueue.pending;
        actionQueue.pending = null;
        if (null !== last) {
            last = last.next;
            do actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
            while (actionNode !== last);
        }
        actionQueue.action = null;
    }
    function notifyActionListeners(actionNode) {
        actionNode = actionNode.listeners;
        for(var i = 0; i < actionNode.length; i++)(0, actionNode[i])();
    }
    function actionStateReducer(oldState, newState) {
        return newState;
    }
    function mountActionState(action, initialStateProp) {
        if (isHydrating) {
            var ssrFormState = workInProgressRoot.formState;
            if (null !== ssrFormState) {
                a: {
                    var isMatching = currentlyRenderingFiber$1;
                    if (isHydrating) {
                        if (nextHydratableInstance) {
                            b: {
                                var markerInstance = nextHydratableInstance;
                                for(var inRootOrSingleton = rootOrSingletonContext; 8 !== markerInstance.nodeType;){
                                    if (!inRootOrSingleton) {
                                        markerInstance = null;
                                        break b;
                                    }
                                    markerInstance = getNextHydratable(markerInstance.nextSibling);
                                    if (null === markerInstance) {
                                        markerInstance = null;
                                        break b;
                                    }
                                }
                                inRootOrSingleton = markerInstance.data;
                                markerInstance = inRootOrSingleton === FORM_STATE_IS_MATCHING || inRootOrSingleton === FORM_STATE_IS_NOT_MATCHING ? markerInstance : null;
                            }
                            if (markerInstance) {
                                nextHydratableInstance = getNextHydratable(markerInstance.nextSibling);
                                isMatching = markerInstance.data === FORM_STATE_IS_MATCHING;
                                break a;
                            }
                        }
                        throwOnHydrationMismatch(isMatching);
                    }
                    isMatching = !1;
                }
                isMatching && (initialStateProp = ssrFormState[0]);
            }
        }
        ssrFormState = mountWorkInProgressHook();
        ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
        isMatching = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: actionStateReducer,
            lastRenderedState: initialStateProp
        };
        ssrFormState.queue = isMatching;
        ssrFormState = dispatchSetState.bind(null, currentlyRenderingFiber$1, isMatching);
        isMatching.dispatch = ssrFormState;
        isMatching = mountStateImpl(!1);
        inRootOrSingleton = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber$1, !1, isMatching.queue);
        isMatching = mountWorkInProgressHook();
        markerInstance = {
            state: initialStateProp,
            dispatch: null,
            action: action,
            pending: null
        };
        isMatching.queue = markerInstance;
        ssrFormState = dispatchActionState.bind(null, currentlyRenderingFiber$1, markerInstance, inRootOrSingleton, ssrFormState);
        markerInstance.dispatch = ssrFormState;
        isMatching.memoizedState = action;
        return [
            initialStateProp,
            ssrFormState,
            !1
        ];
    }
    function updateActionState(action) {
        var stateHook = updateWorkInProgressHook();
        return updateActionStateImpl(stateHook, currentHook, action);
    }
    function updateActionStateImpl(stateHook, currentStateHook, action) {
        currentStateHook = updateReducerImpl(stateHook, currentStateHook, actionStateReducer)[0];
        stateHook = updateReducer(basicStateReducer)[0];
        currentStateHook = "object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then ? useThenable(currentStateHook) : currentStateHook;
        var actionQueueHook = updateWorkInProgressHook(), actionQueue = actionQueueHook.queue, dispatch = actionQueue.dispatch;
        action !== actionQueueHook.memoizedState && (currentlyRenderingFiber$1.flags |= 2048, pushEffect(HasEffect | Passive, actionStateActionEffect.bind(null, actionQueue, action), {
            destroy: void 0
        }, null));
        return [
            currentStateHook,
            dispatch,
            stateHook
        ];
    }
    function actionStateActionEffect(actionQueue, action) {
        actionQueue.action = action;
    }
    function rerenderActionState(action) {
        var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
        if (null !== currentStateHook) return updateActionStateImpl(stateHook, currentStateHook, action);
        updateWorkInProgressHook();
        stateHook = stateHook.memoizedState;
        currentStateHook = updateWorkInProgressHook();
        var dispatch = currentStateHook.queue.dispatch;
        currentStateHook.memoizedState = action;
        return [
            stateHook,
            dispatch,
            !1
        ];
    }
    function pushEffect(tag, create, inst, deps) {
        tag = {
            tag: tag,
            create: create,
            inst: inst,
            deps: deps,
            next: null
        };
        create = currentlyRenderingFiber$1.updateQueue;
        null === create && (create = createFunctionComponentUpdateQueue(), currentlyRenderingFiber$1.updateQueue = create);
        inst = create.lastEffect;
        null === inst ? create.lastEffect = tag.next = tag : (deps = inst.next, inst.next = tag, tag.next = deps, create.lastEffect = tag);
        return tag;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        initialValue = {
            current: initialValue
        };
        return hook.memoizedState = initialValue;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, {
            destroy: void 0
        }, void 0 === deps ? null : deps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var inst = hook.memoizedState.inst;
        null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushEffect(hookFlags, create, inst, deps) : (currentlyRenderingFiber$1.flags |= fiberFlags, hook.memoizedState = pushEffect(HasEffect | hookFlags, create, inst, deps));
    }
    function mountEffect(create, deps) {
        (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (currentlyRenderingFiber$1.mode & NoStrictPassiveEffectsMode) === NoMode ? mountEffectImpl(142608384, Passive, create, deps) : mountEffectImpl(8390656, Passive, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        var fiberFlags = 4194308;
        (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 67108864);
        return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if ("function" === typeof ref) {
            create = create();
            var refCleanup = ref(create);
            return function() {
                "function" === typeof refCleanup ? refCleanup() : ref(null);
            };
        }
        if (null !== ref && void 0 !== ref) return ref.hasOwnProperty("current") || console.error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(ref).join(", ") + "}"), create = create(), ref.current = create, function() {
            ref.current = null;
        };
    }
    function mountImperativeHandle(ref, create, deps) {
        "function" !== typeof create && console.error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", null !== create ? typeof create : "null");
        deps = null !== deps && void 0 !== deps ? deps.concat([
            ref
        ]) : null;
        var fiberFlags = 4194308;
        (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (fiberFlags |= 67108864);
        mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), deps);
    }
    function updateImperativeHandle(ref, create, deps) {
        "function" !== typeof create && console.error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", null !== create ? typeof create : "null");
        deps = null !== deps && void 0 !== deps ? deps.concat([
            ref
        ]) : null;
        updateEffectImpl(4, Layout, imperativeHandleEffect.bind(null, create, ref), deps);
    }
    function mountCallback(callback, deps) {
        mountWorkInProgressHook().memoizedState = [
            callback,
            void 0 === deps ? null : deps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var prevState = hook.memoizedState;
        if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
        hook.memoizedState = [
            callback,
            deps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var nextValue = nextCreate();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(!0);
            try {
                nextCreate();
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
        hook.memoizedState = [
            nextValue,
            deps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var prevState = hook.memoizedState;
        if (null !== deps && areHookInputsEqual(deps, prevState[1])) return prevState[0];
        prevState = nextCreate();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(!0);
            try {
                nextCreate();
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
        hook.memoizedState = [
            prevState,
            deps
        ];
        return prevState;
    }
    function mountDeferredValue(value, initialValue) {
        var hook = mountWorkInProgressHook();
        return mountDeferredValueImpl(hook, value, initialValue);
    }
    function updateDeferredValue(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    }
    function rerenderDeferredValue(value, initialValue) {
        var hook = updateWorkInProgressHook();
        return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    }
    function mountDeferredValueImpl(hook, value, initialValue) {
        if (void 0 === initialValue || 0 !== (renderLanes & 1073741824)) return hook.memoizedState = value;
        hook.memoizedState = initialValue;
        hook = requestDeferredLane();
        currentlyRenderingFiber$1.lanes |= hook;
        workInProgressRootSkippedLanes |= hook;
        return initialValue;
    }
    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
        if (objectIs(value, prevValue)) return value;
        if (null !== currentTreeHiddenStackCursor.current) return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = !0), hook;
        if (0 === (renderLanes & 42)) return didReceiveUpdate = !0, hook.memoizedState = value;
        hook = requestDeferredLane();
        currentlyRenderingFiber$1.lanes |= hook;
        workInProgressRootSkippedLanes |= hook;
        return prevValue;
    }
    function startTransition(fiber, queue, pendingState, finishedState, callback) {
        var previousPriority = ReactDOMSharedInternals.p;
        ReactDOMSharedInternals.p = 0 !== previousPriority && previousPriority < ContinuousEventPriority ? previousPriority : ContinuousEventPriority;
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        dispatchOptimisticSetState(fiber, !1, queue, pendingState);
        currentTransition._updatedFibers = new Set();
        try {
            var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
                var thenableForFinishedState = chainThenableValue(returnValue, finishedState);
                dispatchSetStateInternal(fiber, queue, thenableForFinishedState, requestUpdateLane(fiber));
            } else dispatchSetStateInternal(fiber, queue, finishedState, requestUpdateLane(fiber));
        } catch (error) {
            dispatchSetStateInternal(fiber, queue, {
                then: function() {},
                status: "rejected",
                reason: error
            }, requestUpdateLane(fiber));
        } finally{
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition, null === prevTransition && currentTransition._updatedFibers && (fiber = currentTransition._updatedFibers.size, currentTransition._updatedFibers.clear(), 10 < fiber && console.warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."));
        }
    }
    function startHostTransition(formFiber, pendingState, action, formData) {
        if (5 !== formFiber.tag) throw Error("Expected the form instance to be a HostComponent. This is a bug in React.");
        var queue = ensureFormComponentIsStateful(formFiber).queue;
        startTransition(formFiber, queue, pendingState, NotPendingTransition, null === action ? noop$2 : function() {
            requestFormReset$1(formFiber);
            return action(formData);
        });
    }
    function ensureFormComponentIsStateful(formFiber) {
        var existingStateHook = formFiber.memoizedState;
        if (null !== existingStateHook) return existingStateHook;
        existingStateHook = {
            memoizedState: NotPendingTransition,
            baseState: NotPendingTransition,
            baseQueue: null,
            queue: {
                pending: null,
                lanes: 0,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: NotPendingTransition
            },
            next: null
        };
        var initialResetState = {};
        existingStateHook.next = {
            memoizedState: initialResetState,
            baseState: initialResetState,
            baseQueue: null,
            queue: {
                pending: null,
                lanes: 0,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: initialResetState
            },
            next: null
        };
        formFiber.memoizedState = existingStateHook;
        formFiber = formFiber.alternate;
        null !== formFiber && (formFiber.memoizedState = existingStateHook);
        return existingStateHook;
    }
    function requestFormReset$1(formFiber) {
        null === ReactSharedInternals.T && console.error("requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition.");
        var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
        dispatchSetStateInternal(formFiber, resetStateQueue, {}, requestUpdateLane(formFiber));
    }
    function mountTransition() {
        var stateHook = mountStateImpl(!1);
        stateHook = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, !0, !1);
        mountWorkInProgressHook().memoizedState = stateHook;
        return [
            !1,
            stateHook
        ];
    }
    function updateTransition() {
        var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
        ];
    }
    function rerenderTransition() {
        var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
        return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
        ];
    }
    function useHostTransitionStatus() {
        return readContext(HostTransitionContext);
    }
    function mountId() {
        var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
        if (isHydrating) {
            var treeId = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            treeId = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + treeId;
            identifierPrefix = ":" + identifierPrefix + "R" + treeId;
            treeId = localIdCounter++;
            0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
            identifierPrefix += ":";
        } else treeId = globalClientIdCounter++, identifierPrefix = ":" + identifierPrefix + "r" + treeId.toString(32) + ":";
        return hook.memoizedState = identifierPrefix;
    }
    function mountRefresh() {
        return mountWorkInProgressHook().memoizedState = refreshCache.bind(null, currentlyRenderingFiber$1);
    }
    function refreshCache(fiber, seedKey) {
        for(var provider = fiber.return; null !== provider;){
            switch(provider.tag){
                case 24:
                case 3:
                    var lane = requestUpdateLane(provider);
                    fiber = createUpdate(lane);
                    var root = enqueueUpdate(provider, fiber, lane);
                    null !== root && (scheduleUpdateOnFiber(root, provider, lane), entangleTransitions(root, provider, lane));
                    provider = createCache();
                    null !== seedKey && void 0 !== seedKey && null !== root && console.error("The seed argument is not enabled outside experimental channels.");
                    fiber.payload = {
                        cache: provider
                    };
                    return;
            }
            provider = provider.return;
        }
    }
    function dispatchReducerAction(fiber, queue, action, JSCompiler_OptimizeArgumentsArray_p0) {
        "function" === typeof JSCompiler_OptimizeArgumentsArray_p0 && console.error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        JSCompiler_OptimizeArgumentsArray_p0 = requestUpdateLane(fiber);
        action = {
            lane: JSCompiler_OptimizeArgumentsArray_p0,
            revertLane: 0,
            action: action,
            hasEagerState: !1,
            eagerState: null,
            next: null
        };
        isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, JSCompiler_OptimizeArgumentsArray_p0), null !== action && (scheduleUpdateOnFiber(action, fiber, JSCompiler_OptimizeArgumentsArray_p0), entangleTransitionUpdate(action, queue, JSCompiler_OptimizeArgumentsArray_p0)));
        markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p0);
    }
    function dispatchSetState(fiber, queue, action, JSCompiler_OptimizeArgumentsArray_p1) {
        "function" === typeof JSCompiler_OptimizeArgumentsArray_p1 && console.error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        JSCompiler_OptimizeArgumentsArray_p1 = requestUpdateLane(fiber);
        dispatchSetStateInternal(fiber, queue, action, JSCompiler_OptimizeArgumentsArray_p1);
        markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p1);
    }
    function dispatchSetStateInternal(fiber, queue, action, lane) {
        var update = {
            lane: lane,
            revertLane: 0,
            action: action,
            hasEagerState: !1,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            var alternate = fiber.alternate;
            if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate)) {
                var prevDispatcher = ReactSharedInternals.H;
                ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                    var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
                    update.hasEagerState = !0;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), !1;
                } catch (error) {} finally{
                    ReactSharedInternals.H = prevDispatcher;
                }
            }
            action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (null !== action) return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), !0;
        }
        return !1;
    }
    function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
        null === ReactSharedInternals.T && 0 === currentEntangledLane && console.error("An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition.");
        action = {
            lane: 2,
            revertLane: requestTransitionLane(),
            action: action,
            hasEagerState: !1,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
            if (throwIfDuringRender) throw Error("Cannot update optimistic state while rendering.");
            console.error("Cannot call startTransition while rendering.");
        } else throwIfDuringRender = enqueueConcurrentHookUpdate(fiber, queue, action, 2), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
        markStateUpdateScheduled(fiber, 2);
    }
    function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || null !== alternate && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = !0;
        var pending = queue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        queue.pending = update;
    }
    function entangleTransitionUpdate(root, queue, lane) {
        if (0 !== (lane & 4194176)) {
            var queueLanes = queue.lanes;
            queueLanes &= root.pendingLanes;
            lane |= queueLanes;
            queue.lanes = lane;
            markRootEntangled(root, lane);
        }
    }
    function warnOnInvalidCallback(callback) {
        if (null !== callback && "function" !== typeof callback) {
            var key = String(callback);
            didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), console.error("Expected the last optional `callback` argument to be a function. Instead received: %s.", callback));
        }
    }
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState, partialState = getDerivedStateFromProps(nextProps, prevState);
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(!0);
            try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally{
                setIsStrictModeForDevtools(!1);
            }
        }
        void 0 === partialState && (ctor = getComponentNameFromType(ctor) || "Component", didWarnAboutUndefinedDerivedState.has(ctor) || (didWarnAboutUndefinedDerivedState.add(ctor), console.error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", ctor)));
        prevState = null === partialState || void 0 === partialState ? prevState : assign({}, prevState, partialState);
        workInProgress.memoizedState = prevState;
        0 === workInProgress.lanes && (workInProgress.updateQueue.baseState = prevState);
    }
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if ("function" === typeof instance.shouldComponentUpdate) {
            oldProps = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(!0);
                try {
                    oldProps = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    setIsStrictModeForDevtools(!1);
                }
            }
            void 0 === oldProps && console.error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            return oldProps;
        }
        return ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : !0;
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
        "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        instance.state !== oldState && (workInProgress = getComponentNameFromFiber(workInProgress) || "Component", didWarnAboutStateAssignmentForComponent.has(workInProgress) || (didWarnAboutStateAssignmentForComponent.add(workInProgress), console.error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", workInProgress)), classComponentUpdater.enqueueReplaceState(instance, instance.state, null));
    }
    function resolveClassComponentProps(Component, baseProps) {
        var newProps = baseProps;
        if ("ref" in baseProps) {
            newProps = {};
            for(var propName in baseProps)"ref" !== propName && (newProps[propName] = baseProps[propName]);
        }
        if (Component = Component.defaultProps) {
            newProps === baseProps && (newProps = assign({}, newProps));
            for(var _propName in Component)void 0 === newProps[_propName] && (newProps[_propName] = Component[_propName]);
        }
        return newProps;
    }
    function defaultOnUncaughtError(error, errorInfo) {
        reportGlobalError(error);
        error = componentName ? "An error occurred in the <" + componentName + "> component." : "An error occurred in one of your React components.";
        var prevGetCurrentStack = ReactSharedInternals.getCurrentStack, componentStack = null != errorInfo.componentStack ? errorInfo.componentStack : "";
        ReactSharedInternals.getCurrentStack = function() {
            return componentStack;
        };
        try {
            console.warn("%s\n\n%s\n", error, "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries.");
        } finally{
            ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
        }
    }
    function defaultOnCaughtError(error, errorInfo) {
        var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component." : "The above error occurred in one of your React components.", recreateMessage = "React will try to recreate this component tree from scratch using the error boundary you provided, " + ((errorBoundaryName || "Anonymous") + "."), prevGetCurrentStack = ReactSharedInternals.getCurrentStack, componentStack = null != errorInfo.componentStack ? errorInfo.componentStack : "";
        ReactSharedInternals.getCurrentStack = function() {
            return componentStack;
        };
        try {
            "object" === typeof error && null !== error && "string" === typeof error.environmentName ? bindToConsole("error", [
                "%o\n\n%s\n\n%s\n",
                error,
                componentNameMessage,
                recreateMessage
            ], error.environmentName)() : console.error("%o\n\n%s\n\n%s\n", error, componentNameMessage, recreateMessage);
        } finally{
            ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
        }
    }
    function defaultOnRecoverableError(error) {
        reportGlobalError(error);
    }
    function logUncaughtError(root, errorInfo) {
        try {
            componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
            errorBoundaryName = null;
            var error = errorInfo.value;
            if (null !== ReactSharedInternals.actQueue) ReactSharedInternals.thrownErrors.push(error);
            else {
                var onUncaughtError = root.onUncaughtError;
                onUncaughtError(error, {
                    componentStack: errorInfo.stack
                });
            }
        } catch (e$4) {
            setTimeout(function() {
                throw e$4;
            });
        }
    }
    function logCaughtError(root, boundary, errorInfo) {
        try {
            componentName = errorInfo.source ? getComponentNameFromFiber(errorInfo.source) : null;
            errorBoundaryName = getComponentNameFromFiber(boundary);
            var onCaughtError = root.onCaughtError;
            onCaughtError(errorInfo.value, {
                componentStack: errorInfo.stack,
                errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
            });
        } catch (e$5) {
            setTimeout(function() {
                throw e$5;
            });
        }
    }
    function createRootErrorUpdate(root, errorInfo, lane) {
        lane = createUpdate(lane);
        lane.tag = CaptureUpdate;
        lane.payload = {
            element: null
        };
        lane.callback = function() {
            runWithFiberInDEV(errorInfo.source, logUncaughtError, root, errorInfo);
        };
        return lane;
    }
    function createClassErrorUpdate(lane) {
        lane = createUpdate(lane);
        lane.tag = CaptureUpdate;
        return lane;
    }
    function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if ("function" === typeof getDerivedStateFromError) {
            var error = errorInfo.value;
            update.payload = function() {
                return getDerivedStateFromError(error);
            };
            update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
                runWithFiberInDEV(errorInfo.source, logCaughtError, root, fiber, errorInfo);
            };
        }
        var inst = fiber.stateNode;
        null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
            runWithFiberInDEV(errorInfo.source, logCaughtError, root, fiber, errorInfo);
            "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = new Set([
                this
            ]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
            callComponentDidCatchInDEV(this, errorInfo);
            "function" === typeof getDerivedStateFromError || 0 === (fiber.lanes & 2) && console.error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
        });
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= 32768;
        isDevToolsPresent && restorePendingUpdaters(root, rootRenderLanes);
        if (null !== value && "object" === typeof value && "function" === typeof value.then) {
            returnFiber = sourceFiber.alternate;
            null !== returnFiber && propagateParentContextChanges(returnFiber, sourceFiber, rootRenderLanes, !0);
            isHydrating && (didSuspendOrErrorDEV = !0);
            sourceFiber = suspenseHandlerStackCursor.current;
            if (null !== sourceFiber) {
                switch(sourceFiber.tag){
                    case 13:
                        return null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === sourceFiber.alternate && workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootSuspended), sourceFiber.flags &= -257, sourceFiber.flags |= 65536, sourceFiber.lanes = rootRenderLanes, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? sourceFiber.updateQueue = new Set([
                            value
                        ]) : returnFiber.add(value), attachPingListener(root, value, rootRenderLanes)), !1;
                    case 22:
                        return sourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                            transitions: null,
                            markerInstances: null,
                            retryQueue: new Set([
                                value
                            ])
                        }, sourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = new Set([
                            value
                        ]) : sourceFiber.add(value)), attachPingListener(root, value, rootRenderLanes)), !1;
                }
                throw Error("Unexpected Suspense handler tag (" + sourceFiber.tag + "). This is a bug in React.");
            }
            attachPingListener(root, value, rootRenderLanes);
            renderDidSuspendDelayIfPossible();
            return !1;
        }
        if (isHydrating) return didSuspendOrErrorDEV = !0, returnFiber = suspenseHandlerStackCursor.current, null !== returnFiber ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256), returnFiber.flags |= 65536, returnFiber.lanes = rootRenderLanes, value !== HydrationMismatchException && queueHydrationError(createCapturedValueAtFiber(Error("There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.", {
            cause: value
        }), sourceFiber))) : (value !== HydrationMismatchException && queueHydrationError(createCapturedValueAtFiber(Error("There was an error while hydrating but React was able to recover by instead client rendering the entire root.", {
            cause: value
        }), sourceFiber)), root = root.current.alternate, root.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root.lanes |= rootRenderLanes, value = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(root.stateNode, value, rootRenderLanes), enqueueCapturedUpdate(root, rootRenderLanes), workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored)), !1;
        var error = createCapturedValueAtFiber(Error("There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.", {
            cause: value
        }), sourceFiber);
        null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [
            error
        ] : workInProgressRootConcurrentErrors.push(error);
        workInProgressRootExitStatus !== RootSuspendedWithDelay && (workInProgressRootExitStatus = RootErrored);
        if (null === returnFiber) return !0;
        value = createCapturedValueAtFiber(value, sourceFiber);
        sourceFiber = returnFiber;
        do {
            switch(sourceFiber.tag){
                case 3:
                    return sourceFiber.flags |= 65536, root = rootRenderLanes & -rootRenderLanes, sourceFiber.lanes |= root, root = createRootErrorUpdate(sourceFiber.stateNode, value, root), enqueueCapturedUpdate(sourceFiber, root), !1;
                case 1:
                    if (returnFiber = sourceFiber.type, error = sourceFiber.stateNode, 0 === (sourceFiber.flags & 128) && ("function" === typeof returnFiber.getDerivedStateFromError || null !== error && "function" === typeof error.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(error)))) return sourceFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, sourceFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(rootRenderLanes, root, sourceFiber, value), enqueueCapturedUpdate(sourceFiber, rootRenderLanes), !1;
            }
            sourceFiber = sourceFiber.return;
        }while (null !== sourceFiber);
        return !1;
    }
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        workInProgress.child = null === current ? mountChildFibers(workInProgress, null, nextChildren, renderLanes) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        Component = Component.render;
        var ref = workInProgress.ref;
        if ("ref" in nextProps) {
            var propsWithoutRef = {};
            for(var key in nextProps)"ref" !== key && (propsWithoutRef[key] = nextProps[key]);
        } else propsWithoutRef = nextProps;
        prepareToReadContext(workInProgress);
        markComponentRenderStarted(workInProgress);
        nextProps = renderWithHooks(current, workInProgress, Component, propsWithoutRef, ref, renderLanes);
        key = checkDidRenderIdHook();
        markComponentRenderStopped();
        if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        isHydrating && key && pushMaterializedTreeId(workInProgress);
        workInProgress.flags |= 1;
        reconcileChildren(current, workInProgress, nextProps, renderLanes);
        return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (null === current) {
            var type = Component.type;
            if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component.compare) return Component = resolveFunctionForHotReloading(type), workInProgress.tag = 15, workInProgress.type = Component, validateFunctionComponentInDev(workInProgress, type), updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes);
            current = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            current.ref = workInProgress.ref;
            current.return = workInProgress;
            return workInProgress.child = current;
        }
        type = current.child;
        if (!checkScheduledUpdateOrContext(current, renderLanes)) {
            var prevProps = type.memoizedProps;
            Component = Component.compare;
            Component = null !== Component ? Component : shallowEqual;
            if (Component(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        workInProgress.flags |= 1;
        current = createWorkInProgress(type, nextProps);
        current.ref = workInProgress.ref;
        current.return = workInProgress;
        return workInProgress.child = current;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (null !== current) {
            var prevProps = current.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
                if (didReceiveUpdate = !1, workInProgress.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current, renderLanes)) 0 !== (current.flags & 131072) && (didReceiveUpdate = !0);
                else return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            }
        }
        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps, nextChildren = nextProps.children, nextIsDetached = 0 !== (workInProgress.stateNode._pendingVisibility & OffscreenDetached), prevState = null !== current ? current.memoizedState : null;
        markRef(current, workInProgress);
        if ("hidden" === nextProps.mode || nextIsDetached) {
            if (0 !== (workInProgress.flags & 128)) {
                nextProps = null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;
                if (null !== current) {
                    nextChildren = workInProgress.child = current.child;
                    for(nextIsDetached = 0; null !== nextChildren;)nextIsDetached = nextIsDetached | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
                    workInProgress.childLanes = nextIsDetached & ~nextProps;
                } else workInProgress.childLanes = 0, workInProgress.child = null;
                return deferHiddenOffscreenComponent(current, workInProgress, nextProps, renderLanes);
            }
            if (0 !== (renderLanes & 536870912)) workInProgress.memoizedState = {
                baseLanes: 0,
                cachePool: null
            }, null !== current && pushTransition(workInProgress, null !== prevState ? prevState.cachePool : null), null !== prevState ? pushHiddenContext(workInProgress, prevState) : reuseHiddenContextOnStack(workInProgress), pushOffscreenSuspenseHandler(workInProgress);
            else return workInProgress.lanes = workInProgress.childLanes = 536870912, deferHiddenOffscreenComponent(current, workInProgress, null !== prevState ? prevState.baseLanes | renderLanes : renderLanes, renderLanes);
        } else null !== prevState ? (pushTransition(workInProgress, prevState.cachePool), pushHiddenContext(workInProgress, prevState), reuseSuspenseHandlerOnStack(workInProgress), workInProgress.memoizedState = null) : (null !== current && pushTransition(workInProgress, null), reuseHiddenContextOnStack(workInProgress), reuseSuspenseHandlerOnStack(workInProgress));
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes) {
        var JSCompiler_inline_result = peekCacheFromPool();
        JSCompiler_inline_result = null === JSCompiler_inline_result ? null : {
            parent: CacheContext._currentValue,
            pool: JSCompiler_inline_result
        };
        workInProgress.memoizedState = {
            baseLanes: nextBaseLanes,
            cachePool: JSCompiler_inline_result
        };
        null !== current && pushTransition(workInProgress, null);
        reuseHiddenContextOnStack(workInProgress);
        pushOffscreenSuspenseHandler(workInProgress);
        null !== current && propagateParentContextChanges(current, workInProgress, renderLanes, !0);
        return null;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        if (null === ref) null !== current && null !== current.ref && (workInProgress.flags |= 2097664);
        else {
            if ("function" !== typeof ref && "object" !== typeof ref) throw Error("Expected ref to be a function, an object returned by React.createRef(), or undefined/null.");
            if (null === current || current.ref !== ref) workInProgress.flags |= 2097664;
        }
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (Component.prototype && "function" === typeof Component.prototype.render) {
            var componentName = getComponentNameFromType(Component) || "Unknown";
            didWarnAboutBadClass[componentName] || (console.error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName), didWarnAboutBadClass[componentName] = !0);
        }
        workInProgress.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        null === current && (validateFunctionComponentInDev(workInProgress, workInProgress.type), Component.contextTypes && (componentName = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypes[componentName] || (didWarnAboutContextTypes[componentName] = !0, console.error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)", componentName))));
        prepareToReadContext(workInProgress);
        markComponentRenderStarted(workInProgress);
        Component = renderWithHooks(current, workInProgress, Component, nextProps, void 0, renderLanes);
        nextProps = checkDidRenderIdHook();
        markComponentRenderStopped();
        if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        isHydrating && nextProps && pushMaterializedTreeId(workInProgress);
        workInProgress.flags |= 1;
        reconcileChildren(current, workInProgress, Component, renderLanes);
        return workInProgress.child;
    }
    function replayFunctionComponent(current, workInProgress, nextProps, Component, secondArg, renderLanes) {
        prepareToReadContext(workInProgress);
        markComponentRenderStarted(workInProgress);
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = null !== current && current.type !== workInProgress.type;
        workInProgress.updateQueue = null;
        nextProps = renderWithHooksAgain(workInProgress, Component, nextProps, secondArg);
        finishRenderingHooks(current, workInProgress);
        Component = checkDidRenderIdHook();
        markComponentRenderStopped();
        if (null !== current && !didReceiveUpdate) return bailoutHooks(current, workInProgress, renderLanes), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        isHydrating && Component && pushMaterializedTreeId(workInProgress);
        workInProgress.flags |= 1;
        reconcileChildren(current, workInProgress, nextProps, renderLanes);
        return workInProgress.child;
    }
    function updateClassComponent(current$jscomp$0, workInProgress, Component, nextProps, renderLanes) {
        switch(shouldErrorImpl(workInProgress)){
            case !1:
                var _instance = workInProgress.stateNode, state = new workInProgress.type(workInProgress.memoizedProps, _instance.context).state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
            case !0:
                workInProgress.flags |= 128;
                workInProgress.flags |= 65536;
                _instance = Error("Simulated error coming from DevTools");
                var lane = renderLanes & -renderLanes;
                workInProgress.lanes |= lane;
                state = workInProgressRoot;
                if (null === state) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
                lane = createClassErrorUpdate(lane);
                initializeClassErrorUpdate(lane, state, workInProgress, createCapturedValueAtFiber(_instance, workInProgress));
                enqueueCapturedUpdate(workInProgress, lane);
        }
        prepareToReadContext(workInProgress);
        if (null === workInProgress.stateNode) {
            state = emptyContextObject;
            _instance = Component.contextType;
            "contextType" in Component && null !== _instance && (void 0 === _instance || _instance.$$typeof !== REACT_CONTEXT_TYPE) && !didWarnAboutInvalidateContextType.has(Component) && (didWarnAboutInvalidateContextType.add(Component), lane = void 0 === _instance ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : "object" !== typeof _instance ? " However, it is set to a " + typeof _instance + "." : _instance.$$typeof === REACT_CONSUMER_TYPE ? " Did you accidentally pass the Context.Consumer instead?" : " However, it is set to an object with keys {" + Object.keys(_instance).join(", ") + "}.", console.error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(Component) || "Component", lane));
            "object" === typeof _instance && null !== _instance && (state = readContext(_instance));
            _instance = new Component(nextProps, state);
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(!0);
                try {
                    _instance = new Component(nextProps, state);
                } finally{
                    setIsStrictModeForDevtools(!1);
                }
            }
            state = workInProgress.memoizedState = null !== _instance.state && void 0 !== _instance.state ? _instance.state : null;
            _instance.updater = classComponentUpdater;
            workInProgress.stateNode = _instance;
            _instance._reactInternals = workInProgress;
            _instance._reactInternalInstance = fakeInternalInstance;
            "function" === typeof Component.getDerivedStateFromProps && null === state && (state = getComponentNameFromType(Component) || "Component", didWarnAboutUninitializedState.has(state) || (didWarnAboutUninitializedState.add(state), console.error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", state, null === _instance.state ? "null" : "undefined", state)));
            if ("function" === typeof Component.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate) {
                var foundWillUpdateName = lane = state = null;
                "function" === typeof _instance.componentWillMount && !0 !== _instance.componentWillMount.__suppressDeprecationWarning ? state = "componentWillMount" : "function" === typeof _instance.UNSAFE_componentWillMount && (state = "UNSAFE_componentWillMount");
                "function" === typeof _instance.componentWillReceiveProps && !0 !== _instance.componentWillReceiveProps.__suppressDeprecationWarning ? lane = "componentWillReceiveProps" : "function" === typeof _instance.UNSAFE_componentWillReceiveProps && (lane = "UNSAFE_componentWillReceiveProps");
                "function" === typeof _instance.componentWillUpdate && !0 !== _instance.componentWillUpdate.__suppressDeprecationWarning ? foundWillUpdateName = "componentWillUpdate" : "function" === typeof _instance.UNSAFE_componentWillUpdate && (foundWillUpdateName = "UNSAFE_componentWillUpdate");
                if (null !== state || null !== lane || null !== foundWillUpdateName) {
                    _instance = getComponentNameFromType(Component) || "Component";
                    var newApiName = "function" === typeof Component.getDerivedStateFromProps ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                    didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance), console.error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles", _instance, newApiName, null !== state ? "\n  " + state : "", null !== lane ? "\n  " + lane : "", null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""));
                }
            }
            _instance = workInProgress.stateNode;
            state = getComponentNameFromType(Component) || "Component";
            _instance.render || (Component.prototype && "function" === typeof Component.prototype.render ? console.error("No `render` method found on the %s instance: did you accidentally return an object from the constructor?", state) : console.error("No `render` method found on the %s instance: you may have forgotten to define `render`.", state));
            !_instance.getInitialState || _instance.getInitialState.isReactClassApproved || _instance.state || console.error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", state);
            _instance.getDefaultProps && !_instance.getDefaultProps.isReactClassApproved && console.error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", state);
            _instance.contextType && console.error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", state);
            Component.childContextTypes && !didWarnAboutChildContextTypes.has(Component) && (didWarnAboutChildContextTypes.add(Component), console.error("%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)", state));
            Component.contextTypes && !didWarnAboutContextTypes$1.has(Component) && (didWarnAboutContextTypes$1.add(Component), console.error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)", state));
            "function" === typeof _instance.componentShouldUpdate && console.error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", state);
            Component.prototype && Component.prototype.isPureReactComponent && "undefined" !== typeof _instance.shouldComponentUpdate && console.error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(Component) || "A pure component");
            "function" === typeof _instance.componentDidUnmount && console.error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", state);
            "function" === typeof _instance.componentDidReceiveProps && console.error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", state);
            "function" === typeof _instance.componentWillRecieveProps && console.error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", state);
            "function" === typeof _instance.UNSAFE_componentWillRecieveProps && console.error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", state);
            lane = _instance.props !== nextProps;
            void 0 !== _instance.props && lane && console.error("When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", state);
            _instance.defaultProps && console.error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", state, state);
            "function" !== typeof _instance.getSnapshotBeforeUpdate || "function" === typeof _instance.componentDidUpdate || didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component) || (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component), console.error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(Component)));
            "function" === typeof _instance.getDerivedStateFromProps && console.error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", state);
            "function" === typeof _instance.getDerivedStateFromError && console.error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", state);
            "function" === typeof Component.getSnapshotBeforeUpdate && console.error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", state);
            (lane = _instance.state) && ("object" !== typeof lane || isArrayImpl(lane)) && console.error("%s.state: must be set to an object or null", state);
            "function" === typeof _instance.getChildContext && "object" !== typeof Component.childContextTypes && console.error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", state);
            _instance = workInProgress.stateNode;
            _instance.props = nextProps;
            _instance.state = workInProgress.memoizedState;
            _instance.refs = {};
            initializeUpdateQueue(workInProgress);
            state = Component.contextType;
            _instance.context = "object" === typeof state && null !== state ? readContext(state) : emptyContextObject;
            _instance.state === nextProps && (state = getComponentNameFromType(Component) || "Component", didWarnAboutDirectlyAssigningPropsToState.has(state) || (didWarnAboutDirectlyAssigningPropsToState.add(state), console.error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", state)));
            workInProgress.mode & StrictLegacyMode && ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, _instance);
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, _instance);
            _instance.state = workInProgress.memoizedState;
            state = Component.getDerivedStateFromProps;
            "function" === typeof state && (applyDerivedStateFromProps(workInProgress, Component, state, nextProps), _instance.state = workInProgress.memoizedState);
            "function" === typeof Component.getDerivedStateFromProps || "function" === typeof _instance.getSnapshotBeforeUpdate || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || (state = _instance.state, "function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount(), state !== _instance.state && (console.error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress) || "Component"), classComponentUpdater.enqueueReplaceState(_instance, _instance.state, null)), processUpdateQueue(workInProgress, nextProps, _instance, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction(), _instance.state = workInProgress.memoizedState);
            "function" === typeof _instance.componentDidMount && (workInProgress.flags |= 4194308);
            (workInProgress.mode & StrictEffectsMode) !== NoMode && (workInProgress.flags |= 67108864);
            _instance = !0;
        } else if (null === current$jscomp$0) {
            _instance = workInProgress.stateNode;
            var unresolvedOldProps = workInProgress.memoizedProps;
            lane = resolveClassComponentProps(Component, unresolvedOldProps);
            _instance.props = lane;
            var oldContext = _instance.context;
            foundWillUpdateName = Component.contextType;
            state = emptyContextObject;
            "object" === typeof foundWillUpdateName && null !== foundWillUpdateName && (state = readContext(foundWillUpdateName));
            newApiName = Component.getDerivedStateFromProps;
            foundWillUpdateName = "function" === typeof newApiName || "function" === typeof _instance.getSnapshotBeforeUpdate;
            unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
            foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (unresolvedOldProps || oldContext !== state) && callComponentWillReceiveProps(workInProgress, _instance, nextProps, state);
            hasForceUpdate = !1;
            var oldState = workInProgress.memoizedState;
            _instance.state = oldState;
            processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);
            suspendIfUpdateReadFromEntangledAsyncAction();
            oldContext = workInProgress.memoizedState;
            unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof newApiName && (applyDerivedStateFromProps(workInProgress, Component, newApiName, nextProps), oldContext = workInProgress.memoizedState), (lane = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, lane, nextProps, oldState, oldContext, state)) ? (foundWillUpdateName || "function" !== typeof _instance.UNSAFE_componentWillMount && "function" !== typeof _instance.componentWillMount || ("function" === typeof _instance.componentWillMount && _instance.componentWillMount(), "function" === typeof _instance.UNSAFE_componentWillMount && _instance.UNSAFE_componentWillMount()), "function" === typeof _instance.componentDidMount && (workInProgress.flags |= 4194308), (workInProgress.mode & StrictEffectsMode) !== NoMode && (workInProgress.flags |= 67108864)) : ("function" === typeof _instance.componentDidMount && (workInProgress.flags |= 4194308), (workInProgress.mode & StrictEffectsMode) !== NoMode && (workInProgress.flags |= 67108864), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), _instance.props = nextProps, _instance.state = oldContext, _instance.context = state, _instance = lane) : ("function" === typeof _instance.componentDidMount && (workInProgress.flags |= 4194308), (workInProgress.mode & StrictEffectsMode) !== NoMode && (workInProgress.flags |= 67108864), _instance = !1);
        } else {
            _instance = workInProgress.stateNode;
            cloneUpdateQueue(current$jscomp$0, workInProgress);
            state = workInProgress.memoizedProps;
            foundWillUpdateName = resolveClassComponentProps(Component, state);
            _instance.props = foundWillUpdateName;
            newApiName = workInProgress.pendingProps;
            oldState = _instance.context;
            oldContext = Component.contextType;
            lane = emptyContextObject;
            "object" === typeof oldContext && null !== oldContext && (lane = readContext(oldContext));
            unresolvedOldProps = Component.getDerivedStateFromProps;
            (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof _instance.getSnapshotBeforeUpdate) || "function" !== typeof _instance.UNSAFE_componentWillReceiveProps && "function" !== typeof _instance.componentWillReceiveProps || (state !== newApiName || oldState !== lane) && callComponentWillReceiveProps(workInProgress, _instance, nextProps, lane);
            hasForceUpdate = !1;
            oldState = workInProgress.memoizedState;
            _instance.state = oldState;
            processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);
            suspendIfUpdateReadFromEntangledAsyncAction();
            var newState = workInProgress.memoizedState;
            state !== newApiName || oldState !== newState || hasForceUpdate || null !== current$jscomp$0 && null !== current$jscomp$0.dependencies && checkIfContextChanged(current$jscomp$0.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(workInProgress, Component, unresolvedOldProps, nextProps), newState = workInProgress.memoizedState), (foundWillUpdateName = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component, foundWillUpdateName, nextProps, oldState, newState, lane) || null !== current$jscomp$0 && null !== current$jscomp$0.dependencies && checkIfContextChanged(current$jscomp$0.dependencies)) ? (oldContext || "function" !== typeof _instance.UNSAFE_componentWillUpdate && "function" !== typeof _instance.componentWillUpdate || ("function" === typeof _instance.componentWillUpdate && _instance.componentWillUpdate(nextProps, newState, lane), "function" === typeof _instance.UNSAFE_componentWillUpdate && _instance.UNSAFE_componentWillUpdate(nextProps, newState, lane)), "function" === typeof _instance.componentDidUpdate && (workInProgress.flags |= 4), "function" === typeof _instance.getSnapshotBeforeUpdate && (workInProgress.flags |= 1024)) : ("function" !== typeof _instance.componentDidUpdate || state === current$jscomp$0.memoizedProps && oldState === current$jscomp$0.memoizedState || (workInProgress.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state === current$jscomp$0.memoizedProps && oldState === current$jscomp$0.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), _instance.props = nextProps, _instance.state = newState, _instance.context = lane, _instance = foundWillUpdateName) : ("function" !== typeof _instance.componentDidUpdate || state === current$jscomp$0.memoizedProps && oldState === current$jscomp$0.memoizedState || (workInProgress.flags |= 4), "function" !== typeof _instance.getSnapshotBeforeUpdate || state === current$jscomp$0.memoizedProps && oldState === current$jscomp$0.memoizedState || (workInProgress.flags |= 1024), _instance = !1);
        }
        lane = _instance;
        markRef(current$jscomp$0, workInProgress);
        state = 0 !== (workInProgress.flags & 128);
        if (lane || state) {
            lane = workInProgress.stateNode;
            ReactSharedInternals.getCurrentStack = null === workInProgress ? null : getCurrentFiberStackInDev;
            isRendering = !1;
            current = workInProgress;
            if (state && "function" !== typeof Component.getDerivedStateFromError) Component = null, profilerStartTime = -1;
            else {
                markComponentRenderStarted(workInProgress);
                Component = callRenderInDEV(lane);
                if (workInProgress.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(!0);
                    try {
                        callRenderInDEV(lane);
                    } finally{
                        setIsStrictModeForDevtools(!1);
                    }
                }
                markComponentRenderStopped();
            }
            workInProgress.flags |= 1;
            null !== current$jscomp$0 && state ? (workInProgress.child = reconcileChildFibers(workInProgress, current$jscomp$0.child, null, renderLanes), workInProgress.child = reconcileChildFibers(workInProgress, null, Component, renderLanes)) : reconcileChildren(current$jscomp$0, workInProgress, Component, renderLanes);
            workInProgress.memoizedState = lane.state;
            current$jscomp$0 = workInProgress.child;
        } else current$jscomp$0 = bailoutOnAlreadyFinishedWork(current$jscomp$0, workInProgress, renderLanes);
        renderLanes = workInProgress.stateNode;
        _instance && renderLanes.props !== nextProps && (didWarnAboutReassigningProps || console.error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress) || "a component"), didWarnAboutReassigningProps = !0);
        return current$jscomp$0;
    }
    function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes) {
        resetHydrationState();
        workInProgress.flags |= 256;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        Component && Component.childContextTypes && console.error("childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...", Component.displayName || Component.name || "Component");
        "function" === typeof Component.getDerivedStateFromProps && (workInProgress = getComponentNameFromType(Component) || "Unknown", didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] || (console.error("%s: Function components do not support getDerivedStateFromProps.", workInProgress), didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] = !0));
        "object" === typeof Component.contextType && null !== Component.contextType && (Component = getComponentNameFromType(Component) || "Unknown", didWarnAboutContextTypeOnFunctionComponent[Component] || (console.error("%s: Function components do not support contextType.", Component), didWarnAboutContextTypeOnFunctionComponent[Component] = !0));
    }
    function mountSuspenseOffscreenState(renderLanes) {
        return {
            baseLanes: renderLanes,
            cachePool: getSuspendedCache()
        };
    }
    function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes) {
        current = null !== current ? current.childLanes & ~renderLanes : 0;
        primaryTreeDidDefer && (current |= workInProgressDeferredLane);
        return current;
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var JSCompiler_object_inline_digest_2317;
        var JSCompiler_object_inline_stack_2318 = workInProgress.pendingProps;
        shouldSuspendImpl(workInProgress) && (workInProgress.flags |= 128);
        var JSCompiler_object_inline_componentStack_2319 = !1;
        var didSuspend = 0 !== (workInProgress.flags & 128);
        (JSCompiler_object_inline_digest_2317 = didSuspend) || (JSCompiler_object_inline_digest_2317 = null !== current && null === current.memoizedState ? !1 : 0 !== (suspenseStackCursor.current & ForceSuspenseFallback));
        JSCompiler_object_inline_digest_2317 && (JSCompiler_object_inline_componentStack_2319 = !0, workInProgress.flags &= -129);
        JSCompiler_object_inline_digest_2317 = 0 !== (workInProgress.flags & 32);
        workInProgress.flags &= -33;
        if (null === current) {
            if (isHydrating) {
                JSCompiler_object_inline_componentStack_2319 ? pushPrimaryTreeSuspenseHandler(workInProgress) : reuseSuspenseHandlerOnStack(workInProgress);
                if (isHydrating) {
                    var JSCompiler_object_inline_message_2316 = nextHydratableInstance;
                    var JSCompiler_temp;
                    if (!(JSCompiler_temp = !JSCompiler_object_inline_message_2316)) {
                        c: {
                            var instance = JSCompiler_object_inline_message_2316;
                            for(JSCompiler_temp = rootOrSingletonContext; 8 !== instance.nodeType;){
                                if (!JSCompiler_temp) {
                                    JSCompiler_temp = null;
                                    break c;
                                }
                                instance = getNextHydratable(instance.nextSibling);
                                if (null === instance) {
                                    JSCompiler_temp = null;
                                    break c;
                                }
                            }
                            JSCompiler_temp = instance;
                        }
                        null !== JSCompiler_temp ? (warnIfNotHydrating(), workInProgress.memoizedState = {
                            dehydrated: JSCompiler_temp,
                            treeContext: null !== treeContextProvider ? {
                                id: treeContextId,
                                overflow: treeContextOverflow
                            } : null,
                            retryLane: 536870912
                        }, instance = createFiber(18, null, null, NoMode), instance.stateNode = JSCompiler_temp, instance.return = workInProgress, workInProgress.child = instance, hydrationParentFiber = workInProgress, nextHydratableInstance = null, JSCompiler_temp = !0) : JSCompiler_temp = !1;
                        JSCompiler_temp = !JSCompiler_temp;
                    }
                    JSCompiler_temp && (warnNonHydratedInstance(workInProgress, JSCompiler_object_inline_message_2316), throwOnHydrationMismatch(workInProgress));
                }
                JSCompiler_object_inline_message_2316 = workInProgress.memoizedState;
                if (null !== JSCompiler_object_inline_message_2316 && (JSCompiler_object_inline_message_2316 = JSCompiler_object_inline_message_2316.dehydrated, null !== JSCompiler_object_inline_message_2316)) return JSCompiler_object_inline_message_2316.data === SUSPENSE_FALLBACK_START_DATA ? workInProgress.lanes = 16 : workInProgress.lanes = 536870912, null;
                popSuspenseHandler(workInProgress);
            }
            JSCompiler_object_inline_message_2316 = JSCompiler_object_inline_stack_2318.children;
            JSCompiler_object_inline_stack_2318 = JSCompiler_object_inline_stack_2318.fallback;
            if (JSCompiler_object_inline_componentStack_2319) return reuseSuspenseHandlerOnStack(workInProgress), JSCompiler_object_inline_componentStack_2319 = workInProgress.mode, JSCompiler_object_inline_message_2316 = mountWorkInProgressOffscreenFiber({
                mode: "hidden",
                children: JSCompiler_object_inline_message_2316
            }, JSCompiler_object_inline_componentStack_2319), JSCompiler_object_inline_stack_2318 = createFiberFromFragment(JSCompiler_object_inline_stack_2318, JSCompiler_object_inline_componentStack_2319, renderLanes, null), JSCompiler_object_inline_message_2316.return = workInProgress, JSCompiler_object_inline_stack_2318.return = workInProgress, JSCompiler_object_inline_message_2316.sibling = JSCompiler_object_inline_stack_2318, workInProgress.child = JSCompiler_object_inline_message_2316, JSCompiler_object_inline_componentStack_2319 = workInProgress.child, JSCompiler_object_inline_componentStack_2319.memoizedState = mountSuspenseOffscreenState(renderLanes), JSCompiler_object_inline_componentStack_2319.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_object_inline_digest_2317, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, JSCompiler_object_inline_stack_2318;
            pushPrimaryTreeSuspenseHandler(workInProgress);
            return mountSuspensePrimaryChildren(workInProgress, JSCompiler_object_inline_message_2316);
        }
        var prevState = current.memoizedState;
        if (null !== prevState && (JSCompiler_object_inline_message_2316 = prevState.dehydrated, null !== JSCompiler_object_inline_message_2316)) {
            if (didSuspend) workInProgress.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags &= -257, workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes)) : null !== workInProgress.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress), workInProgress.child = current.child, workInProgress.flags |= 128, workInProgress = null) : (reuseSuspenseHandlerOnStack(workInProgress), JSCompiler_object_inline_componentStack_2319 = JSCompiler_object_inline_stack_2318.fallback, JSCompiler_object_inline_message_2316 = workInProgress.mode, JSCompiler_object_inline_stack_2318 = mountWorkInProgressOffscreenFiber({
                mode: "visible",
                children: JSCompiler_object_inline_stack_2318.children
            }, JSCompiler_object_inline_message_2316), JSCompiler_object_inline_componentStack_2319 = createFiberFromFragment(JSCompiler_object_inline_componentStack_2319, JSCompiler_object_inline_message_2316, renderLanes, null), JSCompiler_object_inline_componentStack_2319.flags |= 2, JSCompiler_object_inline_stack_2318.return = workInProgress, JSCompiler_object_inline_componentStack_2319.return = workInProgress, JSCompiler_object_inline_stack_2318.sibling = JSCompiler_object_inline_componentStack_2319, workInProgress.child = JSCompiler_object_inline_stack_2318, reconcileChildFibers(workInProgress, current.child, null, renderLanes), JSCompiler_object_inline_stack_2318 = workInProgress.child, JSCompiler_object_inline_stack_2318.memoizedState = mountSuspenseOffscreenState(renderLanes), JSCompiler_object_inline_stack_2318.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_object_inline_digest_2317, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, workInProgress = JSCompiler_object_inline_componentStack_2319);
            else if (pushPrimaryTreeSuspenseHandler(workInProgress), isHydrating && console.error("We should not be hydrating here. This is a bug in React. Please file a bug."), JSCompiler_object_inline_message_2316.data === SUSPENSE_FALLBACK_START_DATA) {
                JSCompiler_object_inline_digest_2317 = JSCompiler_object_inline_message_2316.nextSibling && JSCompiler_object_inline_message_2316.nextSibling.dataset;
                if (JSCompiler_object_inline_digest_2317) {
                    JSCompiler_temp = JSCompiler_object_inline_digest_2317.dgst;
                    var message = JSCompiler_object_inline_digest_2317.msg;
                    instance = JSCompiler_object_inline_digest_2317.stck;
                    var componentStack = JSCompiler_object_inline_digest_2317.cstck;
                }
                JSCompiler_object_inline_message_2316 = message;
                JSCompiler_object_inline_digest_2317 = JSCompiler_temp;
                JSCompiler_object_inline_stack_2318 = instance;
                JSCompiler_temp = JSCompiler_object_inline_componentStack_2319 = componentStack;
                JSCompiler_object_inline_componentStack_2319 = JSCompiler_object_inline_message_2316 ? Error(JSCompiler_object_inline_message_2316) : Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                JSCompiler_object_inline_componentStack_2319.stack = JSCompiler_object_inline_stack_2318 || "";
                JSCompiler_object_inline_componentStack_2319.digest = JSCompiler_object_inline_digest_2317;
                JSCompiler_object_inline_digest_2317 = void 0 === JSCompiler_temp ? null : JSCompiler_temp;
                JSCompiler_object_inline_stack_2318 = {
                    value: JSCompiler_object_inline_componentStack_2319,
                    source: null,
                    stack: JSCompiler_object_inline_digest_2317
                };
                "string" === typeof JSCompiler_object_inline_digest_2317 && CapturedStacks.set(JSCompiler_object_inline_componentStack_2319, JSCompiler_object_inline_stack_2318);
                queueHydrationError(JSCompiler_object_inline_stack_2318);
                workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
            } else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress, renderLanes, !1), JSCompiler_object_inline_digest_2317 = 0 !== (renderLanes & current.childLanes), didReceiveUpdate || JSCompiler_object_inline_digest_2317) {
                JSCompiler_object_inline_digest_2317 = workInProgressRoot;
                if (null !== JSCompiler_object_inline_digest_2317) {
                    JSCompiler_object_inline_stack_2318 = renderLanes & -renderLanes;
                    if (0 !== (JSCompiler_object_inline_stack_2318 & 42)) JSCompiler_object_inline_stack_2318 = 1;
                    else switch(JSCompiler_object_inline_stack_2318){
                        case 2:
                            JSCompiler_object_inline_stack_2318 = 1;
                            break;
                        case 8:
                            JSCompiler_object_inline_stack_2318 = 4;
                            break;
                        case 32:
                            JSCompiler_object_inline_stack_2318 = 16;
                            break;
                        case 128:
                        case 256:
                        case 512:
                        case 1024:
                        case 2048:
                        case 4096:
                        case 8192:
                        case 16384:
                        case 32768:
                        case 65536:
                        case 131072:
                        case 262144:
                        case 524288:
                        case 1048576:
                        case 2097152:
                        case 4194304:
                        case 8388608:
                        case 16777216:
                        case 33554432:
                            JSCompiler_object_inline_stack_2318 = 64;
                            break;
                        case 268435456:
                            JSCompiler_object_inline_stack_2318 = 134217728;
                            break;
                        default:
                            JSCompiler_object_inline_stack_2318 = 0;
                    }
                    JSCompiler_object_inline_stack_2318 = 0 !== (JSCompiler_object_inline_stack_2318 & (JSCompiler_object_inline_digest_2317.suspendedLanes | renderLanes)) ? 0 : JSCompiler_object_inline_stack_2318;
                    if (0 !== JSCompiler_object_inline_stack_2318 && JSCompiler_object_inline_stack_2318 !== prevState.retryLane) throw prevState.retryLane = JSCompiler_object_inline_stack_2318, enqueueConcurrentRenderForLane(current, JSCompiler_object_inline_stack_2318), scheduleUpdateOnFiber(JSCompiler_object_inline_digest_2317, current, JSCompiler_object_inline_stack_2318), SelectiveHydrationException;
                }
                JSCompiler_object_inline_message_2316.data === SUSPENSE_PENDING_START_DATA || renderDidSuspendDelayIfPossible();
                workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes);
            } else JSCompiler_object_inline_message_2316.data === SUSPENSE_PENDING_START_DATA ? (workInProgress.flags |= 128, workInProgress.child = current.child, workInProgress = retryDehydratedSuspenseBoundary.bind(null, current), JSCompiler_object_inline_message_2316._reactRetry = workInProgress, workInProgress = null) : (current = prevState.treeContext, nextHydratableInstance = getNextHydratable(JSCompiler_object_inline_message_2316.nextSibling), hydrationParentFiber = workInProgress, isHydrating = !0, hydrationErrors = null, didSuspendOrErrorDEV = !1, hydrationDiffRootDEV = null, rootOrSingletonContext = !1, null !== current && (warnIfNotHydrating(), idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = current.id, treeContextOverflow = current.overflow, treeContextProvider = workInProgress), workInProgress = mountSuspensePrimaryChildren(workInProgress, JSCompiler_object_inline_stack_2318.children), workInProgress.flags |= 4096);
            return workInProgress;
        }
        if (JSCompiler_object_inline_componentStack_2319) return reuseSuspenseHandlerOnStack(workInProgress), JSCompiler_object_inline_componentStack_2319 = JSCompiler_object_inline_stack_2318.fallback, JSCompiler_object_inline_message_2316 = workInProgress.mode, JSCompiler_temp = current.child, instance = JSCompiler_temp.sibling, JSCompiler_object_inline_stack_2318 = createWorkInProgress(JSCompiler_temp, {
            mode: "hidden",
            children: JSCompiler_object_inline_stack_2318.children
        }), JSCompiler_object_inline_stack_2318.subtreeFlags = JSCompiler_temp.subtreeFlags & 31457280, null !== instance ? JSCompiler_object_inline_componentStack_2319 = createWorkInProgress(instance, JSCompiler_object_inline_componentStack_2319) : (JSCompiler_object_inline_componentStack_2319 = createFiberFromFragment(JSCompiler_object_inline_componentStack_2319, JSCompiler_object_inline_message_2316, renderLanes, null), JSCompiler_object_inline_componentStack_2319.flags |= 2), JSCompiler_object_inline_componentStack_2319.return = workInProgress, JSCompiler_object_inline_stack_2318.return = workInProgress, JSCompiler_object_inline_stack_2318.sibling = JSCompiler_object_inline_componentStack_2319, workInProgress.child = JSCompiler_object_inline_stack_2318, JSCompiler_object_inline_stack_2318 = JSCompiler_object_inline_componentStack_2319, JSCompiler_object_inline_componentStack_2319 = workInProgress.child, JSCompiler_object_inline_message_2316 = current.child.memoizedState, null === JSCompiler_object_inline_message_2316 ? JSCompiler_object_inline_message_2316 = mountSuspenseOffscreenState(renderLanes) : (JSCompiler_temp = JSCompiler_object_inline_message_2316.cachePool, null !== JSCompiler_temp ? (instance = CacheContext._currentValue, JSCompiler_temp = JSCompiler_temp.parent !== instance ? {
            parent: instance,
            pool: instance
        } : JSCompiler_temp) : JSCompiler_temp = getSuspendedCache(), JSCompiler_object_inline_message_2316 = {
            baseLanes: JSCompiler_object_inline_message_2316.baseLanes | renderLanes,
            cachePool: JSCompiler_temp
        }), JSCompiler_object_inline_componentStack_2319.memoizedState = JSCompiler_object_inline_message_2316, JSCompiler_object_inline_componentStack_2319.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_object_inline_digest_2317, renderLanes), workInProgress.memoizedState = SUSPENDED_MARKER, JSCompiler_object_inline_stack_2318;
        pushPrimaryTreeSuspenseHandler(workInProgress);
        renderLanes = current.child;
        current = renderLanes.sibling;
        renderLanes = createWorkInProgress(renderLanes, {
            mode: "visible",
            children: JSCompiler_object_inline_stack_2318.children
        });
        renderLanes.return = workInProgress;
        renderLanes.sibling = null;
        null !== current && (JSCompiler_object_inline_digest_2317 = workInProgress.deletions, null === JSCompiler_object_inline_digest_2317 ? (workInProgress.deletions = [
            current
        ], workInProgress.flags |= 16) : JSCompiler_object_inline_digest_2317.push(current));
        workInProgress.child = renderLanes;
        workInProgress.memoizedState = null;
        return renderLanes;
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
        primaryChildren = mountWorkInProgressOffscreenFiber({
            mode: "visible",
            children: primaryChildren
        }, workInProgress.mode);
        primaryChildren.return = workInProgress;
        return workInProgress.child = primaryChildren;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
        return createFiberFromOffscreen(offscreenProps, mode, 0, null);
    }
    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes) {
        reconcileChildFibers(workInProgress, current.child, null, renderLanes);
        current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
        current.flags |= 2;
        workInProgress.memoizedState = null;
        return current;
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
        fiber.lanes |= renderLanes;
        var alternate = fiber.alternate;
        null !== alternate && (alternate.lanes |= renderLanes);
        scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
    }
    function validateSuspenseListNestedChild(childSlot, index) {
        var isAnArray = isArrayImpl(childSlot);
        childSlot = !isAnArray && "function" === typeof getIteratorFn(childSlot);
        return isAnArray || childSlot ? (isAnArray = isAnArray ? "array" : "iterable", console.error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", isAnArray, index, isAnArray), !1) : !0;
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress.memoizedState;
        null === renderState ? workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode
        } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
    }
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
        nextProps = nextProps.children;
        if (void 0 !== revealOrder && "forwards" !== revealOrder && "backwards" !== revealOrder && "together" !== revealOrder && !didWarnAboutRevealOrder[revealOrder]) {
            if (didWarnAboutRevealOrder[revealOrder] = !0, "string" === typeof revealOrder) switch(revealOrder.toLowerCase()){
                case "together":
                case "forwards":
                case "backwards":
                    console.error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                case "forward":
                case "backward":
                    console.error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    console.error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
            else console.error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
        void 0 === tailMode || didWarnAboutTailOptions[tailMode] || ("collapsed" !== tailMode && "hidden" !== tailMode ? (didWarnAboutTailOptions[tailMode] = !0, console.error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode)) : "forwards" !== revealOrder && "backwards" !== revealOrder && (didWarnAboutTailOptions[tailMode] = !0, console.error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode)));
        a: if (("forwards" === revealOrder || "backwards" === revealOrder) && void 0 !== nextProps && null !== nextProps && !1 !== nextProps) {
            if (isArrayImpl(nextProps)) for(var i = 0; i < nextProps.length; i++){
                if (!validateSuspenseListNestedChild(nextProps[i], i)) break a;
            }
            else if (i = getIteratorFn(nextProps), "function" === typeof i) {
                if (i = i.call(nextProps)) for(var step = i.next(), _i = 0; !step.done; step = i.next()){
                    if (!validateSuspenseListNestedChild(step.value, _i)) break a;
                    _i++;
                }
            } else console.error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
        }
        reconcileChildren(current, workInProgress, nextProps, renderLanes);
        nextProps = suspenseStackCursor.current;
        if (0 !== (nextProps & ForceSuspenseFallback)) nextProps = nextProps & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress.flags |= 128;
        else {
            if (null !== current && 0 !== (current.flags & 128)) a: for(current = workInProgress.child; null !== current;){
                if (13 === current.tag) null !== current.memoizedState && scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
                else if (19 === current.tag) scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
                else if (null !== current.child) {
                    current.child.return = current;
                    current = current.child;
                    continue;
                }
                if (current === workInProgress) break a;
                for(; null === current.sibling;){
                    if (null === current.return || current.return === workInProgress) break a;
                    current = current.return;
                }
                current.sibling.return = current.return;
                current = current.sibling;
            }
            nextProps &= SubtreeSuspenseContextMask;
        }
        push(suspenseStackCursor, nextProps, workInProgress);
        switch(revealOrder){
            case "forwards":
                renderLanes = workInProgress.child;
                for(revealOrder = null; null !== renderLanes;)current = renderLanes.alternate, null !== current && null === findFirstSuspended(current) && (revealOrder = renderLanes), renderLanes = renderLanes.sibling;
                renderLanes = revealOrder;
                null === renderLanes ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes.sibling, renderLanes.sibling = null);
                initSuspenseListRenderState(workInProgress, !1, revealOrder, renderLanes, tailMode);
                break;
            case "backwards":
                renderLanes = null;
                revealOrder = workInProgress.child;
                for(workInProgress.child = null; null !== revealOrder;){
                    current = revealOrder.alternate;
                    if (null !== current && null === findFirstSuspended(current)) {
                        workInProgress.child = revealOrder;
                        break;
                    }
                    current = revealOrder.sibling;
                    revealOrder.sibling = renderLanes;
                    renderLanes = revealOrder;
                    revealOrder = current;
                }
                initSuspenseListRenderState(workInProgress, !0, renderLanes, null, tailMode);
                break;
            case "together":
                initSuspenseListRenderState(workInProgress, !1, null, null, void 0);
                break;
            default:
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        null !== current && (workInProgress.dependencies = current.dependencies);
        profilerStartTime = -1;
        workInProgressRootSkippedLanes |= workInProgress.lanes;
        if (0 === (renderLanes & workInProgress.childLanes)) {
            if (null !== current) {
                if (propagateParentContextChanges(current, workInProgress, renderLanes, !1), 0 === (renderLanes & workInProgress.childLanes)) return null;
            } else return null;
        }
        if (null !== current && workInProgress.child !== current.child) throw Error("Resuming work not yet implemented.");
        if (null !== workInProgress.child) {
            current = workInProgress.child;
            renderLanes = createWorkInProgress(current, current.pendingProps);
            workInProgress.child = renderLanes;
            for(renderLanes.return = workInProgress; null !== current.sibling;)current = current.sibling, renderLanes = renderLanes.sibling = createWorkInProgress(current, current.pendingProps), renderLanes.return = workInProgress;
            renderLanes.sibling = null;
        }
        return workInProgress.child;
    }
    function checkScheduledUpdateOrContext(current, renderLanes) {
        if (0 !== (current.lanes & renderLanes)) return !0;
        current = current.dependencies;
        return null !== current && checkIfContextChanged(current) ? !0 : !1;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
        switch(workInProgress.tag){
            case 3:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
                resetHydrationState();
                break;
            case 27:
            case 5:
                pushHostContext(workInProgress);
                break;
            case 4:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;
            case 10:
                pushProvider(workInProgress, workInProgress.type, workInProgress.memoizedProps.value);
                break;
            case 12:
                0 !== (renderLanes & workInProgress.childLanes) && (workInProgress.flags |= 4);
                workInProgress.flags |= 2048;
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = -0;
                stateNode.passiveEffectDuration = -0;
                break;
            case 13:
                stateNode = workInProgress.memoizedState;
                if (null !== stateNode) {
                    if (null !== stateNode.dehydrated) return pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags |= 128, null;
                    if (0 !== (renderLanes & workInProgress.child.childLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
                    pushPrimaryTreeSuspenseHandler(workInProgress);
                    current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                    return null !== current ? current.sibling : null;
                }
                pushPrimaryTreeSuspenseHandler(workInProgress);
                break;
            case 19:
                var didSuspendBefore = 0 !== (current.flags & 128);
                stateNode = 0 !== (renderLanes & workInProgress.childLanes);
                stateNode || (propagateParentContextChanges(current, workInProgress, renderLanes, !1), stateNode = 0 !== (renderLanes & workInProgress.childLanes));
                if (didSuspendBefore) {
                    if (stateNode) return updateSuspenseListComponent(current, workInProgress, renderLanes);
                    workInProgress.flags |= 128;
                }
                didSuspendBefore = workInProgress.memoizedState;
                null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
                push(suspenseStackCursor, suspenseStackCursor.current, workInProgress);
                if (stateNode) break;
                else return null;
            case 22:
            case 23:
                return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes);
            case 24:
                pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    function beginWork(current, workInProgress, renderLanes) {
        if (workInProgress._debugNeedsRemount && null !== current) {
            renderLanes = createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes);
            var returnFiber = workInProgress.return;
            if (null === returnFiber) throw Error("Cannot swap the root fiber.");
            current.alternate = null;
            workInProgress.alternate = null;
            renderLanes.index = workInProgress.index;
            renderLanes.sibling = workInProgress.sibling;
            renderLanes.return = workInProgress.return;
            renderLanes.ref = workInProgress.ref;
            renderLanes._debugInfo = workInProgress._debugInfo;
            if (workInProgress === returnFiber.child) returnFiber.child = renderLanes;
            else {
                var prevSibling = returnFiber.child;
                if (null === prevSibling) throw Error("Expected parent to have a child.");
                for(; prevSibling.sibling !== workInProgress;)if (prevSibling = prevSibling.sibling, null === prevSibling) throw Error("Expected to find the previous sibling.");
                prevSibling.sibling = renderLanes;
            }
            workInProgress = returnFiber.deletions;
            null === workInProgress ? (returnFiber.deletions = [
                current
            ], returnFiber.flags |= 16) : workInProgress.push(current);
            renderLanes.flags |= 2;
            return renderLanes;
        }
        if (null !== current) {
            if (current.memoizedProps !== workInProgress.pendingProps || workInProgress.type !== current.type) didReceiveUpdate = !0;
            else {
                if (!checkScheduledUpdateOrContext(current, renderLanes) && 0 === (workInProgress.flags & 128)) return didReceiveUpdate = !1, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
                didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;
            }
        } else {
            didReceiveUpdate = !1;
            if (returnFiber = isHydrating) warnIfNotHydrating(), returnFiber = 0 !== (workInProgress.flags & 1048576);
            returnFiber && (returnFiber = workInProgress.index, warnIfNotHydrating(), pushTreeId(workInProgress, treeForkCount, returnFiber));
        }
        workInProgress.lanes = 0;
        switch(workInProgress.tag){
            case 16:
                a: if (returnFiber = workInProgress.pendingProps, current = callLazyInitInDEV(workInProgress.elementType), workInProgress.type = current, "function" === typeof current) shouldConstruct(current) ? (returnFiber = resolveClassComponentProps(current, returnFiber), workInProgress.tag = 1, workInProgress.type = current = resolveFunctionForHotReloading(current), workInProgress = updateClassComponent(null, workInProgress, current, returnFiber, renderLanes)) : (workInProgress.tag = 0, validateFunctionComponentInDev(workInProgress, current), workInProgress.type = current = resolveFunctionForHotReloading(current), workInProgress = updateFunctionComponent(null, workInProgress, current, returnFiber, renderLanes));
                else {
                    if (void 0 !== current && null !== current) {
                        if (prevSibling = current.$$typeof, prevSibling === REACT_FORWARD_REF_TYPE) {
                            workInProgress.tag = 11;
                            workInProgress.type = current = resolveForwardRefForHotReloading(current);
                            workInProgress = updateForwardRef(null, workInProgress, current, returnFiber, renderLanes);
                            break a;
                        } else if (prevSibling === REACT_MEMO_TYPE) {
                            workInProgress.tag = 14;
                            workInProgress = updateMemoComponent(null, workInProgress, current, returnFiber, renderLanes);
                            break a;
                        }
                    }
                    workInProgress = "";
                    null !== current && "object" === typeof current && current.$$typeof === REACT_LAZY_TYPE && (workInProgress = " Did you wrap a component in React.lazy() more than once?");
                    current = getComponentNameFromType(current) || current;
                    throw Error("Element type is invalid. Received a promise that resolves to: " + current + ". Lazy element type must resolve to a class or function." + workInProgress);
                }
                return workInProgress;
            case 0:
                return updateFunctionComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
            case 1:
                return returnFiber = workInProgress.type, prevSibling = resolveClassComponentProps(returnFiber, workInProgress.pendingProps), updateClassComponent(current, workInProgress, returnFiber, prevSibling, renderLanes);
            case 3:
                a: {
                    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                    if (null === current) throw Error("Should have a current fiber. This is a bug in React.");
                    var nextProps = workInProgress.pendingProps;
                    prevSibling = workInProgress.memoizedState;
                    returnFiber = prevSibling.element;
                    cloneUpdateQueue(current, workInProgress);
                    processUpdateQueue(workInProgress, nextProps, null, renderLanes);
                    var nextState = workInProgress.memoizedState;
                    nextProps = nextState.cache;
                    pushProvider(workInProgress, CacheContext, nextProps);
                    nextProps !== prevSibling.cache && propagateContextChanges(workInProgress, [
                        CacheContext
                    ], renderLanes, !0);
                    suspendIfUpdateReadFromEntangledAsyncAction();
                    nextProps = nextState.element;
                    if (prevSibling.isDehydrated) {
                        if (prevSibling = {
                            element: nextProps,
                            isDehydrated: !1,
                            cache: nextState.cache
                        }, workInProgress.updateQueue.baseState = prevSibling, workInProgress.memoizedState = prevSibling, workInProgress.flags & 256) {
                            workInProgress = mountHostRootWithoutHydrating(current, workInProgress, nextProps, renderLanes);
                            break a;
                        } else if (nextProps !== returnFiber) {
                            returnFiber = createCapturedValueAtFiber(Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress);
                            queueHydrationError(returnFiber);
                            workInProgress = mountHostRootWithoutHydrating(current, workInProgress, nextProps, renderLanes);
                            break a;
                        } else for(nextHydratableInstance = getNextHydratable(workInProgress.stateNode.containerInfo.firstChild), hydrationParentFiber = workInProgress, isHydrating = !0, hydrationErrors = null, didSuspendOrErrorDEV = !1, hydrationDiffRootDEV = null, rootOrSingletonContext = !0, current = mountChildFibers(workInProgress, null, nextProps, renderLanes), workInProgress.child = current; current;)current.flags = current.flags & -3 | 4096, current = current.sibling;
                    } else {
                        resetHydrationState();
                        if (nextProps === returnFiber) {
                            workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                            break a;
                        }
                        reconcileChildren(current, workInProgress, nextProps, renderLanes);
                    }
                    workInProgress = workInProgress.child;
                }
                return workInProgress;
            case 26:
                return markRef(current, workInProgress), null === current ? (current = getResource(workInProgress.type, null, workInProgress.pendingProps, null)) ? workInProgress.memoizedState = current : isHydrating || (current = workInProgress.type, renderLanes = workInProgress.pendingProps, returnFiber = requiredContext(rootInstanceStackCursor.current), returnFiber = getOwnerDocumentFromRootContainer(returnFiber).createElement(current), returnFiber[internalInstanceKey] = workInProgress, returnFiber[internalPropsKey] = renderLanes, setInitialProperties(returnFiber, current, renderLanes), markNodeAsHoistable(returnFiber), workInProgress.stateNode = returnFiber) : workInProgress.memoizedState = getResource(workInProgress.type, current.memoizedProps, workInProgress.pendingProps, current.memoizedState), null;
            case 27:
                return pushHostContext(workInProgress), null === current && isHydrating && (prevSibling = requiredContext(rootInstanceStackCursor.current), returnFiber = getHostContext(), prevSibling = workInProgress.stateNode = resolveSingletonInstance(workInProgress.type, workInProgress.pendingProps, prevSibling, returnFiber, !1), didSuspendOrErrorDEV || (returnFiber = diffHydratedProperties(prevSibling, workInProgress.type, workInProgress.pendingProps, returnFiber), null !== returnFiber && (buildHydrationDiffNode(workInProgress, 0).serverProps = returnFiber)), hydrationParentFiber = workInProgress, rootOrSingletonContext = !0, nextHydratableInstance = getNextHydratable(prevSibling.firstChild)), returnFiber = workInProgress.pendingProps.children, null !== current || isHydrating ? reconcileChildren(current, workInProgress, returnFiber, renderLanes) : workInProgress.child = reconcileChildFibers(workInProgress, null, returnFiber, renderLanes), markRef(current, workInProgress), workInProgress.child;
            case 5:
                return null === current && isHydrating && (nextProps = getHostContext(), returnFiber = validateDOMNesting(workInProgress.type, nextProps.ancestorInfo), prevSibling = nextHydratableInstance, (nextState = !prevSibling) || (nextState = canHydrateInstance(prevSibling, workInProgress.type, workInProgress.pendingProps, rootOrSingletonContext), null !== nextState ? (workInProgress.stateNode = nextState, didSuspendOrErrorDEV || (nextProps = diffHydratedProperties(nextState, workInProgress.type, workInProgress.pendingProps, nextProps), null !== nextProps && (buildHydrationDiffNode(workInProgress, 0).serverProps = nextProps)), hydrationParentFiber = workInProgress, nextHydratableInstance = getNextHydratable(nextState.firstChild), rootOrSingletonContext = !1, nextProps = !0) : nextProps = !1, nextState = !nextProps), nextState && (returnFiber && warnNonHydratedInstance(workInProgress, prevSibling), throwOnHydrationMismatch(workInProgress))), pushHostContext(workInProgress), prevSibling = workInProgress.type, nextProps = workInProgress.pendingProps, nextState = null !== current ? current.memoizedProps : null, returnFiber = nextProps.children, shouldSetTextContent(prevSibling, nextProps) ? returnFiber = null : null !== nextState && shouldSetTextContent(prevSibling, nextState) && (workInProgress.flags |= 32), null !== workInProgress.memoizedState && (prevSibling = renderWithHooks(current, workInProgress, TransitionAwareHostComponent, null, null, renderLanes), HostTransitionContext._currentValue = prevSibling), markRef(current, workInProgress), reconcileChildren(current, workInProgress, returnFiber, renderLanes), workInProgress.child;
            case 6:
                return null === current && isHydrating && (current = workInProgress.pendingProps, renderLanes = getHostContext().ancestorInfo.current, current = null != renderLanes ? validateTextNesting(current, renderLanes.tag) : !0, renderLanes = nextHydratableInstance, (returnFiber = !renderLanes) || (returnFiber = canHydrateTextInstance(renderLanes, workInProgress.pendingProps, rootOrSingletonContext), null !== returnFiber ? (workInProgress.stateNode = returnFiber, hydrationParentFiber = workInProgress, nextHydratableInstance = null, returnFiber = !0) : returnFiber = !1, returnFiber = !returnFiber), returnFiber && (current && warnNonHydratedInstance(workInProgress, renderLanes), throwOnHydrationMismatch(workInProgress))), null;
            case 13:
                return updateSuspenseComponent(current, workInProgress, renderLanes);
            case 4:
                return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), returnFiber = workInProgress.pendingProps, null === current ? workInProgress.child = reconcileChildFibers(workInProgress, null, returnFiber, renderLanes) : reconcileChildren(current, workInProgress, returnFiber, renderLanes), workInProgress.child;
            case 11:
                return updateForwardRef(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
            case 7:
                return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes), workInProgress.child;
            case 8:
                return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
            case 12:
                return workInProgress.flags |= 4, workInProgress.flags |= 2048, returnFiber = workInProgress.stateNode, returnFiber.effectDuration = -0, returnFiber.passiveEffectDuration = -0, reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
            case 10:
                return returnFiber = workInProgress.type, prevSibling = workInProgress.pendingProps, nextProps = prevSibling.value, "value" in prevSibling || hasWarnedAboutUsingNoValuePropOnContextProvider || (hasWarnedAboutUsingNoValuePropOnContextProvider = !0, console.error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?")), pushProvider(workInProgress, returnFiber, nextProps), reconcileChildren(current, workInProgress, prevSibling.children, renderLanes), workInProgress.child;
            case 9:
                return prevSibling = workInProgress.type._context, returnFiber = workInProgress.pendingProps.children, "function" !== typeof returnFiber && console.error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), prepareToReadContext(workInProgress), prevSibling = readContext(prevSibling), markComponentRenderStarted(workInProgress), returnFiber = callComponentInDEV(returnFiber, prevSibling, void 0), markComponentRenderStopped(), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, returnFiber, renderLanes), workInProgress.child;
            case 14:
                return updateMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
            case 15:
                return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
            case 19:
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
            case 22:
                return updateOffscreenComponent(current, workInProgress, renderLanes);
            case 24:
                return prepareToReadContext(workInProgress), returnFiber = readContext(CacheContext), null === current ? (prevSibling = peekCacheFromPool(), null === prevSibling && (prevSibling = workInProgressRoot, nextProps = createCache(), prevSibling.pooledCache = nextProps, retainCache(nextProps), null !== nextProps && (prevSibling.pooledCacheLanes |= renderLanes), prevSibling = nextProps), workInProgress.memoizedState = {
                    parent: returnFiber,
                    cache: prevSibling
                }, initializeUpdateQueue(workInProgress), pushProvider(workInProgress, CacheContext, prevSibling)) : (0 !== (current.lanes & renderLanes) && (cloneUpdateQueue(current, workInProgress), processUpdateQueue(workInProgress, null, null, renderLanes), suspendIfUpdateReadFromEntangledAsyncAction()), prevSibling = current.memoizedState, nextProps = workInProgress.memoizedState, prevSibling.parent !== returnFiber ? (prevSibling = {
                    parent: returnFiber,
                    cache: returnFiber
                }, workInProgress.memoizedState = prevSibling, 0 === workInProgress.lanes && (workInProgress.memoizedState = workInProgress.updateQueue.baseState = prevSibling), pushProvider(workInProgress, CacheContext, returnFiber)) : (returnFiber = nextProps.cache, pushProvider(workInProgress, CacheContext, returnFiber), returnFiber !== prevSibling.cache && propagateContextChanges(workInProgress, [
                    CacheContext
                ], renderLanes, !0))), reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes), workInProgress.child;
            case 29:
                throw workInProgress.pendingProps;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function resetContextDependencies() {
        lastContextDependency = currentlyRenderingFiber = null;
        isDisallowedContextReadInDEV = !1;
    }
    function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        push(rendererCursorDEV, context._currentRenderer, providerFiber);
        void 0 !== context._currentRenderer && null !== context._currentRenderer && context._currentRenderer !== rendererSigil && console.error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(context, providerFiber) {
        context._currentValue = valueCursor.current;
        var currentRenderer = rendererCursorDEV.current;
        pop(rendererCursorDEV, providerFiber);
        context._currentRenderer = currentRenderer;
        pop(valueCursor, providerFiber);
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
        for(; null !== parent;){
            var alternate = parent.alternate;
            (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, null !== alternate && (alternate.childLanes |= renderLanes)) : null !== alternate && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
            if (parent === propagationRoot) break;
            parent = parent.return;
        }
        parent !== propagationRoot && console.error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree) {
        var fiber = workInProgress.child;
        null !== fiber && (fiber.return = workInProgress);
        for(; null !== fiber;){
            var list = fiber.dependencies;
            if (null !== list) {
                var nextFiber = fiber.child;
                list = list.firstContext;
                a: for(; null !== list;){
                    var dependency = list;
                    list = fiber;
                    for(var i = 0; i < contexts.length; i++)if (dependency.context === contexts[i]) {
                        list.lanes |= renderLanes;
                        dependency = list.alternate;
                        null !== dependency && (dependency.lanes |= renderLanes);
                        scheduleContextWorkOnParentPath(list.return, renderLanes, workInProgress);
                        forcePropagateEntireTree || (nextFiber = null);
                        break a;
                    }
                    list = dependency.next;
                }
            } else if (18 === fiber.tag) {
                nextFiber = fiber.return;
                if (null === nextFiber) throw Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                nextFiber.lanes |= renderLanes;
                list = nextFiber.alternate;
                null !== list && (list.lanes |= renderLanes);
                scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
                nextFiber = null;
            } else nextFiber = fiber.child;
            if (null !== nextFiber) nextFiber.return = fiber;
            else for(nextFiber = fiber; null !== nextFiber;){
                if (nextFiber === workInProgress) {
                    nextFiber = null;
                    break;
                }
                fiber = nextFiber.sibling;
                if (null !== fiber) {
                    fiber.return = nextFiber.return;
                    nextFiber = fiber;
                    break;
                }
                nextFiber = nextFiber.return;
            }
            fiber = nextFiber;
        }
    }
    function propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree) {
        current = null;
        for(var parent = workInProgress, isInsidePropagationBailout = !1; null !== parent;){
            if (!isInsidePropagationBailout) {
                if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = !0;
                else if (0 !== (parent.flags & 262144)) break;
            }
            if (10 === parent.tag) {
                var currentParent = parent.alternate;
                if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
                currentParent = currentParent.memoizedProps;
                if (null !== currentParent) {
                    var context = parent.type;
                    objectIs(parent.pendingProps.value, currentParent.value) || (null !== current ? current.push(context) : current = [
                        context
                    ]);
                }
            } else if (parent === hostTransitionProviderCursor.current) {
                currentParent = parent.alternate;
                if (null === currentParent) throw Error("Should have a current fiber. This is a bug in React.");
                currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current ? current.push(HostTransitionContext) : current = [
                    HostTransitionContext
                ]);
            }
            parent = parent.return;
        }
        null !== current && propagateContextChanges(workInProgress, current, renderLanes, forcePropagateEntireTree);
        workInProgress.flags |= 262144;
    }
    function checkIfContextChanged(currentDependencies) {
        for(currentDependencies = currentDependencies.firstContext; null !== currentDependencies;){
            if (!objectIs(currentDependencies.context._currentValue, currentDependencies.memoizedValue)) return !0;
            currentDependencies = currentDependencies.next;
        }
        return !1;
    }
    function prepareToReadContext(workInProgress) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        workInProgress = workInProgress.dependencies;
        null !== workInProgress && (workInProgress.firstContext = null);
    }
    function readContext(context) {
        isDisallowedContextReadInDEV && console.error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        return readContextForConsumer(currentlyRenderingFiber, context);
    }
    function readContextDuringReconciliation(consumer, context) {
        null === currentlyRenderingFiber && prepareToReadContext(consumer);
        return readContextForConsumer(consumer, context);
    }
    function readContextForConsumer(consumer, context) {
        var value = context._currentValue;
        context = {
            context: context,
            memoizedValue: value,
            next: null
        };
        if (null === lastContextDependency) {
            if (null === consumer) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            lastContextDependency = context;
            consumer.dependencies = {
                lanes: 0,
                firstContext: context,
                _debugThenableState: null
            };
            consumer.flags |= 524288;
        } else lastContextDependency = lastContextDependency.next = context;
        return value;
    }
    function initializeUpdateQueue(fiber) {
        fiber.updateQueue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null,
                lanes: 0,
                hiddenCallbacks: null
            },
            callbacks: null
        };
    }
    function cloneUpdateQueue(current, workInProgress) {
        current = current.updateQueue;
        workInProgress.updateQueue === current && (workInProgress.updateQueue = {
            baseState: current.baseState,
            firstBaseUpdate: current.firstBaseUpdate,
            lastBaseUpdate: current.lastBaseUpdate,
            shared: current.shared,
            callbacks: null
        });
    }
    function createUpdate(lane) {
        return {
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
    }
    function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (null === updateQueue) return null;
        updateQueue = updateQueue.shared;
        if (currentlyProcessingQueue === updateQueue && !didWarnUpdateInsideUpdate) {
            var componentName = getComponentNameFromFiber(fiber);
            console.error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s", componentName);
            didWarnUpdateInsideUpdate = !0;
        }
        if ((executionContext & RenderContext) !== NoContext) return componentName = updateQueue.pending, null === componentName ? update.next = update : (update.next = componentName.next, componentName.next = update), updateQueue.pending = update, update = getRootForUpdatedFiber(fiber), markUpdateLaneFromFiberToRoot(fiber, null, lane), update;
        enqueueUpdate$1(fiber, updateQueue, update, lane);
        return getRootForUpdatedFiber(fiber);
    }
    function entangleTransitions(root, fiber, lane) {
        fiber = fiber.updateQueue;
        if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194176))) {
            var queueLanes = fiber.lanes;
            queueLanes &= root.pendingLanes;
            lane |= queueLanes;
            fiber.lanes = lane;
            markRootEntangled(root, lane);
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        var queue = workInProgress.updateQueue, current = workInProgress.alternate;
        if (null !== current && (current = current.updateQueue, queue === current)) {
            var newFirst = null, newLast = null;
            queue = queue.firstBaseUpdate;
            if (null !== queue) {
                do {
                    var clone = {
                        lane: queue.lane,
                        tag: queue.tag,
                        payload: queue.payload,
                        callback: null,
                        next: null
                    };
                    null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
                    queue = queue.next;
                }while (null !== queue);
                null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
            } else newFirst = newLast = capturedUpdate;
            queue = {
                baseState: current.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: current.shared,
                callbacks: current.callbacks
            };
            workInProgress.updateQueue = queue;
            return;
        }
        workInProgress = queue.lastBaseUpdate;
        null === workInProgress ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function suspendIfUpdateReadFromEntangledAsyncAction() {
        if (didReadFromEntangledAsyncAction) {
            var entangledActionThenable = currentEntangledActionThenable;
            if (null !== entangledActionThenable) throw entangledActionThenable;
        }
    }
    function processUpdateQueue(workInProgress, props, instance$jscomp$0, renderLanes) {
        didReadFromEntangledAsyncAction = !1;
        var queue = workInProgress.updateQueue;
        hasForceUpdate = !1;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
        if (null !== pendingQueue) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate;
            var current = workInProgress.alternate;
            null !== current && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
        }
        if (null !== firstBaseUpdate) {
            var newState = queue.baseState;
            lastBaseUpdate = 0;
            current = firstPendingUpdate = lastPendingUpdate = null;
            pendingQueue = firstBaseUpdate;
            do {
                var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
                if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
                    0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = !0);
                    null !== current && (current = current.next = {
                        lane: 0,
                        tag: pendingQueue.tag,
                        payload: pendingQueue.payload,
                        callback: null,
                        next: null
                    });
                    a: {
                        updateLane = workInProgress;
                        var partialState = pendingQueue;
                        var nextProps = props, instance = instance$jscomp$0;
                        switch(partialState.tag){
                            case ReplaceState:
                                partialState = partialState.payload;
                                if ("function" === typeof partialState) {
                                    isDisallowedContextReadInDEV = !0;
                                    var nextState = partialState.call(instance, newState, nextProps);
                                    if (updateLane.mode & StrictLegacyMode) {
                                        setIsStrictModeForDevtools(!0);
                                        try {
                                            partialState.call(instance, newState, nextProps);
                                        } finally{
                                            setIsStrictModeForDevtools(!1);
                                        }
                                    }
                                    isDisallowedContextReadInDEV = !1;
                                    newState = nextState;
                                    break a;
                                }
                                newState = partialState;
                                break a;
                            case CaptureUpdate:
                                updateLane.flags = updateLane.flags & -65537 | 128;
                            case UpdateState:
                                nextState = partialState.payload;
                                if ("function" === typeof nextState) {
                                    isDisallowedContextReadInDEV = !0;
                                    partialState = nextState.call(instance, newState, nextProps);
                                    if (updateLane.mode & StrictLegacyMode) {
                                        setIsStrictModeForDevtools(!0);
                                        try {
                                            nextState.call(instance, newState, nextProps);
                                        } finally{
                                            setIsStrictModeForDevtools(!1);
                                        }
                                    }
                                    isDisallowedContextReadInDEV = !1;
                                } else partialState = nextState;
                                if (null === partialState || void 0 === partialState) break a;
                                newState = assign({}, newState, partialState);
                                break a;
                            case ForceUpdate:
                                hasForceUpdate = !0;
                        }
                    }
                    updateLane = pendingQueue.callback;
                    null !== updateLane && (workInProgress.flags |= 64, isHiddenUpdate && (workInProgress.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [
                        updateLane
                    ] : isHiddenUpdate.push(updateLane));
                } else isHiddenUpdate = {
                    lane: updateLane,
                    tag: pendingQueue.tag,
                    payload: pendingQueue.payload,
                    callback: pendingQueue.callback,
                    next: null
                }, null === current ? (firstPendingUpdate = current = isHiddenUpdate, lastPendingUpdate = newState) : current = current.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
                pendingQueue = pendingQueue.next;
                if (null === pendingQueue) {
                    if (pendingQueue = queue.shared.pending, null === pendingQueue) break;
                    else isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
                }
            }while (1);
            null === current && (lastPendingUpdate = newState);
            queue.baseState = lastPendingUpdate;
            queue.firstBaseUpdate = firstPendingUpdate;
            queue.lastBaseUpdate = current;
            null === firstBaseUpdate && (queue.shared.lanes = 0);
            workInProgressRootSkippedLanes |= lastBaseUpdate;
            workInProgress.lanes = lastBaseUpdate;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if ("function" !== typeof callback) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(context);
    }
    function commitHiddenCallbacks(updateQueue, context) {
        var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
        if (null !== hiddenCallbacks) for(updateQueue.shared.hiddenCallbacks = null, updateQueue = 0; updateQueue < hiddenCallbacks.length; updateQueue++)callCallback(hiddenCallbacks[updateQueue], context);
    }
    function commitCallbacks(updateQueue, context) {
        var callbacks = updateQueue.callbacks;
        if (null !== callbacks) for(updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)callCallback(callbacks[updateQueue], context);
    }
    function shouldProfile(current) {
        return (current.mode & ProfileMode) !== NoMode;
    }
    function commitHookLayoutEffects(finishedWork, hookFlags) {
        shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
    }
    function commitHookLayoutUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
        shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor), recordEffectDuration()) : commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);
    }
    function commitHookEffectListMount(flags, finishedWork) {
        try {
            var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
            if (null !== lastEffect) {
                var firstEffect = lastEffect.next;
                updateQueue = firstEffect;
                do {
                    if ((updateQueue.tag & flags) === flags && ((flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted && injectedProfilingHooks.markComponentPassiveEffectMountStarted(finishedWork) : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted && injectedProfilingHooks.markComponentLayoutEffectMountStarted(finishedWork), lastEffect = void 0, (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = !0), lastEffect = runWithFiberInDEV(finishedWork, callCreateInDEV, updateQueue), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = !1), (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped && injectedProfilingHooks.markComponentPassiveEffectMountStopped() : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped && injectedProfilingHooks.markComponentLayoutEffectMountStopped(), void 0 !== lastEffect && "function" !== typeof lastEffect)) {
                        var hookName = void 0;
                        hookName = 0 !== (updateQueue.tag & Layout) ? "useLayoutEffect" : 0 !== (updateQueue.tag & Insertion) ? "useInsertionEffect" : "useEffect";
                        var addendum = void 0;
                        addendum = null === lastEffect ? " You returned null. If your effect does not require clean up, return undefined (or nothing)." : "function" === typeof lastEffect.then ? "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching" : " You returned: " + lastEffect;
                        runWithFiberInDEV(finishedWork, function(n, a) {
                            console.error("%s must not return anything besides a function, which is used for clean-up.%s", n, a);
                        }, hookName, addendum);
                    }
                    updateQueue = updateQueue.next;
                }while (updateQueue !== firstEffect);
            }
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        try {
            var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
            if (null !== lastEffect) {
                var firstEffect = lastEffect.next;
                updateQueue = firstEffect;
                do {
                    if ((updateQueue.tag & flags) === flags) {
                        var inst = updateQueue.inst, destroy = inst.destroy;
                        void 0 !== destroy && (inst.destroy = void 0, (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted && injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(finishedWork) : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted && injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(finishedWork), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = !0), runWithFiberInDEV(finishedWork, callDestroyInDEV, finishedWork, nearestMountedAncestor, destroy), (flags & Insertion) !== NoFlags && (isRunningInsertionEffect = !1), (flags & Passive) !== NoFlags ? null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped && injectedProfilingHooks.markComponentPassiveEffectUnmountStopped() : (flags & Layout) !== NoFlags && null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped && injectedProfilingHooks.markComponentLayoutEffectUnmountStopped());
                    }
                    updateQueue = updateQueue.next;
                }while (updateQueue !== firstEffect);
            }
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
    function commitHookPassiveMountEffects(finishedWork, hookFlags) {
        shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListMount(hookFlags, finishedWork), recordEffectDuration()) : commitHookEffectListMount(hookFlags, finishedWork);
    }
    function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {
        shouldProfile(finishedWork) ? (startEffectTimer(), commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor), recordEffectDuration()) : commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);
    }
    function commitClassCallbacks(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        if (null !== updateQueue) {
            var instance = finishedWork.stateNode;
            finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (instance.props !== finishedWork.memoizedProps && console.error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), instance.state !== finishedWork.memoizedState && console.error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"));
            try {
                runWithFiberInDEV(finishedWork, commitCallbacks, updateQueue, instance);
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
        }
    }
    function callGetSnapshotBeforeUpdates(instance, prevProps, prevState) {
        return instance.getSnapshotBeforeUpdate(prevProps, prevState);
    }
    function commitClassSnapshot(finishedWork, current) {
        var prevProps = current.memoizedProps, prevState = current.memoizedState;
        current = finishedWork.stateNode;
        finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (current.props !== finishedWork.memoizedProps && console.error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), current.state !== finishedWork.memoizedState && console.error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"));
        try {
            var resolvedPrevProps = resolveClassComponentProps(finishedWork.type, prevProps, finishedWork.elementType === finishedWork.type);
            var snapshot = runWithFiberInDEV(finishedWork, callGetSnapshotBeforeUpdates, current, resolvedPrevProps, prevState);
            prevProps = didWarnAboutUndefinedSnapshotBeforeUpdate;
            void 0 !== snapshot || prevProps.has(finishedWork.type) || (prevProps.add(finishedWork.type), runWithFiberInDEV(finishedWork, function() {
                console.error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
            }));
            current.__reactInternalSnapshotBeforeUpdate = snapshot;
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
        instance.props = resolveClassComponentProps(current.type, current.memoizedProps);
        instance.state = current.memoizedState;
        shouldProfile(current) ? (startEffectTimer(), runWithFiberInDEV(current, callComponentWillUnmountInDEV, current, nearestMountedAncestor, instance), recordEffectDuration()) : runWithFiberInDEV(current, callComponentWillUnmountInDEV, current, nearestMountedAncestor, instance);
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (null !== ref) {
            var instance = finishedWork.stateNode;
            if ("function" === typeof ref) {
                if (shouldProfile(finishedWork)) try {
                    startEffectTimer(), finishedWork.refCleanup = ref(instance);
                } finally{
                    recordEffectDuration();
                }
                else finishedWork.refCleanup = ref(instance);
            } else "string" === typeof ref ? console.error("String refs are no longer supported.") : ref.hasOwnProperty("current") || console.error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork)), ref.current = instance;
        }
    }
    function safelyAttachRef(current, nearestMountedAncestor) {
        try {
            runWithFiberInDEV(current, commitAttachRef, current);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
        var ref = current.ref, refCleanup = current.refCleanup;
        if (null !== ref) {
            if ("function" === typeof refCleanup) try {
                if (shouldProfile(current)) try {
                    startEffectTimer(), runWithFiberInDEV(current, refCleanup);
                } finally{
                    recordEffectDuration(current);
                }
                else runWithFiberInDEV(current, refCleanup);
            } catch (error) {
                captureCommitPhaseError(current, nearestMountedAncestor, error);
            } finally{
                current.refCleanup = null, current = current.alternate, null != current && (current.refCleanup = null);
            }
            else if ("function" === typeof ref) try {
                if (shouldProfile(current)) try {
                    startEffectTimer(), runWithFiberInDEV(current, ref, null);
                } finally{
                    recordEffectDuration(current);
                }
                else runWithFiberInDEV(current, ref, null);
            } catch (error$6) {
                captureCommitPhaseError(current, nearestMountedAncestor, error$6);
            }
            else ref.current = null;
        }
    }
    function commitProfiler(finishedWork, current, commitStartTime, effectDuration) {
        var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onCommit = _finishedWork$memoize.onCommit;
        _finishedWork$memoize = _finishedWork$memoize.onRender;
        current = null === current ? "mount" : "update";
        currentUpdateIsNested && (current = "nested-update");
        "function" === typeof _finishedWork$memoize && _finishedWork$memoize(id, current, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitStartTime);
        "function" === typeof onCommit && onCommit(finishedWork.memoizedProps.id, current, effectDuration, commitStartTime);
    }
    function commitProfilerPostCommitImpl(finishedWork, current, commitStartTime, passiveEffectDuration) {
        var _finishedWork$memoize2 = finishedWork.memoizedProps;
        finishedWork = _finishedWork$memoize2.id;
        _finishedWork$memoize2 = _finishedWork$memoize2.onPostCommit;
        current = null === current ? "mount" : "update";
        currentUpdateIsNested && (current = "nested-update");
        "function" === typeof _finishedWork$memoize2 && _finishedWork$memoize2(finishedWork, current, passiveEffectDuration, commitStartTime);
    }
    function commitHostMount(finishedWork) {
        var type = finishedWork.type, props = finishedWork.memoizedProps, instance = finishedWork.stateNode;
        try {
            runWithFiberInDEV(finishedWork, commitMount, instance, type, props, finishedWork);
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
    function commitHostUpdate(finishedWork, newProps, oldProps) {
        try {
            runWithFiberInDEV(finishedWork, commitUpdate, finishedWork.stateNode, finishedWork.type, oldProps, newProps, finishedWork);
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
    function isHostParent(fiber) {
        return 5 === fiber.tag || 3 === fiber.tag || 26 === fiber.tag || 27 === fiber.tag || 4 === fiber.tag;
    }
    function getHostSibling(fiber) {
        a: for(;;){
            for(; null === fiber.sibling;){
                if (null === fiber.return || isHostParent(fiber.return)) return null;
                fiber = fiber.return;
            }
            fiber.sibling.return = fiber.return;
            for(fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 27 !== fiber.tag && 18 !== fiber.tag;){
                if (fiber.flags & 2) continue a;
                if (null === fiber.child || 4 === fiber.tag) continue a;
                else fiber.child.return = fiber, fiber = fiber.child;
            }
            if (!(fiber.flags & 2)) return fiber.stateNode;
        }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        if (5 === tag || 6 === tag) node = node.stateNode, before ? 8 === parent.nodeType ? parent.parentNode.insertBefore(node, before) : parent.insertBefore(node, before) : (8 === parent.nodeType ? (before = parent.parentNode, before.insertBefore(node, parent)) : (before = parent, before.appendChild(node)), parent = parent._reactRootContainer, null !== parent && void 0 !== parent || null !== before.onclick || (before.onclick = noop$1));
        else if (4 !== tag && 27 !== tag && (node = node.child, null !== node)) for(insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node;)insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        if (5 === tag || 6 === tag) node = node.stateNode, before ? parent.insertBefore(node, before) : parent.appendChild(node);
        else if (4 !== tag && 27 !== tag && (node = node.child, null !== node)) for(insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node;)insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
    }
    function commitPlacement(finishedWork) {
        if (27 !== finishedWork.tag) {
            a: {
                for(var parent = finishedWork.return; null !== parent;){
                    if (isHostParent(parent)) {
                        var parentFiber = parent;
                        break a;
                    }
                    parent = parent.return;
                }
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            switch(parentFiber.tag){
                case 27:
                    parent = parentFiber.stateNode;
                    parentFiber = getHostSibling(finishedWork);
                    insertOrAppendPlacementNode(finishedWork, parentFiber, parent);
                    break;
                case 5:
                    parent = parentFiber.stateNode;
                    parentFiber.flags & 32 && (resetTextContent(parent), parentFiber.flags &= -33);
                    parentFiber = getHostSibling(finishedWork);
                    insertOrAppendPlacementNode(finishedWork, parentFiber, parent);
                    break;
                case 3:
                case 4:
                    parent = parentFiber.stateNode.containerInfo;
                    parentFiber = getHostSibling(finishedWork);
                    insertOrAppendPlacementNodeIntoContainer(finishedWork, parentFiber, parent);
                    break;
                default:
                    throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
        }
    }
    function commitBeforeMutationEffects(root, firstChild) {
        root = root.containerInfo;
        eventsEnabled = _enabled;
        root = getActiveElementDeep(root);
        if (hasSelectionCapabilities(root)) {
            if ("selectionStart" in root) var JSCompiler_temp = {
                start: root.selectionStart,
                end: root.selectionEnd
            };
            else a: {
                JSCompiler_temp = (JSCompiler_temp = root.ownerDocument) && JSCompiler_temp.defaultView || window;
                var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
                if (selection && 0 !== selection.rangeCount) {
                    JSCompiler_temp = selection.anchorNode;
                    var anchorOffset = selection.anchorOffset, focusNode = selection.focusNode;
                    selection = selection.focusOffset;
                    try {
                        JSCompiler_temp.nodeType, focusNode.nodeType;
                    } catch (e$2) {
                        JSCompiler_temp = null;
                        break a;
                    }
                    var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = root, parentNode = null;
                    b: for(;;){
                        for(var next;;){
                            node !== JSCompiler_temp || 0 !== anchorOffset && 3 !== node.nodeType || (start = length + anchorOffset);
                            node !== focusNode || 0 !== selection && 3 !== node.nodeType || (end = length + selection);
                            3 === node.nodeType && (length += node.nodeValue.length);
                            if (null === (next = node.firstChild)) break;
                            parentNode = node;
                            node = next;
                        }
                        for(;;){
                            if (node === root) break b;
                            parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length);
                            parentNode === focusNode && ++indexWithinFocus === selection && (end = length);
                            if (null !== (next = node.nextSibling)) break;
                            node = parentNode;
                            parentNode = node.parentNode;
                        }
                        node = next;
                    }
                    JSCompiler_temp = -1 === start || -1 === end ? null : {
                        start: start,
                        end: end
                    };
                } else JSCompiler_temp = null;
            }
            JSCompiler_temp = JSCompiler_temp || {
                start: 0,
                end: 0
            };
        } else JSCompiler_temp = null;
        selectionInformation = {
            focusedElem: root,
            selectionRange: JSCompiler_temp
        };
        _enabled = !1;
        for(nextEffect = firstChild; null !== nextEffect;)if (firstChild = nextEffect, root = firstChild.child, 0 !== (firstChild.subtreeFlags & 1028) && null !== root) root.return = firstChild, nextEffect = root;
        else for(; null !== nextEffect;){
            root = firstChild = nextEffect;
            JSCompiler_temp = root.alternate;
            anchorOffset = root.flags;
            switch(root.tag){
                case 0:
                    break;
                case 11:
                case 15:
                    break;
                case 1:
                    0 !== (anchorOffset & 1024) && null !== JSCompiler_temp && commitClassSnapshot(root, JSCompiler_temp);
                    break;
                case 3:
                    if (0 !== (anchorOffset & 1024)) {
                        if (root = root.stateNode.containerInfo, JSCompiler_temp = root.nodeType, 9 === JSCompiler_temp) clearContainerSparingly(root);
                        else if (1 === JSCompiler_temp) switch(root.nodeName){
                            case "HEAD":
                            case "HTML":
                            case "BODY":
                                clearContainerSparingly(root);
                                break;
                            default:
                                root.textContent = "";
                        }
                    }
                    break;
                case 5:
                case 26:
                case 27:
                case 6:
                case 4:
                case 17:
                    break;
                default:
                    if (0 !== (anchorOffset & 1024)) throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            root = firstChild.sibling;
            if (null !== root) {
                root.return = firstChild.return;
                nextEffect = root;
                break;
            }
            nextEffect = firstChild.return;
        }
        firstChild = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = !1;
        return firstChild;
    }
    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
        var flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                flags & 4 && commitHookLayoutEffects(finishedWork, Layout | HasEffect);
                break;
            case 1:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                if (flags & 4) {
                    if (finishedRoot = finishedWork.stateNode, null === current) finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), finishedRoot.state !== finishedWork.memoizedState && console.error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance")), shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(finishedWork, callComponentDidMountInDEV, finishedWork, finishedRoot), recordEffectDuration()) : runWithFiberInDEV(finishedWork, callComponentDidMountInDEV, finishedWork, finishedRoot);
                    else {
                        var prevProps = resolveClassComponentProps(finishedWork.type, current.memoizedProps);
                        current = current.memoizedState;
                        finishedWork.type.defaultProps || "ref" in finishedWork.memoizedProps || didWarnAboutReassigningProps || (finishedRoot.props !== finishedWork.memoizedProps && console.error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"), finishedRoot.state !== finishedWork.memoizedState && console.error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance"));
                        shouldProfile(finishedWork) ? (startEffectTimer(), runWithFiberInDEV(finishedWork, callComponentDidUpdateInDEV, finishedWork, finishedRoot, prevProps, current, finishedRoot.__reactInternalSnapshotBeforeUpdate), recordEffectDuration()) : runWithFiberInDEV(finishedWork, callComponentDidUpdateInDEV, finishedWork, finishedRoot, prevProps, current, finishedRoot.__reactInternalSnapshotBeforeUpdate);
                    }
                }
                flags & 64 && commitClassCallbacks(finishedWork);
                flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 3:
                current = pushNestedEffectDurations();
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                if (flags & 64 && (flags = finishedWork.updateQueue, null !== flags)) {
                    prevProps = null;
                    if (null !== finishedWork.child) switch(finishedWork.child.tag){
                        case 27:
                        case 5:
                            prevProps = finishedWork.child.stateNode;
                            break;
                        case 1:
                            prevProps = finishedWork.child.stateNode;
                    }
                    try {
                        runWithFiberInDEV(finishedWork, commitCallbacks, flags, prevProps);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                finishedRoot.effectDuration += popNestedEffectDurations(current);
                break;
            case 26:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 27:
            case 5:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                null === current && flags & 4 && commitHostMount(finishedWork);
                flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 12:
                if (flags & 4) {
                    flags = pushNestedEffectDurations();
                    recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                    finishedRoot = finishedWork.stateNode;
                    finishedRoot.effectDuration += bubbleNestedEffectDurations(flags);
                    try {
                        runWithFiberInDEV(finishedWork, commitProfiler, finishedWork, current, commitStartTime, finishedRoot.effectDuration);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                break;
            case 13:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
            case 22:
                prevProps = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
                if (!prevProps) {
                    current = null !== current && null !== current.memoizedState || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeIsHidden = prevProps;
                    (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, 0 !== (finishedWork.subtreeFlags & 8772)) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                }
                flags & 512 && ("manual" === finishedWork.memoizedProps.mode ? safelyAttachRef(finishedWork, finishedWork.return) : safelyDetachRef(finishedWork, finishedWork.return));
                break;
            default:
                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        }
    }
    function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null;
        5 === fiber.tag && (alternate = fiber.stateNode, null !== alternate && detachDeletedInstance(alternate));
        fiber.stateNode = null;
        fiber._debugOwner = null;
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null;
        fiber.updateQueue = null;
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        for(parent = parent.child; null !== parent;)commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount) try {
            injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
        } catch (err) {
            hasLoggedError || (hasLoggedError = !0, console.error("React instrumentation encountered an error: %s", err));
        }
        switch(deletedFiber.tag){
            case 26:
                offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (deletedFiber = deletedFiber.stateNode, deletedFiber.parentNode.removeChild(deletedFiber));
                break;
            case 27:
                offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                deletedFiber = deletedFiber.stateNode;
                for(finishedRoot = deletedFiber.attributes; finishedRoot.length;)deletedFiber.removeAttributeNode(finishedRoot[0]);
                detachDeletedInstance(deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                break;
            case 5:
                offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            case 6:
                prevHostParent = hostParent;
                prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (null !== hostParent) {
                    if (hostParentIsContainer) try {
                        runWithFiberInDEV(deletedFiber, removeChildFromContainer, hostParent, deletedFiber.stateNode);
                    } catch (error) {
                        captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
                    }
                    else try {
                        runWithFiberInDEV(deletedFiber, removeChild, hostParent, deletedFiber.stateNode);
                    } catch (error) {
                        captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
                    }
                }
                break;
            case 18:
                null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, deletedFiber = deletedFiber.stateNode, 8 === finishedRoot.nodeType ? clearSuspenseBoundary(finishedRoot.parentNode, deletedFiber) : 1 === finishedRoot.nodeType && clearSuspenseBoundary(finishedRoot, deletedFiber), retryIfBlockedOn(finishedRoot)) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
                break;
            case 4:
                prevHostParent = hostParent;
                prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = !0;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                break;
            case 0:
            case 11:
            case 14:
            case 15:
                offscreenSubtreeWasHidden || commitHookEffectListUnmount(Insertion, deletedFiber, nearestMountedAncestor);
                offscreenSubtreeWasHidden || commitHookLayoutUnmountEffects(deletedFiber, nearestMountedAncestor, Layout);
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                break;
            case 1:
                offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, "function" === typeof prevHostParent.componentWillUnmount && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, prevHostParent));
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                break;
            case 21:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                break;
            case 22:
                offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
                offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevHostParent;
                break;
            default:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
        }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot)))) try {
            runWithFiberInDEV(finishedWork, commitHydratedSuspenseInstance, finishedRoot);
        } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
    }
    function getRetryCache(finishedWork) {
        switch(finishedWork.tag){
            case 13:
            case 19:
                var retryCache = finishedWork.stateNode;
                null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
                return retryCache;
            case 22:
                return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
            default:
                throw Error("Unexpected Suspense handler tag (" + finishedWork.tag + "). This is a bug in React.");
        }
    }
    function attachSuspenseRetryListeners(finishedWork, wakeables) {
        var retryCache = getRetryCache(finishedWork);
        wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                if (isDevToolsPresent) {
                    if (null !== inProgressLanes && null !== inProgressRoot) restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    else throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                }
                wakeable.then(retry, retry);
            }
        });
    }
    function commitMutationEffects(root, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        commitMutationEffectsOnFiber(finishedWork, root);
        inProgressRoot = inProgressLanes = null;
    }
    function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
        var deletions = parentFiber.deletions;
        if (null !== deletions) for(var i = 0; i < deletions.length; i++){
            var root = root$jscomp$0, returnFiber = parentFiber, deletedFiber = deletions[i], parent = returnFiber;
            a: for(; null !== parent;){
                switch(parent.tag){
                    case 27:
                    case 5:
                        hostParent = parent.stateNode;
                        hostParentIsContainer = !1;
                        break a;
                    case 3:
                        hostParent = parent.stateNode.containerInfo;
                        hostParentIsContainer = !0;
                        break a;
                    case 4:
                        hostParent = parent.stateNode.containerInfo;
                        hostParentIsContainer = !0;
                        break a;
                }
                parent = parent.return;
            }
            if (null === hostParent) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = !1;
            root = deletedFiber;
            returnFiber = root.alternate;
            null !== returnFiber && (returnFiber.return = null);
            root.return = null;
        }
        if (parentFiber.subtreeFlags & 13878) for(parentFiber = parentFiber.child; null !== parentFiber;)commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
    }
    function commitMutationEffectsOnFiber(finishedWork, root) {
        var current = finishedWork.alternate, flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 14:
            case 15:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                flags & 4 && (commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return), commitHookEffectListMount(Insertion | HasEffect, finishedWork), commitHookLayoutUnmountEffects(finishedWork, finishedWork.return, Layout | HasEffect));
                break;
            case 1:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
                flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current ? flags : current.concat(flags))));
                break;
            case 26:
                var hoistableRoot = currentHoistableRoot;
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
                if (flags & 4) {
                    if (root = null !== current ? current.memoizedState : null, flags = finishedWork.memoizedState, null === current) {
                        if (null === flags) {
                            if (null === finishedWork.stateNode) {
                                a: {
                                    flags = finishedWork.type;
                                    current = finishedWork.memoizedProps;
                                    root = hoistableRoot.ownerDocument || hoistableRoot;
                                    b: switch(flags){
                                        case "title":
                                            hoistableRoot = root.getElementsByTagName("title")[0];
                                            if (!hoistableRoot || hoistableRoot[internalHoistableMarker] || hoistableRoot[internalInstanceKey] || hoistableRoot.namespaceURI === SVG_NAMESPACE || hoistableRoot.hasAttribute("itemprop")) hoistableRoot = root.createElement(flags), root.head.insertBefore(hoistableRoot, root.querySelector("head > title"));
                                            setInitialProperties(hoistableRoot, flags, current);
                                            hoistableRoot[internalInstanceKey] = finishedWork;
                                            markNodeAsHoistable(hoistableRoot);
                                            flags = hoistableRoot;
                                            break a;
                                        case "link":
                                            var maybeNodes = getHydratableHoistableCache("link", "href", root).get(flags + (current.href || ""));
                                            if (maybeNodes) {
                                                for(var i = 0; i < maybeNodes.length; i++)if (hoistableRoot = maybeNodes[i], hoistableRoot.getAttribute("href") === (null == current.href ? null : current.href) && hoistableRoot.getAttribute("rel") === (null == current.rel ? null : current.rel) && hoistableRoot.getAttribute("title") === (null == current.title ? null : current.title) && hoistableRoot.getAttribute("crossorigin") === (null == current.crossOrigin ? null : current.crossOrigin)) {
                                                    maybeNodes.splice(i, 1);
                                                    break b;
                                                }
                                            }
                                            hoistableRoot = root.createElement(flags);
                                            setInitialProperties(hoistableRoot, flags, current);
                                            root.head.appendChild(hoistableRoot);
                                            break;
                                        case "meta":
                                            if (maybeNodes = getHydratableHoistableCache("meta", "content", root).get(flags + (current.content || ""))) {
                                                for(i = 0; i < maybeNodes.length; i++)if (hoistableRoot = maybeNodes[i], checkAttributeStringCoercion(current.content, "content"), hoistableRoot.getAttribute("content") === (null == current.content ? null : "" + current.content) && hoistableRoot.getAttribute("name") === (null == current.name ? null : current.name) && hoistableRoot.getAttribute("property") === (null == current.property ? null : current.property) && hoistableRoot.getAttribute("http-equiv") === (null == current.httpEquiv ? null : current.httpEquiv) && hoistableRoot.getAttribute("charset") === (null == current.charSet ? null : current.charSet)) {
                                                    maybeNodes.splice(i, 1);
                                                    break b;
                                                }
                                            }
                                            hoistableRoot = root.createElement(flags);
                                            setInitialProperties(hoistableRoot, flags, current);
                                            root.head.appendChild(hoistableRoot);
                                            break;
                                        default:
                                            throw Error('getNodesForType encountered a type it did not expect: "' + flags + '". This is a bug in React.');
                                    }
                                    hoistableRoot[internalInstanceKey] = finishedWork;
                                    markNodeAsHoistable(hoistableRoot);
                                    flags = hoistableRoot;
                                }
                                finishedWork.stateNode = flags;
                            } else mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode);
                        } else finishedWork.stateNode = acquireResource(hoistableRoot, flags, finishedWork.memoizedProps);
                    } else root !== flags ? (null === root ? null !== current.stateNode && (current = current.stateNode, current.parentNode.removeChild(current)) : root.count--, null === flags ? mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode) : acquireResource(hoistableRoot, flags, finishedWork.memoizedProps)) : null === flags && null !== finishedWork.stateNode && commitHostUpdate(finishedWork, finishedWork.memoizedProps, current.memoizedProps);
                }
                break;
            case 27:
                if (flags & 4 && null === finishedWork.alternate) {
                    hoistableRoot = finishedWork.stateNode;
                    maybeNodes = finishedWork.memoizedProps;
                    try {
                        for(i = hoistableRoot.firstChild; i;){
                            var nextNode = i.nextSibling, nodeName = i.nodeName;
                            i[internalHoistableMarker] || "HEAD" === nodeName || "BODY" === nodeName || "SCRIPT" === nodeName || "STYLE" === nodeName || "LINK" === nodeName && "stylesheet" === i.rel.toLowerCase() || hoistableRoot.removeChild(i);
                            i = nextNode;
                        }
                        runWithFiberInDEV(finishedWork, acquireSingletonInstance, finishedWork.type, maybeNodes, hoistableRoot, finishedWork);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
            case 5:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
                if (finishedWork.flags & 32) {
                    root = finishedWork.stateNode;
                    try {
                        runWithFiberInDEV(finishedWork, resetTextContent, root);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                flags & 4 && null != finishedWork.stateNode && (root = finishedWork.memoizedProps, commitHostUpdate(finishedWork, root, null !== current ? current.memoizedProps : root));
                flags & 1024 && (needsFormReset = !0, "form" !== finishedWork.type && console.error("Unexpected host component type. Expected a form. This is a bug in React."));
                break;
            case 6:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & 4) {
                    if (null === finishedWork.stateNode) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    flags = finishedWork.memoizedProps;
                    current = null !== current ? current.memoizedProps : flags;
                    root = finishedWork.stateNode;
                    try {
                        runWithFiberInDEV(finishedWork, commitTextUpdate, root, current, flags);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                break;
            case 3:
                hoistableRoot = pushNestedEffectDurations();
                tagCaches = null;
                maybeNodes = currentHoistableRoot;
                currentHoistableRoot = getHoistableRoot(root.containerInfo);
                recursivelyTraverseMutationEffects(root, finishedWork);
                currentHoistableRoot = maybeNodes;
                commitReconciliationEffects(finishedWork);
                if (flags & 4 && null !== current && current.memoizedState.isDehydrated) try {
                    runWithFiberInDEV(finishedWork, commitHydratedContainer, root.containerInfo);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
                needsFormReset && (needsFormReset = !1, recursivelyResetForms(finishedWork));
                root.effectDuration += popNestedEffectDurations(hoistableRoot);
                break;
            case 4:
                flags = currentHoistableRoot;
                currentHoistableRoot = getHoistableRoot(finishedWork.stateNode.containerInfo);
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                currentHoistableRoot = flags;
                break;
            case 12:
                flags = pushNestedEffectDurations();
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                finishedWork.stateNode.effectDuration += bubbleNestedEffectDurations(flags);
                break;
            case 13:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                finishedWork.child.flags & 8192 && null !== finishedWork.memoizedState !== (null !== current && null !== current.memoizedState) && (globalMostRecentFallbackTime = now$1());
                flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
                break;
            case 22:
                flags & 512 && (offscreenSubtreeWasHidden || null === current || safelyDetachRef(current, current.return));
                i = null !== finishedWork.memoizedState;
                nextNode = null !== current && null !== current.memoizedState;
                nodeName = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = nodeName || i;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || nextNode;
                recursivelyTraverseMutationEffects(root, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = nodeName;
                commitReconciliationEffects(finishedWork);
                root = finishedWork.stateNode;
                root._current = finishedWork;
                root._visibility &= ~OffscreenDetached;
                root._visibility |= root._pendingVisibility & OffscreenDetached;
                if (flags & 8192 && (root._visibility = i ? root._visibility & ~OffscreenVisible : root._visibility | OffscreenVisible, i && (root = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden, null === current || nextNode || root || recursivelyTraverseDisappearLayoutEffects(finishedWork)), null === finishedWork.memoizedProps || "manual" !== finishedWork.memoizedProps.mode)) a: for(current = null, root = finishedWork;;){
                    if (5 === root.tag || 26 === root.tag || 27 === root.tag) {
                        if (null === current) {
                            nextNode = current = root;
                            try {
                                hoistableRoot = nextNode.stateNode, i ? runWithFiberInDEV(nextNode, hideInstance, hoistableRoot) : runWithFiberInDEV(nextNode, unhideInstance, nextNode.stateNode, nextNode.memoizedProps);
                            } catch (error) {
                                captureCommitPhaseError(nextNode, nextNode.return, error);
                            }
                        }
                    } else if (6 === root.tag) {
                        if (null === current) {
                            nextNode = root;
                            try {
                                maybeNodes = nextNode.stateNode, i ? runWithFiberInDEV(nextNode, hideTextInstance, maybeNodes) : runWithFiberInDEV(nextNode, unhideTextInstance, maybeNodes, nextNode.memoizedProps);
                            } catch (error) {
                                captureCommitPhaseError(nextNode, nextNode.return, error);
                            }
                        }
                    } else if ((22 !== root.tag && 23 !== root.tag || null === root.memoizedState || root === finishedWork) && null !== root.child) {
                        root.child.return = root;
                        root = root.child;
                        continue;
                    }
                    if (root === finishedWork) break a;
                    for(; null === root.sibling;){
                        if (null === root.return || root.return === finishedWork) break a;
                        current === root && (current = null);
                        root = root.return;
                    }
                    current === root && (current = null);
                    root.sibling.return = root.return;
                    root = root.sibling;
                }
                flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current = flags.retryQueue, null !== current && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current))));
                break;
            case 19:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
                break;
            case 21:
                break;
            default:
                recursivelyTraverseMutationEffects(root, finishedWork), commitReconciliationEffects(finishedWork);
        }
    }
    function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & 2) {
            try {
                runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
            finishedWork.flags &= -3;
        }
        flags & 4096 && (finishedWork.flags &= -4097);
    }
    function recursivelyResetForms(parentFiber) {
        if (parentFiber.subtreeFlags & 1024) for(parentFiber = parentFiber.child; null !== parentFiber;){
            var fiber = parentFiber;
            recursivelyResetForms(fiber);
            5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
            parentFiber = parentFiber.sibling;
        }
    }
    function commitLayoutEffects(finishedWork, root, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork);
        inProgressRoot = inProgressLanes = null;
    }
    function recursivelyTraverseLayoutEffects(root, parentFiber) {
        if (parentFiber.subtreeFlags & 8772) for(parentFiber = parentFiber.child; null !== parentFiber;)commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
    }
    function disappearLayoutEffects(finishedWork) {
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 14:
            case 15:
                commitHookLayoutUnmountEffects(finishedWork, finishedWork.return, Layout);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 1:
                safelyDetachRef(finishedWork, finishedWork.return);
                var instance = finishedWork.stateNode;
                "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 26:
            case 27:
            case 5:
                safelyDetachRef(finishedWork, finishedWork.return);
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            case 22:
                safelyDetachRef(finishedWork, finishedWork.return);
                null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
                break;
            default:
                recursivelyTraverseDisappearLayoutEffects(finishedWork);
        }
    }
    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
        for(parentFiber = parentFiber.child; null !== parentFiber;)disappearLayoutEffects(parentFiber), parentFiber = parentFiber.sibling;
    }
    function reappearLayoutEffects(finishedRoot, current, finishedWork, includeWorkInProgressEffects) {
        var flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                commitHookLayoutEffects(finishedWork, Layout);
                break;
            case 1:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                current = finishedWork.stateNode;
                "function" === typeof current.componentDidMount && runWithFiberInDEV(finishedWork, callComponentDidMountInDEV, finishedWork, current);
                current = finishedWork.updateQueue;
                if (null !== current) {
                    finishedRoot = finishedWork.stateNode;
                    try {
                        runWithFiberInDEV(finishedWork, commitHiddenCallbacks, current, finishedRoot);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 26:
            case 27:
            case 5:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                includeWorkInProgressEffects && null === current && flags & 4 && commitHostMount(finishedWork);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            case 12:
                if (includeWorkInProgressEffects && flags & 4) {
                    flags = pushNestedEffectDurations();
                    recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                    includeWorkInProgressEffects = finishedWork.stateNode;
                    includeWorkInProgressEffects.effectDuration += bubbleNestedEffectDurations(flags);
                    try {
                        runWithFiberInDEV(finishedWork, commitProfiler, finishedWork, current, commitStartTime, includeWorkInProgressEffects.effectDuration);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                } else recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                break;
            case 13:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
            case 22:
                null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
                safelyAttachRef(finishedWork, finishedWork.return);
                break;
            default:
                recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
        }
    }
    function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {
        includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
        for(parentFiber = parentFiber.child; null !== parentFiber;)reappearLayoutEffects(finishedRoot, parentFiber.alternate, parentFiber, includeWorkInProgressEffects), parentFiber = parentFiber.sibling;
    }
    function commitOffscreenPassiveMountEffects(current, finishedWork) {
        var previousCache = null;
        null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (previousCache = current.memoizedState.cachePool.pool);
        current = null;
        null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current = finishedWork.memoizedState.cachePool.pool);
        current !== previousCache && (null != current && retainCache(current), null != previousCache && releaseCache(previousCache));
    }
    function commitCachePassiveMountEffect(current, finishedWork) {
        current = null;
        null !== finishedWork.alternate && (current = finishedWork.alternate.memoizedState.cache);
        finishedWork = finishedWork.memoizedState.cache;
        finishedWork !== current && (retainCache(finishedWork), null != current && releaseCache(current));
    }
    function recursivelyTraversePassiveMountEffects(root, parentFiber, committedLanes, committedTransitions) {
        if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;)commitPassiveMountOnFiber(root, parentFiber, committedLanes, committedTransitions), parentFiber = parentFiber.sibling;
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        var flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                flags & 2048 && commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
                break;
            case 3:
                var prevEffectDuration = pushNestedEffectDurations();
                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                flags & 2048 && (committedLanes = null, null !== finishedWork.alternate && (committedLanes = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== committedLanes && (retainCache(finishedWork), null != committedLanes && releaseCache(committedLanes)));
                finishedRoot.passiveEffectDuration += popNestedEffectDurations(prevEffectDuration);
                break;
            case 12:
                if (flags & 2048) {
                    prevEffectDuration = pushNestedEffectDurations();
                    recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                    finishedRoot = finishedWork.stateNode;
                    finishedRoot.passiveEffectDuration += bubbleNestedEffectDurations(prevEffectDuration);
                    try {
                        runWithFiberInDEV(finishedWork, commitProfilerPostCommitImpl, finishedWork, finishedWork.alternate, commitStartTime, finishedRoot.passiveEffectDuration);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                } else recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                break;
            case 23:
                break;
            case 22:
                prevEffectDuration = finishedWork.stateNode;
                null !== finishedWork.memoizedState ? prevEffectDuration._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : prevEffectDuration._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : (prevEffectDuration._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, 0 !== (finishedWork.subtreeFlags & 10256)));
                flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
                break;
            case 24:
                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
                flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
            default:
                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
        }
    }
    function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects) {
        includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
        for(parentFiber = parentFiber.child; null !== parentFiber;)reconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects), parentFiber = parentFiber.sibling;
    }
    function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) {
        var flags = finishedWork.flags;
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                commitHookPassiveMountEffects(finishedWork, Passive);
                break;
            case 23:
                break;
            case 22:
                var _instance2 = finishedWork.stateNode;
                null !== finishedWork.memoizedState ? _instance2._visibility & OffscreenPassiveEffectsConnected ? recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (_instance2._visibility |= OffscreenPassiveEffectsConnected, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects));
                includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
                break;
            case 24:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
                includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
            default:
                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
        }
    }
    function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
        if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;){
            var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
            switch(finishedWork.tag){
                case 22:
                    recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                    flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
                    break;
                case 24:
                    recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                    flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                    break;
                default:
                    recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
            }
            parentFiber = parentFiber.sibling;
        }
    }
    function recursivelyAccumulateSuspenseyCommit(parentFiber) {
        if (parentFiber.subtreeFlags & suspenseyCommitFlag) for(parentFiber = parentFiber.child; null !== parentFiber;)accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
    }
    function accumulateSuspenseyCommitOnFiber(fiber) {
        switch(fiber.tag){
            case 26:
                recursivelyAccumulateSuspenseyCommit(fiber);
                fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && suspendResource(currentHoistableRoot, fiber.memoizedState, fiber.memoizedProps);
                break;
            case 5:
                recursivelyAccumulateSuspenseyCommit(fiber);
                break;
            case 3:
            case 4:
                var previousHoistableRoot = currentHoistableRoot;
                currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo);
                recursivelyAccumulateSuspenseyCommit(fiber);
                currentHoistableRoot = previousHoistableRoot;
                break;
            case 22:
                null === fiber.memoizedState && (previousHoistableRoot = fiber.alternate, null !== previousHoistableRoot && null !== previousHoistableRoot.memoizedState ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(fiber));
                break;
            default:
                recursivelyAccumulateSuspenseyCommit(fiber);
        }
    }
    function detachAlternateSiblings(parentFiber) {
        var previousFiber = parentFiber.alternate;
        if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
            previousFiber.child = null;
            do previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
            while (null !== parentFiber);
        }
    }
    function recursivelyTraversePassiveUnmountEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if (0 !== (parentFiber.flags & 16)) {
            if (null !== deletions) for(var i = 0; i < deletions.length; i++){
                var childToDelete = deletions[i];
                nextEffect = childToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
            }
            detachAlternateSiblings(parentFiber);
        }
        if (parentFiber.subtreeFlags & 10256) for(parentFiber = parentFiber.child; null !== parentFiber;)commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                recursivelyTraversePassiveUnmountEffects(finishedWork);
                finishedWork.flags & 2048 && commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive | HasEffect);
                break;
            case 3:
                var prevEffectDuration = pushNestedEffectDurations();
                recursivelyTraversePassiveUnmountEffects(finishedWork);
                finishedWork.stateNode.passiveEffectDuration += popNestedEffectDurations(prevEffectDuration);
                break;
            case 12:
                prevEffectDuration = pushNestedEffectDurations();
                recursivelyTraversePassiveUnmountEffects(finishedWork);
                finishedWork.stateNode.passiveEffectDuration += bubbleNestedEffectDurations(prevEffectDuration);
                break;
            case 22:
                prevEffectDuration = finishedWork.stateNode;
                null !== finishedWork.memoizedState && prevEffectDuration._visibility & OffscreenPassiveEffectsConnected && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (prevEffectDuration._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
                break;
            default:
                recursivelyTraversePassiveUnmountEffects(finishedWork);
        }
    }
    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if (0 !== (parentFiber.flags & 16)) {
            if (null !== deletions) for(var i = 0; i < deletions.length; i++){
                var childToDelete = deletions[i];
                nextEffect = childToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
            }
            detachAlternateSiblings(parentFiber);
        }
        for(parentFiber = parentFiber.child; null !== parentFiber;)disconnectPassiveEffect(parentFiber), parentFiber = parentFiber.sibling;
    }
    function disconnectPassiveEffect(finishedWork) {
        switch(finishedWork.tag){
            case 0:
            case 11:
            case 15:
                commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive);
                recursivelyTraverseDisconnectPassiveEffects(finishedWork);
                break;
            case 22:
                var instance = finishedWork.stateNode;
                instance._visibility & OffscreenPassiveEffectsConnected && (instance._visibility &= ~OffscreenPassiveEffectsConnected, recursivelyTraverseDisconnectPassiveEffects(finishedWork));
                break;
            default:
                recursivelyTraverseDisconnectPassiveEffects(finishedWork);
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        for(; null !== nextEffect;){
            var fiber = nextEffect, current = fiber;
            switch(current.tag){
                case 0:
                case 11:
                case 15:
                    commitHookPassiveUnmountEffects(current, nearestMountedAncestor, Passive);
                    break;
                case 23:
                case 22:
                    null !== current.memoizedState && null !== current.memoizedState.cachePool && (current = current.memoizedState.cachePool.pool, null != current && retainCache(current));
                    break;
                case 24:
                    releaseCache(current.memoizedState.cache);
            }
            current = fiber.child;
            if (null !== current) current.return = fiber, nextEffect = current;
            else a: for(fiber = deletedSubtreeRoot; null !== nextEffect;){
                current = nextEffect;
                var sibling = current.sibling, returnFiber = current.return;
                detachFiberAfterEffects(current);
                if (current === fiber) {
                    nextEffect = null;
                    break a;
                }
                if (null !== sibling) {
                    sibling.return = returnFiber;
                    nextEffect = sibling;
                    break a;
                }
                nextEffect = returnFiber;
            }
        }
    }
    function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.refCleanup = this.ref = null;
        this.pendingProps = pendingProps;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = mode;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
        this.actualDuration = -0;
        this.actualStartTime = -1.1;
        this.treeBaseDuration = this.selfBaseDuration = -0;
        this._debugOwner = this._debugInfo = null;
        this._debugNeedsRemount = !1;
        this._debugHookTypes = null;
        hasBadMapPolyfill || "function" !== typeof Object.preventExtensions || Object.preventExtensions(this);
    }
    function shouldConstruct(Component) {
        Component = Component.prototype;
        return !(!Component || !Component.isReactComponent);
    }
    function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;
        null === workInProgress ? (workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress._debugOwner = current._debugOwner, workInProgress._debugHookTypes = current._debugHookTypes, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null, workInProgress.actualDuration = -0, workInProgress.actualStartTime = -1.1);
        workInProgress.flags = current.flags & 31457280;
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        pendingProps = current.dependencies;
        workInProgress.dependencies = null === pendingProps ? null : {
            lanes: pendingProps.lanes,
            firstContext: pendingProps.firstContext,
            _debugThenableState: pendingProps._debugThenableState
        };
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        workInProgress.refCleanup = current.refCleanup;
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
        workInProgress._debugInfo = current._debugInfo;
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch(workInProgress.tag){
            case 0:
            case 15:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
            case 1:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
            case 11:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
        }
        return workInProgress;
    }
    function resetWorkInProgress(workInProgress, renderLanes) {
        workInProgress.flags &= 31457282;
        var current = workInProgress.alternate;
        null === current ? (workInProgress.childLanes = 0, workInProgress.lanes = renderLanes, workInProgress.child = null, workInProgress.subtreeFlags = 0, workInProgress.memoizedProps = null, workInProgress.memoizedState = null, workInProgress.updateQueue = null, workInProgress.dependencies = null, workInProgress.stateNode = null, workInProgress.selfBaseDuration = 0, workInProgress.treeBaseDuration = 0) : (workInProgress.childLanes = current.childLanes, workInProgress.lanes = current.lanes, workInProgress.child = current.child, workInProgress.subtreeFlags = 0, workInProgress.deletions = null, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.type = current.type, renderLanes = current.dependencies, workInProgress.dependencies = null === renderLanes ? null : {
            lanes: renderLanes.lanes,
            firstContext: renderLanes.firstContext,
            _debugThenableState: renderLanes._debugThenableState
        }, workInProgress.selfBaseDuration = current.selfBaseDuration, workInProgress.treeBaseDuration = current.treeBaseDuration);
        return workInProgress;
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = 0, resolvedType = type;
        if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1), resolvedType = resolveFunctionForHotReloading(resolvedType);
        else if ("string" === typeof type) fiberTag = getHostContext(), fiberTag = isHostHoistableType(type, pendingProps, fiberTag) ? 26 : "html" === type || "head" === type || "body" === type ? 27 : 5;
        else a: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
                fiberTag = 8;
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
                break;
            case REACT_PROFILER_TYPE:
                return type = pendingProps, owner = mode, "string" !== typeof type.id && console.error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof type.id), key = createFiber(12, type, key, owner | ProfileMode), key.elementType = REACT_PROFILER_TYPE, key.lanes = lanes, key.stateNode = {
                    effectDuration: 0,
                    passiveEffectDuration: 0
                }, key;
            case REACT_SUSPENSE_TYPE:
                return key = createFiber(13, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_TYPE, key.lanes = lanes, key;
            case REACT_SUSPENSE_LIST_TYPE:
                return key = createFiber(19, pendingProps, key, mode), key.elementType = REACT_SUSPENSE_LIST_TYPE, key.lanes = lanes, key;
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            default:
                if ("object" === typeof type && null !== type) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                    case REACT_CONTEXT_TYPE:
                        fiberTag = 10;
                        break a;
                    case REACT_CONSUMER_TYPE:
                        fiberTag = 9;
                        break a;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = 11;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break a;
                    case REACT_MEMO_TYPE:
                        fiberTag = 14;
                        break a;
                    case REACT_LAZY_TYPE:
                        fiberTag = 16;
                        resolvedType = null;
                        break a;
                }
                resolvedType = "";
                if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length) resolvedType += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                null === type ? pendingProps = "null" : isArrayImpl(type) ? pendingProps = "array" : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE ? (pendingProps = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", resolvedType = " Did you accidentally export a JSX literal instead of a component?") : pendingProps = typeof type;
                (fiberTag = owner ? getComponentNameFromOwner(owner) : null) && (resolvedType += "\n\nCheck the render method of `" + fiberTag + "`.");
                fiberTag = 29;
                pendingProps = Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (pendingProps + "." + resolvedType));
                resolvedType = null;
        }
        key = createFiber(fiberTag, pendingProps, key, mode);
        key.elementType = type;
        key.type = resolvedType;
        key.lanes = lanes;
        key._debugOwner = owner;
        return key;
    }
    function createFiberFromElement(element, mode, lanes) {
        mode = createFiberFromTypeAndProps(element.type, element.key, element.props, element._owner, mode, lanes);
        mode._debugOwner = element._owner;
        return mode;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        elements = createFiber(7, elements, key, mode);
        elements.lanes = lanes;
        return elements;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        pendingProps = createFiber(22, pendingProps, key, mode);
        pendingProps.elementType = REACT_OFFSCREEN_TYPE;
        pendingProps.lanes = lanes;
        var primaryChildInstance = {
            _visibility: OffscreenVisible,
            _pendingVisibility: OffscreenVisible,
            _pendingMarkers: null,
            _retryCache: null,
            _transitions: null,
            _current: null,
            detach: function() {
                var instance = primaryChildInstance, fiber = instance._current;
                if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
                if (0 === (instance._pendingVisibility & OffscreenDetached)) {
                    var root = enqueueConcurrentRenderForLane(fiber, 2);
                    null !== root && (instance._pendingVisibility |= OffscreenDetached, scheduleUpdateOnFiber(root, fiber, 2));
                }
            },
            attach: function() {
                var instance = primaryChildInstance, fiber = instance._current;
                if (null === fiber) throw Error("Calling Offscreen.detach before instance handle has been set.");
                if (0 !== (instance._pendingVisibility & OffscreenDetached)) {
                    var root = enqueueConcurrentRenderForLane(fiber, 2);
                    null !== root && (instance._pendingVisibility &= ~OffscreenDetached, scheduleUpdateOnFiber(root, fiber, 2));
                }
            }
        };
        pendingProps.stateNode = primaryChildInstance;
        return pendingProps;
    }
    function createFiberFromText(content, mode, lanes) {
        content = createFiber(6, content, null, mode);
        content.lanes = lanes;
        return content;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        mode = createFiber(4, null !== portal.children ? portal.children : [], portal.key, mode);
        mode.lanes = lanes;
        mode.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
        };
        return mode;
    }
    function markUpdate(workInProgress) {
        workInProgress.flags |= 4;
    }
    function preloadResourceAndSuspendIfNeeded(workInProgress, resource) {
        if ("stylesheet" !== resource.type || (resource.state.loading & Inserted) !== NotLoaded) workInProgress.flags &= -16777217;
        else if (workInProgress.flags |= 16777216, !preloadResource(resource)) {
            resource = suspenseHandlerStackCursor.current;
            if (null !== resource && ((workInProgressRootRenderLanes & 4194176) === workInProgressRootRenderLanes ? null !== shellBoundary : (workInProgressRootRenderLanes & 62914560) !== workInProgressRootRenderLanes && 0 === (workInProgressRootRenderLanes & 536870912) || resource !== shellBoundary)) throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
            workInProgress.flags |= 8192;
        }
    }
    function scheduleRetryEffect(workInProgress, retryQueue) {
        null !== retryQueue && (workInProgress.flags |= 4);
        workInProgress.flags & 16384 && (retryQueue = 22 !== workInProgress.tag ? claimNextRetryLane() : 536870912, workInProgress.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (!isHydrating) switch(renderState.tailMode){
            case "hidden":
                hasRenderedATailFallback = renderState.tail;
                for(var lastTailNode = null; null !== hasRenderedATailFallback;)null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
                null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
                break;
            case "collapsed":
                lastTailNode = renderState.tail;
                for(var _lastTailNode = null; null !== lastTailNode;)null !== lastTailNode.alternate && (_lastTailNode = lastTailNode), lastTailNode = lastTailNode.sibling;
                null === _lastTailNode ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : _lastTailNode.sibling = null;
        }
    }
    function bubbleProperties(completedWork) {
        var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
        if (didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                for(var _treeBaseDuration = completedWork.selfBaseDuration, _child2 = completedWork.child; null !== _child2;)newChildLanes |= _child2.lanes | _child2.childLanes, subtreeFlags |= _child2.subtreeFlags & 31457280, subtreeFlags |= _child2.flags & 31457280, _treeBaseDuration += _child2.treeBaseDuration, _child2 = _child2.sibling;
                completedWork.treeBaseDuration = _treeBaseDuration;
            } else for(_treeBaseDuration = completedWork.child; null !== _treeBaseDuration;)newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags & 31457280, subtreeFlags |= _treeBaseDuration.flags & 31457280, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
        } else if ((completedWork.mode & ProfileMode) !== NoMode) {
            _treeBaseDuration = completedWork.actualDuration;
            _child2 = completedWork.selfBaseDuration;
            for(var child = completedWork.child; null !== child;)newChildLanes |= child.lanes | child.childLanes, subtreeFlags |= child.subtreeFlags, subtreeFlags |= child.flags, _treeBaseDuration += child.actualDuration, _child2 += child.treeBaseDuration, child = child.sibling;
            completedWork.actualDuration = _treeBaseDuration;
            completedWork.treeBaseDuration = _child2;
        } else for(_treeBaseDuration = completedWork.child; null !== _treeBaseDuration;)newChildLanes |= _treeBaseDuration.lanes | _treeBaseDuration.childLanes, subtreeFlags |= _treeBaseDuration.subtreeFlags, subtreeFlags |= _treeBaseDuration.flags, _treeBaseDuration.return = completedWork, _treeBaseDuration = _treeBaseDuration.sibling;
        completedWork.subtreeFlags |= subtreeFlags;
        completedWork.childLanes = newChildLanes;
        return didBailout;
    }
    function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps;
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case 16:
            case 15:
            case 0:
            case 11:
            case 7:
            case 8:
            case 12:
            case 9:
            case 14:
                return bubbleProperties(workInProgress), null;
            case 1:
                return bubbleProperties(workInProgress), null;
            case 3:
                newProps = workInProgress.stateNode;
                renderLanes = null;
                null !== current && (renderLanes = current.memoizedState.cache);
                workInProgress.memoizedState.cache !== renderLanes && (workInProgress.flags |= 2048);
                popProvider(CacheContext, workInProgress);
                popHostContainer(workInProgress);
                newProps.pendingContext && (newProps.context = newProps.pendingContext, newProps.pendingContext = null);
                if (null === current || null === current.child) popHydrationState(workInProgress) ? (emitPendingHydrationWarnings(), markUpdate(workInProgress)) : null === current || current.memoizedState.isDehydrated && 0 === (workInProgress.flags & 256) || (workInProgress.flags |= 1024, null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null));
                bubbleProperties(workInProgress);
                return null;
            case 26:
                return renderLanes = workInProgress.memoizedState, null === current ? (markUpdate(workInProgress), null !== renderLanes ? (bubbleProperties(workInProgress), preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes)) : (bubbleProperties(workInProgress), workInProgress.flags &= -16777217)) : renderLanes ? renderLanes !== current.memoizedState ? (markUpdate(workInProgress), bubbleProperties(workInProgress), preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes)) : (bubbleProperties(workInProgress), workInProgress.flags &= -16777217) : (current.memoizedProps !== newProps && markUpdate(workInProgress), bubbleProperties(workInProgress), workInProgress.flags &= -16777217), null;
            case 27:
                popHostContext(workInProgress);
                renderLanes = requiredContext(rootInstanceStackCursor.current);
                var _type = workInProgress.type;
                if (null !== current && null != workInProgress.stateNode) current.memoizedProps !== newProps && markUpdate(workInProgress);
                else {
                    if (!newProps) {
                        if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                        bubbleProperties(workInProgress);
                        return null;
                    }
                    current = getHostContext();
                    popHydrationState(workInProgress) ? prepareToHydrateHostInstance(workInProgress, current) : (current = resolveSingletonInstance(_type, newProps, renderLanes, current, !0), workInProgress.stateNode = current, markUpdate(workInProgress));
                }
                bubbleProperties(workInProgress);
                return null;
            case 5:
                popHostContext(workInProgress);
                renderLanes = workInProgress.type;
                if (null !== current && null != workInProgress.stateNode) current.memoizedProps !== newProps && markUpdate(workInProgress);
                else {
                    if (!newProps) {
                        if (null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                        bubbleProperties(workInProgress);
                        return null;
                    }
                    _type = getHostContext();
                    if (popHydrationState(workInProgress)) prepareToHydrateHostInstance(workInProgress, _type);
                    else {
                        current = requiredContext(rootInstanceStackCursor.current);
                        validateDOMNesting(renderLanes, _type.ancestorInfo);
                        _type = _type.context;
                        current = getOwnerDocumentFromRootContainer(current);
                        switch(_type){
                            case HostContextNamespaceSvg:
                                current = current.createElementNS(SVG_NAMESPACE, renderLanes);
                                break;
                            case HostContextNamespaceMath:
                                current = current.createElementNS(MATH_NAMESPACE, renderLanes);
                                break;
                            default:
                                switch(renderLanes){
                                    case "svg":
                                        current = current.createElementNS(SVG_NAMESPACE, renderLanes);
                                        break;
                                    case "math":
                                        current = current.createElementNS(MATH_NAMESPACE, renderLanes);
                                        break;
                                    case "script":
                                        current = current.createElement("div");
                                        current.innerHTML = "<script>\x3c/script>";
                                        current = current.removeChild(current.firstChild);
                                        break;
                                    case "select":
                                        current = "string" === typeof newProps.is ? current.createElement("select", {
                                            is: newProps.is
                                        }) : current.createElement("select");
                                        newProps.multiple ? current.multiple = !0 : newProps.size && (current.size = newProps.size);
                                        break;
                                    default:
                                        current = "string" === typeof newProps.is ? current.createElement(renderLanes, {
                                            is: newProps.is
                                        }) : current.createElement(renderLanes), -1 === renderLanes.indexOf("-") && (renderLanes !== renderLanes.toLowerCase() && console.error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", renderLanes), "[object HTMLUnknownElement]" !== Object.prototype.toString.call(current) || hasOwnProperty.call(warnedUnknownTags, renderLanes) || (warnedUnknownTags[renderLanes] = !0, console.error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", renderLanes)));
                                }
                        }
                        current[internalInstanceKey] = workInProgress;
                        current[internalPropsKey] = newProps;
                        a: for(_type = workInProgress.child; null !== _type;){
                            if (5 === _type.tag || 6 === _type.tag) current.appendChild(_type.stateNode);
                            else if (4 !== _type.tag && 27 !== _type.tag && null !== _type.child) {
                                _type.child.return = _type;
                                _type = _type.child;
                                continue;
                            }
                            if (_type === workInProgress) break a;
                            for(; null === _type.sibling;){
                                if (null === _type.return || _type.return === workInProgress) break a;
                                _type = _type.return;
                            }
                            _type.sibling.return = _type.return;
                            _type = _type.sibling;
                        }
                        workInProgress.stateNode = current;
                        a: switch(setInitialProperties(current, renderLanes, newProps), renderLanes){
                            case "button":
                            case "input":
                            case "select":
                            case "textarea":
                                current = !!newProps.autoFocus;
                                break a;
                            case "img":
                                current = !0;
                                break a;
                            default:
                                current = !1;
                        }
                        current && markUpdate(workInProgress);
                    }
                }
                bubbleProperties(workInProgress);
                workInProgress.flags &= -16777217;
                return null;
            case 6:
                if (current && null != workInProgress.stateNode) current.memoizedProps !== newProps && markUpdate(workInProgress);
                else {
                    if ("string" !== typeof newProps && null === workInProgress.stateNode) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    current = requiredContext(rootInstanceStackCursor.current);
                    renderLanes = getHostContext();
                    if (popHydrationState(workInProgress)) {
                        current = workInProgress.stateNode;
                        newProps = workInProgress.memoizedProps;
                        _type = !didSuspendOrErrorDEV;
                        renderLanes = null;
                        var returnFiber = hydrationParentFiber;
                        if (null !== returnFiber) switch(returnFiber.tag){
                            case 3:
                                _type && (_type = diffHydratedTextForDevWarnings(current, newProps, renderLanes), null !== _type && (buildHydrationDiffNode(workInProgress, 0).serverProps = _type));
                                break;
                            case 27:
                            case 5:
                                renderLanes = returnFiber.memoizedProps, _type && (_type = diffHydratedTextForDevWarnings(current, newProps, renderLanes), null !== _type && (buildHydrationDiffNode(workInProgress, 0).serverProps = _type));
                        }
                        current[internalInstanceKey] = workInProgress;
                        current = current.nodeValue === newProps || null !== renderLanes && !0 === renderLanes.suppressHydrationWarning || checkForUnmatchedText(current.nodeValue, newProps) ? !0 : !1;
                        current || throwOnHydrationMismatch(workInProgress);
                    } else renderLanes = renderLanes.ancestorInfo.current, null != renderLanes && validateTextNesting(newProps, renderLanes.tag), current = getOwnerDocumentFromRootContainer(current).createTextNode(newProps), current[internalInstanceKey] = workInProgress, workInProgress.stateNode = current;
                }
                bubbleProperties(workInProgress);
                return null;
            case 13:
                newProps = workInProgress.memoizedState;
                if (null === current || null !== current.memoizedState && null !== current.memoizedState.dehydrated) {
                    _type = popHydrationState(workInProgress);
                    if (null !== newProps && null !== newProps.dehydrated) {
                        if (null === current) {
                            if (!_type) throw Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                            _type = workInProgress.memoizedState;
                            _type = null !== _type ? _type.dehydrated : null;
                            if (!_type) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
                            _type[internalInstanceKey] = workInProgress;
                            bubbleProperties(workInProgress);
                            (workInProgress.mode & ProfileMode) !== NoMode && null !== newProps && (_type = workInProgress.child, null !== _type && (workInProgress.treeBaseDuration -= _type.treeBaseDuration));
                        } else emitPendingHydrationWarnings(), resetHydrationState(), 0 === (workInProgress.flags & 128) && (workInProgress.memoizedState = null), workInProgress.flags |= 4, bubbleProperties(workInProgress), (workInProgress.mode & ProfileMode) !== NoMode && null !== newProps && (_type = workInProgress.child, null !== _type && (workInProgress.treeBaseDuration -= _type.treeBaseDuration));
                        _type = !1;
                    } else null !== hydrationErrors && (queueRecoverableErrors(hydrationErrors), hydrationErrors = null), _type = !0;
                    if (!_type) {
                        if (workInProgress.flags & 256) return popSuspenseHandler(workInProgress), workInProgress;
                        popSuspenseHandler(workInProgress);
                        return null;
                    }
                }
                popSuspenseHandler(workInProgress);
                if (0 !== (workInProgress.flags & 128)) return workInProgress.lanes = renderLanes, (workInProgress.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress), workInProgress;
                newProps = null !== newProps;
                current = null !== current && null !== current.memoizedState;
                newProps && (renderLanes = workInProgress.child, _type = null, null !== renderLanes.alternate && null !== renderLanes.alternate.memoizedState && null !== renderLanes.alternate.memoizedState.cachePool && (_type = renderLanes.alternate.memoizedState.cachePool.pool), returnFiber = null, null !== renderLanes.memoizedState && null !== renderLanes.memoizedState.cachePool && (returnFiber = renderLanes.memoizedState.cachePool.pool), returnFiber !== _type && (renderLanes.flags |= 2048));
                newProps !== current && newProps && (workInProgress.child.flags |= 8192);
                scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
                bubbleProperties(workInProgress);
                (workInProgress.mode & ProfileMode) !== NoMode && newProps && (current = workInProgress.child, null !== current && (workInProgress.treeBaseDuration -= current.treeBaseDuration));
                return null;
            case 4:
                return popHostContainer(workInProgress), null === current && listenToAllSupportedEvents(workInProgress.stateNode.containerInfo), bubbleProperties(workInProgress), null;
            case 10:
                return popProvider(workInProgress.type, workInProgress), bubbleProperties(workInProgress), null;
            case 19:
                pop(suspenseStackCursor, workInProgress);
                _type = workInProgress.memoizedState;
                if (null === _type) return bubbleProperties(workInProgress), null;
                newProps = 0 !== (workInProgress.flags & 128);
                returnFiber = _type.rendering;
                if (null === returnFiber) {
                    if (newProps) cutOffTailIfNeeded(_type, !1);
                    else {
                        if (workInProgressRootExitStatus !== RootInProgress || null !== current && 0 !== (current.flags & 128)) for(current = workInProgress.child; null !== current;){
                            returnFiber = findFirstSuspended(current);
                            if (null !== returnFiber) {
                                workInProgress.flags |= 128;
                                cutOffTailIfNeeded(_type, !1);
                                current = returnFiber.updateQueue;
                                workInProgress.updateQueue = current;
                                scheduleRetryEffect(workInProgress, current);
                                workInProgress.subtreeFlags = 0;
                                current = renderLanes;
                                for(newProps = workInProgress.child; null !== newProps;)resetWorkInProgress(newProps, current), newProps = newProps.sibling;
                                push(suspenseStackCursor, suspenseStackCursor.current & SubtreeSuspenseContextMask | ForceSuspenseFallback, workInProgress);
                                return workInProgress.child;
                            }
                            current = current.sibling;
                        }
                        null !== _type.tail && now$1() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = !0, cutOffTailIfNeeded(_type, !1), workInProgress.lanes = 4194304);
                    }
                } else {
                    if (!newProps) {
                        if (current = findFirstSuspended(returnFiber), null !== current) {
                            if (workInProgress.flags |= 128, newProps = !0, current = current.updateQueue, workInProgress.updateQueue = current, scheduleRetryEffect(workInProgress, current), cutOffTailIfNeeded(_type, !0), null === _type.tail && "hidden" === _type.tailMode && !returnFiber.alternate && !isHydrating) return bubbleProperties(workInProgress), null;
                        } else 2 * now$1() - _type.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes && (workInProgress.flags |= 128, newProps = !0, cutOffTailIfNeeded(_type, !1), workInProgress.lanes = 4194304);
                    }
                    _type.isBackwards ? (returnFiber.sibling = workInProgress.child, workInProgress.child = returnFiber) : (current = _type.last, null !== current ? current.sibling = returnFiber : workInProgress.child = returnFiber, _type.last = returnFiber);
                }
                if (null !== _type.tail) return current = _type.tail, _type.rendering = current, _type.tail = current.sibling, _type.renderingStartTime = now$1(), current.sibling = null, renderLanes = suspenseStackCursor.current, renderLanes = newProps ? renderLanes & SubtreeSuspenseContextMask | ForceSuspenseFallback : renderLanes & SubtreeSuspenseContextMask, push(suspenseStackCursor, renderLanes, workInProgress), current;
                bubbleProperties(workInProgress);
                return null;
            case 22:
            case 23:
                return popSuspenseHandler(workInProgress), popHiddenContext(workInProgress), newProps = null !== workInProgress.memoizedState, null !== current ? null !== current.memoizedState !== newProps && (workInProgress.flags |= 8192) : newProps && (workInProgress.flags |= 8192), newProps ? 0 !== (renderLanes & 536870912) && 0 === (workInProgress.flags & 128) && (bubbleProperties(workInProgress), workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192)) : bubbleProperties(workInProgress), newProps = workInProgress.updateQueue, null !== newProps && scheduleRetryEffect(workInProgress, newProps.retryQueue), newProps = null, null !== current && null !== current.memoizedState && null !== current.memoizedState.cachePool && (newProps = current.memoizedState.cachePool.pool), renderLanes = null, null !== workInProgress.memoizedState && null !== workInProgress.memoizedState.cachePool && (renderLanes = workInProgress.memoizedState.cachePool.pool), renderLanes !== newProps && (workInProgress.flags |= 2048), null !== current && pop(resumedCache, workInProgress), null;
            case 24:
                return newProps = null, null !== current && (newProps = current.memoizedState.cache), workInProgress.memoizedState.cache !== newProps && (workInProgress.flags |= 2048), popProvider(CacheContext, workInProgress), bubbleProperties(workInProgress), null;
            case 25:
                return null;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(current, workInProgress) {
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case 1:
                return current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, (workInProgress.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress), workInProgress) : null;
            case 3:
                return popProvider(CacheContext, workInProgress), popHostContainer(workInProgress), current = workInProgress.flags, 0 !== (current & 65536) && 0 === (current & 128) ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
            case 26:
            case 27:
            case 5:
                return popHostContext(workInProgress), null;
            case 13:
                popSuspenseHandler(workInProgress);
                current = workInProgress.memoizedState;
                if (null !== current && null !== current.dehydrated) {
                    if (null === workInProgress.alternate) throw Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                    resetHydrationState();
                }
                current = workInProgress.flags;
                return current & 65536 ? (workInProgress.flags = current & -65537 | 128, (workInProgress.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress), workInProgress) : null;
            case 19:
                return pop(suspenseStackCursor, workInProgress), null;
            case 4:
                return popHostContainer(workInProgress), null;
            case 10:
                return popProvider(workInProgress.type, workInProgress), null;
            case 22:
            case 23:
                return popSuspenseHandler(workInProgress), popHiddenContext(workInProgress), null !== current && pop(resumedCache, workInProgress), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, (workInProgress.mode & ProfileMode) !== NoMode && transferActualDuration(workInProgress), workInProgress) : null;
            case 24:
                return popProvider(CacheContext, workInProgress), null;
            case 25:
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(current, interruptedWork) {
        popTreeContext(interruptedWork);
        switch(interruptedWork.tag){
            case 3:
                popProvider(CacheContext, interruptedWork);
                popHostContainer(interruptedWork);
                break;
            case 26:
            case 27:
            case 5:
                popHostContext(interruptedWork);
                break;
            case 4:
                popHostContainer(interruptedWork);
                break;
            case 13:
                popSuspenseHandler(interruptedWork);
                break;
            case 19:
                pop(suspenseStackCursor, interruptedWork);
                break;
            case 10:
                popProvider(interruptedWork.type, interruptedWork);
                break;
            case 22:
            case 23:
                popSuspenseHandler(interruptedWork);
                popHiddenContext(interruptedWork);
                null !== current && pop(resumedCache, interruptedWork);
                break;
            case 24:
                popProvider(CacheContext, interruptedWork);
        }
    }
    function onCommitRoot() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    function isConcurrentActEnvironment() {
        var isReactActEnvironmentGlobal = "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT ? IS_REACT_ACT_ENVIRONMENT : void 0;
        isReactActEnvironmentGlobal || null === ReactSharedInternals.actQueue || console.error("The current testing environment is not configured to support act(...)");
        return isReactActEnvironmentGlobal;
    }
    function requestUpdateLane(fiber) {
        if ((executionContext & RenderContext) !== NoContext && 0 !== workInProgressRootRenderLanes) return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
        var transition = ReactSharedInternals.T;
        return null !== transition ? (transition._updatedFibers || (transition._updatedFibers = new Set()), transition._updatedFibers.add(fiber), fiber = currentEntangledLane, 0 !== fiber ? fiber : requestTransitionLane()) : resolveUpdatePriority();
    }
    function requestDeferredLane() {
        0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 === (workInProgressRootRenderLanes & 536870912) || isHydrating ? claimNextTransitionLane() : 536870912);
        var suspenseHandler = suspenseHandlerStackCursor.current;
        null !== suspenseHandler && (suspenseHandler.flags |= 32);
        return workInProgressDeferredLane;
    }
    function scheduleUpdateOnFiber(root, fiber, lane) {
        isRunningInsertionEffect && console.error("useInsertionEffect must not schedule updates.");
        isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = !0);
        if (root === workInProgressRoot && workInProgressSuspendedReason === SuspendedOnData || null !== root.cancelPendingCommit) prepareFreshStack(root, 0), markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, !1);
        markRootUpdated$1(root, lane);
        if (0 !== (executionContext & RenderContext) && root === workInProgressRoot) {
            if (isRendering) switch(fiber.tag){
                case 0:
                case 11:
                case 15:
                    root = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    didWarnAboutUpdateInRenderForAnotherComponent.has(root) || (didWarnAboutUpdateInRenderForAnotherComponent.add(root), fiber = getComponentNameFromFiber(fiber) || "Unknown", console.error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render", fiber, root, root));
                    break;
                case 1:
                    didWarnAboutUpdateInRender || (console.error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), didWarnAboutUpdateInRender = !0);
            }
        } else isDevToolsPresent && addFiberToLanesMap(root, fiber, lane), warnIfUpdatesNotWrappedWithActDEV(fiber), root === workInProgressRoot && ((executionContext & RenderContext) === NoContext && (workInProgressRootInterleavedUpdatedLanes |= lane), workInProgressRootExitStatus === RootSuspendedWithDelay && markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane, !1)), ensureRootIsScheduled(root);
    }
    function performWorkOnRoot(root, lanes, forceSync) {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("Should not already be working.");
        var shouldTimeSlice = !forceSync && 0 === (lanes & 60) && 0 === (lanes & root.expiredLanes) || checkIfRootIsPrerendering(root, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes, !0), renderWasConcurrent = shouldTimeSlice;
        do {
            if (exitStatus === RootInProgress) {
                workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root, lanes, 0, !1);
                break;
            } else if (exitStatus === RootDidNotComplete) markRootSuspended(root, lanes, 0, !workInProgressRootDidSkipSuspendedSiblings);
            else {
                forceSync = root.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
                    exitStatus = renderRootSync(root, lanes, !1);
                    renderWasConcurrent = !1;
                    continue;
                }
                if (exitStatus === RootErrored) {
                    renderWasConcurrent = lanes;
                    if (root.errorRecoveryDisabledLanes & renderWasConcurrent) var errorRetryLanes = 0;
                    else errorRetryLanes = root.pendingLanes & -536870913, errorRetryLanes = 0 !== errorRetryLanes ? errorRetryLanes : errorRetryLanes & 536870912 ? 536870912 : 0;
                    if (0 !== errorRetryLanes) {
                        lanes = errorRetryLanes;
                        a: {
                            exitStatus = root;
                            var errorRetryLanes$jscomp$0 = errorRetryLanes;
                            errorRetryLanes = workInProgressRootConcurrentErrors;
                            var wasRootDehydrated = exitStatus.current.memoizedState.isDehydrated;
                            wasRootDehydrated && (prepareFreshStack(exitStatus, errorRetryLanes$jscomp$0).flags |= 256);
                            errorRetryLanes$jscomp$0 = renderRootSync(exitStatus, errorRetryLanes$jscomp$0, !1);
                            if (errorRetryLanes$jscomp$0 !== RootErrored) {
                                if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                                    exitStatus.errorRecoveryDisabledLanes |= renderWasConcurrent;
                                    workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                                    exitStatus = RootSuspendedWithDelay;
                                    break a;
                                }
                                exitStatus = workInProgressRootRecoverableErrors;
                                workInProgressRootRecoverableErrors = errorRetryLanes;
                                null !== exitStatus && queueRecoverableErrors(exitStatus);
                            }
                            exitStatus = errorRetryLanes$jscomp$0;
                        }
                        renderWasConcurrent = !1;
                        if (exitStatus !== RootErrored) continue;
                    }
                }
                if (exitStatus === RootFatalErrored) {
                    prepareFreshStack(root, 0);
                    markRootSuspended(root, lanes, 0, !0);
                    break;
                }
                a: {
                    shouldTimeSlice = root;
                    switch(exitStatus){
                        case RootInProgress:
                        case RootFatalErrored:
                            throw Error("Root did not complete. This is a bug in React.");
                        case RootSuspendedWithDelay:
                            if ((lanes & 4194176) === lanes) {
                                markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                                break a;
                            }
                            break;
                        case RootErrored:
                            workInProgressRootRecoverableErrors = null;
                            break;
                        case RootSuspended:
                        case RootCompleted:
                            break;
                        default:
                            throw Error("Unknown root exit status.");
                    }
                    shouldTimeSlice.finishedWork = forceSync;
                    shouldTimeSlice.finishedLanes = lanes;
                    if (null !== ReactSharedInternals.actQueue) commitRoot(shouldTimeSlice, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, IMMEDIATE_COMMIT, renderStartTime, 0);
                    else {
                        if ((lanes & 62914560) === lanes && (exitStatus = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(), 10 < exitStatus)) {
                            markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
                            if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
                            shouldTimeSlice.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, THROTTLED_COMMIT, renderStartTime, 0), exitStatus);
                            break a;
                        }
                        commitRootWhenReady(shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, IMMEDIATE_COMMIT, renderStartTime, 0);
                    }
                }
            }
            break;
        }while (1);
        ensureRootIsScheduled(root);
    }
    function queueRecoverableErrors(errors) {
        null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = errors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
    }
    function commitRootWhenReady(root, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
        var subtreeFlags = finishedWork.subtreeFlags;
        if (subtreeFlags & 8192 || 16785408 === (subtreeFlags & 16785408)) {
            if (suspendedState = {
                stylesheets: null,
                count: 0,
                unsuspend: noop
            }, accumulateSuspenseyCommitOnFiber(finishedWork), finishedWork = waitForCommitToBeReady(), null !== finishedWork) {
                root.cancelPendingCommit = finishedWork(commitRoot.bind(null, root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes, SUSPENDED_COMMIT, completedRenderStartTime, completedRenderEndTime));
                markRootSuspended(root, lanes, spawnedLane, !didSkipSuspendedSiblings);
                return;
            }
        }
        commitRoot(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime);
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
        for(var node = finishedWork;;){
            var tag = node.tag;
            if ((0 === tag || 11 === tag || 15 === tag) && node.flags & 16384 && (tag = node.updateQueue, null !== tag && (tag = tag.stores, null !== tag))) for(var i = 0; i < tag.length; i++){
                var check = tag[i], getSnapshot = check.getSnapshot;
                check = check.value;
                try {
                    if (!objectIs(getSnapshot(), check)) return !1;
                } catch (error) {
                    return !1;
                }
            }
            tag = node.child;
            if (node.subtreeFlags & 16384 && null !== tag) tag.return = node, node = tag;
            else {
                if (node === finishedWork) break;
                for(; null === node.sibling;){
                    if (null === node.return || node.return === finishedWork) return !0;
                    node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
            }
        }
        return !0;
    }
    function markRootSuspended(root, suspendedLanes, spawnedLane, didAttemptEntireTree) {
        suspendedLanes &= ~workInProgressRootPingedLanes;
        suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes;
        didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
        didAttemptEntireTree = root.expirationTimes;
        for(var lanes = suspendedLanes; 0 < lanes;){
            var index = 31 - clz32(lanes), lane = 1 << index;
            didAttemptEntireTree[index] = -1;
            lanes &= ~lane;
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
    }
    function flushSyncWork$1() {
        return (executionContext & (RenderContext | CommitContext)) === NoContext ? (flushSyncWorkAcrossRoots_impl(0, !1), !1) : !0;
    }
    function resetWorkInProgressStack() {
        if (null !== workInProgress) {
            if (workInProgressSuspendedReason === NotSuspended) var interruptedWork = workInProgress.return;
            else interruptedWork = workInProgress, resetContextDependencies(), resetHooksOnUnwind(interruptedWork), thenableState$1 = null, thenableIndexCounter$1 = 0, interruptedWork = workInProgress;
            for(; null !== interruptedWork;)unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
            workInProgress = null;
        }
    }
    function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = 0;
        var timeoutHandle = root.timeoutHandle;
        timeoutHandle !== noTimeout && (root.timeoutHandle = noTimeout, cancelTimeout(timeoutHandle));
        timeoutHandle = root.cancelPendingCommit;
        null !== timeoutHandle && (root.cancelPendingCommit = null, timeoutHandle());
        resetWorkInProgressStack();
        workInProgressRoot = root;
        workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
        workInProgressRootRenderLanes = lanes;
        workInProgressSuspendedReason = NotSuspended;
        workInProgressThrownValue = null;
        workInProgressRootDidSkipSuspendedSiblings = !1;
        workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
        workInProgressRootDidAttachPingListener = !1;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = 0;
        workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
        workInProgressRootDidIncludeRecursiveRenderUpdate = !1;
        0 !== (lanes & 8) && (lanes |= lanes & 32);
        var allEntangledLanes = root.entangledLanes;
        if (0 !== allEntangledLanes) for(root = root.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes;){
            var index = 31 - clz32(allEntangledLanes), lane = 1 << index;
            lanes |= root[index];
            allEntangledLanes &= ~lane;
        }
        entangledRenderLanes = lanes;
        finishQueueingConcurrentUpdates();
        ReactStrictModeWarnings.discardPendingWarnings();
        return timeoutHandle;
    }
    function handleThrow(root, thrownValue) {
        currentlyRenderingFiber$1 = null;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        ReactSharedInternals.getCurrentStack = null;
        isRendering = !1;
        current = null;
        thrownValue === SuspenseException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnImmediate) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = SuspendedOnInstance) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? SuspendedOnHydration : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? SuspendedOnDeprecatedThrowPromise : SuspendedOnError;
        workInProgressThrownValue = thrownValue;
        var erroredWork = workInProgress;
        if (null === erroredWork) workInProgressRootExitStatus = RootFatalErrored, logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
        else switch(erroredWork.mode & ProfileMode && stopProfilerTimerIfRunningAndRecordDuration(erroredWork), markComponentRenderStopped(), workInProgressSuspendedReason){
            case SuspendedOnError:
                null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentErrored && injectedProfilingHooks.markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                break;
            case SuspendedOnData:
            case SuspendedOnImmediate:
            case SuspendedOnDeprecatedThrowPromise:
            case SuspendedAndReadyToContinue:
                null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markComponentSuspended && injectedProfilingHooks.markComponentSuspended(erroredWork, thrownValue, workInProgressRootRenderLanes);
        }
    }
    function pushDispatcher() {
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
    }
    function pushAsyncDispatcher() {
        var prevAsyncDispatcher = ReactSharedInternals.A;
        ReactSharedInternals.A = DefaultAsyncDispatcher;
        return prevAsyncDispatcher;
    }
    function renderDidSuspendDelayIfPossible() {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
        workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194176) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = !0);
        0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane, !1);
    }
    function renderRootSync(root, lanes, shouldYieldForPrerendering) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                0 < memoizedUpdaters.size && (restorePendingUpdaters(root, workInProgressRootRenderLanes), memoizedUpdaters.clear());
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = null;
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        lanes = !1;
        memoizedUpdaters = workInProgressRootExitStatus;
        a: do try {
            if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress) {
                var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
                switch(workInProgressSuspendedReason){
                    case SuspendedOnHydration:
                        resetWorkInProgressStack();
                        memoizedUpdaters = RootDidNotComplete;
                        break a;
                    case SuspendedOnImmediate:
                    case SuspendedOnData:
                    case SuspendedOnDeprecatedThrowPromise:
                        null === suspenseHandlerStackCursor.current && (lanes = !0);
                        var reason = workInProgressSuspendedReason;
                        workInProgressSuspendedReason = NotSuspended;
                        workInProgressThrownValue = null;
                        throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
                        if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                            memoizedUpdaters = RootInProgress;
                            break a;
                        }
                        break;
                    default:
                        reason = workInProgressSuspendedReason, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
                }
            }
            workLoopSync();
            memoizedUpdaters = workInProgressRootExitStatus;
            break;
        } catch (thrownValue$8) {
            handleThrow(root, thrownValue$8);
        }
        while (1);
        lanes && root.shellSuspendCounter++;
        resetContextDependencies();
        executionContext = prevExecutionContext;
        ReactSharedInternals.H = prevDispatcher;
        ReactSharedInternals.A = prevAsyncDispatcher;
        markRenderStopped();
        null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
        return memoizedUpdaters;
    }
    function workLoopSync() {
        for(; null !== workInProgress;)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                0 < memoizedUpdaters.size && (restorePendingUpdaters(root, workInProgressRootRenderLanes), memoizedUpdaters.clear());
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = null;
            workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
            prepareFreshStack(root, lanes);
        } else workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
        markRenderStarted(lanes);
        a: do try {
            if (workInProgressSuspendedReason !== NotSuspended && null !== workInProgress) b: switch(lanes = workInProgress, memoizedUpdaters = workInProgressThrownValue, workInProgressSuspendedReason){
                case SuspendedOnError:
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, memoizedUpdaters, SuspendedOnError);
                    break;
                case SuspendedOnData:
                    if (isThenableResolved(memoizedUpdaters)) {
                        workInProgressSuspendedReason = NotSuspended;
                        workInProgressThrownValue = null;
                        replaySuspendedUnitOfWork(lanes);
                        break;
                    }
                    lanes = function() {
                        workInProgressSuspendedReason === SuspendedOnData && workInProgressRoot === root && (workInProgressSuspendedReason = SuspendedAndReadyToContinue);
                        ensureRootIsScheduled(root);
                    };
                    memoizedUpdaters.then(lanes, lanes);
                    break a;
                case SuspendedOnImmediate:
                    workInProgressSuspendedReason = SuspendedAndReadyToContinue;
                    break a;
                case SuspendedOnInstance:
                    workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;
                    break a;
                case SuspendedAndReadyToContinue:
                    isThenableResolved(memoizedUpdaters) ? (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root, lanes, memoizedUpdaters, SuspendedAndReadyToContinue));
                    break;
                case SuspendedOnInstanceAndReadyToContinue:
                    var resource = null;
                    switch(workInProgress.tag){
                        case 26:
                            resource = workInProgress.memoizedState;
                        case 5:
                        case 27:
                            var hostFiber = workInProgress;
                            if (resource ? preloadResource(resource) : 1) {
                                workInProgressSuspendedReason = NotSuspended;
                                workInProgressThrownValue = null;
                                var sibling = hostFiber.sibling;
                                if (null !== sibling) workInProgress = sibling;
                                else {
                                    var returnFiber = hostFiber.return;
                                    null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                                }
                                break b;
                            }
                            break;
                        default:
                            console.error("Unexpected type of fiber triggered a suspensey commit. This is a bug in React.");
                    }
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, memoizedUpdaters, SuspendedOnInstanceAndReadyToContinue);
                    break;
                case SuspendedOnDeprecatedThrowPromise:
                    workInProgressSuspendedReason = NotSuspended;
                    workInProgressThrownValue = null;
                    throwAndUnwindWorkLoop(root, lanes, memoizedUpdaters, SuspendedOnDeprecatedThrowPromise);
                    break;
                case SuspendedOnHydration:
                    resetWorkInProgressStack();
                    workInProgressRootExitStatus = RootDidNotComplete;
                    break a;
                default:
                    throw Error("Unexpected SuspendedReason. This is a bug in React.");
            }
            null !== ReactSharedInternals.actQueue ? workLoopSync() : workLoopConcurrent();
            break;
        } catch (thrownValue$9) {
            handleThrow(root, thrownValue$9);
        }
        while (1);
        resetContextDependencies();
        ReactSharedInternals.H = prevDispatcher;
        ReactSharedInternals.A = prevAsyncDispatcher;
        executionContext = prevExecutionContext;
        if (null !== workInProgress) return null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderYielded && injectedProfilingHooks.markRenderYielded(), RootInProgress;
        markRenderStopped();
        workInProgressRoot = null;
        workInProgressRootRenderLanes = 0;
        finishQueueingConcurrentUpdates();
        return workInProgressRootExitStatus;
    }
    function workLoopConcurrent() {
        for(; null !== workInProgress && !shouldYield();)performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        var current = unitOfWork.alternate;
        (unitOfWork.mode & ProfileMode) !== NoMode ? (startProfilerTimer(unitOfWork), current = runWithFiberInDEV(unitOfWork, beginWork, current, unitOfWork, entangledRenderLanes), stopProfilerTimerIfRunningAndRecordDuration(unitOfWork)) : current = runWithFiberInDEV(unitOfWork, beginWork, current, unitOfWork, entangledRenderLanes);
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        null === current ? completeUnitOfWork(unitOfWork) : workInProgress = current;
    }
    function replaySuspendedUnitOfWork(unitOfWork) {
        var next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
    }
    function replayBeginWork(unitOfWork) {
        var current = unitOfWork.alternate, isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;
        isProfilingMode && startProfilerTimer(unitOfWork);
        switch(unitOfWork.tag){
            case 15:
            case 0:
                current = replayFunctionComponent(current, unitOfWork, unitOfWork.pendingProps, unitOfWork.type, void 0, workInProgressRootRenderLanes);
                break;
            case 11:
                current = replayFunctionComponent(current, unitOfWork, unitOfWork.pendingProps, unitOfWork.type.render, unitOfWork.ref, workInProgressRootRenderLanes);
                break;
            case 5:
                resetHooksOnUnwind(unitOfWork);
            default:
                unwindInterruptedWork(current, unitOfWork), unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, entangledRenderLanes), current = beginWork(current, unitOfWork, entangledRenderLanes);
        }
        isProfilingMode && stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);
        return current;
    }
    function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, suspendedReason) {
        resetContextDependencies();
        resetHooksOnUnwind(unitOfWork);
        thenableState$1 = null;
        thenableIndexCounter$1 = 0;
        var returnFiber = unitOfWork.return;
        try {
            if (throwException(root, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes)) {
                workInProgressRootExitStatus = RootFatalErrored;
                logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
                workInProgress = null;
                return;
            }
        } catch (error) {
            if (null !== returnFiber) throw workInProgress = returnFiber, error;
            workInProgressRootExitStatus = RootFatalErrored;
            logUncaughtError(root, createCapturedValueAtFiber(thrownValue, root.current));
            workInProgress = null;
            return;
        }
        if (unitOfWork.flags & 32768) {
            if (isHydrating || suspendedReason === SuspendedOnError) root = !0;
            else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912)) root = !1;
            else if (workInProgressRootDidSkipSuspendedSiblings = root = !0, suspendedReason === SuspendedOnData || suspendedReason === SuspendedOnImmediate || suspendedReason === SuspendedOnDeprecatedThrowPromise) suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
            unwindUnitOfWork(unitOfWork, root);
        } else completeUnitOfWork(unitOfWork);
    }
    function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
            if (0 !== (completedWork.flags & 32768)) {
                unwindUnitOfWork(completedWork, workInProgressRootDidSkipSuspendedSiblings);
                return;
            }
            var current = completedWork.alternate;
            unitOfWork = completedWork.return;
            startProfilerTimer(completedWork);
            current = runWithFiberInDEV(completedWork, completeWork, current, completedWork, entangledRenderLanes);
            (completedWork.mode & ProfileMode) !== NoMode && stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);
            if (null !== current) {
                workInProgress = current;
                return;
            }
            completedWork = completedWork.sibling;
            if (null !== completedWork) {
                workInProgress = completedWork;
                return;
            }
            workInProgress = completedWork = unitOfWork;
        }while (null !== completedWork);
        workInProgressRootExitStatus === RootInProgress && (workInProgressRootExitStatus = RootCompleted);
    }
    function unwindUnitOfWork(unitOfWork, skipSiblings) {
        do {
            var next = unwindWork(unitOfWork.alternate, unitOfWork);
            if (null !== next) {
                next.flags &= 32767;
                workInProgress = next;
                return;
            }
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordIncompleteDuration(unitOfWork);
                next = unitOfWork.actualDuration;
                for(var child = unitOfWork.child; null !== child;)next += child.actualDuration, child = child.sibling;
                unitOfWork.actualDuration = next;
            }
            next = unitOfWork.return;
            null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
            if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
                workInProgress = unitOfWork;
                return;
            }
            workInProgress = unitOfWork = next;
        }while (null !== unitOfWork);
        workInProgressRootExitStatus = RootDidNotComplete;
        workInProgress = null;
    }
    function commitRoot(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
        var prevTransition = ReactSharedInternals.T, previousUpdateLanePriority = ReactDOMSharedInternals.p;
        try {
            ReactDOMSharedInternals.p = DiscreteEventPriority, ReactSharedInternals.T = null, commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, previousUpdateLanePriority, spawnedLane, updatedLanes, suspendedRetryLanes, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime);
        } finally{
            ReactSharedInternals.T = prevTransition, ReactDOMSharedInternals.p = previousUpdateLanePriority;
        }
    }
    function commitRootImpl(root, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, renderPriorityLevel, spawnedLane, updatedLanes, suspendedRetryLanes) {
        do flushPassiveEffects();
        while (null !== rootWithPendingPassiveEffects);
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("Should not already be working.");
        var finishedWork = root.finishedWork;
        didIncludeRenderPhaseUpdate = root.finishedLanes;
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markCommitStarted && injectedProfilingHooks.markCommitStarted(didIncludeRenderPhaseUpdate);
        if (null === finishedWork) return markCommitStopped(), null;
        0 === didIncludeRenderPhaseUpdate && console.error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
        root.finishedWork = null;
        root.finishedLanes = 0;
        if (finishedWork === root.current) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        root.callbackNode = null;
        root.callbackPriority = 0;
        root.cancelPendingCommit = null;
        var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
        remainingLanes |= concurrentlyUpdatedLanes;
        markRootFinished(root, didIncludeRenderPhaseUpdate, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes);
        root === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
        0 === (finishedWork.subtreeFlags & 10256) && 0 === (finishedWork.flags & 10256) || rootDoesHavePassiveEffects || (rootDoesHavePassiveEffects = !0, pendingPassiveEffectsRemainingLanes = remainingLanes, pendingPassiveTransitions = transitions, scheduleCallback$1(NormalPriority$1, function() {
            flushPassiveEffects(!0);
            return null;
        }));
        commitStartTime = now();
        transitions = 0 !== (finishedWork.flags & 15990);
        0 !== (finishedWork.subtreeFlags & 15990) || transitions ? (transitions = ReactSharedInternals.T, ReactSharedInternals.T = null, spawnedLane = ReactDOMSharedInternals.p, ReactDOMSharedInternals.p = DiscreteEventPriority, updatedLanes = executionContext, executionContext |= CommitContext, commitBeforeMutationEffects(root, finishedWork), commitMutationEffects(root, finishedWork, didIncludeRenderPhaseUpdate), restoreSelection(selectionInformation, root.containerInfo), _enabled = !!eventsEnabled, selectionInformation = eventsEnabled = null, root.current = finishedWork, null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStarted && injectedProfilingHooks.markLayoutEffectsStarted(didIncludeRenderPhaseUpdate), commitLayoutEffects(finishedWork, root, didIncludeRenderPhaseUpdate), null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markLayoutEffectsStopped && injectedProfilingHooks.markLayoutEffectsStopped(), requestPaint(), executionContext = updatedLanes, ReactDOMSharedInternals.p = spawnedLane, ReactSharedInternals.T = transitions) : root.current = finishedWork;
        (transitions = rootDoesHavePassiveEffects) ? (rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = root, pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate) : (releaseRootPooledCache(root, remainingLanes), nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null);
        remainingLanes = root.pendingLanes;
        0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
        transitions || commitDoubleInvokeEffectsInDEV(root);
        onCommitRoot$1(finishedWork.stateNode, renderPriorityLevel);
        isDevToolsPresent && root.memoizedUpdaters.clear();
        onCommitRoot();
        ensureRootIsScheduled(root);
        if (null !== recoverableErrors) for(renderPriorityLevel = root.onRecoverableError, finishedWork = 0; finishedWork < recoverableErrors.length; finishedWork++)remainingLanes = recoverableErrors[finishedWork], transitions = makeErrorInfo(remainingLanes.stack), runWithFiberInDEV(remainingLanes.source, renderPriorityLevel, remainingLanes.value, transitions);
        0 !== (pendingPassiveEffectsLanes & 3) && flushPassiveEffects();
        remainingLanes = root.pendingLanes;
        0 !== (didIncludeRenderPhaseUpdate & 4194218) && 0 !== (remainingLanes & 42) ? (nestedUpdateScheduled = !0, root === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root)) : nestedUpdateCount = 0;
        flushSyncWorkAcrossRoots_impl(0, !1);
        markCommitStopped();
        return null;
    }
    function makeErrorInfo(componentStack) {
        componentStack = {
            componentStack: componentStack
        };
        Object.defineProperty(componentStack, "digest", {
            get: function() {
                console.error('You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.');
            }
        });
        return componentStack;
    }
    function releaseRootPooledCache(root, remainingLanes) {
        0 === (root.pooledCacheLanes &= remainingLanes) && (remainingLanes = root.pooledCache, null != remainingLanes && (root.pooledCache = null, releaseCache(remainingLanes)));
    }
    function flushPassiveEffects() {
        if (null !== rootWithPendingPassiveEffects) {
            var root = rootWithPendingPassiveEffects, remainingLanes = pendingPassiveEffectsRemainingLanes;
            pendingPassiveEffectsRemainingLanes = 0;
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes), priority = 0 === DefaultEventPriority || DefaultEventPriority > renderPriority ? DefaultEventPriority : renderPriority;
            renderPriority = ReactSharedInternals.T;
            var previousPriority = ReactDOMSharedInternals.p;
            try {
                ReactDOMSharedInternals.p = priority;
                ReactSharedInternals.T = null;
                if (null === rootWithPendingPassiveEffects) var JSCompiler_inline_result = !1;
                else {
                    priority = pendingPassiveTransitions;
                    pendingPassiveTransitions = null;
                    var root$jscomp$0 = rootWithPendingPassiveEffects, lanes = pendingPassiveEffectsLanes;
                    rootWithPendingPassiveEffects = null;
                    pendingPassiveEffectsLanes = 0;
                    if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw Error("Cannot flush passive effects while already rendering.");
                    isFlushingPassiveEffects = !0;
                    didScheduleUpdateDuringPassiveEffects = !1;
                    null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStarted && injectedProfilingHooks.markPassiveEffectsStarted(lanes);
                    var prevExecutionContext = executionContext;
                    executionContext |= CommitContext;
                    commitPassiveUnmountOnFiber(root$jscomp$0.current);
                    commitPassiveMountOnFiber(root$jscomp$0, root$jscomp$0.current, lanes, priority);
                    null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markPassiveEffectsStopped && injectedProfilingHooks.markPassiveEffectsStopped();
                    commitDoubleInvokeEffectsInDEV(root$jscomp$0);
                    executionContext = prevExecutionContext;
                    flushSyncWorkAcrossRoots_impl(0, !1);
                    didScheduleUpdateDuringPassiveEffects ? root$jscomp$0 === rootWithPassiveNestedUpdates ? nestedPassiveUpdateCount++ : (nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = root$jscomp$0) : nestedPassiveUpdateCount = 0;
                    didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects = !1;
                    if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot) try {
                        injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
                    } catch (err) {
                        hasLoggedError || (hasLoggedError = !0, console.error("React instrumentation encountered an error: %s", err));
                    }
                    var stateNode = root$jscomp$0.current.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                    JSCompiler_inline_result = !0;
                }
                return JSCompiler_inline_result;
            } finally{
                ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = renderPriority, releaseRootPooledCache(root, remainingLanes);
            }
        }
        return !1;
    }
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
        sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
        rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
        null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
        isRunningInsertionEffect = !1;
        if (3 === sourceFiber.tag) captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
        else {
            for(; null !== nearestMountedAncestor;){
                if (3 === nearestMountedAncestor.tag) {
                    captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
                    return;
                }
                if (1 === nearestMountedAncestor.tag) {
                    var instance = nearestMountedAncestor.stateNode;
                    if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                        sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
                        error = createClassErrorUpdate(2);
                        instance = enqueueUpdate(nearestMountedAncestor, error, 2);
                        null !== instance && (initializeClassErrorUpdate(error, instance, nearestMountedAncestor, sourceFiber), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
                        return;
                    }
                }
                nearestMountedAncestor = nearestMountedAncestor.return;
            }
            console.error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error);
        }
    }
    function attachPingListener(root, wakeable, lanes) {
        var pingCache = root.pingCache;
        if (null === pingCache) {
            pingCache = root.pingCache = new PossiblyWeakMap();
            var threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = new Set(), pingCache.set(wakeable, threadIDs));
        threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = !0, threadIDs.add(lanes), pingCache = pingSuspendedRoot.bind(null, root, wakeable, lanes), isDevToolsPresent && restorePendingUpdaters(root, lanes), wakeable.then(pingCache, pingCache));
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;
        null !== pingCache && pingCache.delete(wakeable);
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
        root.warmLanes &= ~pingedLanes;
        isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && console.error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act");
        workInProgressRoot === root && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS ? (executionContext & RenderContext) === NoContext && prepareFreshStack(root, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
        ensureRootIsScheduled(root);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        0 === retryLane && (retryLane = claimNextRetryLane());
        boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = 0;
        switch(boundaryFiber.tag){
            case 13:
                var retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                null !== suspenseState && (retryLane = suspenseState.retryLane);
                break;
            case 19:
                retryCache = boundaryFiber.stateNode;
                break;
            case 22:
                retryCache = boundaryFiber.stateNode._retryCache;
                break;
            default:
                throw Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        null !== retryCache && retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function recursivelyTraverseAndDoubleInvokeEffectsInDEV(root$jscomp$0, parentFiber, isInStrictMode) {
        if (0 !== (parentFiber.subtreeFlags & 33562624)) for(parentFiber = parentFiber.child; null !== parentFiber;){
            var root = root$jscomp$0, fiber = parentFiber, isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;
            isStrictModeFiber = isInStrictMode || isStrictModeFiber;
            22 !== fiber.tag ? fiber.flags & 33554432 ? isStrictModeFiber && runWithFiberInDEV(fiber, doubleInvokeEffectsOnFiber, root, fiber, (fiber.mode & NoStrictPassiveEffectsMode) === NoMode) : recursivelyTraverseAndDoubleInvokeEffectsInDEV(root, fiber, isStrictModeFiber) : null === fiber.memoizedState && (isStrictModeFiber && fiber.flags & 8192 ? runWithFiberInDEV(fiber, doubleInvokeEffectsOnFiber, root, fiber) : fiber.subtreeFlags & 33554432 && runWithFiberInDEV(fiber, recursivelyTraverseAndDoubleInvokeEffectsInDEV, root, fiber, isStrictModeFiber));
            parentFiber = parentFiber.sibling;
        }
    }
    function doubleInvokeEffectsOnFiber(root, fiber) {
        var shouldDoubleInvokePassiveEffects = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : !0;
        setIsStrictModeForDevtools(!0);
        try {
            disappearLayoutEffects(fiber), shouldDoubleInvokePassiveEffects && disconnectPassiveEffect(fiber), reappearLayoutEffects(root, fiber.alternate, fiber, !1), shouldDoubleInvokePassiveEffects && reconnectPassiveEffects(root, fiber, 0, null, !1);
        } finally{
            setIsStrictModeForDevtools(!1);
        }
    }
    function commitDoubleInvokeEffectsInDEV(root) {
        var doubleInvokeEffects = !0;
        root.current.mode & (StrictLegacyMode | StrictEffectsMode) || (doubleInvokeEffects = !1);
        recursivelyTraverseAndDoubleInvokeEffectsInDEV(root, root.current, doubleInvokeEffects);
    }
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) === NoContext) {
            var tag = fiber.tag;
            if (3 === tag || 1 === tag || 0 === tag || 11 === tag || 14 === tag || 15 === tag) {
                tag = getComponentNameFromFiber(fiber) || "ReactComponent";
                if (null !== didWarnStateUpdateForNotYetMountedComponent) {
                    if (didWarnStateUpdateForNotYetMountedComponent.has(tag)) return;
                    didWarnStateUpdateForNotYetMountedComponent.add(tag);
                } else didWarnStateUpdateForNotYetMountedComponent = new Set([
                    tag
                ]);
                runWithFiberInDEV(fiber, function() {
                    console.error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
                });
            }
        }
    }
    function restorePendingUpdaters(root, lanes) {
        isDevToolsPresent && root.memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root, schedulingFiber, lanes);
        });
    }
    function scheduleCallback$1(priorityLevel, callback) {
        var actQueue = ReactSharedInternals.actQueue;
        return null !== actQueue ? (actQueue.push(callback), fakeActCallbackNode$1) : scheduleCallback$3(priorityLevel, callback);
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        isConcurrentActEnvironment() && null === ReactSharedInternals.actQueue && runWithFiberInDEV(fiber, function() {
            console.error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
        });
    }
    function ensureRootIsScheduled(root) {
        root !== lastScheduledRoot && null === root.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root : lastScheduledRoot = lastScheduledRoot.next = root);
        mightHavePendingSyncWork = !0;
        null !== ReactSharedInternals.actQueue ? didScheduleMicrotask_act || (didScheduleMicrotask_act = !0, scheduleImmediateTask(processRootScheduleInMicrotask)) : didScheduleMicrotask || (didScheduleMicrotask = !0, scheduleImmediateTask(processRootScheduleInMicrotask));
    }
    function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
        if (!isFlushingWork && mightHavePendingSyncWork) {
            isFlushingWork = !0;
            do {
                var didPerformSomeWork = !1;
                for(var root = firstScheduledRoot; null !== root;){
                    if (!onlyLegacy) {
                        if (0 !== syncTransitionLanes) {
                            var pendingLanes = root.pendingLanes;
                            if (0 === pendingLanes) var nextLanes = 0;
                            else {
                                var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes;
                                nextLanes = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                                nextLanes &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                                nextLanes = nextLanes & 201326677 ? nextLanes & 201326677 | 1 : nextLanes ? nextLanes | 2 : 0;
                            }
                            0 !== nextLanes && (didPerformSomeWork = !0, performSyncWorkOnRoot(root, nextLanes));
                        } else nextLanes = workInProgressRootRenderLanes, nextLanes = getNextLanes(root, root === workInProgressRoot ? nextLanes : 0), 0 === (nextLanes & 3) || checkIfRootIsPrerendering(root, nextLanes) || (didPerformSomeWork = !0, performSyncWorkOnRoot(root, nextLanes));
                    }
                    root = root.next;
                }
            }while (didPerformSomeWork);
            isFlushingWork = !1;
        }
    }
    function processRootScheduleInMicrotask() {
        mightHavePendingSyncWork = didScheduleMicrotask_act = didScheduleMicrotask = !1;
        var syncTransitionLanes = 0;
        0 !== currentEventTransitionLane && (shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane), currentEventTransitionLane = 0);
        for(var currentTime = now$1(), prev = null, root = firstScheduledRoot; null !== root;){
            var next = root.next, nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
            if (0 === nextLanes) root.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev);
            else if (prev = root, 0 !== syncTransitionLanes || 0 !== (nextLanes & 3)) mightHavePendingSyncWork = !0;
            root = next;
        }
        flushSyncWorkAcrossRoots_impl(syncTransitionLanes, !1);
    }
    function scheduleTaskForRootDuringMicrotask(root, currentTime) {
        for(var suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes, expirationTimes = root.expirationTimes, lanes = root.pendingLanes & -62914561; 0 < lanes;){
            var index = 31 - clz32(lanes), lane = 1 << index, expirationTime = expirationTimes[index];
            if (-1 === expirationTime) {
                if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes)) expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else expirationTime <= currentTime && (root.expiredLanes |= lane);
            lanes &= ~lane;
        }
        currentTime = workInProgressRoot;
        suspendedLanes = workInProgressRootRenderLanes;
        suspendedLanes = getNextLanes(root, root === currentTime ? suspendedLanes : 0);
        pingedLanes = root.callbackNode;
        if (0 === suspendedLanes || root === currentTime && workInProgressSuspendedReason === SuspendedOnData || null !== root.cancelPendingCommit) return null !== pingedLanes && cancelCallback(pingedLanes), root.callbackNode = null, root.callbackPriority = 0;
        if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root, suspendedLanes)) {
            currentTime = suspendedLanes & -suspendedLanes;
            if (currentTime !== root.callbackPriority || null !== ReactSharedInternals.actQueue && pingedLanes !== fakeActCallbackNode) cancelCallback(pingedLanes);
            else return currentTime;
            switch(lanesToEventPriority(suspendedLanes)){
                case DiscreteEventPriority:
                case ContinuousEventPriority:
                    suspendedLanes = UserBlockingPriority;
                    break;
                case DefaultEventPriority:
                    suspendedLanes = NormalPriority$1;
                    break;
                case IdleEventPriority:
                    suspendedLanes = IdlePriority;
                    break;
                default:
                    suspendedLanes = NormalPriority$1;
            }
            pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
            null !== ReactSharedInternals.actQueue ? (ReactSharedInternals.actQueue.push(pingedLanes), suspendedLanes = fakeActCallbackNode) : suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
            root.callbackPriority = currentTime;
            root.callbackNode = suspendedLanes;
            return currentTime;
        }
        null !== pingedLanes && cancelCallback(pingedLanes);
        root.callbackPriority = 2;
        root.callbackNode = null;
        return 2;
    }
    function performWorkOnRootViaSchedulerTask(root, didTimeout) {
        nestedUpdateScheduled = currentUpdateIsNested = !1;
        var originalCallbackNode = root.callbackNode;
        if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode) return null;
        var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
        workInProgressRootRenderLanes$jscomp$0 = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0);
        if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
        performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);
        scheduleTaskForRootDuringMicrotask(root, now$1());
        return null != root.callbackNode && root.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root) : null;
    }
    function performSyncWorkOnRoot(root, lanes) {
        if (flushPassiveEffects()) return null;
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = !1;
        performWorkOnRoot(root, lanes, !0);
    }
    function cancelCallback(callbackNode) {
        callbackNode !== fakeActCallbackNode && null !== callbackNode && cancelCallback$1(callbackNode);
    }
    function scheduleImmediateTask(cb) {
        null !== ReactSharedInternals.actQueue && ReactSharedInternals.actQueue.push(function() {
            cb();
            return null;
        });
        scheduleMicrotask(function() {
            (executionContext & (RenderContext | CommitContext)) !== NoContext ? scheduleCallback$3(ImmediatePriority, cb) : cb();
        });
    }
    function requestTransitionLane() {
        0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
        return currentEventTransitionLane;
    }
    function coerceFormActionProp(actionProp) {
        if (null == actionProp || "symbol" === typeof actionProp || "boolean" === typeof actionProp) return null;
        if ("function" === typeof actionProp) return actionProp;
        checkAttributeStringCoercion(actionProp, "action");
        return sanitizeURL("" + actionProp);
    }
    function createFormDataWithSubmitter(form, submitter) {
        var temp = submitter.ownerDocument.createElement("input");
        temp.name = submitter.name;
        temp.value = submitter.value;
        form.id && temp.setAttribute("form", form.id);
        submitter.parentNode.insertBefore(temp, submitter);
        form = new FormData(form);
        temp.parentNode.removeChild(temp);
        return form;
    }
    function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
        if ("submit" === domEventName && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
            var action = coerceFormActionProp((nativeEventTarget[internalPropsKey] || null).action), submitter = nativeEvent.submitter;
            submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), null !== domEventName && (action = domEventName, submitter = null));
            var event = new SyntheticEvent("action", "action", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: [
                    {
                        instance: null,
                        listener: function() {
                            if (nativeEvent.defaultPrevented) {
                                if (0 !== currentEventTransitionLane) {
                                    var formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget), pendingState = {
                                        pending: !0,
                                        data: formData,
                                        method: nativeEventTarget.method,
                                        action: action
                                    };
                                    Object.freeze(pendingState);
                                    startHostTransition(maybeTargetInst, pendingState, null, formData);
                                }
                            } else "function" === typeof action && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget), pendingState = {
                                pending: !0,
                                data: formData,
                                method: nativeEventTarget.method,
                                action: action
                            }, Object.freeze(pendingState), startHostTransition(maybeTargetInst, pendingState, action, formData));
                        },
                        currentTarget: nativeEventTarget
                    }
                ]
            });
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        eventSystemFlags = 0 !== (eventSystemFlags & 4);
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i];
            a: {
                var previousInstance = void 0, event = _dispatchQueue$i.event;
                _dispatchQueue$i = _dispatchQueue$i.listeners;
                if (eventSystemFlags) for(var i$jscomp$0 = _dispatchQueue$i.length - 1; 0 <= i$jscomp$0; i$jscomp$0--){
                    var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
                    _dispatchListeners$i = _dispatchListeners$i.listener;
                    if (instance !== previousInstance && event.isPropagationStopped()) break a;
                    previousInstance = event;
                    previousInstance.currentTarget = currentTarget;
                    try {
                        _dispatchListeners$i(previousInstance);
                    } catch (error) {
                        reportGlobalError(error);
                    }
                    previousInstance.currentTarget = null;
                    previousInstance = instance;
                }
                else for(i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++){
                    _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
                    instance = _dispatchListeners$i.instance;
                    currentTarget = _dispatchListeners$i.currentTarget;
                    _dispatchListeners$i = _dispatchListeners$i.listener;
                    if (instance !== previousInstance && event.isPropagationStopped()) break a;
                    previousInstance = event;
                    previousInstance.currentTarget = currentTarget;
                    try {
                        _dispatchListeners$i(previousInstance);
                    } catch (error) {
                        reportGlobalError(error);
                    }
                    previousInstance.currentTarget = null;
                    previousInstance = instance;
                }
            }
        }
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        nonDelegatedEvents.has(domEventName) || console.error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var listenerSet = targetElement[internalEventHandlersKey];
        void 0 === listenerSet && (listenerSet = targetElement[internalEventHandlersKey] = new Set());
        var listenerSetKey = domEventName + "__bubble";
        listenerSet.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, !1), listenerSet.add(listenerSetKey));
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener && console.error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        isCapturePhaseListener && (eventSystemFlags |= 4);
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    }
    function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = !0;
            allNativeEvents.forEach(function(domEventName) {
                "selectionchange" !== domEventName && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, !1, rootContainerElement), listenToNativeEvent(domEventName, !0, rootContainerElement));
            });
            var ownerDocument = 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
            null === ownerDocument || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = !0, listenToNativeEvent("selectionchange", !1, ownerDocument));
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
        switch(getEventPriority(domEventName)){
            case DiscreteEventPriority:
                var listenerWrapper = dispatchDiscreteEvent;
                break;
            case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
            default:
                listenerWrapper = dispatchEvent;
        }
        eventSystemFlags = listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        listenerWrapper = void 0;
        !passiveBrowserEventsSupported || "touchstart" !== domEventName && "touchmove" !== domEventName && "wheel" !== domEventName || (listenerWrapper = !0);
        isCapturePhaseListener ? void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
            capture: !0,
            passive: listenerWrapper
        }) : targetContainer.addEventListener(domEventName, eventSystemFlags, !0) : void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
            passive: listenerWrapper
        }) : targetContainer.addEventListener(domEventName, eventSystemFlags, !1);
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
        var ancestorInst = targetInst$jscomp$0;
        if (0 === (eventSystemFlags & 1) && 0 === (eventSystemFlags & 2) && null !== targetInst$jscomp$0) a: for(;;){
            if (null === targetInst$jscomp$0) return;
            var nodeTag = targetInst$jscomp$0.tag;
            if (3 === nodeTag || 4 === nodeTag) {
                var container = targetInst$jscomp$0.stateNode.containerInfo;
                if (container === targetContainer || 8 === container.nodeType && container.parentNode === targetContainer) break;
                if (4 === nodeTag) for(nodeTag = targetInst$jscomp$0.return; null !== nodeTag;){
                    var grandTag = nodeTag.tag;
                    if (3 === grandTag || 4 === grandTag) {
                        if (grandTag = nodeTag.stateNode.containerInfo, grandTag === targetContainer || 8 === grandTag.nodeType && grandTag.parentNode === targetContainer) return;
                    }
                    nodeTag = nodeTag.return;
                }
                for(; null !== container;){
                    nodeTag = getClosestInstanceFromNode(container);
                    if (null === nodeTag) return;
                    grandTag = nodeTag.tag;
                    if (5 === grandTag || 6 === grandTag || 26 === grandTag || 27 === grandTag) {
                        targetInst$jscomp$0 = ancestorInst = nodeTag;
                        continue a;
                    }
                    container = container.parentNode;
                }
            }
            targetInst$jscomp$0 = targetInst$jscomp$0.return;
        }
        batchedUpdates$1(function() {
            var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
            a: {
                var reactName = topLevelEventsToReactNames.get(domEventName);
                if (void 0 !== reactName) {
                    var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
                    switch(domEventName){
                        case "keypress":
                            if (0 === getEventCharCode(nativeEvent)) break a;
                        case "keydown":
                        case "keyup":
                            SyntheticEventCtor = SyntheticKeyboardEvent;
                            break;
                        case "focusin":
                            reactEventType = "focus";
                            SyntheticEventCtor = SyntheticFocusEvent;
                            break;
                        case "focusout":
                            reactEventType = "blur";
                            SyntheticEventCtor = SyntheticFocusEvent;
                            break;
                        case "beforeblur":
                        case "afterblur":
                            SyntheticEventCtor = SyntheticFocusEvent;
                            break;
                        case "click":
                            if (2 === nativeEvent.button) break a;
                        case "auxclick":
                        case "dblclick":
                        case "mousedown":
                        case "mousemove":
                        case "mouseup":
                        case "mouseout":
                        case "mouseover":
                        case "contextmenu":
                            SyntheticEventCtor = SyntheticMouseEvent;
                            break;
                        case "drag":
                        case "dragend":
                        case "dragenter":
                        case "dragexit":
                        case "dragleave":
                        case "dragover":
                        case "dragstart":
                        case "drop":
                            SyntheticEventCtor = SyntheticDragEvent;
                            break;
                        case "touchcancel":
                        case "touchend":
                        case "touchmove":
                        case "touchstart":
                            SyntheticEventCtor = SyntheticTouchEvent;
                            break;
                        case ANIMATION_END:
                        case ANIMATION_ITERATION:
                        case ANIMATION_START:
                            SyntheticEventCtor = SyntheticAnimationEvent;
                            break;
                        case TRANSITION_END:
                            SyntheticEventCtor = SyntheticTransitionEvent;
                            break;
                        case "scroll":
                        case "scrollend":
                            SyntheticEventCtor = SyntheticUIEvent;
                            break;
                        case "wheel":
                            SyntheticEventCtor = SyntheticWheelEvent;
                            break;
                        case "copy":
                        case "cut":
                        case "paste":
                            SyntheticEventCtor = SyntheticClipboardEvent;
                            break;
                        case "gotpointercapture":
                        case "lostpointercapture":
                        case "pointercancel":
                        case "pointerdown":
                        case "pointermove":
                        case "pointerout":
                        case "pointerover":
                        case "pointerup":
                            SyntheticEventCtor = SyntheticPointerEvent;
                            break;
                        case "toggle":
                        case "beforetoggle":
                            SyntheticEventCtor = SyntheticToggleEvent;
                    }
                    var inCapturePhase = 0 !== (eventSystemFlags & 4), accumulateTargetOnly = !inCapturePhase && ("scroll" === domEventName || "scrollend" === domEventName), reactEventName = inCapturePhase ? null !== reactName ? reactName + "Capture" : null : reactName;
                    inCapturePhase = [];
                    for(var instance = targetInst, lastHostComponent; null !== instance;){
                        var _instance2 = instance;
                        lastHostComponent = _instance2.stateNode;
                        _instance2 = _instance2.tag;
                        5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2 || null === lastHostComponent || null === reactEventName || (_instance2 = getListener(instance, reactEventName), null != _instance2 && inCapturePhase.push(createDispatchListener(instance, _instance2, lastHostComponent)));
                        if (accumulateTargetOnly) break;
                        instance = instance.return;
                    }
                    0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget), dispatchQueue.push({
                        event: reactName,
                        listeners: inCapturePhase
                    }));
                }
            }
            if (0 === (eventSystemFlags & 7)) {
                a: {
                    reactName = "mouseover" === domEventName || "pointerover" === domEventName;
                    SyntheticEventCtor = "mouseout" === domEventName || "pointerout" === domEventName;
                    if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey])) break a;
                    if (SyntheticEventCtor || reactName) {
                        reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
                        if (SyntheticEventCtor) {
                            if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, null !== reactEventType && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || 5 !== inCapturePhase && 27 !== inCapturePhase && 6 !== inCapturePhase)) reactEventType = null;
                        } else SyntheticEventCtor = null, reactEventType = targetInst;
                        if (SyntheticEventCtor !== reactEventType) {
                            inCapturePhase = SyntheticMouseEvent;
                            _instance2 = "onMouseLeave";
                            reactEventName = "onMouseEnter";
                            instance = "mouse";
                            if ("pointerout" === domEventName || "pointerover" === domEventName) inCapturePhase = SyntheticPointerEvent, _instance2 = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
                            accumulateTargetOnly = null == SyntheticEventCtor ? reactName : getNodeFromInstance(SyntheticEventCtor);
                            lastHostComponent = null == reactEventType ? reactName : getNodeFromInstance(reactEventType);
                            reactName = new inCapturePhase(_instance2, instance + "leave", SyntheticEventCtor, nativeEvent, nativeEventTarget);
                            reactName.target = accumulateTargetOnly;
                            reactName.relatedTarget = lastHostComponent;
                            _instance2 = null;
                            getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(reactEventName, instance + "enter", reactEventType, nativeEvent, nativeEventTarget), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance2 = inCapturePhase);
                            accumulateTargetOnly = _instance2;
                            if (SyntheticEventCtor && reactEventType) b: {
                                inCapturePhase = SyntheticEventCtor;
                                reactEventName = reactEventType;
                                instance = 0;
                                for(lastHostComponent = inCapturePhase; lastHostComponent; lastHostComponent = getParent(lastHostComponent))instance++;
                                lastHostComponent = 0;
                                for(_instance2 = reactEventName; _instance2; _instance2 = getParent(_instance2))lastHostComponent++;
                                for(; 0 < instance - lastHostComponent;)inCapturePhase = getParent(inCapturePhase), instance--;
                                for(; 0 < lastHostComponent - instance;)reactEventName = getParent(reactEventName), lastHostComponent--;
                                for(; instance--;){
                                    if (inCapturePhase === reactEventName || null !== reactEventName && inCapturePhase === reactEventName.alternate) break b;
                                    inCapturePhase = getParent(inCapturePhase);
                                    reactEventName = getParent(reactEventName);
                                }
                                inCapturePhase = null;
                            }
                            else inCapturePhase = null;
                            null !== SyntheticEventCtor && accumulateEnterLeaveListenersForEvent(dispatchQueue, reactName, SyntheticEventCtor, inCapturePhase, !1);
                            null !== reactEventType && null !== accumulateTargetOnly && accumulateEnterLeaveListenersForEvent(dispatchQueue, accumulateTargetOnly, reactEventType, inCapturePhase, !0);
                        }
                    }
                }
                a: {
                    reactName = targetInst ? getNodeFromInstance(targetInst) : window;
                    SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
                    if ("select" === SyntheticEventCtor || "input" === SyntheticEventCtor && "file" === reactName.type) var getTargetInstFunc = getTargetInstForChangeEvent;
                    else if (isTextInputElement(reactName)) {
                        if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                        else {
                            getTargetInstFunc = getTargetInstForInputEventPolyfill;
                            var handleEventFunc = handleEventsForInputEventPolyfill;
                        }
                    } else SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || "input" !== SyntheticEventCtor.toLowerCase() || "checkbox" !== reactName.type && "radio" !== reactName.type ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
                    if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
                        createAndAccumulateChangeEvent(dispatchQueue, getTargetInstFunc, nativeEvent, nativeEventTarget);
                        break a;
                    }
                    handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
                    "focusout" === domEventName && targetInst && "number" === reactName.type && null != targetInst.memoizedProps.value && setDefaultValue(reactName, "number", reactName.value);
                }
                handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
                switch(domEventName){
                    case "focusin":
                        if (isTextInputElement(handleEventFunc) || "true" === handleEventFunc.contentEditable) activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
                        break;
                    case "focusout":
                        lastSelection = activeElementInst = activeElement = null;
                        break;
                    case "mousedown":
                        mouseDown = !0;
                        break;
                    case "contextmenu":
                    case "mouseup":
                    case "dragend":
                        mouseDown = !1;
                        constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                        break;
                    case "selectionchange":
                        if (skipSelectionChangeEvent) break;
                    case "keydown":
                    case "keyup":
                        constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                }
                var fallbackData;
                if (canUseCompositionEvent) b: {
                    switch(domEventName){
                        case "compositionstart":
                            var eventType = "onCompositionStart";
                            break b;
                        case "compositionend":
                            eventType = "onCompositionEnd";
                            break b;
                        case "compositionupdate":
                            eventType = "onCompositionUpdate";
                            break b;
                    }
                    eventType = void 0;
                }
                else isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : "keydown" === domEventName && nativeEvent.keyCode === START_KEYCODE && (eventType = "onCompositionStart");
                eventType && (useFallbackCompositionData && "ko" !== nativeEvent.locale && (isComposing || "onCompositionStart" !== eventType ? "onCompositionEnd" === eventType && isComposing && (fallbackData = getData()) : (root = nativeEventTarget, startText = "value" in root ? root.value : root.textContent, isComposing = !0)), handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget), dispatchQueue.push({
                    event: eventType,
                    listeners: handleEventFunc
                }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), null !== fallbackData && (eventType.data = fallbackData))));
                if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent)) eventType = accumulateTwoPhaseListeners(targetInst, "onBeforeInput"), 0 < eventType.length && (handleEventFunc = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget), dispatchQueue.push({
                    event: handleEventFunc,
                    listeners: eventType
                }), handleEventFunc.data = fallbackData);
                extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
            processDispatchQueue(dispatchQueue, eventSystemFlags);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        for(var captureName = reactName + "Capture", listeners = []; null !== targetFiber;){
            var _instance3 = targetFiber, stateNode = _instance3.stateNode;
            _instance3 = _instance3.tag;
            5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3 || null === stateNode || (_instance3 = getListener(targetFiber, captureName), null != _instance3 && listeners.unshift(createDispatchListener(targetFiber, _instance3, stateNode)), _instance3 = getListener(targetFiber, reactName), null != _instance3 && listeners.push(createDispatchListener(targetFiber, _instance3, stateNode)));
            targetFiber = targetFiber.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (null === inst) return null;
        do inst = inst.return;
        while (inst && 5 !== inst.tag && 27 !== inst.tag);
        return inst ? inst : null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        for(var registrationName = event._reactName, listeners = []; null !== target && target !== common;){
            var _instance4 = target, alternate = _instance4.alternate, stateNode = _instance4.stateNode;
            _instance4 = _instance4.tag;
            if (null !== alternate && alternate === common) break;
            5 !== _instance4 && 26 !== _instance4 && 27 !== _instance4 || null === stateNode || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), null != stateNode && listeners.unshift(createDispatchListener(target, stateNode, alternate))) : inCapturePhase || (stateNode = getListener(target, registrationName), null != stateNode && listeners.push(createDispatchListener(target, stateNode, alternate))));
            target = target.return;
        }
        0 !== listeners.length && dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    }
    function validatePropertiesInDevelopment(type, props) {
        validateProperties$2(type, props);
        "input" !== type && "textarea" !== type && "select" !== type || null == props || null !== props.value || didWarnValueNull || (didWarnValueNull = !0, "select" === type && props.multiple ? console.error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : console.error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type));
        var eventRegistry = {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        };
        isCustomElement(type) || "string" === typeof props.is || warnUnknownProperties(type, props, eventRegistry);
        props.contentEditable && !props.suppressContentEditableWarning && null != props.children && console.error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
    }
    function warnForPropDifference(propName, serverValue, clientValue, serverDifferences) {
        serverValue !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(serverValue) !== clientValue && (serverDifferences[propName] = serverValue));
    }
    function warnForExtraAttributes(domElement, attributeNames, serverDifferences) {
        attributeNames.forEach(function(attributeName) {
            serverDifferences[getPropNameFromAttributeName(attributeName)] = "style" === attributeName ? getStylesObjectFromElement(domElement) : domElement.getAttribute(attributeName);
        });
    }
    function warnForInvalidEventListener(registrationName, listener) {
        !1 === listener ? console.error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName) : console.error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
    }
    function normalizeHTML(parent, html) {
        parent = parent.namespaceURI === MATH_NAMESPACE || parent.namespaceURI === SVG_NAMESPACE ? parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName) : parent.ownerDocument.createElement(parent.tagName);
        parent.innerHTML = html;
        return parent.innerHTML;
    }
    function normalizeMarkupForTextOrAttribute(markup) {
        willCoercionThrow(markup) && (console.error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.", typeName(markup)), testStringCoercion(markup));
        return ("string" === typeof markup ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText) {
        clientText = normalizeMarkupForTextOrAttribute(clientText);
        return normalizeMarkupForTextOrAttribute(serverText) === clientText ? !0 : !1;
    }
    function noop$1() {}
    function setProp(domElement, tag, key, value, props, prevValue) {
        switch(key){
            case "children":
                if ("string" === typeof value) validateTextNesting(value, tag), "body" === tag || "textarea" === tag && "" === value || setTextContent(domElement, value);
                else if ("number" === typeof value || "bigint" === typeof value) validateTextNesting("" + value, tag), "body" !== tag && setTextContent(domElement, "" + value);
                break;
            case "className":
                setValueForKnownAttribute(domElement, "class", value);
                break;
            case "tabIndex":
                setValueForKnownAttribute(domElement, "tabindex", value);
                break;
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height":
                setValueForKnownAttribute(domElement, key, value);
                break;
            case "style":
                setValueForStyles(domElement, value, prevValue);
                break;
            case "data":
                if ("object" !== tag) {
                    setValueForKnownAttribute(domElement, "data", value);
                    break;
                }
            case "src":
            case "href":
                if ("" === value && ("a" !== tag || "href" !== key)) {
                    "src" === key ? console.error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', key, key) : console.error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', key, key);
                    domElement.removeAttribute(key);
                    break;
                }
                if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value) {
                    domElement.removeAttribute(key);
                    break;
                }
                checkAttributeStringCoercion(value, key);
                value = sanitizeURL("" + value);
                domElement.setAttribute(key, value);
                break;
            case "action":
            case "formAction":
                null != value && ("form" === tag ? "formAction" === key ? console.error("You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>.") : "function" === typeof value && (null == props.encType && null == props.method || didWarnFormActionMethod || (didWarnFormActionMethod = !0, console.error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.")), null == props.target || didWarnFormActionTarget || (didWarnFormActionTarget = !0, console.error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window."))) : "input" === tag || "button" === tag ? "action" === key ? console.error("You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>.") : "input" !== tag || "submit" === props.type || "image" === props.type || didWarnFormActionType ? "button" !== tag || null == props.type || "submit" === props.type || didWarnFormActionType ? "function" === typeof value && (null == props.name || didWarnFormActionName || (didWarnFormActionName = !0, console.error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.')), null == props.formEncType && null == props.formMethod || didWarnFormActionMethod || (didWarnFormActionMethod = !0, console.error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.")), null == props.formTarget || didWarnFormActionTarget || (didWarnFormActionTarget = !0, console.error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window."))) : (didWarnFormActionType = !0, console.error('A button can only specify a formAction along with type="submit" or no type.')) : (didWarnFormActionType = !0, console.error('An input can only specify a formAction along with type="submit" or type="image".')) : "action" === key ? console.error("You can only pass the action prop to <form>.") : console.error("You can only pass the formAction prop to <input> or <button>."));
                if ("function" === typeof value) {
                    domElement.setAttribute(key, "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");
                    break;
                } else "function" === typeof prevValue && ("formAction" === key ? ("input" !== tag && setProp(domElement, tag, "name", props.name, props, null), setProp(domElement, tag, "formEncType", props.formEncType, props, null), setProp(domElement, tag, "formMethod", props.formMethod, props, null), setProp(domElement, tag, "formTarget", props.formTarget, props, null)) : (setProp(domElement, tag, "encType", props.encType, props, null), setProp(domElement, tag, "method", props.method, props, null), setProp(domElement, tag, "target", props.target, props, null)));
                if (null == value || "symbol" === typeof value || "boolean" === typeof value) {
                    domElement.removeAttribute(key);
                    break;
                }
                checkAttributeStringCoercion(value, key);
                value = sanitizeURL("" + value);
                domElement.setAttribute(key, value);
                break;
            case "onClick":
                null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
                break;
            case "onScroll":
                null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
                break;
            case "onScrollEnd":
                null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
                break;
            case "dangerouslySetInnerHTML":
                if (null != value) {
                    if ("object" !== typeof value || !("__html" in value)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");
                    key = value.__html;
                    if (null != key) {
                        if (null != props.children) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                        domElement.innerHTML = key;
                    }
                }
                break;
            case "multiple":
                domElement.multiple = value && "function" !== typeof value && "symbol" !== typeof value;
                break;
            case "muted":
                domElement.muted = value && "function" !== typeof value && "symbol" !== typeof value;
                break;
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "ref":
                break;
            case "autoFocus":
                break;
            case "xlinkHref":
                if (null == value || "function" === typeof value || "boolean" === typeof value || "symbol" === typeof value) {
                    domElement.removeAttribute("xlink:href");
                    break;
                }
                checkAttributeStringCoercion(value, key);
                key = sanitizeURL("" + value);
                domElement.setAttributeNS(xlinkNamespace, "xlink:href", key);
                break;
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha":
                null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, "" + value)) : domElement.removeAttribute(key);
                break;
            case "inert":
                "" !== value || didWarnForNewBooleanPropsWithEmptyValue[key] || (didWarnForNewBooleanPropsWithEmptyValue[key] = !0, console.error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.", key));
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope":
                value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
                break;
            case "capture":
            case "download":
                !0 === value ? domElement.setAttribute(key, "") : !1 !== value && null != value && "function" !== typeof value && "symbol" !== typeof value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
                break;
            case "cols":
            case "rows":
            case "size":
            case "span":
                null != value && "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value ? (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value)) : domElement.removeAttribute(key);
                break;
            case "rowSpan":
            case "start":
                null == value || "function" === typeof value || "symbol" === typeof value || isNaN(value) ? domElement.removeAttribute(key) : (checkAttributeStringCoercion(value, key), domElement.setAttribute(key, value));
                break;
            case "popover":
                listenToNonDelegatedEvent("beforetoggle", domElement);
                listenToNonDelegatedEvent("toggle", domElement);
                setValueForAttribute(domElement, "popover", value);
                break;
            case "xlinkActuate":
                setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:actuate", value);
                break;
            case "xlinkArcrole":
                setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:arcrole", value);
                break;
            case "xlinkRole":
                setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:role", value);
                break;
            case "xlinkShow":
                setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:show", value);
                break;
            case "xlinkTitle":
                setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:title", value);
                break;
            case "xlinkType":
                setValueForNamespacedAttribute(domElement, xlinkNamespace, "xlink:type", value);
                break;
            case "xmlBase":
                setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:base", value);
                break;
            case "xmlLang":
                setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:lang", value);
                break;
            case "xmlSpace":
                setValueForNamespacedAttribute(domElement, xmlNamespace, "xml:space", value);
                break;
            case "is":
                null != prevValue && console.error('Cannot update the "is" prop after it has been initialized.');
                setValueForAttribute(domElement, "is", value);
                break;
            case "innerText":
            case "textContent":
                break;
            case "popoverTarget":
                didWarnPopoverTargetObject || null == value || "object" !== typeof value || (didWarnPopoverTargetObject = !0, console.error("The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.", value));
            default:
                !(2 < key.length) || "o" !== key[0] && "O" !== key[0] || "n" !== key[1] && "N" !== key[1] ? (key = getAttributeAlias(key), setValueForAttribute(domElement, key, value)) : registrationNameDependencies.hasOwnProperty(key) && null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
        }
    }
    function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
        switch(key){
            case "style":
                setValueForStyles(domElement, value, prevValue);
                break;
            case "dangerouslySetInnerHTML":
                if (null != value) {
                    if ("object" !== typeof value || !("__html" in value)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");
                    key = value.__html;
                    if (null != key) {
                        if (null != props.children) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                        domElement.innerHTML = key;
                    }
                }
                break;
            case "children":
                "string" === typeof value ? setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && setTextContent(domElement, "" + value);
                break;
            case "onScroll":
                null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scroll", domElement));
                break;
            case "onScrollEnd":
                null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), listenToNonDelegatedEvent("scrollend", domElement));
                break;
            case "onClick":
                null != value && ("function" !== typeof value && warnForInvalidEventListener(key, value), domElement.onclick = noop$1);
                break;
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "innerHTML":
            case "ref":
                break;
            case "innerText":
            case "textContent":
                break;
            default:
                if (registrationNameDependencies.hasOwnProperty(key)) null != value && "function" !== typeof value && warnForInvalidEventListener(key, value);
                else a: {
                    if ("o" === key[0] && "n" === key[1] && (props = key.endsWith("Capture"), tag = key.slice(2, props ? key.length - 7 : void 0), prevValue = domElement[internalPropsKey] || null, prevValue = null != prevValue ? prevValue[key] : null, "function" === typeof prevValue && domElement.removeEventListener(tag, prevValue, props), "function" === typeof value)) {
                        "function" !== typeof prevValue && null !== prevValue && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
                        domElement.addEventListener(tag, value, props);
                        break a;
                    }
                    key in domElement ? domElement[key] = value : !0 === value ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
                }
        }
    }
    function setInitialProperties(domElement, tag, props) {
        validatePropertiesInDevelopment(tag, props);
        switch(tag){
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li":
                break;
            case "img":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                var hasSrc = !1, hasSrcSet = !1, propKey;
                for(propKey in props)if (props.hasOwnProperty(propKey)) {
                    var propValue = props[propKey];
                    if (null != propValue) switch(propKey){
                        case "src":
                            hasSrc = !0;
                            break;
                        case "srcSet":
                            hasSrcSet = !0;
                            break;
                        case "children":
                        case "dangerouslySetInnerHTML":
                            throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                        default:
                            setProp(domElement, tag, propKey, propValue, props, null);
                    }
                }
                hasSrcSet && setProp(domElement, tag, "srcSet", props.srcSet, props, null);
                hasSrc && setProp(domElement, tag, "src", props.src, props, null);
                return;
            case "input":
                checkControlledValueProps("input", props);
                listenToNonDelegatedEvent("invalid", domElement);
                var defaultValue = propKey = propValue = hasSrcSet = null, checked = null, defaultChecked = null;
                for(hasSrc in props)if (props.hasOwnProperty(hasSrc)) {
                    var _propValue = props[hasSrc];
                    if (null != _propValue) switch(hasSrc){
                        case "name":
                            hasSrcSet = _propValue;
                            break;
                        case "type":
                            propValue = _propValue;
                            break;
                        case "checked":
                            checked = _propValue;
                            break;
                        case "defaultChecked":
                            defaultChecked = _propValue;
                            break;
                        case "value":
                            propKey = _propValue;
                            break;
                        case "defaultValue":
                            defaultValue = _propValue;
                            break;
                        case "children":
                        case "dangerouslySetInnerHTML":
                            if (null != _propValue) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                            break;
                        default:
                            setProp(domElement, tag, hasSrc, _propValue, props, null);
                    }
                }
                validateInputProps(domElement, props);
                initInput(domElement, propKey, defaultValue, checked, defaultChecked, propValue, hasSrcSet, !1);
                track(domElement);
                return;
            case "select":
                checkControlledValueProps("select", props);
                listenToNonDelegatedEvent("invalid", domElement);
                hasSrc = propValue = propKey = null;
                for(hasSrcSet in props)if (props.hasOwnProperty(hasSrcSet) && (defaultValue = props[hasSrcSet], null != defaultValue)) switch(hasSrcSet){
                    case "value":
                        propKey = defaultValue;
                        break;
                    case "defaultValue":
                        propValue = defaultValue;
                        break;
                    case "multiple":
                        hasSrc = defaultValue;
                    default:
                        setProp(domElement, tag, hasSrcSet, defaultValue, props, null);
                }
                validateSelectProps(domElement, props);
                tag = propKey;
                props = propValue;
                domElement.multiple = !!hasSrc;
                null != tag ? updateOptions(domElement, !!hasSrc, tag, !1) : null != props && updateOptions(domElement, !!hasSrc, props, !0);
                return;
            case "textarea":
                checkControlledValueProps("textarea", props);
                listenToNonDelegatedEvent("invalid", domElement);
                propKey = hasSrcSet = hasSrc = null;
                for(propValue in props)if (props.hasOwnProperty(propValue) && (defaultValue = props[propValue], null != defaultValue)) switch(propValue){
                    case "value":
                        hasSrc = defaultValue;
                        break;
                    case "defaultValue":
                        hasSrcSet = defaultValue;
                        break;
                    case "children":
                        propKey = defaultValue;
                        break;
                    case "dangerouslySetInnerHTML":
                        if (null != defaultValue) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                        break;
                    default:
                        setProp(domElement, tag, propValue, defaultValue, props, null);
                }
                validateTextareaProps(domElement, props);
                initTextarea(domElement, hasSrc, hasSrcSet, propKey);
                track(domElement);
                return;
            case "option":
                validateOptionProps(domElement, props);
                for(checked in props)if (props.hasOwnProperty(checked) && (hasSrc = props[checked], null != hasSrc)) switch(checked){
                    case "selected":
                        domElement.selected = hasSrc && "function" !== typeof hasSrc && "symbol" !== typeof hasSrc;
                        break;
                    default:
                        setProp(domElement, tag, checked, hasSrc, props, null);
                }
                return;
            case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
            case "iframe":
            case "object":
                listenToNonDelegatedEvent("load", domElement);
                break;
            case "video":
            case "audio":
                for(hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
                break;
            case "image":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
            case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
            case "embed":
            case "source":
            case "link":
                listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
            case "area":
            case "base":
            case "br":
            case "col":
            case "hr":
            case "keygen":
            case "meta":
            case "param":
            case "track":
            case "wbr":
            case "menuitem":
                for(defaultChecked in props)if (props.hasOwnProperty(defaultChecked) && (hasSrc = props[defaultChecked], null != hasSrc)) switch(defaultChecked){
                    case "children":
                    case "dangerouslySetInnerHTML":
                        throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                    default:
                        setProp(domElement, tag, defaultChecked, hasSrc, props, null);
                }
                return;
            default:
                if (isCustomElement(tag)) {
                    for(_propValue in props)props.hasOwnProperty(_propValue) && (hasSrc = props[_propValue], void 0 !== hasSrc && setPropOnCustomElement(domElement, tag, _propValue, hasSrc, props, void 0));
                    return;
                }
        }
        for(defaultValue in props)props.hasOwnProperty(defaultValue) && (hasSrc = props[defaultValue], null != hasSrc && setProp(domElement, tag, defaultValue, hasSrc, props, null));
    }
    function updateProperties(domElement, tag, lastProps, nextProps) {
        validatePropertiesInDevelopment(tag, nextProps);
        switch(tag){
            case "div":
            case "span":
            case "svg":
            case "path":
            case "a":
            case "g":
            case "p":
            case "li":
                break;
            case "input":
                var name = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
                for(propKey in lastProps){
                    var lastProp = lastProps[propKey];
                    if (lastProps.hasOwnProperty(propKey) && null != lastProp) switch(propKey){
                        case "checked":
                            break;
                        case "value":
                            break;
                        case "defaultValue":
                            lastDefaultValue = lastProp;
                        default:
                            nextProps.hasOwnProperty(propKey) || setProp(domElement, tag, propKey, null, nextProps, lastProp);
                    }
                }
                for(var _propKey8 in nextProps){
                    var propKey = nextProps[_propKey8];
                    lastProp = lastProps[_propKey8];
                    if (nextProps.hasOwnProperty(_propKey8) && (null != propKey || null != lastProp)) switch(_propKey8){
                        case "type":
                            type = propKey;
                            break;
                        case "name":
                            name = propKey;
                            break;
                        case "checked":
                            checked = propKey;
                            break;
                        case "defaultChecked":
                            defaultChecked = propKey;
                            break;
                        case "value":
                            value = propKey;
                            break;
                        case "defaultValue":
                            defaultValue = propKey;
                            break;
                        case "children":
                        case "dangerouslySetInnerHTML":
                            if (null != propKey) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                            break;
                        default:
                            propKey !== lastProp && setProp(domElement, tag, _propKey8, propKey, nextProps, lastProp);
                    }
                }
                tag = "checkbox" === lastProps.type || "radio" === lastProps.type ? null != lastProps.checked : null != lastProps.value;
                nextProps = "checkbox" === nextProps.type || "radio" === nextProps.type ? null != nextProps.checked : null != nextProps.value;
                tag || !nextProps || didWarnUncontrolledToControlled || (console.error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"), didWarnUncontrolledToControlled = !0);
                !tag || nextProps || didWarnControlledToUncontrolled || (console.error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://react.dev/link/controlled-components"), didWarnControlledToUncontrolled = !0);
                updateInput(domElement, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name);
                return;
            case "select":
                propKey = value = defaultValue = _propKey8 = null;
                for(type in lastProps)if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && null != lastDefaultValue) switch(type){
                    case "value":
                        break;
                    case "multiple":
                        propKey = lastDefaultValue;
                    default:
                        nextProps.hasOwnProperty(type) || setProp(domElement, tag, type, null, nextProps, lastDefaultValue);
                }
                for(name in nextProps)if (type = nextProps[name], lastDefaultValue = lastProps[name], nextProps.hasOwnProperty(name) && (null != type || null != lastDefaultValue)) switch(name){
                    case "value":
                        _propKey8 = type;
                        break;
                    case "defaultValue":
                        defaultValue = type;
                        break;
                    case "multiple":
                        value = type;
                    default:
                        type !== lastDefaultValue && setProp(domElement, tag, name, type, nextProps, lastDefaultValue);
                }
                nextProps = defaultValue;
                tag = value;
                lastProps = propKey;
                null != _propKey8 ? updateOptions(domElement, !!tag, _propKey8, !1) : !!lastProps !== !!tag && (null != nextProps ? updateOptions(domElement, !!tag, nextProps, !0) : updateOptions(domElement, !!tag, tag ? [] : "", !1));
                return;
            case "textarea":
                propKey = _propKey8 = null;
                for(defaultValue in lastProps)if (name = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && null != name && !nextProps.hasOwnProperty(defaultValue)) switch(defaultValue){
                    case "value":
                        break;
                    case "children":
                        break;
                    default:
                        setProp(domElement, tag, defaultValue, null, nextProps, name);
                }
                for(value in nextProps)if (name = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (null != name || null != type)) switch(value){
                    case "value":
                        _propKey8 = name;
                        break;
                    case "defaultValue":
                        propKey = name;
                        break;
                    case "children":
                        break;
                    case "dangerouslySetInnerHTML":
                        if (null != name) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                        break;
                    default:
                        name !== type && setProp(domElement, tag, value, name, nextProps, type);
                }
                updateTextarea(domElement, _propKey8, propKey);
                return;
            case "option":
                for(var _propKey13 in lastProps)if (_propKey8 = lastProps[_propKey13], lastProps.hasOwnProperty(_propKey13) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey13)) switch(_propKey13){
                    case "selected":
                        domElement.selected = !1;
                        break;
                    default:
                        setProp(domElement, tag, _propKey13, null, nextProps, _propKey8);
                }
                for(lastDefaultValue in nextProps)if (_propKey8 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && _propKey8 !== propKey && (null != _propKey8 || null != propKey)) switch(lastDefaultValue){
                    case "selected":
                        domElement.selected = _propKey8 && "function" !== typeof _propKey8 && "symbol" !== typeof _propKey8;
                        break;
                    default:
                        setProp(domElement, tag, lastDefaultValue, _propKey8, nextProps, propKey);
                }
                return;
            case "img":
            case "link":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "keygen":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr":
            case "menuitem":
                for(var _propKey15 in lastProps)_propKey8 = lastProps[_propKey15], lastProps.hasOwnProperty(_propKey15) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey15) && setProp(domElement, tag, _propKey15, null, nextProps, _propKey8);
                for(checked in nextProps)if (_propKey8 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && _propKey8 !== propKey && (null != _propKey8 || null != propKey)) switch(checked){
                    case "children":
                    case "dangerouslySetInnerHTML":
                        if (null != _propKey8) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                        break;
                    default:
                        setProp(domElement, tag, checked, _propKey8, nextProps, propKey);
                }
                return;
            default:
                if (isCustomElement(tag)) {
                    for(var _propKey17 in lastProps)_propKey8 = lastProps[_propKey17], lastProps.hasOwnProperty(_propKey17) && void 0 !== _propKey8 && !nextProps.hasOwnProperty(_propKey17) && setPropOnCustomElement(domElement, tag, _propKey17, void 0, nextProps, _propKey8);
                    for(defaultChecked in nextProps)_propKey8 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || _propKey8 === propKey || void 0 === _propKey8 && void 0 === propKey || setPropOnCustomElement(domElement, tag, defaultChecked, _propKey8, nextProps, propKey);
                    return;
                }
        }
        for(var _propKey19 in lastProps)_propKey8 = lastProps[_propKey19], lastProps.hasOwnProperty(_propKey19) && null != _propKey8 && !nextProps.hasOwnProperty(_propKey19) && setProp(domElement, tag, _propKey19, null, nextProps, _propKey8);
        for(lastProp in nextProps)_propKey8 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || _propKey8 === propKey || null == _propKey8 && null == propKey || setProp(domElement, tag, lastProp, _propKey8, nextProps, propKey);
    }
    function getPropNameFromAttributeName(attrName) {
        switch(attrName){
            case "class":
                return "className";
            case "for":
                return "htmlFor";
            default:
                return attrName;
        }
    }
    function getStylesObjectFromElement(domElement) {
        var serverValueInObjectForm = {};
        domElement = domElement.style;
        for(var i = 0; i < domElement.length; i++){
            var styleName = domElement[i];
            serverValueInObjectForm[styleName] = domElement.getPropertyValue(styleName);
        }
        return serverValueInObjectForm;
    }
    function diffHydratedStyles(domElement, value$jscomp$0, serverDifferences) {
        if (null != value$jscomp$0 && "object" !== typeof value$jscomp$0) console.error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        else if (canDiffStyleForHydrationWarning) {
            var clientValue;
            var delimiter = clientValue = "", styleName;
            for(styleName in value$jscomp$0)if (value$jscomp$0.hasOwnProperty(styleName)) {
                var value = value$jscomp$0[styleName];
                null != value && "boolean" !== typeof value && "" !== value && (0 === styleName.indexOf("--") ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter + styleName + ":" + ("" + value).trim()) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? (checkCSSPropertyStringCoercion(value, styleName), clientValue += delimiter + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + ("" + value).trim()) : clientValue += delimiter + styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-") + ":" + value + "px", delimiter = ";");
            }
            clientValue = clientValue || null;
            value$jscomp$0 = domElement.getAttribute("style");
            value$jscomp$0 !== clientValue && (clientValue = normalizeMarkupForTextOrAttribute(clientValue), normalizeMarkupForTextOrAttribute(value$jscomp$0) !== clientValue && (serverDifferences.style = getStylesObjectFromElement(domElement)));
        }
    }
    function hydrateAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement) switch(typeof value){
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
                return;
        }
        else if (null != value) switch(typeof value){
            case "function":
            case "symbol":
            case "boolean":
                break;
            default:
                if (checkAttributeStringCoercion(value, propKey), domElement === "" + value) return;
        }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateBooleanAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement) {
            switch(typeof value){
                case "function":
                case "symbol":
                    return;
            }
            if (!value) return;
        } else switch(typeof value){
            case "function":
            case "symbol":
                break;
            default:
                if (value) return;
        }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateBooleanishAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement) switch(typeof value){
            case "undefined":
            case "function":
            case "symbol":
                return;
        }
        else if (null != value) switch(typeof value){
            case "function":
            case "symbol":
                break;
            default:
                if (checkAttributeStringCoercion(value, attributeName), domElement === "" + value) return;
        }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateNumericAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement) switch(typeof value){
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
                return;
            default:
                if (isNaN(value)) return;
        }
        else if (null != value) switch(typeof value){
            case "function":
            case "symbol":
            case "boolean":
                break;
            default:
                if (!isNaN(value) && (checkAttributeStringCoercion(value, propKey), domElement === "" + value)) return;
        }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function hydrateSanitizedAttribute(domElement, propKey, attributeName, value, extraAttributes, serverDifferences) {
        extraAttributes.delete(attributeName);
        domElement = domElement.getAttribute(attributeName);
        if (null === domElement) switch(typeof value){
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
                return;
        }
        else if (null != value) switch(typeof value){
            case "function":
            case "symbol":
            case "boolean":
                break;
            default:
                if (checkAttributeStringCoercion(value, propKey), attributeName = sanitizeURL("" + value), domElement === attributeName) return;
        }
        warnForPropDifference(propKey, domElement, value, serverDifferences);
    }
    function diffHydratedProperties(domElement, tag, props, hostContext) {
        for(var serverDifferences = {}, extraAttributes = new Set(), attributes = domElement.attributes, i = 0; i < attributes.length; i++)switch(attributes[i].name.toLowerCase()){
            case "value":
                break;
            case "checked":
                break;
            case "selected":
                break;
            default:
                extraAttributes.add(attributes[i].name);
        }
        if (isCustomElement(tag)) {
            for(var propKey in props)if (props.hasOwnProperty(propKey)) {
                var value = props[propKey];
                if (null != value) {
                    if (registrationNameDependencies.hasOwnProperty(propKey)) "function" !== typeof value && warnForInvalidEventListener(propKey, value);
                    else if (!0 !== props.suppressHydrationWarning) switch(propKey){
                        case "children":
                            "string" !== typeof value && "number" !== typeof value || warnForPropDifference("children", domElement.textContent, value, serverDifferences);
                            continue;
                        case "suppressContentEditableWarning":
                        case "suppressHydrationWarning":
                        case "defaultValue":
                        case "defaultChecked":
                        case "innerHTML":
                        case "ref":
                            continue;
                        case "dangerouslySetInnerHTML":
                            attributes = domElement.innerHTML;
                            value = value ? value.__html : void 0;
                            null != value && (value = normalizeHTML(domElement, value), warnForPropDifference(propKey, attributes, value, serverDifferences));
                            continue;
                        case "style":
                            extraAttributes.delete(propKey);
                            diffHydratedStyles(domElement, value, serverDifferences);
                            continue;
                        case "offsetParent":
                        case "offsetTop":
                        case "offsetLeft":
                        case "offsetWidth":
                        case "offsetHeight":
                        case "isContentEditable":
                        case "outerText":
                        case "outerHTML":
                            extraAttributes.delete(propKey.toLowerCase());
                            console.error("Assignment to read-only property will result in a no-op: `%s`", propKey);
                            continue;
                        case "className":
                            extraAttributes.delete("class");
                            attributes = getValueForAttributeOnCustomComponent(domElement, "class", value);
                            warnForPropDifference("className", attributes, value, serverDifferences);
                            continue;
                        default:
                            hostContext.context === HostContextNamespaceNone && "svg" !== tag && "math" !== tag ? extraAttributes.delete(propKey.toLowerCase()) : extraAttributes.delete(propKey), attributes = getValueForAttributeOnCustomComponent(domElement, propKey, value), warnForPropDifference(propKey, attributes, value, serverDifferences);
                    }
                }
            }
        } else for(value in props)if (props.hasOwnProperty(value) && (propKey = props[value], null != propKey)) {
            if (registrationNameDependencies.hasOwnProperty(value)) "function" !== typeof propKey && warnForInvalidEventListener(value, propKey);
            else if (!0 !== props.suppressHydrationWarning) switch(value){
                case "children":
                    "string" !== typeof propKey && "number" !== typeof propKey || warnForPropDifference("children", domElement.textContent, propKey, serverDifferences);
                    continue;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                case "value":
                case "checked":
                case "selected":
                case "defaultValue":
                case "defaultChecked":
                case "innerHTML":
                case "ref":
                    continue;
                case "dangerouslySetInnerHTML":
                    attributes = domElement.innerHTML;
                    propKey = propKey ? propKey.__html : void 0;
                    null != propKey && (propKey = normalizeHTML(domElement, propKey), attributes !== propKey && (serverDifferences[value] = {
                        __html: attributes
                    }));
                    continue;
                case "className":
                    hydrateAttribute(domElement, value, "class", propKey, extraAttributes, serverDifferences);
                    continue;
                case "tabIndex":
                    hydrateAttribute(domElement, value, "tabindex", propKey, extraAttributes, serverDifferences);
                    continue;
                case "style":
                    extraAttributes.delete(value);
                    diffHydratedStyles(domElement, propKey, serverDifferences);
                    continue;
                case "multiple":
                    extraAttributes.delete(value);
                    warnForPropDifference(value, domElement.multiple, propKey, serverDifferences);
                    continue;
                case "muted":
                    extraAttributes.delete(value);
                    warnForPropDifference(value, domElement.muted, propKey, serverDifferences);
                    continue;
                case "autoFocus":
                    extraAttributes.delete("autofocus");
                    warnForPropDifference(value, domElement.autofocus, propKey, serverDifferences);
                    continue;
                case "data":
                    if ("object" !== tag) {
                        extraAttributes.delete(value);
                        attributes = domElement.getAttribute("data");
                        warnForPropDifference(value, attributes, propKey, serverDifferences);
                        continue;
                    }
                case "src":
                case "href":
                    if (!("" !== propKey || "a" === tag && "href" === value || "object" === tag && "data" === value)) {
                        "src" === value ? console.error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', value, value) : console.error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', value, value);
                        hydrateSanitizedAttribute(domElement, value, value, null, extraAttributes, serverDifferences);
                        continue;
                    }
                    hydrateSanitizedAttribute(domElement, value, value, propKey, extraAttributes, serverDifferences);
                    continue;
                case "action":
                case "formAction":
                    attributes = domElement.getAttribute(value);
                    if ("function" === typeof propKey) {
                        extraAttributes.delete(value.toLowerCase());
                        "formAction" === value ? (extraAttributes.delete("name"), extraAttributes.delete("formenctype"), extraAttributes.delete("formmethod"), extraAttributes.delete("formtarget")) : (extraAttributes.delete("enctype"), extraAttributes.delete("method"), extraAttributes.delete("target"));
                        continue;
                    } else if (attributes === EXPECTED_FORM_ACTION_URL) {
                        extraAttributes.delete(value.toLowerCase());
                        warnForPropDifference(value, "function", propKey, serverDifferences);
                        continue;
                    }
                    hydrateSanitizedAttribute(domElement, value, value.toLowerCase(), propKey, extraAttributes, serverDifferences);
                    continue;
                case "xlinkHref":
                    hydrateSanitizedAttribute(domElement, value, "xlink:href", propKey, extraAttributes, serverDifferences);
                    continue;
                case "contentEditable":
                    hydrateBooleanishAttribute(domElement, value, "contenteditable", propKey, extraAttributes, serverDifferences);
                    continue;
                case "spellCheck":
                    hydrateBooleanishAttribute(domElement, value, "spellcheck", propKey, extraAttributes, serverDifferences);
                    continue;
                case "draggable":
                case "autoReverse":
                case "externalResourcesRequired":
                case "focusable":
                case "preserveAlpha":
                    hydrateBooleanishAttribute(domElement, value, value, propKey, extraAttributes, serverDifferences);
                    continue;
                case "allowFullScreen":
                case "async":
                case "autoPlay":
                case "controls":
                case "default":
                case "defer":
                case "disabled":
                case "disablePictureInPicture":
                case "disableRemotePlayback":
                case "formNoValidate":
                case "hidden":
                case "loop":
                case "noModule":
                case "noValidate":
                case "open":
                case "playsInline":
                case "readOnly":
                case "required":
                case "reversed":
                case "scoped":
                case "seamless":
                case "itemScope":
                    hydrateBooleanAttribute(domElement, value, value.toLowerCase(), propKey, extraAttributes, serverDifferences);
                    continue;
                case "capture":
                case "download":
                    a: {
                        i = domElement;
                        var attributeName = attributes = value, serverDifferences$jscomp$0 = serverDifferences;
                        extraAttributes.delete(attributeName);
                        i = i.getAttribute(attributeName);
                        if (null === i) switch(typeof propKey){
                            case "undefined":
                            case "function":
                            case "symbol":
                                break a;
                            default:
                                if (!1 === propKey) break a;
                        }
                        else if (null != propKey) switch(typeof propKey){
                            case "function":
                            case "symbol":
                                break;
                            case "boolean":
                                if (!0 === propKey && "" === i) break a;
                                break;
                            default:
                                if (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey) break a;
                        }
                        warnForPropDifference(attributes, i, propKey, serverDifferences$jscomp$0);
                    }
                    continue;
                case "cols":
                case "rows":
                case "size":
                case "span":
                    a: {
                        i = domElement;
                        attributeName = attributes = value;
                        serverDifferences$jscomp$0 = serverDifferences;
                        extraAttributes.delete(attributeName);
                        i = i.getAttribute(attributeName);
                        if (null === i) switch(typeof propKey){
                            case "undefined":
                            case "function":
                            case "symbol":
                            case "boolean":
                                break a;
                            default:
                                if (isNaN(propKey) || 1 > propKey) break a;
                        }
                        else if (null != propKey) switch(typeof propKey){
                            case "function":
                            case "symbol":
                            case "boolean":
                                break;
                            default:
                                if (!(isNaN(propKey) || 1 > propKey) && (checkAttributeStringCoercion(propKey, attributes), i === "" + propKey)) break a;
                        }
                        warnForPropDifference(attributes, i, propKey, serverDifferences$jscomp$0);
                    }
                    continue;
                case "rowSpan":
                    hydrateNumericAttribute(domElement, value, "rowspan", propKey, extraAttributes, serverDifferences);
                    continue;
                case "start":
                    hydrateNumericAttribute(domElement, value, value, propKey, extraAttributes, serverDifferences);
                    continue;
                case "xHeight":
                    hydrateAttribute(domElement, value, "x-height", propKey, extraAttributes, serverDifferences);
                    continue;
                case "xlinkActuate":
                    hydrateAttribute(domElement, value, "xlink:actuate", propKey, extraAttributes, serverDifferences);
                    continue;
                case "xlinkArcrole":
                    hydrateAttribute(domElement, value, "xlink:arcrole", propKey, extraAttributes, serverDifferences);
                    continue;
                case "xlinkRole":
                    hydrateAttribute(domElement, value, "xlink:role", propKey, extraAttributes, serverDifferences);
                    continue;
                case "xlinkShow":
                    hydrateAttribute(domElement, value, "xlink:show", propKey, extraAttributes, serverDifferences);
                    continue;
                case "xlinkTitle":
                    hydrateAttribute(domElement, value, "xlink:title", propKey, extraAttributes, serverDifferences);
                    continue;
                case "xlinkType":
                    hydrateAttribute(domElement, value, "xlink:type", propKey, extraAttributes, serverDifferences);
                    continue;
                case "xmlBase":
                    hydrateAttribute(domElement, value, "xml:base", propKey, extraAttributes, serverDifferences);
                    continue;
                case "xmlLang":
                    hydrateAttribute(domElement, value, "xml:lang", propKey, extraAttributes, serverDifferences);
                    continue;
                case "xmlSpace":
                    hydrateAttribute(domElement, value, "xml:space", propKey, extraAttributes, serverDifferences);
                    continue;
                case "inert":
                    "" !== propKey || didWarnForNewBooleanPropsWithEmptyValue[value] || (didWarnForNewBooleanPropsWithEmptyValue[value] = !0, console.error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.", value));
                    hydrateBooleanAttribute(domElement, value, value, propKey, extraAttributes, serverDifferences);
                    continue;
                default:
                    if (!(2 < value.length) || "o" !== value[0] && "O" !== value[0] || "n" !== value[1] && "N" !== value[1]) {
                        i = getAttributeAlias(value);
                        attributes = !1;
                        hostContext.context === HostContextNamespaceNone && "svg" !== tag && "math" !== tag ? extraAttributes.delete(i.toLowerCase()) : (attributeName = value.toLowerCase(), attributeName = possibleStandardNames.hasOwnProperty(attributeName) ? possibleStandardNames[attributeName] || null : null, null !== attributeName && attributeName !== value && (attributes = !0, extraAttributes.delete(attributeName)), extraAttributes.delete(i));
                        a: if (attributeName = domElement, serverDifferences$jscomp$0 = i, i = propKey, isAttributeNameSafe(serverDifferences$jscomp$0)) {
                            if (attributeName.hasAttribute(serverDifferences$jscomp$0)) attributeName = attributeName.getAttribute(serverDifferences$jscomp$0), checkAttributeStringCoercion(i, serverDifferences$jscomp$0), i = attributeName === "" + i ? i : attributeName;
                            else {
                                switch(typeof i){
                                    case "function":
                                    case "symbol":
                                        break a;
                                    case "boolean":
                                        if (attributeName = serverDifferences$jscomp$0.toLowerCase().slice(0, 5), "data-" !== attributeName && "aria-" !== attributeName) break a;
                                }
                                i = void 0 === i ? void 0 : null;
                            }
                        } else i = void 0;
                        attributes || warnForPropDifference(value, i, propKey, serverDifferences);
                    }
            }
        }
        0 < extraAttributes.size && !0 !== props.suppressHydrationWarning && warnForExtraAttributes(domElement, extraAttributes, serverDifferences);
        return 0 === Object.keys(serverDifferences).length ? null : serverDifferences;
    }
    function propNamesListJoin(list, combinator) {
        switch(list.length){
            case 0:
                return "";
            case 1:
                return list[0];
            case 2:
                return list[0] + " " + combinator + " " + list[1];
            default:
                return list.slice(0, -1).join(", ") + ", " + combinator + " " + list[list.length - 1];
        }
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function getOwnHostContext(namespaceURI) {
        switch(namespaceURI){
            case SVG_NAMESPACE:
                return HostContextNamespaceSvg;
            case MATH_NAMESPACE:
                return HostContextNamespaceMath;
            default:
                return HostContextNamespaceNone;
        }
    }
    function getChildHostContextProd(parentNamespace, type) {
        if (parentNamespace === HostContextNamespaceNone) switch(type){
            case "svg":
                return HostContextNamespaceSvg;
            case "math":
                return HostContextNamespaceMath;
            default:
                return HostContextNamespaceNone;
        }
        return parentNamespace === HostContextNamespaceSvg && "foreignObject" === type ? HostContextNamespaceNone : parentNamespace;
    }
    function shouldSetTextContent(type, props) {
        return "textarea" === type || "noscript" === type || "string" === typeof props.children || "number" === typeof props.children || "bigint" === typeof props.children || "object" === typeof props.dangerouslySetInnerHTML && null !== props.dangerouslySetInnerHTML && null != props.dangerouslySetInnerHTML.__html;
    }
    function shouldAttemptEagerTransition() {
        var event = window.event;
        if (event && "popstate" === event.type) {
            if (event === currentPopstateTransitionEvent) return !1;
            currentPopstateTransitionEvent = event;
            return !0;
        }
        currentPopstateTransitionEvent = null;
        return !1;
    }
    function handleErrorInNextTick(error) {
        setTimeout(function() {
            throw error;
        });
    }
    function commitMount(domElement, type, newProps) {
        switch(type){
            case "button":
            case "input":
            case "select":
            case "textarea":
                newProps.autoFocus && domElement.focus();
                break;
            case "img":
                newProps.src ? domElement.src = newProps.src : newProps.srcSet && (domElement.srcset = newProps.srcSet);
        }
    }
    function commitUpdate(domElement, type, oldProps, newProps) {
        updateProperties(domElement, type, oldProps, newProps);
        domElement[internalPropsKey] = newProps;
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, "");
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        8 === container.nodeType ? container.parentNode.removeChild(child) : container.removeChild(child);
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance, depth = 0;
        do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && 8 === nextNode.nodeType) {
                if (node = nextNode.data, node === SUSPENSE_END_DATA) {
                    if (0 === depth) {
                        parentInstance.removeChild(nextNode);
                        retryIfBlockedOn(suspenseInstance);
                        return;
                    }
                    depth--;
                } else node !== SUSPENSE_START_DATA && node !== SUSPENSE_PENDING_START_DATA && node !== SUSPENSE_FALLBACK_START_DATA || depth++;
            }
            node = nextNode;
        }while (node);
        retryIfBlockedOn(suspenseInstance);
    }
    function hideInstance(instance) {
        instance = instance.style;
        "function" === typeof instance.setProperty ? instance.setProperty("display", "none", "important") : instance.display = "none";
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
    }
    function unhideInstance(instance, props) {
        props = props[STYLE];
        props = void 0 !== props && null !== props && props.hasOwnProperty("display") ? props.display : null;
        instance.style.display = null == props || "boolean" === typeof props ? "" : ("" + props).trim();
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainerSparingly(container) {
        var nextNode = container.firstChild;
        nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
        for(; nextNode;){
            var node = nextNode;
            nextNode = nextNode.nextSibling;
            switch(node.nodeName){
                case "HTML":
                case "HEAD":
                case "BODY":
                    clearContainerSparingly(node);
                    detachDeletedInstance(node);
                    continue;
                case "SCRIPT":
                case "STYLE":
                    continue;
                case "LINK":
                    if ("stylesheet" === node.rel.toLowerCase()) continue;
            }
            container.removeChild(node);
        }
    }
    function canHydrateInstance(instance, type, props, inRootOrSingleton) {
        for(; 1 === instance.nodeType;){
            var anyProps = props;
            if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
                if (!inRootOrSingleton && ("INPUT" !== instance.nodeName || "hidden" !== instance.type)) break;
            } else if (!inRootOrSingleton) {
                if ("input" === type && "hidden" === instance.type) {
                    checkAttributeStringCoercion(anyProps.name, "name");
                    var name = null == anyProps.name ? null : "" + anyProps.name;
                    if ("hidden" === anyProps.type && instance.getAttribute("name") === name) return instance;
                } else return instance;
            } else if (!instance[internalHoistableMarker]) switch(type){
                case "meta":
                    if (!instance.hasAttribute("itemprop")) break;
                    return instance;
                case "link":
                    name = instance.getAttribute("rel");
                    if ("stylesheet" === name && instance.hasAttribute("data-precedence")) break;
                    else if (name !== anyProps.rel || instance.getAttribute("href") !== (null == anyProps.href ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (null == anyProps.title ? null : anyProps.title)) break;
                    return instance;
                case "style":
                    if (instance.hasAttribute("data-precedence")) break;
                    return instance;
                case "script":
                    name = instance.getAttribute("src");
                    if ((name !== (null == anyProps.src ? null : anyProps.src) || instance.getAttribute("type") !== (null == anyProps.type ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) && name && instance.hasAttribute("async") && !instance.hasAttribute("itemprop")) break;
                    return instance;
                default:
                    return instance;
            }
            instance = getNextHydratable(instance.nextSibling);
            if (null === instance) break;
        }
        return null;
    }
    function canHydrateTextInstance(instance, text, inRootOrSingleton) {
        if ("" === text) return null;
        for(; 3 !== instance.nodeType;){
            if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton) return null;
            instance = getNextHydratable(instance.nextSibling);
            if (null === instance) return null;
        }
        return instance;
    }
    function getNextHydratable(node) {
        for(; null != node; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (1 === nodeType || 3 === nodeType) break;
            if (8 === nodeType) {
                nodeType = node.data;
                if (nodeType === SUSPENSE_START_DATA || nodeType === SUSPENSE_FALLBACK_START_DATA || nodeType === SUSPENSE_PENDING_START_DATA || nodeType === FORM_STATE_IS_MATCHING || nodeType === FORM_STATE_IS_NOT_MATCHING) break;
                if (nodeType === SUSPENSE_END_DATA) return null;
            }
        }
        return node;
    }
    function describeHydratableInstanceForDevWarnings(instance) {
        if (1 === instance.nodeType) {
            for(var JSCompiler_temp_const = instance.nodeName.toLowerCase(), serverDifferences = {}, attributes = instance.attributes, i = 0; i < attributes.length; i++){
                var attr = attributes[i];
                serverDifferences[getPropNameFromAttributeName(attr.name)] = "style" === attr.name.toLowerCase() ? getStylesObjectFromElement(instance) : attr.value;
            }
            return {
                type: JSCompiler_temp_const,
                props: serverDifferences
            };
        }
        return 8 === instance.nodeType ? {
            type: "Suspense",
            props: {}
        } : instance.nodeValue;
    }
    function diffHydratedTextForDevWarnings(textInstance, text, parentProps) {
        return null === parentProps || !0 !== parentProps[SUPPRESS_HYDRATION_WARNING] ? (textInstance.nodeValue === text ? textInstance = null : (text = normalizeMarkupForTextOrAttribute(text), textInstance = normalizeMarkupForTextOrAttribute(textInstance.nodeValue) === text ? null : textInstance.nodeValue), textInstance) : null;
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        suspenseInstance = suspenseInstance.nextSibling;
        for(var depth = 0; suspenseInstance;){
            if (8 === suspenseInstance.nodeType) {
                var data = suspenseInstance.data;
                if (data === SUSPENSE_END_DATA) {
                    if (0 === depth) return getNextHydratable(suspenseInstance.nextSibling);
                    depth--;
                } else data !== SUSPENSE_START_DATA && data !== SUSPENSE_FALLBACK_START_DATA && data !== SUSPENSE_PENDING_START_DATA || depth++;
            }
            suspenseInstance = suspenseInstance.nextSibling;
        }
        return null;
    }
    function getParentSuspenseInstance(targetInstance) {
        targetInstance = targetInstance.previousSibling;
        for(var depth = 0; targetInstance;){
            if (8 === targetInstance.nodeType) {
                var data = targetInstance.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (0 === depth) return targetInstance;
                    depth--;
                } else data === SUSPENSE_END_DATA && depth++;
            }
            targetInstance = targetInstance.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
    }
    function resolveSingletonInstance(type, props, rootContainerInstance, hostContext, validateDOMNestingDev) {
        validateDOMNestingDev && validateDOMNesting(type, hostContext.ancestorInfo);
        props = getOwnerDocumentFromRootContainer(rootContainerInstance);
        switch(type){
            case "html":
                type = props.documentElement;
                if (!type) throw Error("React expected an <html> element (document.documentElement) to exist in the Document but one was not found. React never removes the documentElement for any Document it renders into so the cause is likely in some other script running on this page.");
                return type;
            case "head":
                type = props.head;
                if (!type) throw Error("React expected a <head> element (document.head) to exist in the Document but one was not found. React never removes the head for any Document it renders into so the cause is likely in some other script running on this page.");
                return type;
            case "body":
                type = props.body;
                if (!type) throw Error("React expected a <body> element (document.body) to exist in the Document but one was not found. React never removes the body for any Document it renders into so the cause is likely in some other script running on this page.");
                return type;
            default:
                throw Error("resolveSingletonInstance was called with an element type that is not supported. This is a bug in React.");
        }
    }
    function acquireSingletonInstance(type, props, instance, internalInstanceHandle) {
        if (getInstanceFromNode(instance)) {
            var tagName = instance.tagName.toLowerCase();
            console.error("You are mounting a new %s component when a previous one has not first unmounted. It is an error to render more than one %s component at a time and attributes and children of these components will likely fail in unpredictable ways. Please only render a single instance of <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.", tagName, tagName, tagName);
        }
        switch(type){
            case "html":
            case "head":
            case "body":
                break;
            default:
                console.error("acquireSingletonInstance was called with an element type that is not supported. This is a bug in React.");
        }
        for(tagName = instance.attributes; tagName.length;)instance.removeAttributeNode(tagName[0]);
        setInitialProperties(instance, type, props);
        instance[internalInstanceKey] = internalInstanceHandle;
        instance[internalPropsKey] = props;
    }
    function getHoistableRoot(container) {
        return "function" === typeof container.getRootNode ? container.getRootNode() : container.ownerDocument;
    }
    function preconnectAs(rel, href, crossOrigin) {
        var ownerDocument = globalDocument;
        if (ownerDocument && "string" === typeof href && href) {
            var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
            limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
            "string" === typeof crossOrigin && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
            preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = {
                rel: rel,
                crossOrigin: crossOrigin,
                href: href
            }, null === ownerDocument.querySelector(limitedEscapedHref) && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
        }
    }
    function getResource(type, currentProps, pendingProps, currentResource) {
        var resourceRoot = (resourceRoot = rootInstanceStackCursor.current) ? getHoistableRoot(resourceRoot) : null;
        if (!resourceRoot) throw Error('"resourceRoot" was expected to exist. This is a bug in React.');
        switch(type){
            case "meta":
            case "title":
                return null;
            case "style":
                return "string" === typeof pendingProps.precedence && "string" === typeof pendingProps.href ? (pendingProps = getStyleKey(pendingProps.href), currentProps = getResourcesFromRoot(resourceRoot).hoistableStyles, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
                    type: "style",
                    instance: null,
                    count: 0,
                    state: null
                }, currentProps.set(pendingProps, currentResource)), currentResource) : {
                    type: "void",
                    instance: null,
                    count: 0,
                    state: null
                };
            case "link":
                if ("stylesheet" === pendingProps.rel && "string" === typeof pendingProps.href && "string" === typeof pendingProps.precedence) {
                    type = getStyleKey(pendingProps.href);
                    var _styles = getResourcesFromRoot(resourceRoot).hoistableStyles, _resource = _styles.get(type);
                    if (!_resource && (resourceRoot = resourceRoot.ownerDocument || resourceRoot, _resource = {
                        type: "stylesheet",
                        instance: null,
                        count: 0,
                        state: {
                            loading: NotLoaded,
                            preload: null
                        }
                    }, _styles.set(type, _resource), (_styles = resourceRoot.querySelector(getStylesheetSelectorFromKey(type))) && !_styles._p && (_resource.instance = _styles, _resource.state.loading = Loaded | Inserted), !preloadPropsMap.has(type))) {
                        var preloadProps = {
                            rel: "preload",
                            as: "style",
                            href: pendingProps.href,
                            crossOrigin: pendingProps.crossOrigin,
                            integrity: pendingProps.integrity,
                            media: pendingProps.media,
                            hrefLang: pendingProps.hrefLang,
                            referrerPolicy: pendingProps.referrerPolicy
                        };
                        preloadPropsMap.set(type, preloadProps);
                        _styles || preloadStylesheet(resourceRoot, type, preloadProps, _resource.state);
                    }
                    if (currentProps && null === currentResource) throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error("Expected <link> not to update to be updated to a stylesheet with precedence. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps);
                    return _resource;
                }
                if (currentProps && null !== currentResource) throw pendingProps = "\n\n  - " + describeLinkForResourceErrorDEV(currentProps) + "\n  + " + describeLinkForResourceErrorDEV(pendingProps), Error("Expected stylesheet with precedence to not be updated to a different kind of <link>. Check the `rel`, `href`, and `precedence` props of this component. Alternatively, check whether two different <link> components render in the same slot or share the same key." + pendingProps);
                return null;
            case "script":
                return currentProps = pendingProps.async, pendingProps = pendingProps.src, "string" === typeof pendingProps && currentProps && "function" !== typeof currentProps && "symbol" !== typeof currentProps ? (pendingProps = getScriptKey(pendingProps), currentProps = getResourcesFromRoot(resourceRoot).hoistableScripts, currentResource = currentProps.get(pendingProps), currentResource || (currentResource = {
                    type: "script",
                    instance: null,
                    count: 0,
                    state: null
                }, currentProps.set(pendingProps, currentResource)), currentResource) : {
                    type: "void",
                    instance: null,
                    count: 0,
                    state: null
                };
            default:
                throw Error('getResource encountered a type it did not expect: "' + type + '". this is a bug in React.');
        }
    }
    function describeLinkForResourceErrorDEV(props) {
        var describedProps = 0, description = "<link";
        "string" === typeof props.rel ? (describedProps++, description += ' rel="' + props.rel + '"') : hasOwnProperty.call(props, "rel") && (describedProps++, description += ' rel="' + (null === props.rel ? "null" : "invalid type " + typeof props.rel) + '"');
        "string" === typeof props.href ? (describedProps++, description += ' href="' + props.href + '"') : hasOwnProperty.call(props, "href") && (describedProps++, description += ' href="' + (null === props.href ? "null" : "invalid type " + typeof props.href) + '"');
        "string" === typeof props.precedence ? (describedProps++, description += ' precedence="' + props.precedence + '"') : hasOwnProperty.call(props, "precedence") && (describedProps++, description += " precedence={" + (null === props.precedence ? "null" : "invalid type " + typeof props.precedence) + "}");
        Object.getOwnPropertyNames(props).length > describedProps && (description += " ...");
        return description + " />";
    }
    function getStyleKey(href) {
        return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
    }
    function getStylesheetSelectorFromKey(key) {
        return 'link[rel="stylesheet"][' + key + "]";
    }
    function stylesheetPropsFromRawProps(rawProps) {
        return assign({}, rawProps, {
            "data-precedence": rawProps.precedence,
            precedence: null
        });
    }
    function preloadStylesheet(ownerDocument, key, preloadProps, state) {
        ownerDocument.querySelector('link[rel="preload"][as="style"][' + key + "]") ? state.loading = Loaded : (key = ownerDocument.createElement("link"), state.preload = key, key.addEventListener("load", function() {
            return state.loading |= Loaded;
        }), key.addEventListener("error", function() {
            return state.loading |= Errored;
        }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
    }
    function getScriptKey(src) {
        return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
    }
    function getScriptSelectorFromKey(key) {
        return "script[async]" + key;
    }
    function acquireResource(hoistableRoot, resource, props) {
        resource.count++;
        if (null === resource.instance) switch(resource.type){
            case "style":
                var instance = hoistableRoot.querySelector('style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props.href) + '"]');
                if (instance) return resource.instance = instance, markNodeAsHoistable(instance), instance;
                var styleProps = assign({}, props, {
                    "data-href": props.href,
                    "data-precedence": props.precedence,
                    href: null,
                    precedence: null
                });
                instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("style");
                markNodeAsHoistable(instance);
                setInitialProperties(instance, "style", styleProps);
                insertStylesheet(instance, props.precedence, hoistableRoot);
                return resource.instance = instance;
            case "stylesheet":
                styleProps = getStyleKey(props.href);
                var _instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(styleProps));
                if (_instance) return resource.state.loading |= Inserted, resource.instance = _instance, markNodeAsHoistable(_instance), _instance;
                instance = stylesheetPropsFromRawProps(props);
                (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
                _instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
                markNodeAsHoistable(_instance);
                var linkInstance = _instance;
                linkInstance._p = new Promise(function(resolve, reject) {
                    linkInstance.onload = resolve;
                    linkInstance.onerror = reject;
                });
                setInitialProperties(_instance, "link", instance);
                resource.state.loading |= Inserted;
                insertStylesheet(_instance, props.precedence, hoistableRoot);
                return resource.instance = _instance;
            case "script":
                _instance = getScriptKey(props.src);
                if (styleProps = hoistableRoot.querySelector(getScriptSelectorFromKey(_instance))) return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
                instance = props;
                if (styleProps = preloadPropsMap.get(_instance)) instance = assign({}, props), adoptPreloadPropsForScript(instance, styleProps);
                hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
                styleProps = hoistableRoot.createElement("script");
                markNodeAsHoistable(styleProps);
                setInitialProperties(styleProps, "link", instance);
                hoistableRoot.head.appendChild(styleProps);
                return resource.instance = styleProps;
            case "void":
                return null;
            default:
                throw Error('acquireResource encountered a resource type it did not expect: "' + resource.type + '". this is a bug in React.');
        }
        else "stylesheet" === resource.type && (resource.state.loading & Inserted) === NotLoaded && (instance = resource.instance, resource.state.loading |= Inserted, insertStylesheet(instance, props.precedence, hoistableRoot));
        return resource.instance;
    }
    function insertStylesheet(instance, precedence, root) {
        for(var nodes = root.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'), last = nodes.length ? nodes[nodes.length - 1] : null, prior = last, i = 0; i < nodes.length; i++){
            var node = nodes[i];
            if (node.dataset.precedence === precedence) prior = node;
            else if (prior !== last) break;
        }
        prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = 9 === root.nodeType ? root.head : root, precedence.insertBefore(instance, precedence.firstChild));
    }
    function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
        null == stylesheetProps.crossOrigin && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
        null == stylesheetProps.referrerPolicy && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
        null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
    }
    function adoptPreloadPropsForScript(scriptProps, preloadProps) {
        null == scriptProps.crossOrigin && (scriptProps.crossOrigin = preloadProps.crossOrigin);
        null == scriptProps.referrerPolicy && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
        null == scriptProps.integrity && (scriptProps.integrity = preloadProps.integrity);
    }
    function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
        if (null === tagCaches) {
            var cache = new Map();
            var caches = tagCaches = new Map();
            caches.set(ownerDocument, cache);
        } else caches = tagCaches, cache = caches.get(ownerDocument), cache || (cache = new Map(), caches.set(ownerDocument, cache));
        if (cache.has(type)) return cache;
        cache.set(type, null);
        ownerDocument = ownerDocument.getElementsByTagName(type);
        for(caches = 0; caches < ownerDocument.length; caches++){
            var node = ownerDocument[caches];
            if (!(node[internalHoistableMarker] || node[internalInstanceKey] || "link" === type && "stylesheet" === node.getAttribute("rel")) && node.namespaceURI !== SVG_NAMESPACE) {
                var nodeKey = node.getAttribute(keyAttribute) || "";
                nodeKey = type + nodeKey;
                var existing = cache.get(nodeKey);
                existing ? existing.push(node) : cache.set(nodeKey, [
                    node
                ]);
            }
        }
        return cache;
    }
    function mountHoistable(hoistableRoot, type, instance) {
        hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
        hoistableRoot.head.insertBefore(instance, "title" === type ? hoistableRoot.querySelector("head > title") : null);
    }
    function isHostHoistableType(type, props, hostContext) {
        var outsideHostContainerContext = !hostContext.ancestorInfo.containerTagInScope;
        if (hostContext.context === HostContextNamespaceSvg || null != props.itemProp) return !outsideHostContainerContext || null == props.itemProp || "meta" !== type && "title" !== type && "style" !== type && "link" !== type && "script" !== type || console.error("Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop. Otherwise, try moving this tag into the <head> or <body> of the Document.", type, type), !1;
        switch(type){
            case "meta":
            case "title":
                return !0;
            case "style":
                if ("string" !== typeof props.precedence || "string" !== typeof props.href || "" === props.href) {
                    outsideHostContainerContext && console.error('Cannot render a <style> outside the main document without knowing its precedence and a unique href key. React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that does not conflic with the `href` values used in any other hoisted <style> or <link rel="stylesheet" ...> tags.  Note that hoisting <style> tags is considered an advanced feature that most will not use directly. Consider moving the <style> tag to the <head> or consider adding a `precedence="default"` and `href="some unique resource identifier"`, or move the <style> to the <style> tag.');
                    break;
                }
                return !0;
            case "link":
                if ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href || props.onLoad || props.onError) {
                    if ("stylesheet" === props.rel && "string" === typeof props.precedence) {
                        type = props.href;
                        var onError = props.onError, disabled = props.disabled;
                        hostContext = [];
                        props.onLoad && hostContext.push("`onLoad`");
                        onError && hostContext.push("`onError`");
                        null != disabled && hostContext.push("`disabled`");
                        onError = propNamesListJoin(hostContext, "and");
                        onError += 1 === hostContext.length ? " prop" : " props";
                        disabled = 1 === hostContext.length ? "an " + onError : "the " + onError;
                        hostContext.length && console.error('React encountered a <link rel="stylesheet" href="%s" ... /> with a `precedence` prop that also included %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', type, disabled, onError);
                    }
                    outsideHostContainerContext && ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href ? console.error("Cannot render a <link> outside the main document without a `rel` and `href` prop. Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag") : (props.onError || props.onLoad) && console.error("Cannot render a <link> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>."));
                    break;
                }
                switch(props.rel){
                    case "stylesheet":
                        return type = props.precedence, props = props.disabled, "string" !== typeof type && outsideHostContainerContext && console.error('Cannot render a <link rel="stylesheet" /> outside the main document without knowing its precedence. Consider adding precedence="default" or moving it into the root <head> tag.'), "string" === typeof type && null == props;
                    default:
                        return !0;
                }
            case "script":
                type = props.async && "function" !== typeof props.async && "symbol" !== typeof props.async;
                if (!type || props.onLoad || props.onError || !props.src || "string" !== typeof props.src) {
                    outsideHostContainerContext && (type ? props.onLoad || props.onError ? console.error("Cannot render a <script> with onLoad or onError listeners outside the main document. Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or somewhere in the <body>.") : console.error("Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop. Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or somewhere in the <body>.") : console.error('Cannot render a sync or defer <script> outside the main document without knowing its order. Try adding async="" or moving it into the root <head> tag.'));
                    break;
                }
                return !0;
            case "noscript":
            case "template":
                outsideHostContainerContext && console.error("Cannot render <%s> outside the main document. Try moving it into the root <head> tag.", type);
        }
        return !1;
    }
    function preloadResource(resource) {
        return "stylesheet" === resource.type && (resource.state.loading & Settled) === NotLoaded ? !1 : !0;
    }
    function noop() {}
    function suspendResource(hoistableRoot, resource, props) {
        if (null === suspendedState) throw Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");
        var state = suspendedState;
        if ("stylesheet" === resource.type && ("string" !== typeof props.media || !1 !== matchMedia(props.media).matches) && (resource.state.loading & Inserted) === NotLoaded) {
            if (null === resource.instance) {
                var key = getStyleKey(props.href), instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));
                if (instance) {
                    hoistableRoot = instance._p;
                    null !== hoistableRoot && "object" === typeof hoistableRoot && "function" === typeof hoistableRoot.then && (state.count++, state = onUnsuspend.bind(state), hoistableRoot.then(state, state));
                    resource.state.loading |= Inserted;
                    resource.instance = instance;
                    markNodeAsHoistable(instance);
                    return;
                }
                instance = hoistableRoot.ownerDocument || hoistableRoot;
                props = stylesheetPropsFromRawProps(props);
                (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key);
                instance = instance.createElement("link");
                markNodeAsHoistable(instance);
                var linkInstance = instance;
                linkInstance._p = new Promise(function(resolve, reject) {
                    linkInstance.onload = resolve;
                    linkInstance.onerror = reject;
                });
                setInitialProperties(instance, "link", props);
                resource.instance = instance;
            }
            null === state.stylesheets && (state.stylesheets = new Map());
            state.stylesheets.set(resource, hoistableRoot);
            (hoistableRoot = resource.state.preload) && (resource.state.loading & Settled) === NotLoaded && (state.count++, resource = onUnsuspend.bind(state), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
        }
    }
    function waitForCommitToBeReady() {
        if (null === suspendedState) throw Error("Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.");
        var state = suspendedState;
        state.stylesheets && 0 === state.count && insertSuspendedStylesheets(state, state.stylesheets);
        return 0 < state.count ? function(commit) {
            var stylesheetTimer = setTimeout(function() {
                state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets);
                if (state.unsuspend) {
                    var unsuspend = state.unsuspend;
                    state.unsuspend = null;
                    unsuspend();
                }
            }, 6e4);
            state.unsuspend = commit;
            return function() {
                state.unsuspend = null;
                clearTimeout(stylesheetTimer);
            };
        } : null;
    }
    function onUnsuspend() {
        this.count--;
        if (0 === this.count) {
            if (this.stylesheets) insertSuspendedStylesheets(this, this.stylesheets);
            else if (this.unsuspend) {
                var unsuspend = this.unsuspend;
                this.unsuspend = null;
                unsuspend();
            }
        }
    }
    function insertSuspendedStylesheets(state, resources) {
        state.stylesheets = null;
        null !== state.unsuspend && (state.count++, precedencesByRoot = new Map(), resources.forEach(insertStylesheetIntoRoot, state), precedencesByRoot = null, onUnsuspend.call(state));
    }
    function insertStylesheetIntoRoot(root, resource) {
        if (!(resource.state.loading & Inserted)) {
            var precedences = precedencesByRoot.get(root);
            if (precedences) var last = precedences.get(LAST_PRECEDENCE);
            else {
                precedences = new Map();
                precedencesByRoot.set(root, precedences);
                for(var nodes = root.querySelectorAll("link[data-precedence],style[data-precedence]"), i = 0; i < nodes.length; i++){
                    var node = nodes[i];
                    if ("LINK" === node.nodeName || "not all" !== node.getAttribute("media")) precedences.set(node.dataset.precedence, node), last = node;
                }
                last && precedences.set(LAST_PRECEDENCE, last);
            }
            nodes = resource.instance;
            node = nodes.getAttribute("data-precedence");
            i = precedences.get(node) || last;
            i === last && precedences.set(LAST_PRECEDENCE, nodes);
            precedences.set(node, nodes);
            this.count++;
            last = onUnsuspend.bind(this);
            nodes.addEventListener("load", last);
            nodes.addEventListener("error", last);
            i ? i.parentNode.insertBefore(nodes, i.nextSibling) : (root = 9 === root.nodeType ? root.head : root, root.insertBefore(nodes, root.firstChild));
            resource.state.loading |= Inserted;
        }
    }
    function bindToConsole(methodName, args, badgeName) {
        var offset = 0;
        switch(methodName){
            case "dir":
            case "dirxml":
            case "groupEnd":
            case "table":
                return bind.apply(console[methodName], [
                    console
                ].concat(args));
            case "assert":
                offset = 1;
        }
        args = args.slice(0);
        "string" === typeof args[offset] ? args.splice(offset, 1, badgeFormat + args[offset], badgeStyle, pad + badgeName + pad, resetStyle) : args.splice(offset, 0, badgeFormat, badgeStyle, pad + badgeName + pad, resetStyle);
        args.unshift(console);
        return bind.apply(console[methodName], args);
    }
    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
        this.tag = 1;
        this.containerInfo = containerInfo;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = noTimeout;
        this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
        this.callbackPriority = 0;
        this.expirationTimes = createLaneMap(-1);
        this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = createLaneMap(0);
        this.hiddenUpdates = createLaneMap(null);
        this.identifierPrefix = identifierPrefix;
        this.onUncaughtError = onUncaughtError;
        this.onCaughtError = onCaughtError;
        this.onRecoverableError = onRecoverableError;
        this.pooledCache = null;
        this.pooledCacheLanes = 0;
        this.formState = formState;
        this.incompleteTransitions = new Map();
        this.passiveEffectDuration = this.effectDuration = -0;
        this.memoizedUpdaters = new Set();
        containerInfo = this.pendingUpdatersLaneMap = [];
        for(tag = 0; 31 > tag; tag++)containerInfo.push(new Set());
        this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
    }
    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {
        containerInfo = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState);
        tag = ConcurrentMode;
        !0 === isStrictMode && (tag |= StrictLegacyMode | StrictEffectsMode);
        isDevToolsPresent && (tag |= ProfileMode);
        isStrictMode = createFiber(3, null, null, tag);
        containerInfo.current = isStrictMode;
        isStrictMode.stateNode = containerInfo;
        tag = createCache();
        retainCache(tag);
        containerInfo.pooledCache = tag;
        retainCache(tag);
        isStrictMode.memoizedState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: tag
        };
        initializeUpdateQueue(isStrictMode);
        return containerInfo;
    }
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        parentComponent = emptyContextObject;
        return parentComponent;
    }
    function updateContainerSync(element, container, parentComponent, callback) {
        0 === container.tag && flushPassiveEffects();
        updateContainerImpl(container.current, 2, element, container, parentComponent, callback);
        return 2;
    }
    function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
        if (injectedHook && "function" === typeof injectedHook.onScheduleFiberRoot) try {
            injectedHook.onScheduleFiberRoot(rendererID, container, element);
        } catch (err) {
            hasLoggedError || (hasLoggedError = !0, console.error("React instrumentation encountered an error: %s", err));
        }
        null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markRenderScheduled && injectedProfilingHooks.markRenderScheduled(lane);
        parentComponent = getContextForSubtree(parentComponent);
        null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
        isRendering && null !== current && !didWarnAboutNestedUpdates && (didWarnAboutNestedUpdates = !0, console.error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown"));
        container = createUpdate(lane);
        container.payload = {
            element: element
        };
        callback = void 0 === callback ? null : callback;
        null !== callback && ("function" !== typeof callback && console.error("Expected the last optional `callback` argument to be a function. Instead received: %s.", callback), container.callback = callback);
        element = enqueueUpdate(rootFiber, container, lane);
        null !== element && (scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
    }
    function markRetryLaneImpl(fiber, retryLane) {
        fiber = fiber.memoizedState;
        if (null !== fiber && null !== fiber.dehydrated) {
            var a = fiber.retryLane;
            fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
        }
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
    }
    function attemptContinuousHydration(fiber) {
        if (13 === fiber.tag) {
            var root = enqueueConcurrentRenderForLane(fiber, 67108864);
            null !== root && scheduleUpdateOnFiber(root, fiber, 67108864);
            markRetryLaneIfNotHydrated(fiber, 67108864);
        }
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function getLaneLabelMap() {
        for(var map = new Map(), lane = 1, index = 0; 31 > index; index++){
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
        }
        return map;
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        try {
            ReactDOMSharedInternals.p = DiscreteEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        try {
            ReactDOMSharedInternals.p = ContinuousEventPriority, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (_enabled) {
            var blockedOn = findInstanceBlockingEvent(nativeEvent);
            if (null === blockedOn) dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), clearIfContinuousEvent(domEventName, nativeEvent);
            else if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) nativeEvent.stopPropagation();
            else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
                for(; null !== blockedOn;){
                    var fiber = getInstanceFromNode(blockedOn);
                    if (null !== fiber) switch(fiber.tag){
                        case 3:
                            fiber = fiber.stateNode;
                            if (fiber.current.memoizedState.isDehydrated) {
                                var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                                if (0 !== lanes) {
                                    var root = fiber;
                                    root.pendingLanes |= 2;
                                    for(root.entangledLanes |= 2; lanes;){
                                        var lane = 1 << 31 - clz32(lanes);
                                        root.entanglements[1] |= lane;
                                        lanes &= ~lane;
                                    }
                                    ensureRootIsScheduled(fiber);
                                    (executionContext & (RenderContext | CommitContext)) === NoContext && (workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS, flushSyncWorkAcrossRoots_impl(0, !1));
                                }
                            }
                            break;
                        case 13:
                            root = enqueueConcurrentRenderForLane(fiber, 2), null !== root && scheduleUpdateOnFiber(root, fiber, 2), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, 2);
                    }
                    fiber = findInstanceBlockingEvent(nativeEvent);
                    null === fiber && dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                    if (fiber === blockedOn) break;
                    blockedOn = fiber;
                }
                null !== blockedOn && nativeEvent.stopPropagation();
            } else dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
    }
    function findInstanceBlockingEvent(nativeEvent) {
        nativeEvent = getEventTarget(nativeEvent);
        return findInstanceBlockingTarget(nativeEvent);
    }
    function findInstanceBlockingTarget(targetNode) {
        return_targetInst = null;
        targetNode = getClosestInstanceFromNode(targetNode);
        if (null !== targetNode) {
            var nearestMounted = getNearestMountedFiber(targetNode);
            if (null === nearestMounted) targetNode = null;
            else {
                var tag = nearestMounted.tag;
                if (13 === tag) {
                    targetNode = getSuspenseInstanceFromFiber(nearestMounted);
                    if (null !== targetNode) return targetNode;
                    targetNode = null;
                } else if (3 === tag) {
                    if (nearestMounted.stateNode.current.memoizedState.isDehydrated) return 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
                    targetNode = null;
                } else nearestMounted !== targetNode && (targetNode = null);
            }
        }
        return_targetInst = targetNode;
        return null;
    }
    function getEventPriority(domEventName) {
        switch(domEventName){
            case "beforetoggle":
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "toggle":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
                return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
                return ContinuousEventPriority;
            case "message":
                switch(getCurrentPriorityLevel()){
                    case ImmediatePriority:
                        return DiscreteEventPriority;
                    case UserBlockingPriority:
                        return ContinuousEventPriority;
                    case NormalPriority$1:
                    case LowPriority:
                        return DefaultEventPriority;
                    case IdlePriority:
                        return IdleEventPriority;
                    default:
                        return DefaultEventPriority;
                }
            default:
                return DefaultEventPriority;
        }
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case "focusin":
            case "focusout":
                queuedFocus = null;
                break;
            case "dragenter":
            case "dragleave":
                queuedDrag = null;
                break;
            case "mouseover":
            case "mouseout":
                queuedMouse = null;
                break;
            case "pointerover":
            case "pointerout":
                queuedPointers.delete(nativeEvent.pointerId);
                break;
            case "gotpointercapture":
            case "lostpointercapture":
                queuedPointerCaptures.delete(nativeEvent.pointerId);
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent) return existingQueuedEvent = {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        }, null !== blockedOn && (blockedOn = getInstanceFromNode(blockedOn), null !== blockedOn && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        blockedOn = existingQueuedEvent.targetContainers;
        null !== targetContainer && -1 === blockedOn.indexOf(targetContainer) && blockedOn.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch(domEventName){
            case "focusin":
                return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), !0;
            case "dragenter":
                return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), !0;
            case "mouseover":
                return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), !0;
            case "pointerover":
                var pointerId = nativeEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent));
                return !0;
            case "gotpointercapture":
                return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)), !0;
        }
        return !1;
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (null !== targetInst) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (null !== nearestMounted) {
                if (targetInst = nearestMounted.tag, 13 === targetInst) {
                    if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), null !== targetInst) {
                        queuedTarget.blockedOn = targetInst;
                        runWithPriority(queuedTarget.priority, function() {
                            if (13 === nearestMounted.tag) {
                                var lane = requestUpdateLane(nearestMounted), root = enqueueConcurrentRenderForLane(nearestMounted, lane);
                                null !== root && scheduleUpdateOnFiber(root, nearestMounted, lane);
                                markRetryLaneIfNotHydrated(nearestMounted, lane);
                            }
                        });
                        return;
                    }
                } else if (3 === targetInst && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
                    queuedTarget.blockedOn = 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
                    return;
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (null !== queuedEvent.blockedOn) return !1;
        for(var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length;){
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
            if (null === nextBlockedOn) {
                nextBlockedOn = queuedEvent.nativeEvent;
                var nativeEventClone = new nextBlockedOn.constructor(nextBlockedOn.type, nextBlockedOn), event = nativeEventClone;
                null !== currentReplayingEvent && console.error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
                currentReplayingEvent = event;
                nextBlockedOn.target.dispatchEvent(nativeEventClone);
                null === currentReplayingEvent && console.error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
                currentReplayingEvent = null;
            } else return targetContainers = getInstanceFromNode(nextBlockedOn), null !== targetContainers && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, !1;
            targetContainers.shift();
        }
        return !0;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = !1;
        null !== queuedFocus && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
        null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
        null !== queuedMouse && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = !0, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents)));
    }
    function scheduleReplayQueueIfNeeded(formReplayingQueue) {
        lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, function() {
            lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
            for(var i = 0; i < formReplayingQueue.length; i += 3){
                var form = formReplayingQueue[i], submitterOrAction = formReplayingQueue[i + 1], formData = formReplayingQueue[i + 2];
                if ("function" !== typeof submitterOrAction) {
                    if (null === findInstanceBlockingTarget(submitterOrAction || form)) continue;
                    else break;
                }
                var formInst = getInstanceFromNode(form);
                null !== formInst && (formReplayingQueue.splice(i, 3), i -= 3, form = {
                    pending: !0,
                    data: formData,
                    method: form.method,
                    action: submitterOrAction
                }, Object.freeze(form), startHostTransition(formInst, form, submitterOrAction, formData));
            }
        }));
    }
    function retryIfBlockedOn(unblocked) {
        function unblock(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        }
        null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var i = 0; i < queuedExplicitHydrationTargets.length; i++){
            var queuedTarget = queuedExplicitHydrationTargets[i];
            queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
        }
        for(; 0 < queuedExplicitHydrationTargets.length && (i = queuedExplicitHydrationTargets[0], null === i.blockedOn);)attemptExplicitHydrationTarget(i), null === i.blockedOn && queuedExplicitHydrationTargets.shift();
        i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
        if (null != i) for(queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3){
            var form = i[queuedTarget], submitterOrAction = i[queuedTarget + 1], formProps = form[internalPropsKey] || null;
            if ("function" === typeof submitterOrAction) formProps || scheduleReplayQueueIfNeeded(i);
            else if (formProps) {
                var action = null;
                if (submitterOrAction && submitterOrAction.hasAttribute("formAction")) {
                    if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null) action = formProps.formAction;
                    else {
                        if (null !== findInstanceBlockingTarget(form)) continue;
                    }
                } else action = formProps.action;
                "function" === typeof action ? i[queuedTarget + 1] = action : (i.splice(queuedTarget, 3), queuedTarget -= 3);
                scheduleReplayQueueIfNeeded(i);
            }
        }
    }
    function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    function warnIfReactDOMContainerInDEV(container) {
        container[internalContainerInstanceKey] && (container._reactRootContainer ? console.error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.") : console.error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it."));
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var Scheduler = require("c31f9b99c1e288cf"), React = require("c4c4bc2113e5c77f"), ReactDOM = require("772d609564cfd8f6"), REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.tracing_marker");
    var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, assign = Object.assign, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = !0;
    var prefix, suffix, reentry = !1;
    var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
    var current = null, isRendering = !1, isArrayImpl = Array.isArray, ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, NotPending = Object.freeze({
        pending: !1,
        data: null,
        method: null,
        action: null
    }), valueStack = [];
    var fiberStack = [];
    var index$jscomp$0 = -1, contextStackCursor = createCursor(null), contextFiberStackCursor = createCursor(null), rootInstanceStackCursor = createCursor(null), hostTransitionProviderCursor = createCursor(null), hasOwnProperty = Object.prototype.hasOwnProperty, scheduleCallback$3 = Scheduler.unstable_scheduleCallback, cancelCallback$1 = Scheduler.unstable_cancelCallback, shouldYield = Scheduler.unstable_shouldYield, requestPaint = Scheduler.unstable_requestPaint, now$1 = Scheduler.unstable_now, getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, ImmediatePriority = Scheduler.unstable_ImmediatePriority, UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, NormalPriority$1 = Scheduler.unstable_NormalPriority, LowPriority = Scheduler.unstable_LowPriority, IdlePriority = Scheduler.unstable_IdlePriority, log$1 = Scheduler.log, unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue, rendererID = null, injectedHook = null, injectedProfilingHooks = null, hasLoggedError = !1, isDevToolsPresent = "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__, clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2, nextTransitionLane = 128, nextRetryLane = 4194304, DiscreteEventPriority = 2, ContinuousEventPriority = 8, DefaultEventPriority = 32, IdleEventPriority = 268435456, randomKey = Math.random().toString(36).slice(2), internalInstanceKey = "__reactFiber$" + randomKey, internalPropsKey = "__reactProps$" + randomKey, internalContainerInstanceKey = "__reactContainer$" + randomKey, internalEventHandlersKey = "__reactEvents$" + randomKey, internalEventHandlerListenersKey = "__reactListeners$" + randomKey, internalEventHandlesSetKey = "__reactHandles$" + randomKey, internalRootNodeResourcesKey = "__reactResources$" + randomKey, internalHoistableMarker = "__reactMarker$" + randomKey, allNativeEvents = new Set(), registrationNameDependencies = {}, possibleRegistrationNames = {}, canUseDOM = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), hasReadOnlyValue = {
        button: !0,
        checkbox: !0,
        image: !0,
        hidden: !0,
        radio: !0,
        reset: !0,
        submit: !0
    }, VALID_ATTRIBUTE_NAME_REGEX = RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), illegalAttributeNameCache = {}, validatedAttributeNameCache = {}, escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g, didWarnValueDefaultValue$1 = !1, didWarnCheckedDefaultChecked = !1, didWarnSelectedSetOnOption = !1, didWarnInvalidChild = !1, didWarnInvalidInnerHTML = !1;
    var didWarnValueDefaultValue = !1;
    var valuePropNames = [
        "value",
        "defaultValue"
    ], didWarnValDefaultVal = !1, needsEscaping = /["'&<>\n\t]|^\s|\s$/, specialTags = "address applet area article aside base basefont bgsound blockquote body br button caption center col colgroup dd details dir div dl dt embed fieldset figcaption figure footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html iframe img input isindex li link listing main marquee menu menuitem meta nav noembed noframes noscript object ol p param plaintext pre script section select source style summary table tbody td template textarea tfoot th thead title tr track ul wbr xmp".split(" "), inScopeTags = "applet caption html table td th marquee object template foreignObject desc title".split(" "), buttonScopeTags = inScopeTags.concat([
        "button"
    ]), impliedEndTags = "dd dt li option optgroup p rp rt".split(" "), emptyAncestorInfoDev = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null,
        containerTagInScope: null
    }, didWarn = {}, MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML", SVG_NAMESPACE = "http://www.w3.org/2000/svg", shorthandToLonghand = {
        animation: "animationDelay animationDirection animationDuration animationFillMode animationIterationCount animationName animationPlayState animationTimingFunction".split(" "),
        background: "backgroundAttachment backgroundClip backgroundColor backgroundImage backgroundOrigin backgroundPositionX backgroundPositionY backgroundRepeat backgroundSize".split(" "),
        backgroundPosition: [
            "backgroundPositionX",
            "backgroundPositionY"
        ],
        border: "borderBottomColor borderBottomStyle borderBottomWidth borderImageOutset borderImageRepeat borderImageSlice borderImageSource borderImageWidth borderLeftColor borderLeftStyle borderLeftWidth borderRightColor borderRightStyle borderRightWidth borderTopColor borderTopStyle borderTopWidth".split(" "),
        borderBlockEnd: [
            "borderBlockEndColor",
            "borderBlockEndStyle",
            "borderBlockEndWidth"
        ],
        borderBlockStart: [
            "borderBlockStartColor",
            "borderBlockStartStyle",
            "borderBlockStartWidth"
        ],
        borderBottom: [
            "borderBottomColor",
            "borderBottomStyle",
            "borderBottomWidth"
        ],
        borderColor: [
            "borderBottomColor",
            "borderLeftColor",
            "borderRightColor",
            "borderTopColor"
        ],
        borderImage: [
            "borderImageOutset",
            "borderImageRepeat",
            "borderImageSlice",
            "borderImageSource",
            "borderImageWidth"
        ],
        borderInlineEnd: [
            "borderInlineEndColor",
            "borderInlineEndStyle",
            "borderInlineEndWidth"
        ],
        borderInlineStart: [
            "borderInlineStartColor",
            "borderInlineStartStyle",
            "borderInlineStartWidth"
        ],
        borderLeft: [
            "borderLeftColor",
            "borderLeftStyle",
            "borderLeftWidth"
        ],
        borderRadius: [
            "borderBottomLeftRadius",
            "borderBottomRightRadius",
            "borderTopLeftRadius",
            "borderTopRightRadius"
        ],
        borderRight: [
            "borderRightColor",
            "borderRightStyle",
            "borderRightWidth"
        ],
        borderStyle: [
            "borderBottomStyle",
            "borderLeftStyle",
            "borderRightStyle",
            "borderTopStyle"
        ],
        borderTop: [
            "borderTopColor",
            "borderTopStyle",
            "borderTopWidth"
        ],
        borderWidth: [
            "borderBottomWidth",
            "borderLeftWidth",
            "borderRightWidth",
            "borderTopWidth"
        ],
        columnRule: [
            "columnRuleColor",
            "columnRuleStyle",
            "columnRuleWidth"
        ],
        columns: [
            "columnCount",
            "columnWidth"
        ],
        flex: [
            "flexBasis",
            "flexGrow",
            "flexShrink"
        ],
        flexFlow: [
            "flexDirection",
            "flexWrap"
        ],
        font: "fontFamily fontFeatureSettings fontKerning fontLanguageOverride fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition fontWeight lineHeight".split(" "),
        fontVariant: "fontVariantAlternates fontVariantCaps fontVariantEastAsian fontVariantLigatures fontVariantNumeric fontVariantPosition".split(" "),
        gap: [
            "columnGap",
            "rowGap"
        ],
        grid: "gridAutoColumns gridAutoFlow gridAutoRows gridTemplateAreas gridTemplateColumns gridTemplateRows".split(" "),
        gridArea: [
            "gridColumnEnd",
            "gridColumnStart",
            "gridRowEnd",
            "gridRowStart"
        ],
        gridColumn: [
            "gridColumnEnd",
            "gridColumnStart"
        ],
        gridColumnGap: [
            "columnGap"
        ],
        gridGap: [
            "columnGap",
            "rowGap"
        ],
        gridRow: [
            "gridRowEnd",
            "gridRowStart"
        ],
        gridRowGap: [
            "rowGap"
        ],
        gridTemplate: [
            "gridTemplateAreas",
            "gridTemplateColumns",
            "gridTemplateRows"
        ],
        listStyle: [
            "listStyleImage",
            "listStylePosition",
            "listStyleType"
        ],
        margin: [
            "marginBottom",
            "marginLeft",
            "marginRight",
            "marginTop"
        ],
        marker: [
            "markerEnd",
            "markerMid",
            "markerStart"
        ],
        mask: "maskClip maskComposite maskImage maskMode maskOrigin maskPositionX maskPositionY maskRepeat maskSize".split(" "),
        maskPosition: [
            "maskPositionX",
            "maskPositionY"
        ],
        outline: [
            "outlineColor",
            "outlineStyle",
            "outlineWidth"
        ],
        overflow: [
            "overflowX",
            "overflowY"
        ],
        padding: [
            "paddingBottom",
            "paddingLeft",
            "paddingRight",
            "paddingTop"
        ],
        placeContent: [
            "alignContent",
            "justifyContent"
        ],
        placeItems: [
            "alignItems",
            "justifyItems"
        ],
        placeSelf: [
            "alignSelf",
            "justifySelf"
        ],
        textDecoration: [
            "textDecorationColor",
            "textDecorationLine",
            "textDecorationStyle"
        ],
        textEmphasis: [
            "textEmphasisColor",
            "textEmphasisStyle"
        ],
        transition: [
            "transitionDelay",
            "transitionDuration",
            "transitionProperty",
            "transitionTimingFunction"
        ],
        wordWrap: [
            "overflowWrap"
        ]
    }, uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/, badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, unitlessNumbers = new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" ")), aliases = new Map([
        [
            "acceptCharset",
            "accept-charset"
        ],
        [
            "htmlFor",
            "for"
        ],
        [
            "httpEquiv",
            "http-equiv"
        ],
        [
            "crossOrigin",
            "crossorigin"
        ],
        [
            "accentHeight",
            "accent-height"
        ],
        [
            "alignmentBaseline",
            "alignment-baseline"
        ],
        [
            "arabicForm",
            "arabic-form"
        ],
        [
            "baselineShift",
            "baseline-shift"
        ],
        [
            "capHeight",
            "cap-height"
        ],
        [
            "clipPath",
            "clip-path"
        ],
        [
            "clipRule",
            "clip-rule"
        ],
        [
            "colorInterpolation",
            "color-interpolation"
        ],
        [
            "colorInterpolationFilters",
            "color-interpolation-filters"
        ],
        [
            "colorProfile",
            "color-profile"
        ],
        [
            "colorRendering",
            "color-rendering"
        ],
        [
            "dominantBaseline",
            "dominant-baseline"
        ],
        [
            "enableBackground",
            "enable-background"
        ],
        [
            "fillOpacity",
            "fill-opacity"
        ],
        [
            "fillRule",
            "fill-rule"
        ],
        [
            "floodColor",
            "flood-color"
        ],
        [
            "floodOpacity",
            "flood-opacity"
        ],
        [
            "fontFamily",
            "font-family"
        ],
        [
            "fontSize",
            "font-size"
        ],
        [
            "fontSizeAdjust",
            "font-size-adjust"
        ],
        [
            "fontStretch",
            "font-stretch"
        ],
        [
            "fontStyle",
            "font-style"
        ],
        [
            "fontVariant",
            "font-variant"
        ],
        [
            "fontWeight",
            "font-weight"
        ],
        [
            "glyphName",
            "glyph-name"
        ],
        [
            "glyphOrientationHorizontal",
            "glyph-orientation-horizontal"
        ],
        [
            "glyphOrientationVertical",
            "glyph-orientation-vertical"
        ],
        [
            "horizAdvX",
            "horiz-adv-x"
        ],
        [
            "horizOriginX",
            "horiz-origin-x"
        ],
        [
            "imageRendering",
            "image-rendering"
        ],
        [
            "letterSpacing",
            "letter-spacing"
        ],
        [
            "lightingColor",
            "lighting-color"
        ],
        [
            "markerEnd",
            "marker-end"
        ],
        [
            "markerMid",
            "marker-mid"
        ],
        [
            "markerStart",
            "marker-start"
        ],
        [
            "overlinePosition",
            "overline-position"
        ],
        [
            "overlineThickness",
            "overline-thickness"
        ],
        [
            "paintOrder",
            "paint-order"
        ],
        [
            "panose-1",
            "panose-1"
        ],
        [
            "pointerEvents",
            "pointer-events"
        ],
        [
            "renderingIntent",
            "rendering-intent"
        ],
        [
            "shapeRendering",
            "shape-rendering"
        ],
        [
            "stopColor",
            "stop-color"
        ],
        [
            "stopOpacity",
            "stop-opacity"
        ],
        [
            "strikethroughPosition",
            "strikethrough-position"
        ],
        [
            "strikethroughThickness",
            "strikethrough-thickness"
        ],
        [
            "strokeDasharray",
            "stroke-dasharray"
        ],
        [
            "strokeDashoffset",
            "stroke-dashoffset"
        ],
        [
            "strokeLinecap",
            "stroke-linecap"
        ],
        [
            "strokeLinejoin",
            "stroke-linejoin"
        ],
        [
            "strokeMiterlimit",
            "stroke-miterlimit"
        ],
        [
            "strokeOpacity",
            "stroke-opacity"
        ],
        [
            "strokeWidth",
            "stroke-width"
        ],
        [
            "textAnchor",
            "text-anchor"
        ],
        [
            "textDecoration",
            "text-decoration"
        ],
        [
            "textRendering",
            "text-rendering"
        ],
        [
            "transformOrigin",
            "transform-origin"
        ],
        [
            "underlinePosition",
            "underline-position"
        ],
        [
            "underlineThickness",
            "underline-thickness"
        ],
        [
            "unicodeBidi",
            "unicode-bidi"
        ],
        [
            "unicodeRange",
            "unicode-range"
        ],
        [
            "unitsPerEm",
            "units-per-em"
        ],
        [
            "vAlphabetic",
            "v-alphabetic"
        ],
        [
            "vHanging",
            "v-hanging"
        ],
        [
            "vIdeographic",
            "v-ideographic"
        ],
        [
            "vMathematical",
            "v-mathematical"
        ],
        [
            "vectorEffect",
            "vector-effect"
        ],
        [
            "vertAdvY",
            "vert-adv-y"
        ],
        [
            "vertOriginX",
            "vert-origin-x"
        ],
        [
            "vertOriginY",
            "vert-origin-y"
        ],
        [
            "wordSpacing",
            "word-spacing"
        ],
        [
            "writingMode",
            "writing-mode"
        ],
        [
            "xmlnsXlink",
            "xmlns:xlink"
        ],
        [
            "xHeight",
            "x-height"
        ]
    ]), possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        fetchpriority: "fetchPriority",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        inert: "inert",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        popover: "popover",
        popovertarget: "popoverTarget",
        popovertargetaction: "popoverTargetAction",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        transformorigin: "transformOrigin",
        "transform-origin": "transformOrigin",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
    }, ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
    }, warnedProperties$1 = {}, rARIA$1 = RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), rARIACamel$1 = RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), didWarnValueNull = !1, warnedProperties = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA = RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), rARIACamel = RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i, currentReplayingEvent = null, restoreTarget = null, restoreQueue = null, isInsideEventHandler = !1, passiveBrowserEventsSupported = !1;
    if (canUseDOM) try {
        var options$jscomp$0 = {};
        Object.defineProperty(options$jscomp$0, "passive", {
            get: function() {
                passiveBrowserEventsSupported = !0;
            }
        });
        window.addEventListener("test", options$jscomp$0, options$jscomp$0);
        window.removeEventListener("test", options$jscomp$0, options$jscomp$0);
    } catch (e) {
        passiveBrowserEventsSupported = !1;
    }
    var root = null, startText = null, fallbackText = null, EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    }, SyntheticEvent = createSyntheticEvent(EventInterface), UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
    }), SyntheticUIEvent = createSyntheticEvent(UIEventInterface), lastMovementX, lastMovementY, lastMouseEvent, MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
        },
        movementX: function(event) {
            if ("movementX" in event) return event.movementX;
            event !== lastMouseEvent && (lastMouseEvent && "mousemove" === event.type ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
            return lastMovementX;
        },
        movementY: function(event) {
            return "movementY" in event ? event.movementY : lastMovementY;
        }
    }), SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface), DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
    }), SyntheticDragEvent = createSyntheticEvent(DragEventInterface), FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
    }), SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface), AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    }), SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface), ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
    }), SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface), CompositionEventInterface = assign({}, EventInterface, {
        data: 0
    }), SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface), SyntheticInputEvent = SyntheticCompositionEvent, normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
    }, translateToKey = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
    }, modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
    }, KeyboardEventInterface = assign({}, UIEventInterface, {
        key: function(nativeEvent) {
            if (nativeEvent.key) {
                var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
                if ("Unidentified" !== key) return key;
            }
            return "keypress" === nativeEvent.type ? (nativeEvent = getEventCharCode(nativeEvent), 13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent)) : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
        },
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
            return "keypress" === event.type ? getEventCharCode(event) : 0;
        },
        keyCode: function(event) {
            return "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
        },
        which: function(event) {
            return "keypress" === event.type ? getEventCharCode(event) : "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
        }
    }), SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface), PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    }), SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface), TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    }), SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface), TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    }), SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface), WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
    }), SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface), ToggleEventInterface = assign({}, EventInterface, {
        newState: 0,
        oldState: 0
    }), SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface), END_KEYCODES = [
        9,
        13,
        27,
        32
    ], START_KEYCODE = 229, canUseCompositionEvent = canUseDOM && "CompositionEvent" in window, documentMode = null;
    canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode, useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode), SPACEBAR_CODE = 32, SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE), hasSpaceKeypress = !1, isComposing = !1, supportedInputTypes = {
        color: !0,
        date: !0,
        datetime: !0,
        "datetime-local": !0,
        email: !0,
        month: !0,
        number: !0,
        password: !0,
        range: !0,
        search: !0,
        tel: !0,
        text: !0,
        time: !0,
        url: !0,
        week: !0
    }, activeElement$1 = null, activeElementInst$1 = null, isInputEventSupported = !1;
    canUseDOM && (isInputEventSupported = isEventSupported("input") && (!document.documentMode || 9 < document.documentMode));
    var objectIs = "function" === typeof Object.is ? Object.is : is, skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode, activeElement = null, activeElementInst = null, lastSelection = null, mouseDown = !1, vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionrun: makePrefixMap("Transition", "TransitionRun"),
        transitionstart: makePrefixMap("Transition", "TransitionStart"),
        transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
    }, prefixedEventNames = {}, style = {};
    canUseDOM && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
    var ANIMATION_END = getVendorPrefixedEventName("animationend"), ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration"), ANIMATION_START = getVendorPrefixedEventName("animationstart"), TRANSITION_RUN = getVendorPrefixedEventName("transitionrun"), TRANSITION_START = getVendorPrefixedEventName("transitionstart"), TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel"), TRANSITION_END = getVendorPrefixedEventName("transitionend"), topLevelEventsToReactNames = new Map(), simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" "), OffscreenVisible = 1, OffscreenDetached = 2, OffscreenPassiveEffectsConnected = 4, concurrentQueues = [], concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0, emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var resolveFamily = null, failedBoundaries = null, NoMode = 0, ConcurrentMode = 1, ProfileMode = 2, StrictLegacyMode = 8, StrictEffectsMode = 16, NoStrictPassiveEffectsMode = 64, now = Scheduler.unstable_now, renderStartTime = -0, commitStartTime = -0, profilerStartTime = -1.1, profilerEffectDuration = -0, currentUpdateIsNested = !1, nestedUpdateScheduled = !1, ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function() {},
        flushPendingUnsafeLifecycleWarnings: function() {},
        recordLegacyContextWarning: function() {},
        flushLegacyContextWarning: function() {},
        discardPendingWarnings: function() {}
    }, pendingComponentWillMountWarnings = [], pendingUNSAFE_ComponentWillMountWarnings = [], pendingComponentWillReceivePropsWarnings = [], pendingUNSAFE_ComponentWillReceivePropsWarnings = [], pendingComponentWillUpdateWarnings = [], pendingUNSAFE_ComponentWillUpdateWarnings = [], didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        didWarnAboutUnsafeLifecycles.has(fiber.type) || ("function" === typeof instance.componentWillMount && !0 !== instance.componentWillMount.__suppressDeprecationWarning && pendingComponentWillMountWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillMount && pendingUNSAFE_ComponentWillMountWarnings.push(fiber), "function" === typeof instance.componentWillReceiveProps && !0 !== instance.componentWillReceiveProps.__suppressDeprecationWarning && pendingComponentWillReceivePropsWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillReceiveProps && pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber), "function" === typeof instance.componentWillUpdate && !0 !== instance.componentWillUpdate.__suppressDeprecationWarning && pendingComponentWillUpdateWarnings.push(fiber), fiber.mode & StrictLegacyMode && "function" === typeof instance.UNSAFE_componentWillUpdate && pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        var componentWillMountUniqueNames = new Set();
        0 < pendingComponentWillMountWarnings.length && (pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingComponentWillMountWarnings = []);
        var UNSAFE_componentWillMountUniqueNames = new Set();
        0 < pendingUNSAFE_ComponentWillMountWarnings.length && (pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingUNSAFE_ComponentWillMountWarnings = []);
        var componentWillReceivePropsUniqueNames = new Set();
        0 < pendingComponentWillReceivePropsWarnings.length && (pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingComponentWillReceivePropsWarnings = []);
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length && (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingUNSAFE_ComponentWillReceivePropsWarnings = []);
        var componentWillUpdateUniqueNames = new Set();
        0 < pendingComponentWillUpdateWarnings.length && (pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingComponentWillUpdateWarnings = []);
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        0 < pendingUNSAFE_ComponentWillUpdateWarnings.length && (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
        }), pendingUNSAFE_ComponentWillUpdateWarnings = []);
        if (0 < UNSAFE_componentWillMountUniqueNames.size) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            console.error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        0 < UNSAFE_componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames), console.error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s", sortedNames));
        0 < UNSAFE_componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(UNSAFE_componentWillUpdateUniqueNames), console.error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", sortedNames));
        0 < componentWillMountUniqueNames.size && (sortedNames = setToSortedString(componentWillMountUniqueNames), console.warn("componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", sortedNames));
        0 < componentWillReceivePropsUniqueNames.size && (sortedNames = setToSortedString(componentWillReceivePropsUniqueNames), console.warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", sortedNames));
        0 < componentWillUpdateUniqueNames.size && (sortedNames = setToSortedString(componentWillUpdateUniqueNames), console.warn("componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", sortedNames));
    };
    var pendingLegacyContextWarning = new Map(), didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = null;
        for(var node = fiber; null !== node;)node.mode & StrictLegacyMode && (strictRoot = node), node = node.return;
        null === strictRoot ? console.error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.") : !didWarnAboutLegacyContext.has(fiber.type) && (node = pendingLegacyContextWarning.get(strictRoot), null != fiber.type.contextTypes || null != fiber.type.childContextTypes || null !== instance && "function" === typeof instance.getChildContext) && (void 0 === node && (node = [], pendingLegacyContextWarning.set(strictRoot, node)), node.push(fiber));
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray) {
            if (0 !== fiberArray.length) {
                var firstFiber = fiberArray[0], uniqueNames = new Set();
                fiberArray.forEach(function(fiber) {
                    uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                    didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                runWithFiberInDEV(firstFiber, function() {
                    console.error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context", sortedNames);
                });
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    var CapturedStacks = new WeakMap(), forkStack = [], forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack = [], idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "", hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1, didSuspendOrErrorDEV = !1, hydrationDiffRootDEV = null, hydrationErrors = null, rootOrSingletonContext = !1, HydrationMismatchException = Error("Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."), SuspenseException = Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"), SuspenseyCommitException = Error("Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."), noopSuspenseyCommitThenable = {
        then: function() {
            console.error('Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.');
        }
    }, suspendedThenable = null, needsToResetSuspendedThenableDEV = !1, callComponent = {
        "react-stack-bottom-frame": function(Component, props, secondArg) {
            var wasRendering = isRendering;
            isRendering = !0;
            try {
                return Component(props, secondArg);
            } finally{
                isRendering = wasRendering;
            }
        }
    }, callComponentInDEV = callComponent["react-stack-bottom-frame"].bind(callComponent), callRender = {
        "react-stack-bottom-frame": function(instance) {
            var wasRendering = isRendering;
            isRendering = !0;
            try {
                return instance.render();
            } finally{
                isRendering = wasRendering;
            }
        }
    }, callRenderInDEV = callRender["react-stack-bottom-frame"].bind(callRender), callComponentDidMount = {
        "react-stack-bottom-frame": function(finishedWork, instance) {
            try {
                instance.componentDidMount();
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
        }
    }, callComponentDidMountInDEV = callComponentDidMount["react-stack-bottom-frame"].bind(callComponentDidMount), callComponentDidUpdate = {
        "react-stack-bottom-frame": function(finishedWork, instance, prevProps, prevState, snapshot) {
            try {
                instance.componentDidUpdate(prevProps, prevState, snapshot);
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
        }
    }, callComponentDidUpdateInDEV = callComponentDidUpdate["react-stack-bottom-frame"].bind(callComponentDidUpdate), callComponentDidCatch = {
        "react-stack-bottom-frame": function(instance, errorInfo) {
            var stack = errorInfo.stack;
            instance.componentDidCatch(errorInfo.value, {
                componentStack: null !== stack ? stack : ""
            });
        }
    }, callComponentDidCatchInDEV = callComponentDidCatch["react-stack-bottom-frame"].bind(callComponentDidCatch), callComponentWillUnmount = {
        "react-stack-bottom-frame": function(current, nearestMountedAncestor, instance) {
            try {
                instance.componentWillUnmount();
            } catch (error) {
                captureCommitPhaseError(current, nearestMountedAncestor, error);
            }
        }
    }, callComponentWillUnmountInDEV = callComponentWillUnmount["react-stack-bottom-frame"].bind(callComponentWillUnmount), callCreate = {
        "react-stack-bottom-frame": function(effect) {
            var create = effect.create;
            effect = effect.inst;
            create = create();
            return effect.destroy = create;
        }
    }, callCreateInDEV = callCreate["react-stack-bottom-frame"].bind(callCreate), callDestroy = {
        "react-stack-bottom-frame": function(current, nearestMountedAncestor, destroy) {
            try {
                destroy();
            } catch (error) {
                captureCommitPhaseError(current, nearestMountedAncestor, error);
            }
        }
    }, callDestroyInDEV = callDestroy["react-stack-bottom-frame"].bind(callDestroy), callLazyInit = {
        "react-stack-bottom-frame": function(lazy) {
            var init = lazy._init;
            return init(lazy._payload);
        }
    }, callLazyInitInDEV = callLazyInit["react-stack-bottom-frame"].bind(callLazyInit), thenableState$1 = null, thenableIndexCounter$1 = 0, currentDebugInfo = null, didWarnAboutMaps;
    var didWarnAboutGenerators = didWarnAboutMaps = !1;
    var ownerHasKeyUseWarning = {};
    var ownerHasFunctionTypeWarning = {};
    var ownerHasSymbolTypeWarning = {};
    warnForMissingKey = function(returnFiber, workInProgress, child) {
        if (null !== child && "object" === typeof child && child._store && (!child._store.validated && null == child.key || 2 === child._store.validated)) {
            if ("object" !== typeof child._store) throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            child._store.validated = 1;
            var componentName = getComponentNameFromFiber(returnFiber), componentKey = componentName || "null";
            if (!ownerHasKeyUseWarning[componentKey]) {
                ownerHasKeyUseWarning[componentKey] = !0;
                child = child._owner;
                returnFiber = returnFiber._debugOwner;
                var currentComponentErrorInfo = "";
                returnFiber && "number" === typeof returnFiber.tag && (componentKey = getComponentNameFromFiber(returnFiber)) && (currentComponentErrorInfo = "\n\nCheck the render method of `" + componentKey + "`.");
                currentComponentErrorInfo || componentName && (currentComponentErrorInfo = "\n\nCheck the top-level render call using <" + componentName + ">.");
                var childOwnerAppendix = "";
                null != child && returnFiber !== child && (componentName = null, "number" === typeof child.tag ? componentName = getComponentNameFromFiber(child) : "string" === typeof child.name && (componentName = child.name), componentName && (childOwnerAppendix = " It was passed a child from " + componentName + "."));
                runWithFiberInDEV(workInProgress, function() {
                    console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.', currentComponentErrorInfo, childOwnerAppendix);
                });
            }
        }
    };
    var reconcileChildFibers = createChildReconciler(!0), mountChildFibers = createChildReconciler(!1), currentTreeHiddenStackCursor = createCursor(null), prevEntangledRenderLanesCursor = createCursor(0), suspenseHandlerStackCursor = createCursor(null), shellBoundary = null, SubtreeSuspenseContextMask = 1, ForceSuspenseFallback = 2, suspenseStackCursor = createCursor(0), NoFlags = 0, HasEffect = 1, Insertion = 2, Layout = 4, Passive = 8, AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
        var listeners = [], signal = this.signal = {
            aborted: !1,
            addEventListener: function(type, listener) {
                listeners.push(listener);
            }
        };
        this.abort = function() {
            signal.aborted = !0;
            listeners.forEach(function(listener) {
                return listener();
            });
        };
    }, scheduleCallback$2 = Scheduler.unstable_scheduleCallback, NormalPriority = Scheduler.unstable_NormalPriority, CacheContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Consumer: null,
        Provider: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0,
        _currentRenderer: null,
        _currentRenderer2: null
    }, currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null, prevOnStartTransitionFinish = ReactSharedInternals.S;
    ReactSharedInternals.S = function(transition, returnValue) {
        "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
        null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
    };
    var resumedCache = createCursor(null), didWarnUncachedGetSnapshot;
    var didWarnAboutMismatchedHooksForComponent = new Set();
    var didWarnAboutUseWrappedInTryCatch = new Set();
    var didWarnAboutAsyncClientComponent = new Set();
    var didWarnAboutUseFormState = new Set();
    var renderLanes = 0, currentlyRenderingFiber$1 = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = !1, didScheduleRenderPhaseUpdateDuringThisPass = !1, shouldDoubleInvokeUserFnsInHooksDEV = !1, localIdCounter = 0, thenableIndexCounter = 0, thenableState = null, globalClientIdCounter = 0, RE_RENDER_LIMIT = 25, currentHookNameInDev = null, hookTypesDev = null, hookTypesUpdateIndexDev = -1, ignorePreviousDependencies = !1;
    var createFunctionComponentUpdateQueue = function() {
        return {
            lastEffect: null,
            events: null,
            stores: null,
            memoCache: null
        };
    };
    var ContextOnlyDispatcher = {
        readContext: readContext,
        use: use,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError
    };
    ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
    ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
    ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
    ContextOnlyDispatcher.useFormState = throwInvalidHookError;
    ContextOnlyDispatcher.useActionState = throwInvalidHookError;
    ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
    var HooksDispatcherOnMountInDEV = null, HooksDispatcherOnMountWithHookTypesInDEV = null, HooksDispatcherOnUpdateInDEV = null, HooksDispatcherOnRerenderInDEV = null, InvalidNestedHooksDispatcherOnMountInDEV = null, InvalidNestedHooksDispatcherOnUpdateInDEV = null, InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        use: use,
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            mountEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value, initialValue);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
        },
        useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            mountHookTypesDev();
            return mountRefresh();
        }
    };
    HooksDispatcherOnMountInDEV.useMemoCache = useMemoCache;
    HooksDispatcherOnMountInDEV.useHostTransitionStatus = useHostTransitionStatus;
    HooksDispatcherOnMountInDEV.useFormState = function(action, initialState) {
        currentHookNameInDev = "useFormState";
        mountHookTypesDev();
        warnOnUseFormStateInDev();
        return mountActionState(action, initialState);
    };
    HooksDispatcherOnMountInDEV.useActionState = function(action, initialState) {
        currentHookNameInDev = "useActionState";
        mountHookTypesDev();
        return mountActionState(action, initialState);
    };
    HooksDispatcherOnMountInDEV.useOptimistic = function(passthrough) {
        currentHookNameInDev = "useOptimistic";
        mountHookTypesDev();
        return mountOptimistic(passthrough);
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        use: use,
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            mountEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value, initialValue);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
        },
        useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return mountRefresh();
        }
    };
    HooksDispatcherOnMountWithHookTypesInDEV.useMemoCache = useMemoCache;
    HooksDispatcherOnMountWithHookTypesInDEV.useHostTransitionStatus = useHostTransitionStatus;
    HooksDispatcherOnMountWithHookTypesInDEV.useFormState = function(action, initialState) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return mountActionState(action, initialState);
    };
    HooksDispatcherOnMountWithHookTypesInDEV.useActionState = function(action, initialState) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return mountActionState(action, initialState);
    };
    HooksDispatcherOnMountWithHookTypesInDEV.useOptimistic = function(passthrough) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return mountOptimistic(passthrough);
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        use: use,
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useRef: function() {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(basicStateReducer);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value, initialValue);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        },
        useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        }
    };
    HooksDispatcherOnUpdateInDEV.useMemoCache = useMemoCache;
    HooksDispatcherOnUpdateInDEV.useHostTransitionStatus = useHostTransitionStatus;
    HooksDispatcherOnUpdateInDEV.useFormState = function(action) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return updateActionState(action);
    };
    HooksDispatcherOnUpdateInDEV.useActionState = function(action) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return updateActionState(action);
    };
    HooksDispatcherOnUpdateInDEV.useOptimistic = function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return updateOptimistic(passthrough, reducer);
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        use: use,
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useRef: function() {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(basicStateReducer);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value, initialValue);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        },
        useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        }
    };
    HooksDispatcherOnRerenderInDEV.useMemoCache = useMemoCache;
    HooksDispatcherOnRerenderInDEV.useHostTransitionStatus = useHostTransitionStatus;
    HooksDispatcherOnRerenderInDEV.useFormState = function(action) {
        currentHookNameInDev = "useFormState";
        updateHookTypesDev();
        warnOnUseFormStateInDev();
        return rerenderActionState(action);
    };
    HooksDispatcherOnRerenderInDEV.useActionState = function(action) {
        currentHookNameInDev = "useActionState";
        updateHookTypesDev();
        return rerenderActionState(action);
    };
    HooksDispatcherOnRerenderInDEV.useOptimistic = function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        updateHookTypesDev();
        return rerenderOptimistic(passthrough, reducer);
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            mountEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value, initialValue);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
        },
        useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            mountHookTypesDev();
            return mountRefresh();
        },
        useMemoCache: function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
        }
    };
    InvalidNestedHooksDispatcherOnMountInDEV.useHostTransitionStatus = useHostTransitionStatus;
    InvalidNestedHooksDispatcherOnMountInDEV.useFormState = function(action, initialState) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountActionState(action, initialState);
    };
    InvalidNestedHooksDispatcherOnMountInDEV.useActionState = function(action, initialState) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountActionState(action, initialState);
    };
    InvalidNestedHooksDispatcherOnMountInDEV.useOptimistic = function(passthrough) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        mountHookTypesDev();
        return mountOptimistic(passthrough);
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useRef: function() {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(basicStateReducer);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value, initialValue);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        },
        useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        },
        useMemoCache: function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
        }
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV.useHostTransitionStatus = useHostTransitionStatus;
    InvalidNestedHooksDispatcherOnUpdateInDEV.useFormState = function(action) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateActionState(action);
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV.useActionState = function(action) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateActionState(action);
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV.useOptimistic = function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return updateOptimistic(passthrough, reducer);
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        use: function(usable) {
            warnInvalidHookAccess();
            return use(usable);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            updateEffectImpl(2048, Passive, create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Insertion, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffectImpl(4, Layout, create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useRef: function() {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        },
        useState: function() {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(basicStateReducer);
            } finally{
                ReactSharedInternals.H = prevDispatcher;
            }
        },
        useDebugValue: function() {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
        },
        useDeferredValue: function(value, initialValue) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value, initialValue);
        },
        useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        },
        useCacheRefresh: function() {
            currentHookNameInDev = "useCacheRefresh";
            updateHookTypesDev();
            return updateWorkInProgressHook().memoizedState;
        },
        useMemoCache: function(size) {
            warnInvalidHookAccess();
            return useMemoCache(size);
        }
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV.useHostTransitionStatus = useHostTransitionStatus;
    InvalidNestedHooksDispatcherOnRerenderInDEV.useFormState = function(action) {
        currentHookNameInDev = "useFormState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderActionState(action);
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV.useActionState = function(action) {
        currentHookNameInDev = "useActionState";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderActionState(action);
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV.useOptimistic = function(passthrough, reducer) {
        currentHookNameInDev = "useOptimistic";
        warnInvalidHookAccess();
        updateHookTypesDev();
        return rerenderOptimistic(passthrough, reducer);
    };
    var fakeInternalInstance = {};
    var didWarnAboutStateAssignmentForComponent = new Set();
    var didWarnAboutUninitializedState = new Set();
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    var didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    var didWarnAboutDirectlyAssigningPropsToState = new Set();
    var didWarnAboutUndefinedDerivedState = new Set();
    var didWarnAboutContextTypes$1 = new Set();
    var didWarnAboutChildContextTypes = new Set();
    var didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    Object.freeze(fakeInternalInstance);
    var classComponentUpdater = {
        isMounted: function(component) {
            var owner = current;
            if (null !== owner && isRendering && 1 === owner.tag) {
                var instance = owner.stateNode;
                instance._warnedAboutRefsInRender || console.error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(owner) || "A component");
                instance._warnedAboutRefsInRender = !0;
            }
            return (component = component._reactInternals) ? getNearestMountedFiber(component) === component : !1;
        },
        enqueueSetState: function(inst, payload, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.payload = payload;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            payload = enqueueUpdate(inst, update, lane);
            null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
            markStateUpdateScheduled(inst, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.tag = ReplaceState;
            update.payload = payload;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            payload = enqueueUpdate(inst, update, lane);
            null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
            markStateUpdateScheduled(inst, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
            inst = inst._reactInternals;
            var lane = requestUpdateLane(inst), update = createUpdate(lane);
            update.tag = ForceUpdate;
            void 0 !== callback && null !== callback && (warnOnInvalidCallback(callback), update.callback = callback);
            callback = enqueueUpdate(inst, update, lane);
            null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
            null !== injectedProfilingHooks && "function" === typeof injectedProfilingHooks.markForceUpdateScheduled && injectedProfilingHooks.markForceUpdateScheduled(inst, lane);
        }
    }, reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
            var event = new window.ErrorEvent("error", {
                bubbles: !0,
                cancelable: !0,
                message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
                error: error
            });
            if (!window.dispatchEvent(event)) return;
        } else if ("object" === typeof process && "function" === typeof process.emit) {
            process.emit("uncaughtException", error);
            return;
        }
        console.error(error);
    }, componentName = null, errorBoundaryName = null, SelectiveHydrationException = Error("This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."), didReceiveUpdate = !1;
    var didWarnAboutBadClass = {};
    var didWarnAboutContextTypeOnFunctionComponent = {};
    var didWarnAboutContextTypes = {};
    var didWarnAboutGetDerivedStateOnFunctionComponent = {};
    var didWarnAboutReassigningProps = !1;
    var didWarnAboutRevealOrder = {};
    var didWarnAboutTailOptions = {};
    var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: 0
    }, hasWarnedAboutUsingNoValuePropOnContextProvider = !1, valueCursor = createCursor(null);
    var rendererCursorDEV = createCursor(null);
    var rendererSigil = {};
    var currentlyRenderingFiber = null, lastContextDependency = null, isDisallowedContextReadInDEV = !1, UpdateState = 0, ReplaceState = 1, ForceUpdate = 2, CaptureUpdate = 3, hasForceUpdate = !1;
    var didWarnUpdateInsideUpdate = !1;
    var currentlyProcessingQueue = null;
    var didReadFromEntangledAsyncAction = !1, didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var offscreenSubtreeIsHidden = !1, offscreenSubtreeWasHidden = !1, needsFormReset = !1, PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set, nextEffect = null, inProgressLanes = null, inProgressRoot = null, shouldFireAfterActiveInstanceBlur = !1, hostParent = null, hostParentIsContainer = !1, currentHoistableRoot = null, suspenseyCommitFlag = 8192;
    var hasBadMapPolyfill = !1;
    try {
        var nonExtensibleObject = Object.preventExtensions({});
        new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    } catch (e$7) {
        hasBadMapPolyfill = !0;
    }
    var DefaultAsyncDispatcher = {
        getCacheForType: function(resourceType) {
            var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
            void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
            return cacheForType;
        },
        getOwner: function() {
            return current;
        }
    };
    if ("function" === typeof Symbol && Symbol.for) {
        var symbolFor = Symbol.for;
        symbolFor("selector.component");
        symbolFor("selector.has_pseudo_class");
        symbolFor("selector.role");
        symbolFor("selector.test_id");
        symbolFor("selector.text");
    }
    var commitHooks = [], PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map, NoContext = 0, RenderContext = 2, CommitContext = 4, RootInProgress = 0, RootFatalErrored = 1, RootErrored = 2, RootSuspended = 3, RootSuspendedWithDelay = 4, RootCompleted = 5, RootDidNotComplete = 6, executionContext = NoContext, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, NotSuspended = 0, SuspendedOnError = 1, SuspendedOnData = 2, SuspendedOnImmediate = 3, SuspendedOnInstance = 4, SuspendedOnInstanceAndReadyToContinue = 5, SuspendedOnDeprecatedThrowPromise = 6, SuspendedAndReadyToContinue = 7, SuspendedOnHydration = 8, workInProgressSuspendedReason = NotSuspended, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = !1, workInProgressRootIsPrerendering = !1, workInProgressRootDidAttachPingListener = !1, entangledRenderLanes = 0, workInProgressRootExitStatus = RootInProgress, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = !1, globalMostRecentFallbackTime = 0, FALLBACK_THROTTLE_MS = 300, workInProgressRootRenderTargetTime = Infinity, RENDER_TIMEOUT_MS = 500, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, rootDoesHavePassiveEffects = !1, rootWithPendingPassiveEffects = null, pendingPassiveEffectsLanes = 0, pendingPassiveEffectsRemainingLanes = 0, pendingPassiveTransitions = null, NESTED_UPDATE_LIMIT = 50, nestedUpdateCount = 0, rootWithNestedUpdates = null, isFlushingPassiveEffects = !1, didScheduleUpdateDuringPassiveEffects = !1, NESTED_PASSIVE_UPDATE_LIMIT = 50, nestedPassiveUpdateCount = 0, rootWithPassiveNestedUpdates = null, isRunningInsertionEffect = !1, IMMEDIATE_COMMIT = 0, SUSPENDED_COMMIT = 1, THROTTLED_COMMIT = 2, didWarnStateUpdateForNotYetMountedComponent = null, didWarnAboutUpdateInRender = !1;
    var didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    var fakeActCallbackNode$1 = {}, firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = !1, didScheduleMicrotask_act = !1, mightHavePendingSyncWork = !1, isFlushingWork = !1, currentEventTransitionLane = 0, fakeActCallbackNode = {};
    (function() {
        for(var i = 0; i < simpleEventPluginEvents.length; i++){
            var eventName = simpleEventPluginEvents[i], domEventName = eventName.toLowerCase();
            eventName = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + eventName);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
        registerSimpleEvent(TRANSITION_START, "onTransitionStart");
        registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    })();
    registerDirectEvent("onMouseEnter", [
        "mouseout",
        "mouseover"
    ]);
    registerDirectEvent("onMouseLeave", [
        "mouseout",
        "mouseover"
    ]);
    registerDirectEvent("onPointerEnter", [
        "pointerout",
        "pointerover"
    ]);
    registerDirectEvent("onPointerLeave", [
        "pointerout",
        "pointerover"
    ]);
    registerTwoPhaseEvent("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    registerTwoPhaseEvent("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    registerTwoPhaseEvent("onBeforeInput", [
        "compositionend",
        "keypress",
        "textInput",
        "paste"
    ]);
    registerTwoPhaseEvent("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    registerTwoPhaseEvent("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    registerTwoPhaseEvent("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), nonDelegatedEvents = new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes)), listeningMarker = "_reactListening" + Math.random().toString(36).slice(2), didWarnControlledToUncontrolled = !1, didWarnUncontrolledToControlled = !1, didWarnFormActionType = !1, didWarnFormActionName = !1, didWarnFormActionTarget = !1, didWarnFormActionMethod = !1, didWarnPopoverTargetObject = !1;
    var didWarnForNewBooleanPropsWithEmptyValue = {};
    var canDiffStyleForHydrationWarning = !0;
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g, NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g, xlinkNamespace = "http://www.w3.org/1999/xlink", xmlNamespace = "http://www.w3.org/XML/1998/namespace", EXPECTED_FORM_ACTION_URL = "javascript:throw new Error('React form unexpectedly submitted.')", SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning", SUSPENSE_START_DATA = "$", SUSPENSE_END_DATA = "/$", SUSPENSE_PENDING_START_DATA = "$?", SUSPENSE_FALLBACK_START_DATA = "$!", FORM_STATE_IS_MATCHING = "F!", FORM_STATE_IS_NOT_MATCHING = "F", STYLE = "style", HostContextNamespaceNone = 0, HostContextNamespaceSvg = 1, HostContextNamespaceMath = 2, eventsEnabled = null, selectionInformation = null, warnedUnknownTags = {
        dialog: !0,
        webview: !0
    }, currentPopstateTransitionEvent = null, scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0, cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0, noTimeout = -1, localPromise = "function" === typeof Promise ? Promise : void 0, scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof localPromise ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout, NotLoaded = 0, Loaded = 1, Errored = 2, Settled = 3, Inserted = 4, preloadPropsMap = new Map(), preconnectsSet = new Set(), previousDispatcher = ReactDOMSharedInternals.d;
    ReactDOMSharedInternals.d = {
        f: function() {
            var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
            return previousWasRendering || wasRendering;
        },
        r: function(form) {
            var formInst = getInstanceFromNode(form);
            null !== formInst && 5 === formInst.tag && "form" === formInst.type ? requestFormReset$1(formInst) : previousDispatcher.r(form);
        },
        D: function(href) {
            previousDispatcher.D(href);
            preconnectAs("dns-prefetch", href, null);
        },
        C: function(href, crossOrigin) {
            previousDispatcher.C(href, crossOrigin);
            preconnectAs("preconnect", href, crossOrigin);
        },
        L: function(href, as, options) {
            previousDispatcher.L(href, as, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href && as) {
                var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"]';
                "image" === as ? options && options.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSrcSet) + '"]', "string" === typeof options.imageSizes && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSizes) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
                var key = preloadSelector;
                switch(as){
                    case "style":
                        key = getStyleKey(href);
                        break;
                    case "script":
                        key = getScriptKey(href);
                }
                preloadPropsMap.has(key) || (href = assign({
                    rel: "preload",
                    href: "image" === as && options && options.imageSrcSet ? void 0 : href,
                    as: as
                }, options), preloadPropsMap.set(key, href), null !== ownerDocument.querySelector(preloadSelector) || "style" === as && ownerDocument.querySelector(getStylesheetSelectorFromKey(key)) || "script" === as && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as = ownerDocument.createElement("link"), setInitialProperties(as, "link", href), markNodeAsHoistable(as), ownerDocument.head.appendChild(as)));
            }
        },
        m: function(href, options) {
            previousDispatcher.m(href, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href) {
                var as = options && "string" === typeof options.as ? options.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
                switch(as){
                    case "audioworklet":
                    case "paintworklet":
                    case "serviceworker":
                    case "sharedworker":
                    case "worker":
                    case "script":
                        key = getScriptKey(href);
                }
                if (!preloadPropsMap.has(key) && (href = assign({
                    rel: "modulepreload",
                    href: href
                }, options), preloadPropsMap.set(key, href), null === ownerDocument.querySelector(preloadSelector))) {
                    switch(as){
                        case "audioworklet":
                        case "paintworklet":
                        case "serviceworker":
                        case "sharedworker":
                        case "worker":
                        case "script":
                            if (ownerDocument.querySelector(getScriptSelectorFromKey(key))) return;
                    }
                    as = ownerDocument.createElement("link");
                    setInitialProperties(as, "link", href);
                    markNodeAsHoistable(as);
                    ownerDocument.head.appendChild(as);
                }
            }
        },
        X: function(src, options) {
            previousDispatcher.X(src, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && src) {
                var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
                resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign({
                    src: src,
                    async: !0
                }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
                    type: "script",
                    instance: resource,
                    count: 1,
                    state: null
                }, scripts.set(key, resource));
            }
        },
        S: function(href, precedence, options) {
            previousDispatcher.S(href, precedence, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && href) {
                var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
                precedence = precedence || "default";
                var resource = styles.get(key);
                if (!resource) {
                    var state = {
                        loading: NotLoaded,
                        preload: null
                    };
                    if (resource = ownerDocument.querySelector(getStylesheetSelectorFromKey(key))) state.loading = Loaded | Inserted;
                    else {
                        href = assign({
                            rel: "stylesheet",
                            href: href,
                            "data-precedence": precedence
                        }, options);
                        (options = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options);
                        var link = resource = ownerDocument.createElement("link");
                        markNodeAsHoistable(link);
                        setInitialProperties(link, "link", href);
                        link._p = new Promise(function(resolve, reject) {
                            link.onload = resolve;
                            link.onerror = reject;
                        });
                        link.addEventListener("load", function() {
                            state.loading |= Loaded;
                        });
                        link.addEventListener("error", function() {
                            state.loading |= Errored;
                        });
                        state.loading |= Inserted;
                        insertStylesheet(resource, precedence, ownerDocument);
                    }
                    resource = {
                        type: "stylesheet",
                        instance: resource,
                        count: 1,
                        state: state
                    };
                    styles.set(key, resource);
                }
            }
        },
        M: function(src, options) {
            previousDispatcher.M(src, options);
            var ownerDocument = globalDocument;
            if (ownerDocument && src) {
                var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
                resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign({
                    src: src,
                    async: !0,
                    type: "module"
                }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
                    type: "script",
                    instance: resource,
                    count: 1,
                    state: null
                }, scripts.set(key, resource));
            }
        }
    };
    var globalDocument = "undefined" === typeof document ? null : document, tagCaches = null, suspendedState = null, LAST_PRECEDENCE = null, precedencesByRoot = null, NotPendingTransition = NotPending, HostTransitionContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Provider: null,
        Consumer: null,
        _currentValue: NotPendingTransition,
        _currentValue2: NotPendingTransition,
        _threadCount: 0
    }, badgeFormat = "%c%s%c ", badgeStyle = "background: #e6e6e6;background: light-dark(rgba(0,0,0,0.1), rgba(255,255,255,0.25));color: #000000;color: light-dark(#000000, #ffffff);border-radius: 2px", resetStyle = "", pad = " ", bind = Function.prototype.bind;
    var didWarnAboutNestedUpdates = !1;
    var overrideHookState = null, overrideHookStateDeletePath = null, overrideHookStateRenamePath = null, overrideProps = null, overridePropsDeletePath = null, overridePropsRenamePath = null, scheduleUpdate = null, setErrorHandler = null, setSuspenseHandler = null;
    overrideHookState = function(fiber, id, path, value) {
        id = findHook(fiber, id);
        null !== id && (path = copyWithSetImpl(id.memoizedState, path, 0, value), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), null !== path && scheduleUpdateOnFiber(path, fiber, 2));
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        id = findHook(fiber, id);
        null !== id && (path = copyWithDeleteImpl(id.memoizedState, path, 0), id.memoizedState = path, id.baseState = path, fiber.memoizedProps = assign({}, fiber.memoizedProps), path = enqueueConcurrentRenderForLane(fiber, 2), null !== path && scheduleUpdateOnFiber(path, fiber, 2));
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        id = findHook(fiber, id);
        null !== id && (oldPath = copyWithRename(id.memoizedState, oldPath, newPath), id.memoizedState = oldPath, id.baseState = oldPath, fiber.memoizedProps = assign({}, fiber.memoizedProps), oldPath = enqueueConcurrentRenderForLane(fiber, 2), null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2));
    };
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
        fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
        path = enqueueConcurrentRenderForLane(fiber, 2);
        null !== path && scheduleUpdateOnFiber(path, fiber, 2);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
        fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
        path = enqueueConcurrentRenderForLane(fiber, 2);
        null !== path && scheduleUpdateOnFiber(path, fiber, 2);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
        oldPath = enqueueConcurrentRenderForLane(fiber, 2);
        null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2);
    };
    scheduleUpdate = function(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, 2);
        null !== root && scheduleUpdateOnFiber(root, fiber, 2);
    };
    setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    var _enabled = !0, return_targetInst = null, hasScheduledReplayAttempt = !1, queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers = new Map(), queuedPointerCaptures = new Map(), queuedExplicitHydrationTargets = [], discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" "), lastScheduledReplayQueue = null;
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children, JSCompiler_OptimizeArgumentsArray_p2) {
        var root = this._internalRoot;
        if (null === root) throw Error("Cannot update an unmounted root.");
        "function" === typeof JSCompiler_OptimizeArgumentsArray_p2 ? console.error("does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().") : isValidContainer(JSCompiler_OptimizeArgumentsArray_p2) ? console.error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.") : "undefined" !== typeof JSCompiler_OptimizeArgumentsArray_p2 && console.error("You passed a second argument to root.render(...) but it only accepts one argument.");
        JSCompiler_OptimizeArgumentsArray_p2 = root.current;
        var lane = requestUpdateLane(JSCompiler_OptimizeArgumentsArray_p2);
        updateContainerImpl(JSCompiler_OptimizeArgumentsArray_p2, lane, children, root, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function(JSCompiler_OptimizeArgumentsArray_p3) {
        "function" === typeof JSCompiler_OptimizeArgumentsArray_p3 && console.error("does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        JSCompiler_OptimizeArgumentsArray_p3 = this._internalRoot;
        if (null !== JSCompiler_OptimizeArgumentsArray_p3) {
            this._internalRoot = null;
            var container = JSCompiler_OptimizeArgumentsArray_p3.containerInfo;
            (executionContext & (RenderContext | CommitContext)) !== NoContext && console.error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            updateContainerSync(null, JSCompiler_OptimizeArgumentsArray_p3, null, null);
            flushSyncWork$1();
            container[internalContainerInstanceKey] = null;
        }
    };
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
        if (target) {
            var updatePriority = resolveUpdatePriority();
            target = {
                blockedOn: null,
                target: target,
                priority: updatePriority
            };
            for(var i = 0; i < queuedExplicitHydrationTargets.length && 0 !== updatePriority && updatePriority < queuedExplicitHydrationTargets[i].priority; i++);
            queuedExplicitHydrationTargets.splice(i, 0, target);
            0 === i && attemptExplicitHydrationTarget(target);
        }
    };
    (function() {
        var isomorphicReactPackageVersion = React.version;
        if ("19.0.0" !== isomorphicReactPackageVersion) throw Error('Incompatible React versions: The "react" and "react-dom" packages must have the exact same version. Instead got:\n  - react:      ' + (isomorphicReactPackageVersion + "\n  - react-dom:  19.0.0\nLearn more: https://react.dev/warnings/version-mismatch"));
    })();
    "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://react.dev/link/react-polyfills");
    ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
        var fiber = componentOrElement._reactInternals;
        if (void 0 === fiber) {
            if ("function" === typeof componentOrElement.render) throw Error("Unable to find node on an unmounted component.");
            componentOrElement = Object.keys(componentOrElement).join(",");
            throw Error("Argument appears to not be a ReactComponent. Keys: " + componentOrElement);
        }
        componentOrElement = findCurrentFiberUsingSlowPath(fiber);
        componentOrElement = null !== componentOrElement ? findCurrentHostFiberImpl(componentOrElement) : null;
        componentOrElement = null === componentOrElement ? null : componentOrElement.stateNode;
        return componentOrElement;
    };
    if (!function() {
        var internals = {
            bundleType: 1,
            version: "19.0.0",
            rendererPackageName: "react-dom",
            currentDispatcherRef: ReactSharedInternals,
            findFiberByHostInstance: getClosestInstanceFromNode,
            reconcilerVersion: "19.0.0"
        };
        internals.overrideHookState = overrideHookState;
        internals.overrideHookStateDeletePath = overrideHookStateDeletePath;
        internals.overrideHookStateRenamePath = overrideHookStateRenamePath;
        internals.overrideProps = overrideProps;
        internals.overridePropsDeletePath = overridePropsDeletePath;
        internals.overridePropsRenamePath = overridePropsRenamePath;
        internals.scheduleUpdate = scheduleUpdate;
        internals.setErrorHandler = setErrorHandler;
        internals.setSuspenseHandler = setSuspenseHandler;
        internals.scheduleRefresh = scheduleRefresh;
        internals.scheduleRoot = scheduleRoot;
        internals.setRefreshHandler = setRefreshHandler;
        internals.getCurrentFiber = getCurrentFiberForDevTools;
        internals.getLaneLabelMap = getLaneLabelMap;
        internals.injectProfilingHooks = injectProfilingHooks;
        return injectInternals(internals);
    }() && canUseDOM && window.top === window.self && (-1 < navigator.userAgent.indexOf("Chrome") && -1 === navigator.userAgent.indexOf("Edge") || -1 < navigator.userAgent.indexOf("Firefox"))) {
        var protocol = window.location.protocol;
        /^(https?|file):$/.test(protocol) && console.info("%cDownload the React DevTools for a better development experience: https://react.dev/link/react-devtools" + ("file:" === protocol ? "\nYou might need to use a local HTTP server (instead of file://): https://react.dev/link/react-devtools-faq" : ""), "font-weight:bold");
    }
    exports.createRoot = function(container, options) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = !1, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
        null !== options && void 0 !== options && (options.hydrate ? console.warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.") : "object" === typeof options && null !== options && options.$$typeof === REACT_ELEMENT_TYPE && console.error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);"), !0 === options.unstable_strictMode && (isStrictMode = !0), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError), void 0 !== options.unstable_transitionCallbacks && (transitionCallbacks = options.unstable_transitionCallbacks));
        options = createFiberRoot(container, 1, !1, null, null, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, null);
        container[internalContainerInstanceKey] = options.current;
        listenToAllSupportedEvents(8 === container.nodeType ? container.parentNode : container);
        return new ReactDOMRoot(options);
    };
    exports.hydrateRoot = function(container, initialChildren, options) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        warnIfReactDOMContainerInDEV(container);
        void 0 === initialChildren && console.error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        var isStrictMode = !1, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null, formState = null;
        null !== options && void 0 !== options && (!0 === options.unstable_strictMode && (isStrictMode = !0), void 0 !== options.identifierPrefix && (identifierPrefix = options.identifierPrefix), void 0 !== options.onUncaughtError && (onUncaughtError = options.onUncaughtError), void 0 !== options.onCaughtError && (onCaughtError = options.onCaughtError), void 0 !== options.onRecoverableError && (onRecoverableError = options.onRecoverableError), void 0 !== options.unstable_transitionCallbacks && (transitionCallbacks = options.unstable_transitionCallbacks), void 0 !== options.formState && (formState = options.formState));
        initialChildren = createFiberRoot(container, 1, !0, initialChildren, null != options ? options : null, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState);
        initialChildren.context = getContextForSubtree(null);
        options = initialChildren.current;
        isStrictMode = requestUpdateLane(options);
        identifierPrefix = createUpdate(isStrictMode);
        identifierPrefix.callback = null;
        enqueueUpdate(options, identifierPrefix, isStrictMode);
        initialChildren.current.lanes = isStrictMode;
        markRootUpdated$1(initialChildren, isStrictMode);
        ensureRootIsScheduled(initialChildren);
        container[internalContainerInstanceKey] = initialChildren.current;
        listenToAllSupportedEvents(container);
        return new ReactDOMHydrationRoot(initialChildren);
    };
    exports.version = "19.0.0";
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
})();

},{"4a48913baa1a8f0":"d5jf4","c31f9b99c1e288cf":"juvHo","c4c4bc2113e5c77f":"21dqq","772d609564cfd8f6":"j6uA9"}],"juvHo":[function(require,module,exports,__globalThis) {
'use strict';
module.exports = require("ef03b89c8fe2794e");

},{"ef03b89c8fe2794e":"RqdIf"}],"RqdIf":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    function performWorkUntilDeadline() {
        if (isMessageLoopRunning) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasMoreWork = !0;
            try {
                a: {
                    isHostCallbackScheduled = !1;
                    isHostTimeoutScheduled && (isHostTimeoutScheduled = !1, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
                    isPerformingWork = !0;
                    var previousPriorityLevel = currentPriorityLevel;
                    try {
                        b: {
                            advanceTimers(currentTime);
                            for(currentTask = peek(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost());){
                                var callback = currentTask.callback;
                                if ("function" === typeof callback) {
                                    currentTask.callback = null;
                                    currentPriorityLevel = currentTask.priorityLevel;
                                    var continuationCallback = callback(currentTask.expirationTime <= currentTime);
                                    currentTime = exports.unstable_now();
                                    if ("function" === typeof continuationCallback) {
                                        currentTask.callback = continuationCallback;
                                        advanceTimers(currentTime);
                                        hasMoreWork = !0;
                                        break b;
                                    }
                                    currentTask === peek(taskQueue) && pop(taskQueue);
                                    advanceTimers(currentTime);
                                } else pop(taskQueue);
                                currentTask = peek(taskQueue);
                            }
                            if (null !== currentTask) hasMoreWork = !0;
                            else {
                                var firstTimer = peek(timerQueue);
                                null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                                hasMoreWork = !1;
                            }
                        }
                        break a;
                    } finally{
                        currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = !1;
                    }
                    hasMoreWork = void 0;
                }
            } finally{
                hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = !1;
            }
        }
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        a: for(; 0 < index;){
            var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
            if (0 < compare(parent, node)) heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
            else break a;
        }
    }
    function peek(heap) {
        return 0 === heap.length ? null : heap[0];
    }
    function pop(heap) {
        if (0 === heap.length) return null;
        var first = heap[0], last = heap.pop();
        if (last !== first) {
            heap[0] = last;
            a: for(var index = 0, length = heap.length, halfLength = length >>> 1; index < halfLength;){
                var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
                if (0 > compare(left, last)) rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
                else if (rightIndex < length && 0 > compare(right, last)) heap[index] = right, heap[rightIndex] = last, index = rightIndex;
                else break a;
            }
        }
        return first;
    }
    function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return 0 !== diff ? diff : a.id - b.id;
    }
    function advanceTimers(currentTime) {
        for(var timer = peek(timerQueue); null !== timer;){
            if (null === timer.callback) pop(timerQueue);
            else if (timer.startTime <= currentTime) pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
            else break;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = !1;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (null !== peek(taskQueue)) isHostCallbackScheduled = !0, requestHostCallback();
            else {
                var firstTimer = peek(timerQueue);
                null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function shouldYieldToHost() {
        return exports.unstable_now() - startTime < frameInterval ? !1 : !0;
    }
    function requestHostCallback() {
        isMessageLoopRunning || (isMessageLoopRunning = !0, schedulePerformWorkUntilDeadline());
    }
    function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
        }, ms);
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    exports.unstable_now = void 0;
    if ("object" === typeof performance && "function" === typeof performance.now) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date, initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    var taskQueue = [], timerQueue = [], taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = !1, isHostCallbackScheduled = !1, isHostTimeoutScheduled = !1, localSetTimeout = "function" === typeof setTimeout ? setTimeout : null, localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null, localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null, isMessageLoopRunning = !1, taskTimeoutID = -1, frameInterval = 5, startTime = -1;
    if ("function" === typeof localSetImmediate) var schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
    };
    else if ("undefined" !== typeof MessageChannel) {
        var channel = new MessageChannel(), port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
        };
    } else schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
    };
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(task) {
        task.callback = null;
    };
    exports.unstable_continueExecution = function() {
        isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = !0, requestHostCallback());
    };
    exports.unstable_forceFrameRate = function(fps) {
        0 > fps || 125 < fps ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
        return currentPriorityLevel;
    };
    exports.unstable_getFirstCallbackNode = function() {
        return peek(taskQueue);
    };
    exports.unstable_next = function(eventHandler) {
        switch(currentPriorityLevel){
            case 1:
            case 2:
            case 3:
                var priorityLevel = 3;
                break;
            default:
                priorityLevel = currentPriorityLevel;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    };
    exports.unstable_pauseExecution = function() {};
    exports.unstable_requestPaint = function() {};
    exports.unstable_runWithPriority = function(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            default:
                priorityLevel = 3;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    };
    exports.unstable_scheduleCallback = function(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
        switch(priorityLevel){
            case 1:
                var timeout = -1;
                break;
            case 2:
                timeout = 250;
                break;
            case 5:
                timeout = 1073741823;
                break;
            case 4:
                timeout = 1e4;
                break;
            default:
                timeout = 5e3;
        }
        timeout = options + timeout;
        priorityLevel = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: options,
            expirationTime: timeout,
            sortIndex: -1
        };
        options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek(taskQueue) && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = !0, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = !0, requestHostCallback()));
        return priorityLevel;
    };
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = function(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    };
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
})();

},{}],"j6uA9":[function(require,module,exports,__globalThis) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require("b0f0e6b9e8349dac");

},{"b0f0e6b9e8349dac":"3iA9v"}],"3iA9v":[function(require,module,exports,__globalThis) {
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ "use strict";
(function() {
    function noop() {}
    function testStringCoercion(value) {
        return "" + value;
    }
    function createPortal$1(children, containerInfo, implementation) {
        var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        try {
            testStringCoercion(key);
            var JSCompiler_inline_result = !1;
        } catch (e) {
            JSCompiler_inline_result = !0;
        }
        JSCompiler_inline_result && (console.error("The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", "function" === typeof Symbol && Symbol.toStringTag && key[Symbol.toStringTag] || key.constructor.name || "Object"), testStringCoercion(key));
        return {
            $$typeof: REACT_PORTAL_TYPE,
            key: null == key ? null : "" + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    function getCrossOriginStringAs(as, input) {
        if ("font" === as) return "";
        if ("string" === typeof input) return "use-credentials" === input ? input : "";
    }
    function getValueDescriptorExpectingObjectForWarning(thing) {
        return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : 'something with type "' + typeof thing + '"';
    }
    function getValueDescriptorExpectingEnumForWarning(thing) {
        return null === thing ? "`null`" : void 0 === thing ? "`undefined`" : "" === thing ? "an empty string" : "string" === typeof thing ? JSON.stringify(thing) : "number" === typeof thing ? "`" + thing + "`" : 'something with type "' + typeof thing + '"';
    }
    function resolveDispatcher() {
        var dispatcher = ReactSharedInternals.H;
        null === dispatcher && console.error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var React = require("6f0162e9ab224cd4"), Internals = {
        d: {
            f: noop,
            r: function() {
                throw Error("Invalid form element. requestFormReset must be passed a form that was rendered by React.");
            },
            D: noop,
            C: noop,
            L: noop,
            m: noop,
            X: noop,
            S: noop,
            M: noop
        },
        p: 0,
        findDOMNode: null
    }, REACT_PORTAL_TYPE = Symbol.for("react.portal"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    "function" === typeof Map && null != Map.prototype && "function" === typeof Map.prototype.forEach && "function" === typeof Set && null != Set.prototype && "function" === typeof Set.prototype.clear && "function" === typeof Set.prototype.forEach || console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
    exports.createPortal = function(children, container) {
        var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType) throw Error("Target container is not a DOM element.");
        return createPortal$1(children, container, null, key);
    };
    exports.flushSync = function(fn) {
        var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
        try {
            if (ReactSharedInternals.T = null, Internals.p = 2, fn) return fn();
        } finally{
            ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f() && console.error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        }
    };
    exports.preconnect = function(href, options) {
        "string" === typeof href && href ? null != options && "object" !== typeof options ? console.error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.", getValueDescriptorExpectingEnumForWarning(options)) : null != options && "string" !== typeof options.crossOrigin && console.error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.", getValueDescriptorExpectingObjectForWarning(options.crossOrigin)) : console.error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
        "string" === typeof href && (options ? (options = options.crossOrigin, options = "string" === typeof options ? "use-credentials" === options ? options : "" : void 0) : options = null, Internals.d.C(href, options));
    };
    exports.prefetchDNS = function(href) {
        if ("string" !== typeof href || !href) console.error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
        else if (1 < arguments.length) {
            var options = arguments[1];
            "object" === typeof options && options.hasOwnProperty("crossOrigin") ? console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options)) : console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options));
        }
        "string" === typeof href && Internals.d.D(href);
    };
    exports.preinit = function(href, options) {
        "string" === typeof href && href ? null == options || "object" !== typeof options ? console.error("ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.", getValueDescriptorExpectingEnumForWarning(options)) : "style" !== options.as && "script" !== options.as && console.error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".', getValueDescriptorExpectingEnumForWarning(options.as)) : console.error("ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
        if ("string" === typeof href && options && "string" === typeof options.as) {
            var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = "string" === typeof options.integrity ? options.integrity : void 0, fetchPriority = "string" === typeof options.fetchPriority ? options.fetchPriority : void 0;
            "style" === as ? Internals.d.S(href, "string" === typeof options.precedence ? options.precedence : void 0, {
                crossOrigin: crossOrigin,
                integrity: integrity,
                fetchPriority: fetchPriority
            }) : "script" === as && Internals.d.X(href, {
                crossOrigin: crossOrigin,
                integrity: integrity,
                fetchPriority: fetchPriority,
                nonce: "string" === typeof options.nonce ? options.nonce : void 0
            });
        }
    };
    exports.preinitModule = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "script" !== options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingEnumForWarning(options.as) + ".");
        if (encountered) console.error("ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s", encountered);
        else switch(encountered = options && "string" === typeof options.as ? options.as : "script", encountered){
            case "script":
                break;
            default:
                encountered = getValueDescriptorExpectingEnumForWarning(encountered), console.error('ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)', encountered, href);
        }
        if ("string" === typeof href) {
            if ("object" === typeof options && null !== options) {
                if (null == options.as || "script" === options.as) encountered = getCrossOriginStringAs(options.as, options.crossOrigin), Internals.d.M(href, {
                    crossOrigin: encountered,
                    integrity: "string" === typeof options.integrity ? options.integrity : void 0,
                    nonce: "string" === typeof options.nonce ? options.nonce : void 0
                });
            } else null == options && Internals.d.M(href);
        }
    };
    exports.preload = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        null == options || "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : "string" === typeof options.as && options.as || (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
        encountered && console.error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s', encountered);
        if ("string" === typeof href && "object" === typeof options && null !== options && "string" === typeof options.as) {
            encountered = options.as;
            var crossOrigin = getCrossOriginStringAs(encountered, options.crossOrigin);
            Internals.d.L(href, encountered, {
                crossOrigin: crossOrigin,
                integrity: "string" === typeof options.integrity ? options.integrity : void 0,
                nonce: "string" === typeof options.nonce ? options.nonce : void 0,
                type: "string" === typeof options.type ? options.type : void 0,
                fetchPriority: "string" === typeof options.fetchPriority ? options.fetchPriority : void 0,
                referrerPolicy: "string" === typeof options.referrerPolicy ? options.referrerPolicy : void 0,
                imageSrcSet: "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
                imageSizes: "string" === typeof options.imageSizes ? options.imageSizes : void 0,
                media: "string" === typeof options.media ? options.media : void 0
            });
        }
    };
    exports.preloadModule = function(href, options) {
        var encountered = "";
        "string" === typeof href && href || (encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".");
        void 0 !== options && "object" !== typeof options ? encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + "." : options && "as" in options && "string" !== typeof options.as && (encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".");
        encountered && console.error('ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s', encountered);
        "string" === typeof href && (options ? (encountered = getCrossOriginStringAs(options.as, options.crossOrigin), Internals.d.m(href, {
            as: "string" === typeof options.as && "script" !== options.as ? options.as : void 0,
            crossOrigin: encountered,
            integrity: "string" === typeof options.integrity ? options.integrity : void 0
        })) : Internals.d.m(href));
    };
    exports.requestFormReset = function(form) {
        Internals.d.r(form);
    };
    exports.unstable_batchedUpdates = function(fn, a) {
        return fn(a);
    };
    exports.useFormState = function(action, initialState, permalink) {
        return resolveDispatcher().useFormState(action, initialState, permalink);
    };
    exports.useFormStatus = function() {
        return resolveDispatcher().useHostTransitionStatus();
    };
    exports.version = "19.0.0";
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
})();

},{"6f0162e9ab224cd4":"21dqq"}],"2Ew96":[function(require,module,exports,__globalThis) {
var $parcel$ReactRefreshHelpers$c1db = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$c1db.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _countriesCountainer = require("./components/CountriesCountainer");
var _countriesCountainerDefault = parcelHelpers.interopDefault(_countriesCountainer);
var _header = require("./components/Header");
var _headerDefault = parcelHelpers.interopDefault(_header);
var _searchBar = require("./components/SearchBar");
var _searchBarDefault = parcelHelpers.interopDefault(_searchBar);
var _selectMenu = require("./components/SelectMenu");
var _selectMenuDefault = parcelHelpers.interopDefault(_selectMenu);
var _styleCss = require("./components/style.css");
const App = ()=>{
    return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _jsxDevRuntime.Fragment), {
        children: [
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _headerDefault.default), {}, void 0, false, {
                fileName: "App.js",
                lineNumber: 11,
                columnNumber: 13
            }, undefined),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("main", {
                children: [
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {
                        className: "search-filter-container",
                        children: [
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _searchBarDefault.default), {}, void 0, false, {
                                fileName: "App.js",
                                lineNumber: 14,
                                columnNumber: 21
                            }, undefined),
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _selectMenuDefault.default), {}, void 0, false, {
                                fileName: "App.js",
                                lineNumber: 15,
                                columnNumber: 21
                            }, undefined)
                        ]
                    }, void 0, true, {
                        fileName: "App.js",
                        lineNumber: 13,
                        columnNumber: 17
                    }, undefined),
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _countriesCountainerDefault.default), {}, void 0, false, {
                        fileName: "App.js",
                        lineNumber: 17,
                        columnNumber: 17
                    }, undefined)
                ]
            }, void 0, true, {
                fileName: "App.js",
                lineNumber: 12,
                columnNumber: 13
            }, undefined)
        ]
    }, void 0, true);
};
_c = App;
exports.default = App;
var _c;
$RefreshReg$(_c, "App");

  $parcel$ReactRefreshHelpers$c1db.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","./components/Header":"6nmoh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru","./components/SearchBar":"4HJPW","./components/SelectMenu":"hfvcB","./components/style.css":"aL5ug","./components/CountriesCountainer":"chw1h"}],"6nmoh":[function(require,module,exports,__globalThis) {
var $parcel$ReactRefreshHelpers$6433 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$6433.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _styleCss = require("./style.css");
const Header = ()=>{
    return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("header", {
        className: "header-container",
        children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {
            className: "header-content",
            children: [
                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("h2", {
                    className: "title",
                    children: /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("a", {
                        href: "/",
                        children: "Where in the world?"
                    }, void 0, false, {
                        fileName: "components/Header.jsx",
                        lineNumber: 8,
                        columnNumber: 21
                    }, undefined)
                }, void 0, false, {
                    fileName: "components/Header.jsx",
                    lineNumber: 7,
                    columnNumber: 17
                }, undefined),
                /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("p", {
                    children: [
                        /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("i", {
                            className: "fa-regular fa-moon"
                        }, void 0, false, {
                            fileName: "components/Header.jsx",
                            lineNumber: 11,
                            columnNumber: 21
                        }, undefined),
                        "\xa0\xa0Dark Mode"
                    ]
                }, void 0, true, {
                    fileName: "components/Header.jsx",
                    lineNumber: 10,
                    columnNumber: 17
                }, undefined)
            ]
        }, void 0, true, {
            fileName: "components/Header.jsx",
            lineNumber: 6,
            columnNumber: 13
        }, undefined)
    }, void 0, false, {
        fileName: "components/Header.jsx",
        lineNumber: 5,
        columnNumber: 9
    }, undefined);
};
_c = Header;
exports.default = Header;
var _c;
$RefreshReg$(_c, "Header");

  $parcel$ReactRefreshHelpers$6433.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","./style.css":"aL5ug","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"aL5ug":[function() {},{}],"gkKU3":[function(require,module,exports,__globalThis) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"km3Ru":[function(require,module,exports,__globalThis) {
"use strict";
var Refresh = require("7422ead32dcc1e6b");
var { version } = require("630b62916b1ae0e7");
function debounce(func, delay) {
    {
        let timeout = undefined;
        let lastTime = 0;
        return function(args) {
            // Call immediately if last call was more than the delay ago.
            // Otherwise, set a timeout. This means the first call is fast
            // (for the common case of a single update), and subsequent updates
            // are batched.
            let now = Date.now();
            if (now - lastTime > delay) {
                lastTime = now;
                func.call(null, args);
            } else {
                clearTimeout(timeout);
                timeout = setTimeout(function() {
                    timeout = undefined;
                    lastTime = Date.now();
                    func.call(null, args);
                }, delay);
            }
        };
    }
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30);
// Everything below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module1) {
    window.__REACT_REFRESH_VERSION_TRANSFORMER = version;
    window.$RefreshReg$ = function(type, id) {
        if (window.__REACT_REFRESH_VERSION_TRANSFORMER && window.__REACT_REFRESH_VERSION_RUNTIME && window.__REACT_REFRESH_VERSION_TRANSFORMER !== window.__REACT_REFRESH_VERSION_RUNTIME) // Both versions were set and they did not match
        throw new Error(`react-refresh versions did not match between transformer and runtime. Please check your dependencies. Transformer: ${window.__REACT_REFRESH_VERSION_TRANSFORMER}, Runtime: ${window.__REACT_REFRESH_VERSION_RUNTIME}`);
        Refresh.register(type, module1.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module1) {
    if (isReactRefreshBoundary(module1.exports)) {
        registerExportsForReactRefresh(module1);
        if (module1.hot) {
            module1.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module1.exports;
            });
            module1.hot.accept(function(getParents) {
                var prevExports = module1.hot.data.prevExports;
                var nextExports = module1.exports;
                // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports);
                // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
}
// When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module1) {
    var exports = module1.exports, id = module1.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        var typeID = id + ' %exports% ' + key;
        Refresh.register(exportValue, typeID);
    }
}

},{"7422ead32dcc1e6b":"786KC","630b62916b1ae0e7":"4SQxb"}],"4SQxb":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"name\":\"react-refresh\",\"description\":\"React is a JavaScript library for building user interfaces.\",\"keywords\":[\"react\"],\"version\":\"0.14.2\",\"homepage\":\"https://reactjs.org/\",\"bugs\":\"https://github.com/facebook/react/issues\",\"license\":\"MIT\",\"files\":[\"LICENSE\",\"README.md\",\"babel.js\",\"runtime.js\",\"cjs/\",\"umd/\"],\"main\":\"runtime.js\",\"exports\":{\".\":\"./runtime.js\",\"./runtime\":\"./runtime.js\",\"./babel\":\"./babel.js\",\"./package.json\":\"./package.json\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/facebook/react.git\",\"directory\":\"packages/react\"},\"engines\":{\"node\":\">=0.10.0\"},\"devDependencies\":{\"react-16-8\":\"npm:react@16.8.0\",\"react-dom-16-8\":\"npm:react-dom@16.8.0\",\"scheduler-0-13\":\"npm:scheduler@0.13.0\"}}");

},{}],"4HJPW":[function(require,module,exports,__globalThis) {
var $parcel$ReactRefreshHelpers$e8d4 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$e8d4.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>SearchBar);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
function SearchBar() {
    return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {
        class: "search-container",
        children: [
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("i", {
                class: "fa-solid fa-magnifying-glass"
            }, void 0, false, {
                fileName: "components/SearchBar.jsx",
                lineNumber: 6,
                columnNumber: 17
            }, this),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("input", {
                type: "text",
                placeholder: "Search for a country..."
            }, void 0, false, {
                fileName: "components/SearchBar.jsx",
                lineNumber: 7,
                columnNumber: 17
            }, this)
        ]
    }, void 0, true, {
        fileName: "components/SearchBar.jsx",
        lineNumber: 5,
        columnNumber: 13
    }, this);
}
_c = SearchBar;
var _c;
$RefreshReg$(_c, "SearchBar");

  $parcel$ReactRefreshHelpers$e8d4.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"hfvcB":[function(require,module,exports,__globalThis) {
var $parcel$ReactRefreshHelpers$65f8 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$65f8.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>SelectMenu);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
function SelectMenu() {
    return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("select", {
        className: "filter-by-region",
        children: [
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("option", {
                hidden: true,
                children: "Filter by Region"
            }, void 0, false, {
                fileName: "components/SelectMenu.jsx",
                lineNumber: 6,
                columnNumber: 11
            }, this),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("option", {
                value: "Africa",
                children: "Africa"
            }, void 0, false, {
                fileName: "components/SelectMenu.jsx",
                lineNumber: 7,
                columnNumber: 11
            }, this),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("option", {
                value: "America",
                children: "America"
            }, void 0, false, {
                fileName: "components/SelectMenu.jsx",
                lineNumber: 8,
                columnNumber: 11
            }, this),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("option", {
                value: "Asia",
                children: "Asia"
            }, void 0, false, {
                fileName: "components/SelectMenu.jsx",
                lineNumber: 9,
                columnNumber: 11
            }, this),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("option", {
                value: "Europe",
                children: "Europe"
            }, void 0, false, {
                fileName: "components/SelectMenu.jsx",
                lineNumber: 10,
                columnNumber: 11
            }, this),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("option", {
                value: "Oceania",
                children: "Oceania"
            }, void 0, false, {
                fileName: "components/SelectMenu.jsx",
                lineNumber: 11,
                columnNumber: 11
            }, this)
        ]
    }, void 0, true, {
        fileName: "components/SelectMenu.jsx",
        lineNumber: 5,
        columnNumber: 9
    }, this);
}
_c = SelectMenu;
var _c;
$RefreshReg$(_c, "SelectMenu");

  $parcel$ReactRefreshHelpers$65f8.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"aL5ug":[function() {},{}],"chw1h":[function(require,module,exports,__globalThis) {
var $parcel$ReactRefreshHelpers$15ef = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$15ef.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CountriesContainer);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
var _countryCard = require("./CountryCard");
var _countryCardDefault = parcelHelpers.interopDefault(_countryCard);
var _countriesData = require("../countriesData");
var _countriesDataDefault = parcelHelpers.interopDefault(_countriesData);
function CountriesContainer() {
    const array = (0, _countriesDataDefault.default).map((country)=>{
        console.log(country);
        return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)((0, _countryCardDefault.default), {
            flags: country.flags.svg,
            population: country.population.toLocaleString('en-IN'),
            region: country.region,
            name: country.name.common,
            capital: country.capital?.[0]
        }, void 0, false, {
            fileName: "components/CountriesCountainer.jsx",
            lineNumber: 8,
            columnNumber: 16
        }, this);
    });
    return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {
        className: "countries-container",
        children: array
    }, void 0, false, {
        fileName: "components/CountriesCountainer.jsx",
        lineNumber: 11,
        columnNumber: 9
    }, this);
}
_c = CountriesContainer;
var _c;
$RefreshReg$(_c, "CountriesContainer");

  $parcel$ReactRefreshHelpers$15ef.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","./CountryCard":"aX1WT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru","../countriesData":"hi7q6"}],"aX1WT":[function(require,module,exports,__globalThis) {
var $parcel$ReactRefreshHelpers$1d48 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$1d48.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CountryCard);
var _jsxDevRuntime = require("react/jsx-dev-runtime");
function CountryCard(props) {
    const { flags, name, population, region, capital } = props;
    return /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("a", {
        className: "country-card",
        href: `/country.html?name=${name}`,
        children: [
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("img", {
                src: flags,
                alt: "Barbados flag"
            }, void 0, false, {
                fileName: "components/CountryCard.jsx",
                lineNumber: 6,
                columnNumber: 13
            }, this),
            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("div", {
                className: "card-text",
                children: [
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("h3", {
                        className: "card-title",
                        children: name
                    }, void 0, false, {
                        fileName: "components/CountryCard.jsx",
                        lineNumber: 8,
                        columnNumber: 17
                    }, this),
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("p", {
                        children: [
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("b", {
                                children: "Population: "
                            }, void 0, false, {
                                fileName: "components/CountryCard.jsx",
                                lineNumber: 9,
                                columnNumber: 20
                            }, this),
                            population
                        ]
                    }, void 0, true, {
                        fileName: "components/CountryCard.jsx",
                        lineNumber: 9,
                        columnNumber: 17
                    }, this),
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("p", {
                        children: [
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("b", {
                                children: "Region: "
                            }, void 0, false, {
                                fileName: "components/CountryCard.jsx",
                                lineNumber: 10,
                                columnNumber: 20
                            }, this),
                            region
                        ]
                    }, void 0, true, {
                        fileName: "components/CountryCard.jsx",
                        lineNumber: 10,
                        columnNumber: 17
                    }, this),
                    /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("p", {
                        children: [
                            /*#__PURE__*/ (0, _jsxDevRuntime.jsxDEV)("b", {
                                children: "Capital: "
                            }, void 0, false, {
                                fileName: "components/CountryCard.jsx",
                                lineNumber: 11,
                                columnNumber: 20
                            }, this),
                            capital
                        ]
                    }, void 0, true, {
                        fileName: "components/CountryCard.jsx",
                        lineNumber: 11,
                        columnNumber: 17
                    }, this)
                ]
            }, void 0, true, {
                fileName: "components/CountryCard.jsx",
                lineNumber: 7,
                columnNumber: 13
            }, this)
        ]
    }, void 0, true, {
        fileName: "components/CountryCard.jsx",
        lineNumber: 5,
        columnNumber: 9
    }, this);
}
_c = CountryCard;
var _c;
$RefreshReg$(_c, "CountryCard");

  $parcel$ReactRefreshHelpers$1d48.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"react/jsx-dev-runtime":"iTorj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"km3Ru"}],"hi7q6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = [
    {
        name: {
            common: "South Georgia",
            official: "South Georgia and the South Sandwich Islands",
            nativeName: {
                eng: {
                    official: "South Georgia and the South Sandwich Islands",
                    common: "South Georgia"
                }
            }
        },
        tld: [
            ".gs"
        ],
        cca2: "GS",
        ccn3: "239",
        cca3: "SGS",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            SHP: {
                name: "Saint Helena pound",
                symbol: "\xa3"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "00"
            ]
        },
        capital: [
            "King Edward Point"
        ],
        altSpellings: [
            "GS",
            "South Georgia and the South Sandwich Islands"
        ],
        region: "Antarctic",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0648\u0631\u062C\u064A\u0627 \u0627\u0644\u062C\u0646\u0648\u0628\u064A\u0629 \u0648\u062C\u0632\u0631 \u0633\u0627\u0646\u062F\u0648\u062A\u0634 \u0627\u0644\u062C\u0646\u0648\u0628\u064A\u0629",
                common: "\u062C\u0648\u0631\u062C\u064A\u0627 \u0627\u0644\u062C\u0646\u0648\u0628\u064A\u0629"
            },
            bre: {
                official: "Georgia ar Su hag Inizi Sandwich ar Su",
                common: "Georgia ar Su hag Inizi Sandwich ar Su"
            },
            ces: {
                official: "Ji\u017En\xed Georgie a Ji\u017En\xed Sandwichovy ostrovy",
                common: "Ji\u017En\xed Georgie a Ji\u017En\xed Sandwichovy ostrovy"
            },
            cym: {
                official: "South Georgia and the South Sandwich Islands",
                common: "South Georgia"
            },
            deu: {
                official: "S\xfcdgeorgien und die S\xfcdlichen Sandwichinseln",
                common: "S\xfcdgeorgien und die S\xfcdlichen Sandwichinseln"
            },
            est: {
                official: "L\xf5una-Georgia ja L\xf5una-Sandwichi saared",
                common: "L\xf5una-Georgia ja L\xf5una-Sandwichi saared"
            },
            fin: {
                official: "Etel\xe4-Georgia ja Etel\xe4iset Sandwichsaaret",
                common: "Etel\xe4-Georgia ja Etel\xe4iset Sandwichsaaret"
            },
            fra: {
                official: "G\xe9orgie du Sud et les \xeeles Sandwich du Sud",
                common: "G\xe9orgie du Sud-et-les \xceles Sandwich du Sud"
            },
            hrv: {
                official: "Ju\u017Ena D\u017Eord\u017Eija i Otoci Ju\u017Eni Sendvi\u010D",
                common: "Ju\u017Ena Georgija i oto\u010Dje Ju\u017Eni Sandwich"
            },
            hun: {
                official: "D\xe9li-Georgia \xe9s D\xe9li-Sandwich-szigetek",
                common: "D\xe9li-Georgia \xe9s D\xe9li-Sandwich-szigetek"
            },
            ita: {
                official: "Georgia del Sud e isole Sandwich del Sud",
                common: "Georgia del Sud e Isole Sandwich Meridionali"
            },
            jpn: {
                official: "\u30B5\u30A6\u30B9\u30B8\u30E7\u30FC\u30B8\u30A2\xb7\u30B5\u30A6\u30B9\u30B5\u30F3\u30C9\u30A6\u30A3\u30C3\u30C1\u8AF8\u5CF6",
                common: "\u30B5\u30A6\u30B9\u30B8\u30E7\u30FC\u30B8\u30A2\u30FB\u30B5\u30A6\u30B9\u30B5\u30F3\u30C9\u30A6\u30A3\u30C3\u30C1\u8AF8\u5CF6"
            },
            kor: {
                official: "\uC870\uC9C0\uC544",
                common: "\uC870\uC9C0\uC544"
            },
            nld: {
                official: "Zuid-Georgi\xeb en de Zuidelijke Sandwich-eilanden",
                common: "Zuid-Georgia en Zuidelijke Sandwicheilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u062C\u0648\u0631\u062C\u06CC\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC \u0648 \u0633\u0627\u0646\u062F\u0648\u06CC\u0686 \u062C\u0646\u0648\u0628\u06CC",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u062C\u0648\u0631\u062C\u06CC\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC \u0648 \u0633\u0627\u0646\u062F\u0648\u06CC\u0686 \u062C\u0646\u0648\u0628\u06CC"
            },
            pol: {
                official: "Georgia Po\u0142udniowa i Sandwich Po\u0142udniowy",
                common: "Georgia Po\u0142udniowa i Sandwich Po\u0142udniowy"
            },
            por: {
                official: "Ge\xf3rgia do Sul e Sandwich do Sul",
                common: "Ilhas Ge\xf3rgia do Sul e Sandwich do Sul"
            },
            rus: {
                official: "\u042E\u0436\u043D\u0430\u044F \u0413\u0435\u043E\u0440\u0433\u0438\u044F \u0438 \u042E\u0436\u043D\u044B\u0435 \u0421\u0430\u043D\u0434\u0432\u0438\u0447\u0435\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u042E\u0436\u043D\u0430\u044F \u0413\u0435\u043E\u0440\u0433\u0438\u044F \u0438 \u042E\u0436\u043D\u044B\u0435 \u0421\u0430\u043D\u0434\u0432\u0438\u0447\u0435\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Ju\u017En\xe1 Georgia a Ju\u017En\xe9 Sandwichove ostrovy",
                common: "Ju\u017En\xe1 Georgia a Ju\u017En\xe9 Sandwichove ostrovy"
            },
            spa: {
                official: "Georgia del Sur y las Islas Sandwich del Sur",
                common: "Islas Georgias del Sur y Sandwich del Sur"
            },
            srp: {
                official: "\u0408\u0443\u0436\u043D\u0430 \u040F\u043E\u0440\u045F\u0438\u0458\u0430 \u0438 \u0408\u0443\u0436\u043D\u0430 \u0421\u0435\u043D\u0434\u0432\u0438\u0447\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                common: "\u0408\u0443\u0436\u043D\u0430 \u040F\u043E\u0440\u045F\u0438\u0458\u0430 \u0438 \u0408\u0443\u0436\u043D\u0430 \u0421\u0435\u043D\u0434\u0432\u0438\u0447\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "Sydgeorgien",
                common: "Sydgeorgien"
            },
            tur: {
                official: "G\xfcney Georgia ve G\xfcney Sandwich Adalar\u0131",
                common: "G\xfcney Georgia ve G\xfcney Sandwich Adalar\u0131"
            },
            urd: {
                official: "\u062C\u0646\u0648\u0628\u06CC \u062C\u0627\u0631\u062C\u06CC\u0627 \u0648 \u062C\u0632\u0627\u0626\u0631 \u062C\u0646\u0648\u0628\u06CC \u0633\u06CC\u0646\u0688\u0648\u0686",
                common: "\u062C\u0646\u0648\u0628\u06CC \u062C\u0627\u0631\u062C\u06CC\u0627"
            },
            zho: {
                official: "\u5357\u4E54\u6CBB\u4E9A\u5C9B\u548C\u5357\u6851\u5A01\u5947\u7FA4\u5C9B",
                common: "\u5357\u4E54\u6CBB\u4E9A"
            }
        },
        latlng: [
            -54.5,
            -37
        ],
        landlocked: false,
        area: 3903,
        demonyms: {
            eng: {
                f: "South Georgian South Sandwich Islander",
                m: "South Georgian South Sandwich Islander"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/mJzdaBwKBbm2B81q9",
            openStreetMaps: "https://www.openstreetmap.org/relation/1983629"
        },
        population: 30,
        car: {
            signs: [
                ""
            ],
            side: "right"
        },
        timezones: [
            "UTC-02:00"
        ],
        continents: [
            "Antarctica"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gs.png",
            svg: "https://flagcdn.com/gs.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -54.28,
                -36.5
            ]
        }
    },
    {
        name: {
            common: "Grenada",
            official: "Grenada",
            nativeName: {
                eng: {
                    official: "Grenada",
                    common: "Grenada"
                }
            }
        },
        tld: [
            ".gd"
        ],
        cca2: "GD",
        ccn3: "308",
        cca3: "GRD",
        cioc: "GRN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XCD: {
                name: "Eastern Caribbean dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "473"
            ]
        },
        capital: [
            "St. George's"
        ],
        altSpellings: [
            "GD"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u063A\u0631\u064A\u0646\u0627\u062F\u0627",
                common: "\u063A\u0631\u064A\u0646\u0627\u062F\u0627"
            },
            bre: {
                official: "Grenada",
                common: "Grenada"
            },
            ces: {
                official: "Grenada",
                common: "Grenada"
            },
            cym: {
                official: "Grenada",
                common: "Grenada"
            },
            deu: {
                official: "Grenada",
                common: "Grenada"
            },
            est: {
                official: "Grenada",
                common: "Grenada"
            },
            fin: {
                official: "Grenada",
                common: "Grenada"
            },
            fra: {
                official: "Grenade",
                common: "Grenade"
            },
            hrv: {
                official: "Grenada",
                common: "Grenada"
            },
            hun: {
                official: "Grenada",
                common: "Grenada"
            },
            ita: {
                official: "Grenada",
                common: "Grenada"
            },
            jpn: {
                official: "\u30B0\u30EC\u30CA\u30C0",
                common: "\u30B0\u30EC\u30CA\u30C0"
            },
            kor: {
                official: "\uADF8\uB808\uB098\uB2E4",
                common: "\uADF8\uB808\uB098\uB2E4"
            },
            nld: {
                official: "Grenada",
                common: "Grenada"
            },
            per: {
                official: "\u06AF\u0631\u0646\u0627\u062F\u0627",
                common: "\u06AF\u0631\u0646\u0627\u062F\u0627"
            },
            pol: {
                official: "Grenada",
                common: "Grenada"
            },
            por: {
                official: "Grenada",
                common: "Granada"
            },
            rus: {
                official: "\u0413\u0440\u0435\u043D\u0430\u0434\u0430",
                common: "\u0413\u0440\u0435\u043D\u0430\u0434\u0430"
            },
            slk: {
                official: "Grenada",
                common: "Grenada"
            },
            spa: {
                official: "Granada",
                common: "Grenada"
            },
            srp: {
                official: "\u0413\u0440\u0435\u043D\u0430\u0434\u0430",
                common: "\u0413\u0440\u0435\u043D\u0430\u0434\u0430"
            },
            swe: {
                official: "Grenada",
                common: "Grenada"
            },
            tur: {
                official: "Grenada",
                common: "Grenada"
            },
            urd: {
                official: "\u06AF\u0631\u06CC\u0646\u0627\u0688\u0627",
                common: "\u06AF\u0631\u06CC\u0646\u0627\u0688\u0627"
            },
            zho: {
                official: "\u683C\u6797\u7EB3\u8FBE",
                common: "\u683C\u6797\u7EB3\u8FBE"
            }
        },
        latlng: [
            12.11666666,
            -61.66666666
        ],
        landlocked: false,
        area: 344,
        demonyms: {
            eng: {
                f: "Grenadian",
                m: "Grenadian"
            },
            fra: {
                f: "Grenadienne",
                m: "Grenadien"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDE9",
        maps: {
            googleMaps: "https://goo.gl/maps/rqWyfUAt4xhvk1Zy9",
            openStreetMaps: "https://www.openstreetmap.org/relation/550727"
        },
        population: 112519,
        fifa: "GRN",
        car: {
            signs: [
                "WG"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gd.png",
            svg: "https://flagcdn.com/gd.svg",
            alt: "The flag of Grenada features a large central rectangular area surrounded by a red border, with three five-pointed yellow stars centered on the top and bottom borders. The central rectangle is divided diagonally into four alternating triangular areas of yellow at the top and bottom and green on the hoist and fly sides, and a five-pointed yellow star on a red circle is superimposed at its center. A symbolic nutmeg pod is situated on the green hoist-side triangle."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gd.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gd.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                32.38,
                -64.68
            ]
        }
    },
    {
        name: {
            common: "Switzerland",
            official: "Swiss Confederation",
            nativeName: {
                fra: {
                    official: "Conf\xe9d\xe9ration suisse",
                    common: "Suisse"
                },
                gsw: {
                    official: "Schweizerische Eidgenossenschaft",
                    common: "Schweiz"
                },
                ita: {
                    official: "Confederazione Svizzera",
                    common: "Svizzera"
                },
                roh: {
                    official: "Confederaziun svizra",
                    common: "Svizra"
                }
            }
        },
        tld: [
            ".ch"
        ],
        cca2: "CH",
        ccn3: "756",
        cca3: "CHE",
        cioc: "SUI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            CHF: {
                name: "Swiss franc",
                symbol: "Fr."
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "1"
            ]
        },
        capital: [
            "Bern"
        ],
        altSpellings: [
            "CH",
            "Swiss Confederation",
            "Schweiz",
            "Suisse",
            "Svizzera",
            "Svizra"
        ],
        region: "Europe",
        subregion: "Western Europe",
        languages: {
            fra: "French",
            gsw: "Swiss German",
            ita: "Italian",
            roh: "Romansh"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u0627\u062A\u062D\u0627\u062F \u0627\u0644\u0633\u0648\u064A\u0633\u0631\u064A",
                common: "\u0633\u0648\u064A\u0633\u0631\u0627"
            },
            bre: {
                official: "Kengevredad Suis",
                common: "Suis"
            },
            ces: {
                official: "\u0160v\xfdcarsk\xe1 konfederace",
                common: "\u0160v\xfdcarsko"
            },
            cym: {
                official: "Swiss Confederation",
                common: "Switzerland"
            },
            deu: {
                official: "Schweizerische Eidgenossenschaft",
                common: "Schweiz"
            },
            est: {
                official: "\u0160veitsi Konf\xf6deratsioon",
                common: "\u0160veits"
            },
            fin: {
                official: "Sveitsin valaliitto",
                common: "Sveitsi"
            },
            fra: {
                official: "Conf\xe9d\xe9ration suisse",
                common: "Suisse"
            },
            hrv: {
                official: "\u0161vicarska Konfederacija",
                common: "\u0160vicarska"
            },
            hun: {
                official: "Sv\xe1jc",
                common: "Sv\xe1jc"
            },
            ita: {
                official: "Confederazione svizzera",
                common: "Svizzera"
            },
            jpn: {
                official: "\u30B9\u30A4\u30B9\u9023\u90A6",
                common: "\u30B9\u30A4\u30B9"
            },
            kor: {
                official: "\uC2A4\uC704\uC2A4 \uC5F0\uBC29",
                common: "\uC2A4\uC704\uC2A4"
            },
            nld: {
                official: "Zwitserse Confederatie",
                common: "Zwitserland"
            },
            per: {
                official: "\u06A9\u0646\u0641\u062F\u0631\u0627\u0633\u06CC\u0648\u0646 \u0633\u0648\u0626\u06CC\u0633",
                common: "\u0633\u0648\u0626\u06CC\u0633"
            },
            pol: {
                official: "Konfederacja Szwajcarska",
                common: "Szwajcaria"
            },
            por: {
                official: "Confedera\xe7\xe3o Su\xed\xe7a",
                common: "Su\xed\xe7a"
            },
            rus: {
                official: "\u0428\u0432\u0435\u0439\u0446\u0430\u0440\u0441\u043A\u0430\u044F \u041A\u043E\u043D\u0444\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044F",
                common: "\u0428\u0432\u0435\u0439\u0446\u0430\u0440\u0438\u044F"
            },
            slk: {
                official: "\u0160vaj\u010Diarska konfeder\xe1cia",
                common: "\u0160vaj\u010Diarsko"
            },
            spa: {
                official: "Confederaci\xf3n Suiza",
                common: "Suiza"
            },
            srp: {
                official: "\u0428\u0432\u0430\u0458\u0446\u0430\u0440\u0441\u043A\u0430 \u041A\u043E\u043D\u0444\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0458\u0430",
                common: "\u0428\u0432\u0430\u0458\u0446\u0430\u0440\u0441\u043A\u0430"
            },
            swe: {
                official: "Schweiziska edsf\xf6rbundet",
                common: "Schweiz"
            },
            tur: {
                official: "\u0130svi\xe7re Konfederasyonu",
                common: "\u0130svi\xe7re"
            },
            urd: {
                official: "\u0633\u0648\u0626\u06CC\u0633  \u0645\u062A\u062D\u062F\u06C1",
                common: "\u0633\u0648\u06CC\u0679\u0630\u0631\u0644\u06CC\u0646\u0688"
            },
            zho: {
                official: "\u745E\u58EB\u8054\u90A6",
                common: "\u745E\u58EB"
            }
        },
        latlng: [
            47,
            8
        ],
        landlocked: true,
        borders: [
            "AUT",
            "FRA",
            "ITA",
            "LIE",
            "DEU"
        ],
        area: 41284,
        demonyms: {
            eng: {
                f: "Swiss",
                m: "Swiss"
            },
            fra: {
                f: "Suisse",
                m: "Suisse"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDED",
        maps: {
            googleMaps: "https://goo.gl/maps/uVuZcXaxSx5jLyEC9",
            openStreetMaps: "https://www.openstreetmap.org/relation/51701"
        },
        population: 8654622,
        gini: {
            2018: 33.1
        },
        fifa: "SUI",
        car: {
            signs: [
                "CH"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ch.png",
            svg: "https://flagcdn.com/ch.svg",
            alt: "The flag of Switzerland is square shaped. It features a white Swiss cross centered on a red field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ch.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ch.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                46.92,
                7.47
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Sierra Leone",
            official: "Republic of Sierra Leone",
            nativeName: {
                eng: {
                    official: "Republic of Sierra Leone",
                    common: "Sierra Leone"
                }
            }
        },
        tld: [
            ".sl"
        ],
        cca2: "SL",
        ccn3: "694",
        cca3: "SLE",
        cioc: "SLE",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SLL: {
                name: "Sierra Leonean leone",
                symbol: "Le"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "32"
            ]
        },
        capital: [
            "Freetown"
        ],
        altSpellings: [
            "SL",
            "Republic of Sierra Leone"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u064A\u0631\u0627\u0644\u064A\u0648\u0646",
                common: "\u0633\u064A\u0631\u0627\u0644\u064A\u0648\u0646"
            },
            bre: {
                official: "Republik Sierra Leone",
                common: "Sierra Leone"
            },
            ces: {
                official: "Republika Sierra Leone",
                common: "Sierra Leone"
            },
            cym: {
                official: "Republic of Sierra Leone",
                common: "Sierra Leone"
            },
            deu: {
                official: "Republik Sierra Leone",
                common: "Sierra Leone"
            },
            est: {
                official: "Sierra Leone Vabariik",
                common: "Sierra Leone"
            },
            fin: {
                official: "Sierra Leonen tasavalta",
                common: "Sierra Leone"
            },
            fra: {
                official: "R\xe9publique de Sierra Leone",
                common: "Sierra Leone"
            },
            hrv: {
                official: "Republika Sijera Leone",
                common: "Sijera Leone"
            },
            hun: {
                official: "Sierra Leone K\xf6zt\xe1rsas\xe1g",
                common: "Sierra Leone"
            },
            ita: {
                official: "Repubblica della Sierra Leone",
                common: "Sierra Leone"
            },
            jpn: {
                official: "\u30B7\u30A8\u30E9\u30EC\u30AA\u30CD\u5171\u548C\u56FD",
                common: "\u30B7\u30A8\u30E9\u30EC\u30AA\u30CD"
            },
            kor: {
                official: "\uC2DC\uC5D0\uB77C\uB9AC\uC628 \uACF5\uD654\uAD6D",
                common: "\uC2DC\uC5D0\uB77C\uB9AC\uC628"
            },
            nld: {
                official: "Republiek Sierra Leone",
                common: "Sierra Leone"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u06CC\u0631\u0627\u0644\u0626\u0648\u0646",
                common: "\u0633\u06CC\u0631\u0627\u0644\u0626\u0648\u0646"
            },
            pol: {
                official: "Sierra Leone",
                common: "Sierra Leone"
            },
            por: {
                official: "Rep\xfablica da Serra Leoa",
                common: "Serra Leoa"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u044C\u0435\u0440\u0440\u0430-\u041B\u0435\u043E\u043D\u0435",
                common: "\u0421\u044C\u0435\u0440\u0440\u0430-\u041B\u0435\u043E\u043D\u0435"
            },
            slk: {
                official: "Sierraleonsk\xe1 republika",
                common: "Sierra Leone"
            },
            spa: {
                official: "Rep\xfablica de Sierra Leona",
                common: "Sierra Leone"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0438\u0458\u0435\u0440\u0430 \u041B\u0435\u043E\u043D\u0435",
                common: "\u0421\u0438\u0458\u0435\u0440\u0430 \u041B\u0435\u043E\u043D\u0435"
            },
            swe: {
                official: "Republiken Sierra Leone",
                common: "Sierra Leone"
            },
            tur: {
                official: "Sierra Leone Cumhuriyeti",
                common: "Sierra Leone"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u06CC\u0631\u0627\u0644\u06CC\u0648\u0646",
                common: "\u0633\u06CC\u0631\u0627\u0644\u06CC\u0648\u0646"
            },
            zho: {
                official: "\u585E\u62C9\u5229\u6602\u5171\u548C\u56FD",
                common: "\u585E\u62C9\u5229\u6602"
            }
        },
        latlng: [
            8.5,
            -11.5
        ],
        landlocked: false,
        borders: [
            "GIN",
            "LBR"
        ],
        area: 71740,
        demonyms: {
            eng: {
                f: "Sierra Leonean",
                m: "Sierra Leonean"
            },
            fra: {
                f: "Sierra-leonaise",
                m: "Sierra-leonais"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDF1",
        maps: {
            googleMaps: "https://goo.gl/maps/jhacar85oq9QaeKB7",
            openStreetMaps: "https://www.openstreetmap.org/relation/192777"
        },
        population: 7976985,
        gini: {
            2018: 35.7
        },
        fifa: "SLE",
        car: {
            signs: [
                "WAL"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sl.png",
            svg: "https://flagcdn.com/sl.svg",
            alt: "The flag of Sierra Leone is composed of three equal horizontal bands of green, white and blue."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sl.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sl.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                8.48,
                -13.23
            ]
        }
    },
    {
        name: {
            common: "Hungary",
            official: "Hungary",
            nativeName: {
                hun: {
                    official: "Magyarorsz\xe1g",
                    common: "Magyarorsz\xe1g"
                }
            }
        },
        tld: [
            ".hu"
        ],
        cca2: "HU",
        ccn3: "348",
        cca3: "HUN",
        cioc: "HUN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            HUF: {
                name: "Hungarian forint",
                symbol: "Ft"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "6"
            ]
        },
        capital: [
            "Budapest"
        ],
        altSpellings: [
            "HU"
        ],
        region: "Europe",
        subregion: "Central Europe",
        languages: {
            hun: "Hungarian"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0645\u062C\u0631\u064A\u0629",
                common: "\u0627\u0644\u0645\u062C\u0631"
            },
            bre: {
                official: "Hungaria",
                common: "Hungaria"
            },
            ces: {
                official: "Ma\u010Farsko",
                common: "Ma\u010Farsko"
            },
            cym: {
                official: "Hungary",
                common: "Hungary"
            },
            deu: {
                official: "Ungarn",
                common: "Ungarn"
            },
            est: {
                official: "Ungari",
                common: "Ungari"
            },
            fin: {
                official: "Unkari",
                common: "Unkari"
            },
            fra: {
                official: "Hongrie",
                common: "Hongrie"
            },
            hrv: {
                official: "Mad\u017Earska",
                common: "Ma\u0111arska"
            },
            hun: {
                official: "Magyarorsz\xe1g",
                common: "Magyarorsz\xe1g"
            },
            ita: {
                official: "Ungheria",
                common: "Ungheria"
            },
            jpn: {
                official: "\u30CF\u30F3\u30AC\u30EA\u30FC",
                common: "\u30CF\u30F3\u30AC\u30EA\u30FC"
            },
            kor: {
                official: "\uD5DD\uAC00\uB9AC",
                common: "\uD5DD\uAC00\uB9AC"
            },
            nld: {
                official: "Hongarije",
                common: "Hongarije"
            },
            per: {
                official: "\u0645\u062C\u0627\u0631\u0633\u062A\u0627\u0646",
                common: "\u0645\u062C\u0627\u0631\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "W\u0119gry",
                common: "W\u0119gry"
            },
            por: {
                official: "Hungria",
                common: "Hungria"
            },
            rus: {
                official: "\u0412\u0435\u043D\u0433\u0440\u0438\u044F",
                common: "\u0412\u0435\u043D\u0433\u0440\u0438\u044F"
            },
            slk: {
                official: "Ma\u010Farsko",
                common: "Ma\u010Farsko"
            },
            spa: {
                official: "Hungr\xeda",
                common: "Hungr\xeda"
            },
            srp: {
                official: "\u041C\u0430\u0452\u0430\u0440\u0441\u043A\u0430",
                common: "\u041C\u0430\u0452\u0430\u0440\u0441\u043A\u0430"
            },
            swe: {
                official: "Ungern",
                common: "Ungern"
            },
            tur: {
                official: "Macaristan",
                common: "Macaristan"
            },
            urd: {
                official: "\u0645\u062C\u0627\u0631\u0633\u062A\u0627\u0646",
                common: "\u0645\u062C\u0627\u0631\u0633\u062A\u0627\u0646"
            },
            zho: {
                official: "\u5308\u7259\u5229",
                common: "\u5308\u7259\u5229"
            }
        },
        latlng: [
            47,
            20
        ],
        landlocked: true,
        borders: [
            "AUT",
            "HRV",
            "ROU",
            "SRB",
            "SVK",
            "SVN",
            "UKR"
        ],
        area: 93028,
        demonyms: {
            eng: {
                f: "Hungarian",
                m: "Hungarian"
            },
            fra: {
                f: "Hongroise",
                m: "Hongrois"
            }
        },
        flag: "\uD83C\uDDED\uD83C\uDDFA",
        maps: {
            googleMaps: "https://goo.gl/maps/9gfPupm5bffixiFJ6",
            openStreetMaps: "https://www.openstreetmap.org/relation/21335"
        },
        population: 9749763,
        gini: {
            2018: 29.6
        },
        fifa: "HUN",
        car: {
            signs: [
                "H"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/hu.png",
            svg: "https://flagcdn.com/hu.svg",
            alt: "The flag of Hungary is composed of three equal horizontal bands of red, white and green."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/hu.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/hu.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                47.5,
                19.08
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Taiwan",
            official: "Republic of China (Taiwan)",
            nativeName: {
                zho: {
                    official: "\u4E2D\u83EF\u6C11\u570B",
                    common: "\u53F0\u7063"
                }
            }
        },
        tld: [
            ".tw",
            ".\u53F0\u7063",
            ".\u53F0\u6E7E"
        ],
        cca2: "TW",
        ccn3: "158",
        cca3: "TWN",
        cioc: "TPE",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            TWD: {
                name: "New Taiwan dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+8",
            suffixes: [
                "86"
            ]
        },
        capital: [
            "Taipei"
        ],
        altSpellings: [
            "TW",
            "T\xe1iw\u0101n",
            "Republic of China",
            "\u4E2D\u83EF\u6C11\u570B",
            "Zh\u014Dnghu\xe1 M\xedngu\xf3",
            "Chinese Taipei"
        ],
        region: "Asia",
        subregion: "Eastern Asia",
        languages: {
            zho: "Chinese"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u064A\u0646 (\u062A\u0627\u064A\u0648\u0627\u0646)",
                common: "\u062A\u0627\u064A\u0648\u0627\u0646"
            },
            bre: {
                official: "Republik Sina (Taiwan)",
                common: "Taiwan"
            },
            ces: {
                official: "\u010C\xednsk\xe1 republika",
                common: "Tchaj-wan"
            },
            cym: {
                official: "Republic of China (Taiwan)",
                common: "Taiwan"
            },
            deu: {
                official: "Republik China (Taiwan)",
                common: "Taiwan"
            },
            est: {
                official: "Taiwani",
                common: "Taiwan"
            },
            fin: {
                official: "Kiinan tasavalta",
                common: "Taiwan"
            },
            fra: {
                official: "R\xe9publique de Chine (Ta\xefwan)",
                common: "Ta\xefwan"
            },
            hrv: {
                official: "Republika Kina",
                common: "Tajvan"
            },
            hun: {
                official: "K\xednai K\xf6zt\xe1rsas\xe1g",
                common: "Tajvan"
            },
            ita: {
                official: "Repubblica cinese (Taiwan)",
                common: "Taiwan"
            },
            jpn: {
                official: "\u4E2D\u83EF\u6C11\u56FD",
                common: "\u53F0\u6E7E"
            },
            kor: {
                official: "\uC911\uD654\uBBFC\uAD6D",
                common: "\uB300\uB9CC"
            },
            nld: {
                official: "Republiek China (Taiwan)",
                common: "Taiwan"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0686\u06CC\u0646",
                common: "\u062A\u0627\u06CC\u0648\u0627\u0646"
            },
            pol: {
                official: "Republika Chi\u0144ska (Tajwan)",
                common: "Tajwan"
            },
            por: {
                official: "Rep\xfablica da China",
                common: "Ilha Formosa"
            },
            rus: {
                official: "\u041A\u0438\u0442\u0430\u0439\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0422\u0430\u0439\u0432\u0430\u043D\u044C"
            },
            slk: {
                official: "\u010C\xednska republika",
                common: "Taiwan"
            },
            spa: {
                official: "Rep\xfablica de China en Taiw\xe1n",
                common: "Taiw\xe1n"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0438\u043D\u0430",
                common: "\u0422\u0430\u0458\u0432\u0430\u043D"
            },
            swe: {
                official: "Republiken Kina",
                common: "Taiwan"
            },
            tur: {
                official: "\xc7in Cumhuriyeti (Tayvan)",
                common: "Tayvan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u06CC\u0646 (\u062A\u0627\u0626\u06CC\u0648\u0627\u0646)",
                common: "\u062A\u0627\u0626\u06CC\u0648\u0627\u0646"
            }
        },
        latlng: [
            23.5,
            121
        ],
        landlocked: false,
        area: 36193,
        demonyms: {
            eng: {
                f: "Taiwanese",
                m: "Taiwanese"
            },
            fra: {
                f: "Ta\xefwanaise",
                m: "Ta\xefwanais"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDFC",
        maps: {
            googleMaps: "https://goo.gl/maps/HgMKFQjNadF3Wa6B6",
            openStreetMaps: "https://www.openstreetmap.org/relation/449220"
        },
        population: 23503349,
        fifa: "TPE",
        car: {
            signs: [
                "RC"
            ],
            side: "right"
        },
        timezones: [
            "UTC+08:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tw.png",
            svg: "https://flagcdn.com/tw.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/tw.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/tw.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                25.03,
                121.52
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Wallis and Futuna",
            official: "Territory of the Wallis and Futuna Islands",
            nativeName: {
                fra: {
                    official: "Territoire des \xeeles Wallis et Futuna",
                    common: "Wallis et Futuna"
                }
            }
        },
        tld: [
            ".wf"
        ],
        cca2: "WF",
        ccn3: "876",
        cca3: "WLF",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            XPF: {
                name: "CFP franc",
                symbol: "\u20A3"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "81"
            ]
        },
        capital: [
            "Mata-Utu"
        ],
        altSpellings: [
            "WF",
            "Territory of the Wallis and Futuna Islands",
            "Territoire des \xeeles Wallis et Futuna"
        ],
        region: "Oceania",
        subregion: "Polynesia",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0625\u0642\u0644\u064A\u0645 \u062C\u0632\u0631 \u0648\u0627\u0644\u064A\u0633 \u0648\u0641\u0648\u062A\u0648\u0646\u0627",
                common: "\u0648\u0627\u0644\u064A\u0633 \u0648\u0641\u0648\u062A\u0648\u0646\u0627"
            },
            bre: {
                official: "Tiriad Inizi Wallis ha Futuna",
                common: "Wallis ha Futuna"
            },
            ces: {
                official: "Teritorium ostrov\u016F Wallis a Futuna",
                common: "Wallis a Futuna"
            },
            cym: {
                official: "Territory of the Wallis and Futuna Islands",
                common: "Wallis and Futuna"
            },
            deu: {
                official: "Gebiet der Wallis und Futuna",
                common: "Wallis und Futuna"
            },
            est: {
                official: "Wallise ja Futuna ala",
                common: "Wallis ja Futuna"
            },
            fin: {
                official: "Wallisin ja Futunan yhteis\xf6",
                common: "Wallis ja Futuna"
            },
            fra: {
                official: "Territoire des \xeeles Wallis et Futuna",
                common: "Wallis-et-Futuna"
            },
            hrv: {
                official: "Teritoriju Wallis i Futuna",
                common: "Wallis i Fortuna"
            },
            hun: {
                official: "Wallis \xe9s Futuna",
                common: "Wallis \xe9s Futuna"
            },
            ita: {
                official: "Territorio delle Isole Wallis e Futuna",
                common: "Wallis e Futuna"
            },
            jpn: {
                official: "\u30A6\u30A9\u30EA\u30B9\xb7\u30D5\u30C4\u30CA\u8AF8\u5CF6\u306E\u9818\u571F",
                common: "\u30A6\u30A9\u30EA\u30B9\u30FB\u30D5\u30C4\u30CA"
            },
            kor: {
                official: "\uC648\uB9AC\uC2A4 \uD4CC\uD280\uB098",
                common: "\uC648\uB9AC\uC2A4 \uD4CC\uD280\uB098"
            },
            nld: {
                official: "Grondgebied van de Wallis en Futuna",
                common: "Wallis en Futuna"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u0648\u0627\u0644\u06CC\u0633 \u0648 \u0641\u0648\u062A\u0648\u0646\u0627",
                common: "\u0648\u0627\u0644\u06CC\u0633 \u0648 \u0641\u0648\u062A\u0648\u0646\u0627"
            },
            pol: {
                official: "Terytorium Wysp Wallis i Futuna",
                common: "Wallis i Futuna"
            },
            por: {
                official: "Territ\xf3rio das Ilhas Wallis e Futuna",
                common: "Wallis e Futuna"
            },
            rus: {
                official: "\u0422\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u0423\u043E\u043B\u043B\u0438\u0441 \u0438 \u0424\u0443\u0442\u0443\u043D\u0430 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u0423\u043E\u043B\u043B\u0438\u0441 \u0438 \u0424\u0443\u0442\u0443\u043D\u0430"
            },
            slk: {
                official: "Terit\xf3rium ostrovov Wallis a Futuna",
                common: "Wallis a Futuna"
            },
            spa: {
                official: "Territorio de las Islas Wallis y Futuna",
                common: "Wallis y Futuna"
            },
            srp: {
                official: "\u0422\u0435\u0440\u0438\u0442\u043E\u0440\u0438\u0458\u0430 \u0434\u0440\u0436\u0430\u0432\u0435 \u0412\u0430\u043B\u0438\u0441 \u0438 \u0424\u0443\u0442\u0443\u043D\u0430",
                common: "\u0412\u0430\u043B\u0438\u0441 \u0438 \u0424\u0443\u0442\u0443\u043D\u0430"
            },
            swe: {
                official: "Territoriet Wallis- och Futuna\xf6arna",
                common: "Wallis- och Futuna\xf6arna"
            },
            tur: {
                official: "Wallis ve Futuna Adalar\u0131 B\xf6lgesi",
                common: "Wallis ve Futuna Adalar\u0131 B\xf6lgesi"
            },
            urd: {
                official: "\u0633\u0631 \u0632\u0645\u06CC\u0646\u0650 \u0648\u0627\u0644\u0633 \u0648 \u0641\u062A\u0648\u0646\u06C1 \u062C\u0632\u0627\u0626\u0631",
                common: "\u0648\u0627\u0644\u0633 \u0648 \u0641\u062A\u0648\u0646\u06C1"
            },
            zho: {
                official: "\u74E6\u5229\u65AF\u548C\u5BCC\u56FE\u7EB3\u7FA4\u5C9B",
                common: "\u74E6\u5229\u65AF\u548C\u5BCC\u56FE\u7EB3\u7FA4\u5C9B"
            }
        },
        latlng: [
            -13.3,
            -176.2
        ],
        landlocked: false,
        area: 142,
        demonyms: {
            eng: {
                f: "Wallis and Futuna Islander",
                m: "Wallis and Futuna Islander"
            }
        },
        flag: "\uD83C\uDDFC\uD83C\uDDEB",
        maps: {
            googleMaps: "https://goo.gl/maps/CzVqK74QYtbHv65r5",
            openStreetMaps: "https://www.openstreetmap.org/relation/3412448"
        },
        population: 11750,
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC+12:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/wf.png",
            svg: "https://flagcdn.com/wf.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -13.95,
                -171.93
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(986\\d{2})$"
        }
    },
    {
        name: {
            common: "Barbados",
            official: "Barbados",
            nativeName: {
                eng: {
                    official: "Barbados",
                    common: "Barbados"
                }
            }
        },
        tld: [
            ".bb"
        ],
        cca2: "BB",
        ccn3: "052",
        cca3: "BRB",
        cioc: "BAR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BBD: {
                name: "Barbadian dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "246"
            ]
        },
        capital: [
            "Bridgetown"
        ],
        altSpellings: [
            "BB"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0628\u0627\u0631\u0628\u0627\u062F\u0648\u0633",
                common: "\u0628\u0627\u0631\u0628\u0627\u062F\u0648\u0633"
            },
            bre: {
                official: "Barbados",
                common: "Barbados"
            },
            ces: {
                official: "Barbados",
                common: "Barbados"
            },
            cym: {
                official: "Barbados",
                common: "Barbados"
            },
            deu: {
                official: "Barbados",
                common: "Barbados"
            },
            est: {
                official: "Barbados",
                common: "Barbados"
            },
            fin: {
                official: "Barbados",
                common: "Barbados"
            },
            fra: {
                official: "Barbade",
                common: "Barbade"
            },
            hrv: {
                official: "Barbados",
                common: "Barbados"
            },
            hun: {
                official: "Barbados",
                common: "Barbados"
            },
            ita: {
                official: "Barbados",
                common: "Barbados"
            },
            jpn: {
                official: "\u30D0\u30EB\u30D0\u30C9\u30B9",
                common: "\u30D0\u30EB\u30D0\u30C9\u30B9"
            },
            kor: {
                official: "\uBC14\uBCA0\uC774\uB3C4\uC2A4",
                common: "\uBC14\uBCA0\uC774\uB3C4\uC2A4"
            },
            nld: {
                official: "Barbados",
                common: "Barbados"
            },
            per: {
                official: "\u0628\u0627\u0631\u0628\u0627\u062F\u0648\u0633",
                common: "\u0628\u0627\u0631\u0628\u0627\u062F\u0648\u0633"
            },
            pol: {
                official: "Barbados",
                common: "Barbados"
            },
            por: {
                official: "Barbados",
                common: "Barbados"
            },
            rus: {
                official: "\u0411\u0430\u0440\u0431\u0430\u0434\u043E\u0441",
                common: "\u0411\u0430\u0440\u0431\u0430\u0434\u043E\u0441"
            },
            slk: {
                official: "Barbados",
                common: "Barbados"
            },
            spa: {
                official: "Barbados",
                common: "Barbados"
            },
            srp: {
                official: "\u0411\u0430\u0440\u0431\u0430\u0434\u043E\u0441",
                common: "\u0411\u0430\u0440\u0431\u0430\u0434\u043E\u0441"
            },
            swe: {
                official: "Barbados",
                common: "Barbados"
            },
            tur: {
                official: "Barbados",
                common: "Barbados"
            },
            urd: {
                official: "\u0628\u0627\u0631\u0628\u0627\u0688\u0648\u0633",
                common: "\u0628\u0627\u0631\u0628\u0627\u0688\u0648\u0633"
            },
            zho: {
                official: "\u5DF4\u5DF4\u591A\u65AF",
                common: "\u5DF4\u5DF4\u591A\u65AF"
            }
        },
        latlng: [
            13.16666666,
            -59.53333333
        ],
        landlocked: false,
        area: 430,
        demonyms: {
            eng: {
                f: "Barbadian",
                m: "Barbadian"
            },
            fra: {
                f: "Barbadienne",
                m: "Barbadien"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDE7",
        maps: {
            googleMaps: "https://goo.gl/maps/2m36v8STvbGAWd9c7",
            openStreetMaps: "https://www.openstreetmap.org/relation/547511"
        },
        population: 287371,
        fifa: "BRB",
        car: {
            signs: [
                "BDS"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bb.png",
            svg: "https://flagcdn.com/bb.svg",
            alt: "The flag of Barbados is composed of three equal vertical bands of ultramarine, gold and ultramarine. The head of a black trident is centered in the gold band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bb.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bb.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                13.1,
                -59.62
            ]
        },
        postalCode: {
            format: "BB#####",
            regex: "^(?:BB)*(\\d{5})$"
        }
    },
    {
        name: {
            common: "Pitcairn Islands",
            official: "Pitcairn Group of Islands",
            nativeName: {
                eng: {
                    official: "Pitcairn Group of Islands",
                    common: "Pitcairn Islands"
                }
            }
        },
        tld: [
            ".pn"
        ],
        cca2: "PN",
        ccn3: "612",
        cca3: "PCN",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            NZD: {
                name: "New Zealand dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "4"
            ]
        },
        capital: [
            "Adamstown"
        ],
        altSpellings: [
            "PN",
            "Pitcairn",
            "Pitcairn Henderson Ducie and Oeno Islands"
        ],
        region: "Oceania",
        subregion: "Polynesia",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u0628\u064A\u062A\u0643\u064A\u0631\u0646",
                common: "\u062C\u0632\u0631 \u0628\u064A\u062A\u0643\u064A\u0631\u0646"
            },
            bre: {
                official: "Inizi Pitcairn, Henderson, Ducie hag Oeno",
                common: "Inizi Pitcairn"
            },
            ces: {
                official: "Pitcairnovy ostrovy",
                common: "Pitcairnovy ostrovy"
            },
            cym: {
                official: "Pitcairn Group of Islands",
                common: "Pitcairn Islands"
            },
            deu: {
                official: "Pitcairninseln",
                common: "Pitcairninseln"
            },
            est: {
                official: "Pitcairni, Hendersoni, Ducie ja Oeno saar",
                common: "Pitcairn"
            },
            fin: {
                official: "Pitcairn",
                common: "Pitcairn"
            },
            fra: {
                official: "Groupe d'\xeeles Pitcairn",
                common: "\xceles Pitcairn"
            },
            hrv: {
                official: "Pitcairn skupine otoka",
                common: "Pitcairnovo oto\u010Dje"
            },
            hun: {
                official: "Pitcairn-szigetek",
                common: "Pitcairn-szigetek"
            },
            ita: {
                official: "Pitcairn gruppo di isole",
                common: "Isole Pitcairn"
            },
            jpn: {
                official: "\u5CF6\u306E\u30D4\u30C8\u30B1\u30A2\u30F3\u30B0\u30EB\u30FC\u30D7",
                common: "\u30D4\u30C8\u30B1\u30A2\u30F3"
            },
            kor: {
                official: "\uD54F\uCF00\uC5B8 \uC81C\uB3C4",
                common: "\uD54F\uCF00\uC5B8 \uC81C\uB3C4"
            },
            nld: {
                official: "Pitcairn groep eilanden",
                common: "Pitcairneilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u067E\u06CC\u062A\u200C\u06A9\u0631\u0646",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u067E\u06CC\u062A\u200C\u06A9\u0631\u0646"
            },
            pol: {
                official: "Wyspy Pitcairn, Henderson, Ducie i Oeno",
                common: "Pitcairn"
            },
            por: {
                official: "Pitcairn grupo de ilhas",
                common: "Ilhas Pitcairn"
            },
            rus: {
                official: "\u041F\u0438\u0442\u043A\u044D\u0440\u043D \u0433\u0440\u0443\u043F\u043F\u0430 \u043E\u0441\u0442\u0440\u043E\u0432\u043E\u0432",
                common: "\u041E\u0441\u0442\u0440\u043E\u0432\u0430 \u041F\u0438\u0442\u043A\u044D\u0440\u043D"
            },
            slk: {
                official: "Pitcairnove ostrovy",
                common: "Pitcairnove ostrovy"
            },
            spa: {
                official: "Grupo de Islas Pitcairn",
                common: "Islas Pitcairn"
            },
            srp: {
                official: "\u041E\u0441\u0442\u0440\u0432\u0430 \u041F\u0438\u0442\u043A\u0435\u0440\u043D, \u0425\u0435\u043D\u0434\u0435\u0440\u0441\u043E\u043D, \u0414\u0443\u0446\u0438 \u0438 \u041E\u0438\u043D",
                common: "\u041E\u0441\u0442\u0440\u0432\u0430 \u041F\u0438\u0442\u043A\u0435\u0440\u043D"
            },
            swe: {
                official: "Pitcairn\xf6arna",
                common: "Pitcairn\xf6arna"
            },
            tur: {
                official: "Pitcairn, Henderson, Ducie ve Oeno Adalar\u0131",
                common: "Pitcairn Adalar\u0131"
            },
            urd: {
                official: "\u067E\u0679\u06A9\u06CC\u0631\u0646 \u062C\u0632\u0627\u0626\u0631",
                common: "\u062C\u0632\u0627\u0626\u0631 \u067E\u0679\u06A9\u06CC\u0631\u0646"
            },
            zho: {
                official: "\u76AE\u7279\u51EF\u6069\u7FA4\u5C9B",
                common: "\u76AE\u7279\u51EF\u6069\u7FA4\u5C9B"
            }
        },
        latlng: [
            -25.06666666,
            -130.1
        ],
        landlocked: false,
        area: 47,
        demonyms: {
            eng: {
                f: "Pitcairn Islander",
                m: "Pitcairn Islander"
            },
            fra: {
                f: "Pitcairnaise",
                m: "Pitcairnais"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDF3",
        maps: {
            googleMaps: "https://goo.gl/maps/XGJMnMAigXjXcxSa7",
            openStreetMaps: "https://www.openstreetmap.org/relation/2185375"
        },
        population: 56,
        car: {
            signs: [
                "GB"
            ],
            side: "left"
        },
        timezones: [
            "UTC-08:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/pn.png",
            svg: "https://flagcdn.com/pn.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -25.07,
                -130.08
            ]
        }
    },
    {
        name: {
            common: "Ivory Coast",
            official: "Republic of C\xf4te d'Ivoire",
            nativeName: {
                fra: {
                    official: "R\xe9publique de C\xf4te d'Ivoire",
                    common: "C\xf4te d'Ivoire"
                }
            }
        },
        tld: [
            ".ci"
        ],
        cca2: "CI",
        ccn3: "384",
        cca3: "CIV",
        cioc: "CIV",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XOF: {
                name: "West African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "25"
            ]
        },
        capital: [
            "Yamoussoukro"
        ],
        altSpellings: [
            "CI",
            "C\xf4te d'Ivoire",
            "Ivory Coast",
            "Republic of C\xf4te d'Ivoire",
            "R\xe9publique de C\xf4te d'Ivoire"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0627\u062D\u0644 \u0627\u0644\u0639\u0627\u062C",
                common: "\u0633\u0627\u062D\u0644 \u0627\u0644\u0639\u0627\u062C"
            },
            bre: {
                official: "Republik Aod an Olifant",
                common: "Aod an Olifant"
            },
            ces: {
                official: "Republika Pob\u0159e\u017E\xed slonoviny",
                common: "Pob\u0159e\u017E\xed slonoviny"
            },
            cym: {
                official: "Republic of C\xf4te d'Ivoire",
                common: "Ivory Coast"
            },
            deu: {
                official: "Republik C\xf4te d'Ivoire",
                common: "Elfenbeink\xfcste"
            },
            est: {
                official: "C\xf4te d\u2019Ivoire\u2019i Vabariik",
                common: "Elevandiluurannik"
            },
            fin: {
                official: "Norsunluurannikon tasavalta",
                common: "Norsunluurannikko"
            },
            fra: {
                official: "R\xe9publique de C\xf4te d' Ivoire",
                common: "C\xf4te d'Ivoire"
            },
            hrv: {
                official: "Republika C\xf4te d'Ivoire",
                common: "Obala Bjelokosti"
            },
            hun: {
                official: "Elef\xe1ntcsontparti K\xf6zt\xe1rsas\xe1g",
                common: "Elef\xe1ntcsontpart"
            },
            ita: {
                official: "Repubblica della Costa d'Avorio",
                common: "Costa d'Avorio"
            },
            jpn: {
                official: "\u30B3\u30FC\u30C8\u30B8\u30DC\u30EF\u30FC\u30EB\u5171\u548C\u56FD",
                common: "\u30B3\u30FC\u30C8\u30B8\u30DC\u30EF\u30FC\u30EB"
            },
            kor: {
                official: "\uCF54\uD2B8\uB514\uBD80\uC544\uB974 \uACF5\uD654\uAD6D",
                common: "\uCF54\uD2B8\uB514\uBD80\uC544\uB974"
            },
            nld: {
                official: "Republiek Ivoorkust",
                common: "Ivoorkust"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0627\u062D\u0644 \u0639\u0627\u062C",
                common: "\u0633\u0627\u062D\u0644 \u0639\u0627\u062C"
            },
            pol: {
                official: "Republika Wybrze\u017Ba Ko\u015Bci S\u0142oniowej",
                common: "Wybrze\u017Be Ko\u015Bci S\u0142oniowej"
            },
            por: {
                official: "Rep\xfablica da C\xf4te d'Ivoire",
                common: "Costa do Marfim"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0442-\u0434'\u0418\u0432\u0443\u0430\u0440\u0435",
                common: "\u041A\u043E\u0442-\u0434\u2019\u0418\u0432\u0443\u0430\u0440"
            },
            slk: {
                official: "Republika Pobre\u017Eie Slonoviny",
                common: "Pobr\u017Eie Slonoviny"
            },
            spa: {
                official: "Rep\xfablica de C\xf4te d'Ivoire",
                common: "Costa de Marfil"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041E\u0431\u0430\u043B\u0430 \u0421\u043B\u043E\u043D\u043E\u0432\u0430\u0447\u0435",
                common: "\u041E\u0431\u0430\u043B\u0430 \u0421\u043B\u043E\u043D\u043E\u0432\u0430\u0447\u0435"
            },
            swe: {
                official: "Republiken Elfenbenskusten",
                common: "Elfenbenskusten"
            },
            tur: {
                official: "Fildi\u015Fi Sahili",
                common: "Fildi\u015Fi Sahili"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u062A \u062F\u06CC\u0648\u0627\u063A",
                common: "\u0622\u0626\u06CC\u0648\u0631\u06CC \u06A9\u0648\u0633\u0679"
            },
            zho: {
                official: "\u79D1\u7279\u8FEA\u74E6\u5171\u548C\u56FD",
                common: "\u79D1\u7279\u8FEA\u74E6"
            }
        },
        latlng: [
            8,
            -5
        ],
        landlocked: false,
        borders: [
            "BFA",
            "GHA",
            "GIN",
            "LBR",
            "MLI"
        ],
        area: 322463,
        demonyms: {
            eng: {
                f: "Ivorian",
                m: "Ivorian"
            },
            fra: {
                f: "Ivoirienne",
                m: "Ivoirien"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDEE",
        maps: {
            googleMaps: "https://goo.gl/maps/wKsmN7f5qAeNtGjP6",
            openStreetMaps: "https://www.openstreetmap.org/relation/192779"
        },
        population: 26378275,
        gini: {
            2015: 41.5
        },
        fifa: "CIV",
        car: {
            signs: [
                "CI"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ci.png",
            svg: "https://flagcdn.com/ci.svg",
            alt: "The flag of Ivory Coast is composed of three equal vertical bands of orange, white and green."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ci.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ci.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                6.82,
                -5.27
            ]
        }
    },
    {
        name: {
            common: "Tunisia",
            official: "Tunisian Republic",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062A\u0648\u0646\u0633\u064A\u0629",
                    common: "\u062A\u0648\u0646\u0633"
                }
            }
        },
        tld: [
            ".tn"
        ],
        cca2: "TN",
        ccn3: "788",
        cca3: "TUN",
        cioc: "TUN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            TND: {
                name: "Tunisian dinar",
                symbol: "\u062F.\u062A"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "16"
            ]
        },
        capital: [
            "Tunis"
        ],
        altSpellings: [
            "TN",
            "Republic of Tunisia",
            "al-Jumh\u016Briyyah at-T\u016Bnisiyyah"
        ],
        region: "Africa",
        subregion: "Northern Africa",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062A\u0648\u0646\u0633\u064A\u0629",
                common: "\u062A\u0648\u0646\u0633"
            },
            bre: {
                official: "Republik Tunizian",
                common: "Tunizia"
            },
            ces: {
                official: "Tunisk\xe1 republika",
                common: "Tunisko"
            },
            cym: {
                official: "Tunisian Republic",
                common: "Tunisia"
            },
            deu: {
                official: "Tunesische Republik",
                common: "Tunesien"
            },
            est: {
                official: "Tuneesia Vabariik",
                common: "Tuneesia"
            },
            fin: {
                official: "Tunisian tasavalta",
                common: "Tunisia"
            },
            fra: {
                official: "R\xe9publique tunisienne",
                common: "Tunisie"
            },
            hrv: {
                official: "Tuniski Republika",
                common: "Tunis"
            },
            hun: {
                official: "Tun\xe9ziai K\xf6zt\xe1rsas\xe1g",
                common: "Tun\xe9zia"
            },
            ita: {
                official: "Repubblica tunisina",
                common: "Tunisia"
            },
            jpn: {
                official: "\u30C1\u30E5\u30CB\u30B8\u30A2\u5171\u548C\u56FD",
                common: "\u30C1\u30E5\u30CB\u30B8\u30A2"
            },
            kor: {
                official: "\uD280\uB2C8\uC9C0 \uACF5\uD654\uAD6D",
                common: "\uD280\uB2C8\uC9C0"
            },
            nld: {
                official: "Republiek Tunesi\xeb",
                common: "Tunesi\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0648\u0646\u0633",
                common: "\u062A\u0648\u0646\u0633"
            },
            pol: {
                official: "Republika Tunezyjska",
                common: "Tunezja"
            },
            por: {
                official: "Rep\xfablica da Tun\xedsia",
                common: "Tun\xedsia"
            },
            rus: {
                official: "\u0422\u0443\u043D\u0438\u0441\u0441\u043A\u043E\u0439 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0438",
                common: "\u0422\u0443\u043D\u0438\u0441"
            },
            slk: {
                official: "Tunisk\xe1 republika",
                common: "Tunisko"
            },
            spa: {
                official: "Rep\xfablica de T\xfanez",
                common: "T\xfanez"
            },
            srp: {
                official: "\u0422\u0443\u043D\u0438\u0448\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0422\u0443\u043D\u0438\u0441"
            },
            swe: {
                official: "Republiken Tunisien",
                common: "Tunisien"
            },
            tur: {
                official: "Tunus Cumhuriyeti",
                common: "Tunus"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062A\u0648\u0646\u0633",
                common: "\u062A\u0648\u0646\u0633"
            },
            zho: {
                official: "\u7A81\u5C3C\u65AF\u5171\u548C\u56FD",
                common: "\u7A81\u5C3C\u65AF"
            }
        },
        latlng: [
            34,
            9
        ],
        landlocked: false,
        borders: [
            "DZA",
            "LBY"
        ],
        area: 163610,
        demonyms: {
            eng: {
                f: "Tunisian",
                m: "Tunisian"
            },
            fra: {
                f: "Tunisienne",
                m: "Tunisien"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDF3",
        maps: {
            googleMaps: "https://goo.gl/maps/KgUmpZdUuNRaougs8",
            openStreetMaps: "https://www.openstreetmap.org/relation/192757"
        },
        population: 11818618,
        gini: {
            2015: 32.8
        },
        fifa: "TUN",
        car: {
            signs: [
                "TN"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tn.png",
            svg: "https://flagcdn.com/tn.svg",
            alt: "The flag of Tunisia has a red field. A white circle bearing a five-pointed red star within a fly-side facing red crescent is situated at the center of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/tn.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/tn.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                36.8,
                10.18
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Italy",
            official: "Italian Republic",
            nativeName: {
                ita: {
                    official: "Repubblica italiana",
                    common: "Italia"
                }
            }
        },
        tld: [
            ".it"
        ],
        cca2: "IT",
        ccn3: "380",
        cca3: "ITA",
        cioc: "ITA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "9"
            ]
        },
        capital: [
            "Rome"
        ],
        altSpellings: [
            "IT",
            "Italian Republic",
            "Repubblica italiana"
        ],
        region: "Europe",
        subregion: "Southern Europe",
        languages: {
            ita: "Italian"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0625\u064A\u0637\u0627\u0644\u064A\u0629",
                common: "\u0625\u064A\u0637\u0627\u0644\u064A\u0627"
            },
            bre: {
                official: "Republik Italia",
                common: "Italia"
            },
            ces: {
                official: "Italsk\xe1 republika",
                common: "It\xe1lie"
            },
            cym: {
                official: "Italian Republic",
                common: "Italy"
            },
            deu: {
                official: "Italienische Republik",
                common: "Italien"
            },
            est: {
                official: "Itaalia Vabariik",
                common: "Itaalia"
            },
            fin: {
                official: "Italian tasavalta",
                common: "Italia"
            },
            fra: {
                official: "R\xe9publique italienne",
                common: "Italie"
            },
            hrv: {
                official: "talijanska Republika",
                common: "Italija"
            },
            hun: {
                official: "Olasz K\xf6zt\xe1rsas\xe1g",
                common: "Olaszorsz\xe1g"
            },
            ita: {
                official: "Repubblica italiana",
                common: "Italia"
            },
            jpn: {
                official: "\u30A4\u30BF\u30EA\u30A2\u5171\u548C\u56FD",
                common: "\u30A4\u30BF\u30EA\u30A2"
            },
            kor: {
                official: "\uC774\uD0C8\uB9AC\uC544 \uACF5\uD654\uAD6D",
                common: "\uC774\uD0C8\uB9AC\uC544"
            },
            nld: {
                official: "Italiaanse Republiek",
                common: "Itali\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u06CC\u062A\u0627\u0644\u06CC\u0627",
                common: "\u0627\u06CC\u062A\u0627\u0644\u06CC\u0627"
            },
            pol: {
                official: "Republika W\u0142oska",
                common: "W\u0142ochy"
            },
            por: {
                official: "Rep\xfablica Italiana",
                common: "It\xe1lia"
            },
            rus: {
                official: "\u0438\u0442\u0430\u043B\u044C\u044F\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0418\u0442\u0430\u043B\u0438\u044F"
            },
            slk: {
                official: "Talianska republika",
                common: "Taliansko"
            },
            spa: {
                official: "Rep\xfablica Italiana",
                common: "Italia"
            },
            srp: {
                official: "\u0418\u0442\u0430\u043B\u0438\u0458\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0418\u0442\u0430\u043B\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Italien",
                common: "Italien"
            },
            tur: {
                official: "\u0130talyan Cumhuriyeti",
                common: "\u0130talya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0637\u0627\u0644\u06CC\u06C1",
                common: "\u0627\u0637\u0627\u0644\u06CC\u06C1"
            },
            zho: {
                official: "\u610F\u5927\u5229\u5171\u548C\u56FD",
                common: "\u610F\u5927\u5229"
            }
        },
        latlng: [
            42.83333333,
            12.83333333
        ],
        landlocked: false,
        borders: [
            "AUT",
            "FRA",
            "SMR",
            "SVN",
            "CHE",
            "VAT"
        ],
        area: 301336,
        demonyms: {
            eng: {
                f: "Italian",
                m: "Italian"
            },
            fra: {
                f: "Italienne",
                m: "Italien"
            }
        },
        flag: "\uD83C\uDDEE\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/8M1K27TDj7StTRTq8",
            openStreetMaps: "https://www.openstreetmap.org/relation/365331"
        },
        population: 59554023,
        gini: {
            2017: 35.9
        },
        fifa: "ITA",
        car: {
            signs: [
                "I"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/it.png",
            svg: "https://flagcdn.com/it.svg",
            alt: "The flag of Italy is composed of three equal vertical bands of green, white and red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/it.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/it.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                41.9,
                12.48
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Benin",
            official: "Republic of Benin",
            nativeName: {
                fra: {
                    official: "R\xe9publique du B\xe9nin",
                    common: "B\xe9nin"
                }
            }
        },
        tld: [
            ".bj"
        ],
        cca2: "BJ",
        ccn3: "204",
        cca3: "BEN",
        cioc: "BEN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XOF: {
                name: "West African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "29"
            ]
        },
        capital: [
            "Porto-Novo"
        ],
        altSpellings: [
            "BJ",
            "Republic of Benin",
            "R\xe9publique du B\xe9nin"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0646\u064A\u0646",
                common: "\u0628\u0646\u064A\u0646"
            },
            bre: {
                official: "Republik Benin",
                common: "Benin"
            },
            ces: {
                official: "Beninsk\xe1 republika",
                common: "Benin"
            },
            cym: {
                official: "Gweriniaeth Benin",
                common: "Benin"
            },
            deu: {
                official: "Republik Benin",
                common: "Benin"
            },
            est: {
                official: "Benini Vabariik",
                common: "Benin"
            },
            fin: {
                official: "Beninin tasavalta",
                common: "Benin"
            },
            fra: {
                official: "R\xe9publique du B\xe9nin",
                common: "B\xe9nin"
            },
            hrv: {
                official: "Republika Benin",
                common: "Benin"
            },
            hun: {
                official: "Benini K\xf6zt\xe1rsas\xe1g",
                common: "Benin"
            },
            ita: {
                official: "Repubblica del Benin",
                common: "Benin"
            },
            jpn: {
                official: "\u30D9\u30CA\u30F3\u5171\u548C\u56FD",
                common: "\u30D9\u30CA\u30F3"
            },
            kor: {
                official: "\uBCA0\uB0C9 \uACF5\uD654\uAD6D",
                common: "\uBCA0\uB0C9"
            },
            nld: {
                official: "Republiek Benin",
                common: "Benin"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0646\u06CC\u0646",
                common: "\u0628\u0646\u06CC\u0646"
            },
            pol: {
                official: "Benin",
                common: "Benin"
            },
            por: {
                official: "Rep\xfablica do Benin",
                common: "Benin"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043D\u0438\u043D",
                common: "\u0411\u0435\u043D\u0438\u043D"
            },
            slk: {
                official: "Beninsk\xe1 republika",
                common: "Benin"
            },
            spa: {
                official: "Rep\xfablica de Benin",
                common: "Ben\xedn"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043D\u0438\u043D",
                common: "\u0411\u0435\u043D\u0438\u043D"
            },
            swe: {
                official: "Republiken Benin",
                common: "Benin"
            },
            tur: {
                official: "Benin Cumhuriyeti",
                common: "Benin"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u06CC\u0646\u0646",
                common: "\u0628\u06CC\u0646\u0646"
            },
            zho: {
                official: "\u8D1D\u5B81\u5171\u548C\u56FD",
                common: "\u8D1D\u5B81"
            }
        },
        latlng: [
            9.5,
            2.25
        ],
        landlocked: false,
        borders: [
            "BFA",
            "NER",
            "NGA",
            "TGO"
        ],
        area: 112622,
        demonyms: {
            eng: {
                f: "Beninese",
                m: "Beninese"
            },
            fra: {
                f: "B\xe9ninoise",
                m: "B\xe9ninois"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDEF",
        maps: {
            googleMaps: "https://goo.gl/maps/uMw1BsHEXQYgVFFu6",
            openStreetMaps: "https://www.openstreetmap.org/relation/192784"
        },
        population: 12123198,
        gini: {
            2015: 47.8
        },
        fifa: "BEN",
        car: {
            signs: [
                "DY"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bj.png",
            svg: "https://flagcdn.com/bj.svg",
            alt: "The flag of Benin features a green vertical band on its hoist side that takes up about two-fifth the width of the field and two equal horizontal bands of yellow and red adjoining the vertical band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bj.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bj.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                6.48,
                2.62
            ]
        }
    },
    {
        name: {
            common: "Indonesia",
            official: "Republic of Indonesia",
            nativeName: {
                ind: {
                    official: "Republik Indonesia",
                    common: "Indonesia"
                }
            }
        },
        tld: [
            ".id"
        ],
        cca2: "ID",
        ccn3: "360",
        cca3: "IDN",
        cioc: "INA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            IDR: {
                name: "Indonesian rupiah",
                symbol: "Rp"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "2"
            ]
        },
        capital: [
            "Jakarta"
        ],
        altSpellings: [
            "ID",
            "Republic of Indonesia",
            "Republik Indonesia"
        ],
        region: "Asia",
        subregion: "South-Eastern Asia",
        languages: {
            ind: "Indonesian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0625\u0646\u062F\u0648\u0646\u064A\u0633\u064A\u0627",
                common: "\u0625\u0646\u062F\u0648\u0646\u064A\u0633\u064A\u0627"
            },
            bre: {
                official: "Republik Indonezia",
                common: "Indonezia"
            },
            ces: {
                official: "Indon\xe9sk\xe1 republika",
                common: "Indon\xe9sie"
            },
            cym: {
                official: "Republic of Indonesia",
                common: "Indonesia"
            },
            deu: {
                official: "Republik Indonesien",
                common: "Indonesien"
            },
            est: {
                official: "Indoneesia Vabariik",
                common: "Indoneesia"
            },
            fin: {
                official: "Indonesian tasavalta",
                common: "Indonesia"
            },
            fra: {
                official: "R\xe9publique d'Indon\xe9sie",
                common: "Indon\xe9sie"
            },
            hrv: {
                official: "Republika Indonezija",
                common: "Indonezija"
            },
            hun: {
                official: "Indon\xe9z K\xf6zt\xe1rsas\xe1g",
                common: "Indon\xe9zia"
            },
            ita: {
                official: "Repubblica di Indonesia",
                common: "Indonesia"
            },
            jpn: {
                official: "\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2\u5171\u548C\u56FD",
                common: "\u30A4\u30F3\u30C9\u30CD\u30B7\u30A2"
            },
            kor: {
                official: "\uC778\uB3C4\uB124\uC2DC\uC544 \uACF5\uD654\uAD6D",
                common: "\uC778\uB3C4\uB124\uC2DC\uC544"
            },
            nld: {
                official: "Republiek Indonesi\xeb",
                common: "Indonesi\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0646\u062F\u0648\u0646\u0632\u06CC",
                common: "\u0627\u0646\u062F\u0648\u0646\u0632\u06CC"
            },
            pol: {
                official: "Republika Indonezji",
                common: "Indonezja"
            },
            por: {
                official: "Rep\xfablica da Indon\xe9sia",
                common: "Indon\xe9sia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u044F",
                common: "\u0418\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u044F"
            },
            slk: {
                official: "Indon\xe9zska republika",
                common: "Indon\xe9zia"
            },
            spa: {
                official: "Rep\xfablica de Indonesia",
                common: "Indonesia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u0458\u0430",
                common: "\u0418\u043D\u0434\u043E\u043D\u0435\u0437\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Indonesien",
                common: "Indonesien"
            },
            tur: {
                official: "Endonezya Cumhuriyeti",
                common: "Endonezya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0646\u0688\u0648\u0646\u06CC\u0634\u06CC\u0627",
                common: "\u0627\u0646\u0688\u0648\u0646\u06CC\u0634\u06CC\u0627"
            },
            zho: {
                official: "\u5370\u5EA6\u5C3C\u897F\u4E9A\u5171\u548C\u56FD",
                common: "\u5370\u5EA6\u5C3C\u897F\u4E9A"
            }
        },
        latlng: [
            -5,
            120
        ],
        landlocked: false,
        borders: [
            "TLS",
            "MYS",
            "PNG"
        ],
        area: 1904569,
        demonyms: {
            eng: {
                f: "Indonesian",
                m: "Indonesian"
            },
            fra: {
                f: "Indon\xe9sienne",
                m: "Indon\xe9sien"
            }
        },
        flag: "\uD83C\uDDEE\uD83C\uDDE9",
        maps: {
            googleMaps: "https://goo.gl/maps/9gfPupm5bffixiFJ6",
            openStreetMaps: "https://www.openstreetmap.org/relation/21335"
        },
        population: 273523621,
        gini: {
            2019: 38.2
        },
        fifa: "IDN",
        car: {
            signs: [
                "RI"
            ],
            side: "left"
        },
        timezones: [
            "UTC+07:00",
            "UTC+08:00",
            "UTC+09:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/id.png",
            svg: "https://flagcdn.com/id.svg",
            alt: "The flag of Indonesia is composed of two equal horizontal bands of red and white."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/id.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/id.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -6.17,
                106.82
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Cape Verde",
            official: "Republic of Cabo Verde",
            nativeName: {
                por: {
                    official: "Rep\xfablica de Cabo Verde",
                    common: "Cabo Verde"
                }
            }
        },
        tld: [
            ".cv"
        ],
        cca2: "CV",
        ccn3: "132",
        cca3: "CPV",
        cioc: "CPV",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            CVE: {
                name: "Cape Verdean escudo",
                symbol: "Esc"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "38"
            ]
        },
        capital: [
            "Praia"
        ],
        altSpellings: [
            "CV",
            "Republic of Cabo Verde",
            "Rep\xfablica de Cabo Verde"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            por: "Portuguese"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0627\u0628\u0648 \u0641\u064A\u0631\u062F\u064A",
                common: "\u0643\u0627\u0628\u0648 \u0641\u064A\u0631\u062F\u064A"
            },
            bre: {
                official: "Republik Kab Glas",
                common: "Kab Glas"
            },
            ces: {
                official: "Kapverdsk\xe1 republika",
                common: "Kapverdy"
            },
            cym: {
                official: "Gweriniaeth Cabo Verde",
                common: "Penrhyn Verde"
            },
            deu: {
                official: "Republik Cabo Verde",
                common: "Kap Verde"
            },
            est: {
                official: "Cabo Verde Vabariik",
                common: "Roheneemesaared"
            },
            fin: {
                official: "Kap Verden tasavalta",
                common: "Kap Verde"
            },
            fra: {
                official: "R\xe9publique du Cap-Vert",
                common: "\xceles du Cap-Vert"
            },
            hrv: {
                official: "Republika Cabo Verde",
                common: "Zelenortska Republika"
            },
            hun: {
                official: "Z\xf6ld-foki K\xf6zt\xe1rsas\xe1g",
                common: "Z\xf6ld-foki K\xf6zt\xe1rsas\xe1g"
            },
            ita: {
                official: "Repubblica di Capo Verde",
                common: "Capo Verde"
            },
            jpn: {
                official: "\u30AB\u30FC\u30DC\u30D9\u30EB\u30C7\u5171\u548C\u56FD",
                common: "\u30AB\u30FC\u30DC\u30D9\u30EB\u30C7"
            },
            kor: {
                official: "\uCE74\uBCF4\uBCA0\uB974\uB370 \uACF5\uD654\uAD6D",
                common: "\uCE74\uBCF4\uBCA0\uB974\uB370"
            },
            nld: {
                official: "Republiek van Cabo Verde",
                common: "Kaapverdi\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0628\u0648 \u0648\u0631\u062F",
                common: "\u062F\u0645\u0627\u063A\u0647\u0654 \u0633\u0628\u0632"
            },
            pol: {
                official: "Republika Zielonego Przyl\u0105dka",
                common: "Republika Zielonego Przyl\u0105dka"
            },
            por: {
                official: "Rep\xfablica de Cabo Verde",
                common: "Cabo Verde"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u0431\u043E -\u0412\u0435\u0440\u0434\u0435",
                common: "\u041A\u0430\u0431\u043E-\u0412\u0435\u0440\u0434\u0435"
            },
            slk: {
                official: "Kapverdsk\xe1 republika",
                common: "Kapverdy"
            },
            spa: {
                official: "Rep\xfablica de Cabo Verde",
                common: "Cabo Verde"
            },
            srp: {
                official: "\u0417\u0435\u043B\u0435\u043D\u043E\u0440\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0417\u0435\u043B\u0435\u043D\u043E\u0440\u0442\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "Republiken Kap Verde",
                common: "Kap Verde"
            },
            tur: {
                official: "Ye\u015Fil Burun Cumhuriyeti",
                common: "Ye\u015Fil Burun"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u06CC\u067E \u0648\u0631\u0688\u06CC",
                common: "\u06A9\u06CC\u067E \u0648\u0631\u0688\u06CC"
            },
            zho: {
                official: "\u4F5B\u5F97\u89D2\u5171\u548C\u56FD",
                common: "\u4F5B\u5F97\u89D2"
            }
        },
        latlng: [
            16.5388,
            -23.0418
        ],
        landlocked: false,
        area: 4033,
        demonyms: {
            eng: {
                f: "Cape Verdian",
                m: "Cape Verdian"
            },
            fra: {
                f: "Cap-verdienne",
                m: "Cap-verdien"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDFB",
        maps: {
            googleMaps: "https://goo.gl/maps/Kc9vy5ChjuiAgMfXA",
            openStreetMaps: "https://www.openstreetmap.org/relation/535774"
        },
        population: 555988,
        gini: {
            2015: 42.4
        },
        fifa: "CPV",
        car: {
            signs: [
                "CV"
            ],
            side: "right"
        },
        timezones: [
            "UTC-01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cv.png",
            svg: "https://flagcdn.com/cv.svg",
            alt: "The flag of Cape Verde is composed of five horizontal bands of blue, white, red, white and blue in the ratio of 6:1:1:1:3. A ring of ten five-pointed yellow stars is centered at three-eighth of the height from the bottom edge and three-eighth of the width from the hoist end of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cv.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cv.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                14.92,
                -23.52
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Saint Kitts and Nevis",
            official: "Federation of Saint Christopher and Nevis",
            nativeName: {
                eng: {
                    official: "Federation of Saint Christopher and Nevis",
                    common: "Saint Kitts and Nevis"
                }
            }
        },
        tld: [
            ".kn"
        ],
        cca2: "KN",
        ccn3: "659",
        cca3: "KNA",
        cioc: "SKN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XCD: {
                name: "Eastern Caribbean dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "869"
            ]
        },
        capital: [
            "Basseterre"
        ],
        altSpellings: [
            "KN",
            "Federation of Saint Christopher and Nevis"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0627\u062A\u062D\u0627\u062F \u0627\u0644\u0642\u062F\u064A\u0633 \u0643\u0631\u064A\u0633\u062A\u0648\u0641\u0631 \u0648\u0646\u064A\u0641\u064A\u0633",
                common: "\u0633\u0627\u0646\u062A \u0643\u064A\u062A\u0633 \u0648\u0646\u064A\u0641\u064A\u0633"
            },
            bre: {
                official: "Kevread Saint Kitts ha Nevis",
                common: "Saint Kitts ha Nevis"
            },
            ces: {
                official: "Federace Sv. Kry\u0161tof a Nevis",
                common: "Svat\xfd Kry\u0161tof a Nevis"
            },
            cym: {
                official: "Federation of Saint Christopher and Nevis",
                common: "Saint Kitts and Nevis"
            },
            deu: {
                official: "F\xf6deration von St. Kitts und Nevis",
                common: "St. Kitts und Nevis"
            },
            est: {
                official: "Saint Kittsi ja Nevise F\xf6deratsioon",
                common: "Saint Kitts ja Nevis"
            },
            fin: {
                official: "Saint Christopherin ja Nevisin federaatio",
                common: "Saint Kitts ja Nevis"
            },
            fra: {
                official: "F\xe9d\xe9ration de Saint-Christophe-et-Ni\xe9v\xe8s",
                common: "Saint-Christophe-et-Ni\xe9v\xe8s"
            },
            hrv: {
                official: "Federacija Sv.Kristofora i Nevisa",
                common: "Sveti Kristof i Nevis"
            },
            hun: {
                official: "Saint Christopher \xe9s Nevis \xc1llamsz\xf6vets\xe9g",
                common: "Saint Kitts \xe9s Nevis"
            },
            ita: {
                official: "Federazione di Saint Christopher e Nevis",
                common: "Saint Kitts e Nevis"
            },
            jpn: {
                official: "\u30BB\u30F3\u30C8\u30AF\u30EA\u30B9\u30C8\u30D5\u30A1\u30FCNevis\u9023\u76DF",
                common: "\u30BB\u30F3\u30C8\u30AF\u30EA\u30B9\u30C8\u30D5\u30A1\u30FC\u30FB\u30CD\u30A4\u30D3\u30B9"
            },
            kor: {
                official: "\uC138\uC778\uD2B8\uD0A4\uCE20 \uB124\uBE44\uC2A4 \uC5F0\uBC29",
                common: "\uC138\uC778\uD2B8\uD0A4\uCE20 \uB124\uBE44\uC2A4"
            },
            nld: {
                official: "Federatie van Saint Kitts en Nevis",
                common: "Saint Kitts en Nevis"
            },
            per: {
                official: "\u0641\u062F\u0631\u0627\u0633\u06CC\u0648\u0646 \u0633\u0646\u062A \u06A9\u06CC\u062A\u0633 \u0648 \u0646\u0648\u06CC\u0633",
                common: "\u0633\u0646\u062A \u06A9\u06CC\u062A\u0633 \u0648 \u0646\u0648\u06CC\u0633"
            },
            pol: {
                official: "Federacja Saint Kitts i Nevis",
                common: "Saint Kitts i Nevis"
            },
            por: {
                official: "Federa\xe7\xe3o de S\xe3o Crist\xf3v\xe3o e Nevis",
                common: "S\xe3o Crist\xf3v\xe3o e Nevis"
            },
            rus: {
                official: "\u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044F \u0421\u0435\u043D\u0442-\u041A\u0440\u0438\u0441\u0442\u043E\u0444\u0435\u0440 \u0438 \u041D \u0435 \u0432 \u0438 \u0441",
                common: "\u0421\u0435\u043D\u0442-\u041A\u0438\u0442\u0441 \u0438 \u041D\u0435\u0432\u0438\u0441"
            },
            slk: {
                official: "Feder\u0EE1cia Sv\xe4t\xe9ho Kri\u0161tofa a Nevisu",
                common: "Sv\xe4t\xfd Kri\u0161tof a Nevis"
            },
            spa: {
                official: "Federaci\xf3n de San Crist\xf3bal y Nevis",
                common: "San Crist\xf3bal y Nieves"
            },
            srp: {
                official: "\u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0458\u0430 \u0421\u0432\u0435\u0442\u0438 \u041A\u0440\u0438\u0441\u0442\u043E\u0444\u0435\u0440 \u0438 \u041D\u0435\u0432\u0438\u0441",
                common: "\u0421\u0435\u043D\u0442 \u041A\u0438\u0442\u0441 \u0438 \u041D\u0435\u0432\u0438\u0441"
            },
            swe: {
                official: "Federationen Saint Kitts och Nevis",
                common: "Saint Kitts och Nevis"
            },
            tur: {
                official: "Saint Kitts ve Nevis Federasyonu",
                common: "Saint Kitts ve Nevis"
            },
            urd: {
                official: "\u0648\u0641\u0627\u0642\u0650 \u0633\u06CC\u0646\u0679 \u06A9\u06CC\u0679\u0632 \u0648 \u0646\u0627\u0648\u06CC\u0633",
                common: "\u0633\u06CC\u0646\u0679 \u06A9\u06CC\u0679\u0632 \u0648 \u0646\u0627\u0648\u06CC\u0633"
            },
            zho: {
                official: "\u5723\u514B\u91CC\u65AF\u6258\u5F17\u548C\u5C3C\u7EF4\u65AF\u8054\u90A6",
                common: "\u5723\u57FA\u8328\u548C\u5C3C\u7EF4\u65AF"
            }
        },
        latlng: [
            17.33333333,
            -62.75
        ],
        landlocked: false,
        area: 261,
        demonyms: {
            eng: {
                f: "Kittitian or Nevisian",
                m: "Kittitian or Nevisian"
            },
            fra: {
                f: "Kittitienne-et-nevicienne",
                m: "Kittitien-et-nevicien"
            }
        },
        flag: "\uD83C\uDDF0\uD83C\uDDF3",
        maps: {
            googleMaps: "https://goo.gl/maps/qiaVwcLVTXX3eoTNA",
            openStreetMaps: "https://www.openstreetmap.org/relation/536899"
        },
        population: 53192,
        fifa: "SKN",
        car: {
            signs: [
                "KN"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/kn.png",
            svg: "https://flagcdn.com/kn.svg",
            alt: "The flag of Saint Kitts and Nevis features two large five-pointed white stars within a yellow-edged black diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. Above and beneath this band are a green and red triangle respectively."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/kn.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/kn.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                17.3,
                -62.72
            ]
        }
    },
    {
        name: {
            common: "Laos",
            official: "Lao People's Democratic Republic",
            nativeName: {
                lao: {
                    official: "\u0EAA\u0EB2\u0E97\u0EB2\u0EA5\u0EB0\u0E99\u0EB0 \u0E8A\u0EB2\u0E97\u0EB4\u0E9B\u0EB0\u0EC4\u0E95 \u0E84\u0EBB\u0E99\u0EA5\u0EB2\u0EA7 \u0E82\u0EAD\u0E87",
                    common: "\u0EAA\u0E9B\u0E9B\u0EA5\u0EB2\u0EA7"
                }
            }
        },
        tld: [
            ".la"
        ],
        cca2: "LA",
        ccn3: "418",
        cca3: "LAO",
        cioc: "LAO",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            LAK: {
                name: "Lao kip",
                symbol: "\u20AD"
            }
        },
        idd: {
            root: "+8",
            suffixes: [
                "56"
            ]
        },
        capital: [
            "Vientiane"
        ],
        altSpellings: [
            "LA",
            "Lao",
            "Lao People's Democratic Republic",
            "Sathalanalat Paxathipatai Paxaxon Lao"
        ],
        region: "Asia",
        subregion: "South-Eastern Asia",
        languages: {
            lao: "Lao"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0644\u0627\u0648\u0633 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                common: "\u0644\u0627\u0648\u0633"
            },
            bre: {
                official: "Republik Demokratel ar Bobl Lao",
                common: "Laos"
            },
            ces: {
                official: "Laosk\xe1 lidov\u011B demokratick\xe1 republika",
                common: "Laos"
            },
            cym: {
                official: "Lao People's Democratic Republic",
                common: "Laos"
            },
            deu: {
                official: "Demokratische Volksrepublik Laos",
                common: "Laos"
            },
            est: {
                official: "Laose Demokraatlik Rahvavabariik",
                common: "Laos"
            },
            fin: {
                official: "Laosin demokraattinen kansantasavalta",
                common: "Laos"
            },
            fra: {
                official: "R\xe9publique d\xe9mocratique populaire lao",
                common: "Laos"
            },
            hrv: {
                official: "Narodna Demokratska Republika",
                common: "Laos"
            },
            hun: {
                official: "Laoszi N\xe9pi Demokratikus K\xf6zt\xe1rsas\xe1g",
                common: "Laosz"
            },
            ita: {
                official: "Repubblica democratica popolare del Laos",
                common: "Laos"
            },
            jpn: {
                official: "\u30E9\u30AA\u30B9\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u30E9\u30AA\u30B9\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD"
            },
            kor: {
                official: "\uB77C\uC624 \uC778\uBBFC \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                common: "\uB77C\uC624\uC2A4"
            },
            nld: {
                official: "Lao Democratische Volksrepubliek",
                common: "Laos"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u062E\u0644\u0642 \u0644\u0627\u0626\u0648\u0633",
                common: "\u0644\u0627\u0626\u0648\u0633"
            },
            pol: {
                official: "Laota\u0144ska Republika Ludowo-Demokratyczna",
                common: "Laos"
            },
            por: {
                official: "Laos, Rep\xfablica Democr\xe1tica",
                common: "Laos"
            },
            rus: {
                official: "\u041B\u0430\u043E\u0441\u0441\u043A\u0430\u044F \u041D\u0430\u0440\u043E\u0434\u043D\u043E-\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041B\u0430\u043E\u0441"
            },
            slk: {
                official: "Laosk\xe1 \u013Eudovodemokratick\xe1 republika",
                common: "Laos"
            },
            spa: {
                official: "Rep\xfablica Democr\xe1tica Popular Lao",
                common: "Laos"
            },
            srp: {
                official: "\u041B\u0430\u043E\u0448\u043A\u0430 \u041D\u0430\u0440\u043E\u0434\u043D\u0430 \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041B\u0430\u043E\u0441"
            },
            swe: {
                official: "Demokratiska folkrepubliken Laos",
                common: "Laos"
            },
            tur: {
                official: "Laos Demokratik Halk Cumhuriyeti",
                common: "Laos"
            },
            urd: {
                official: "\u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0644\u0627\u0624",
                common: "\u0644\u0627\u0624\u0633"
            },
            zho: {
                official: "\u8001\u631D\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u8001\u631D"
            }
        },
        latlng: [
            18,
            105
        ],
        landlocked: true,
        borders: [
            "MMR",
            "KHM",
            "CHN",
            "THA",
            "VNM"
        ],
        area: 236800,
        demonyms: {
            eng: {
                f: "Laotian",
                m: "Laotian"
            },
            fra: {
                f: "Laotienne",
                m: "Laotien"
            }
        },
        flag: "\uD83C\uDDF1\uD83C\uDDE6",
        maps: {
            googleMaps: "https://goo.gl/maps/F3asVB7sRKgSnwbE7",
            openStreetMaps: "https://www.openstreetmap.org/relation/49903"
        },
        population: 7275556,
        gini: {
            2018: 38.8
        },
        fifa: "LAO",
        car: {
            signs: [
                "LAO"
            ],
            side: "right"
        },
        timezones: [
            "UTC+07:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/la.png",
            svg: "https://flagcdn.com/la.svg",
            alt: "The flag of Laos is composed of three horizontal bands of red, blue and red. The blue band is twice the height of the red bands and bears a white circle at its center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/la.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/la.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                17.97,
                102.6
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Caribbean Netherlands",
            official: "Bonaire, Sint Eustatius and Saba",
            nativeName: {
                nld: {
                    official: "Bonaire, Sint Eustatius en Saba",
                    common: "Caribisch Nederland"
                },
                pap: {
                    official: "Boneiru, Sint Eustatius y Saba",
                    common: "Boneiru, Sint Eustatius y Saba"
                }
            }
        },
        tld: [
            ".bq",
            ".nl"
        ],
        cca2: "BQ",
        ccn3: "535",
        cca3: "BES",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "99"
            ]
        },
        capital: [
            "Kralendijk"
        ],
        altSpellings: [
            "BES islands"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English",
            nld: "Dutch",
            pap: "Papiamento"
        },
        translations: {
            ara: {
                official: "\u0628\u0648\u0646\u064A\u0631 \u0648\u0633\u064A\u0646\u062A \u0623\u0648\u0633\u062A\u0627\u062A\u064A\u0648\u0633 \u0648\u0633\u0627\u0628\u0627",
                common: "\u0627\u0644\u062C\u0632\u0631 \u0627\u0644\u0643\u0627\u0631\u064A\u0628\u064A\u0629 \u0627\u0644\u0647\u0648\u0644\u0646\u062F\u064A\u0629"
            },
            bre: {
                official: "Bonaire, Sint Eustatius ha Saba",
                common: "Bonaire, Sint Eustatius ha Saba"
            },
            ces: {
                official: "Karibsk\xe9 Nizozemsko",
                common: "Karibsk\xe9 Nizozemsko"
            },
            cym: {
                official: "Bonaire, Sint Eustatius and Saba",
                common: "Caribbean Netherlands"
            },
            deu: {
                official: "Bonaire, Sint Eustatius und Saba",
                common: "Karibische Niederlande"
            },
            est: {
                official: "Bonaire, Sint Eustatius ja Saba",
                common: "Bonaire, Sint Eustatius ja Saba"
            },
            fin: {
                official: "Bonaire, Sint Eustatius ja Saba",
                common: "Bonaire, Sint Eustatius ja Saba"
            },
            fra: {
                official: "Bonaire, Saint-Eustache et Saba",
                common: "Pays-Bas carib\xe9ens"
            },
            hrv: {
                official: "Bonaire, Sint Eustatius i Saba",
                common: "Bonaire, Sint Eustatius i Saba"
            },
            hun: {
                official: "Bonaire",
                common: "Bonaire"
            },
            ita: {
                official: "Bonaire, Sint Eustatius e Saba",
                common: "Paesi Bassi caraibici"
            },
            jpn: {
                official: "\u30DC\u30CD\u30FC\u30EB\u3001\u30B7\u30F3\u30C8\u30FB\u30E6\u30FC\u30B9\u30BF\u30C6\u30A3\u30A6\u30B9\u304A\u3088\u3073\u30B5\u30D0",
                common: "\u30DC\u30CD\u30FC\u30EB\u3001\u30B7\u30F3\u30C8\u30FB\u30E6\u30FC\u30B9\u30BF\u30C6\u30A3\u30A6\u30B9\u304A\u3088\u3073\u30B5\u30D0"
            },
            kor: {
                official: "\uBCF4\uB124\uB974, \uC2E0\uD2B8\uC678\uC2A4\uD0C0\uD2F0\uC704\uC2A4, \uC0AC\uBC14",
                common: "\uCE74\uB9AC\uBE0C \uB124\uB35C\uB780\uB4DC"
            },
            nld: {
                official: "Bonaire, Sint Eustatius en Saba",
                common: "Caribisch Nederland"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0627\u0631\u0627\u0626\u06CC\u0628 \u0647\u0644\u0646\u062F",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0627\u0631\u0627\u0626\u06CC\u0628 \u0647\u0644\u0646\u062F"
            },
            pol: {
                official: "Bonaire, Sint Eustatius i Saba",
                common: "Antyle Holenderskie"
            },
            por: {
                official: "Bonaire, Saba e Santo Eust\xe1quio",
                common: "Pa\xedses Baixos Caribenhos"
            },
            rus: {
                official: "\u0411\u043E\u043D\u044D\u0439\u0440, \u0421\u0438\u043D\u0442-\u042D\u0441\u0442\u0430\u0442\u0438\u0443\u0441 \u0438 \u0421\u0430\u0431\u0430",
                common: "\u041A\u0430\u0440\u0438\u0431\u0441\u043A\u0438\u0435 \u041D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u044B"
            },
            slk: {
                official: "Bonaire, Sint Eustatius a Saba",
                common: "Bonaire, Sint Eustatius a Saba"
            },
            spa: {
                official: "Bonaire, San Eustaquio y Saba",
                common: "Caribe Neerland\xe9s"
            },
            srp: {
                official: "\u0411\u043E\u043D\u0435\u0440, \u0421\u0432\u0435\u0442\u0438 \u0415\u0443\u0441\u0442\u0430\u0445\u0438\u0458\u0435 \u0438 \u0421\u0430\u0431\u0430",
                common: "\u041A\u0430\u0440\u0438\u043F\u0441\u043A\u0430 \u0425\u043E\u043B\u0430\u043D\u0434\u0438\u0458\u0430"
            },
            swe: {
                official: "Bonaire, Sint Eustatius and Saba",
                common: "Karibiska Nederl\xe4nderna"
            },
            tur: {
                official: "Karayip Hollandas\u0131",
                common: "Karayip Hollandas\u0131"
            },
            urd: {
                official: "\u0628\u0648\u0646\u0627\u06CC\u0631\u060C \u0633\u06CC\u0646\u0679 \u0627\u06CC\u0648\u0633\u0679\u0627\u0626\u06CC\u0633 \u0627\u0648\u0631 \u0633\u0627\u0628\u0627",
                common: "\u06A9\u06CC\u0631\u06CC\u0628\u06CC\u0646 \u0646\u06CC\u062F\u0631\u0644\u06CC\u0646\u0688\u0632"
            },
            zho: {
                official: "\u8377\u862D\u52A0\u52D2\u6BD4\u5340",
                common: "\u8377\u862D\u52A0\u52D2\u6BD4\u5340"
            }
        },
        latlng: [
            12.18,
            -68.25
        ],
        landlocked: false,
        area: 328,
        demonyms: {
            eng: {
                f: "Dutch",
                m: "Dutch"
            },
            fra: {
                f: "N\xe9erlandaise",
                m: "N\xe9erlandais"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDF6",
        maps: {
            googleMaps: "https://goo.gl/maps/4XVes1P6uEDTz77WA",
            openStreetMaps: "https://www.openstreetmap.org/relation/1216720"
        },
        population: 25987,
        car: {
            signs: [
                ""
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bq.png",
            svg: "https://flagcdn.com/bq.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bq.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bq.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                12.14,
                -68.27
            ]
        }
    },
    {
        name: {
            common: "Uganda",
            official: "Republic of Uganda",
            nativeName: {
                eng: {
                    official: "Republic of Uganda",
                    common: "Uganda"
                },
                swa: {
                    official: "Republic of Uganda",
                    common: "Uganda"
                }
            }
        },
        tld: [
            ".ug"
        ],
        cca2: "UG",
        ccn3: "800",
        cca3: "UGA",
        cioc: "UGA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            UGX: {
                name: "Ugandan shilling",
                symbol: "Sh"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "56"
            ]
        },
        capital: [
            "Kampala"
        ],
        altSpellings: [
            "UG",
            "Republic of Uganda",
            "Jamhuri ya Uganda"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            eng: "English",
            swa: "Swahili"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0648\u063A\u0646\u062F\u0627",
                common: "\u0623\u0648\u063A\u0646\u062F\u0627"
            },
            bre: {
                official: "Republik Ouganda",
                common: "Ouganda"
            },
            ces: {
                official: "Ugandsk\xe1 republika",
                common: "Uganda"
            },
            cym: {
                official: "Republic of Uganda",
                common: "Uganda"
            },
            deu: {
                official: "Republik Uganda",
                common: "Uganda"
            },
            est: {
                official: "Uganda Vabariik",
                common: "Uganda"
            },
            fin: {
                official: "Ugandan tasavalta",
                common: "Uganda"
            },
            fra: {
                official: "R\xe9publique de l'Ouganda",
                common: "Ouganda"
            },
            hrv: {
                official: "Republika Uganda",
                common: "Uganda"
            },
            hun: {
                official: "Ugandai K\xf6zt\xe1rsas\xe1g",
                common: "Uganda"
            },
            ita: {
                official: "Repubblica di Uganda",
                common: "Uganda"
            },
            jpn: {
                official: "\u30A6\u30AC\u30F3\u30C0\u5171\u548C\u56FD",
                common: "\u30A6\u30AC\u30F3\u30C0"
            },
            kor: {
                official: "\uC6B0\uAC04\uB2E4 \uACF5\uD654\uAD6D",
                common: "\uC6B0\uAC04\uB2E4"
            },
            nld: {
                official: "Republiek Uganda",
                common: "Oeganda"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0648\u06AF\u0627\u0646\u062F\u0627",
                common: "\u0627\u0648\u06AF\u0627\u0646\u062F\u0627"
            },
            pol: {
                official: "Republika Ugandy",
                common: "Uganda"
            },
            por: {
                official: "Rep\xfablica do Uganda",
                common: "Uganda"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0433\u0430\u043D\u0434\u0430",
                common: "\u0423\u0433\u0430\u043D\u0434\u0430"
            },
            slk: {
                official: "Ugandsk\xe1 republika",
                common: "Uganda"
            },
            spa: {
                official: "Rep\xfablica de Uganda",
                common: "Uganda"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0433\u0430\u043D\u0434\u0430",
                common: "\u0423\u0433\u0430\u043D\u0434\u0430"
            },
            swe: {
                official: "Republiken Uganda",
                common: "Uganda"
            },
            tur: {
                official: "Uganda Cumhuriyeti",
                common: "Uganda"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06CC\u0648\u06AF\u0646\u0688\u0627",
                common: "\u06CC\u0648\u06AF\u0646\u0688\u0627"
            },
            zho: {
                official: "\u4E4C\u5E72\u8FBE\u5171\u548C\u56FD",
                common: "\u4E4C\u5E72\u8FBE"
            }
        },
        latlng: [
            1,
            32
        ],
        landlocked: true,
        borders: [
            "COD",
            "KEN",
            "RWA",
            "SSD",
            "TZA"
        ],
        area: 241550,
        demonyms: {
            eng: {
                f: "Ugandan",
                m: "Ugandan"
            },
            fra: {
                f: "Ougandaise",
                m: "Ougandais"
            }
        },
        flag: "\uD83C\uDDFA\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/Y7812hFiGa8LD9N68",
            openStreetMaps: "https://www.openstreetmap.org/relation/192796"
        },
        population: 45741000,
        gini: {
            2016: 42.8
        },
        fifa: "UGA",
        car: {
            signs: [
                "EAU"
            ],
            side: "left"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ug.png",
            svg: "https://flagcdn.com/ug.svg",
            alt: "The flag of Uganda is composed of six equal horizontal bands of black, yellow, red, black, yellow and red. A white circle bearing a hoist-side facing grey red-crested crane is superimposed in the center of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ug.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ug.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                0.32,
                32.55
            ]
        }
    },
    {
        name: {
            common: "Andorra",
            official: "Principality of Andorra",
            nativeName: {
                cat: {
                    official: "Principat d'Andorra",
                    common: "Andorra"
                }
            }
        },
        tld: [
            ".ad"
        ],
        cca2: "AD",
        ccn3: "020",
        cca3: "AND",
        cioc: "AND",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "76"
            ]
        },
        capital: [
            "Andorra la Vella"
        ],
        altSpellings: [
            "AD",
            "Principality of Andorra",
            "Principat d'Andorra"
        ],
        region: "Europe",
        subregion: "Southern Europe",
        languages: {
            cat: "Catalan"
        },
        translations: {
            ara: {
                official: "\u0625\u0645\u0627\u0631\u0629 \u0623\u0646\u062F\u0648\u0631\u0627",
                common: "\u0623\u0646\u062F\u0648\u0631\u0627"
            },
            bre: {
                official: "Pri\xf1selezh Andorra",
                common: "Andorra"
            },
            ces: {
                official: "Andorrsk\xe9 kn\xed\u017Eectv\xed",
                common: "Andorra"
            },
            cym: {
                official: "Tywysogaeth Andorra",
                common: "Andorra"
            },
            deu: {
                official: "F\xfcrstentum Andorra",
                common: "Andorra"
            },
            est: {
                official: "Andorra V\xfcrstiriik",
                common: "Andorra"
            },
            fin: {
                official: "Andorran ruhtinaskunta",
                common: "Andorra"
            },
            fra: {
                official: "Principaut\xe9 d'Andorre",
                common: "Andorre"
            },
            hrv: {
                official: "Kne\u017Eevina Andora",
                common: "Andora"
            },
            hun: {
                official: "Andorra",
                common: "Andorra"
            },
            ita: {
                official: "Principato di Andorra",
                common: "Andorra"
            },
            jpn: {
                official: "\u30A2\u30F3\u30C9\u30E9\u516C\u56FD",
                common: "\u30A2\u30F3\u30C9\u30E9"
            },
            kor: {
                official: "\uC548\uB3C4\uB77C \uACF5\uAD6D",
                common: "\uC548\uB3C4\uB77C"
            },
            nld: {
                official: "Prinsdom Andorra",
                common: "Andorra"
            },
            per: {
                official: "\u0634\u0627\u0647\u0632\u0627\u062F\u0647\u200C\u0646\u0634\u06CC\u0646 \u0622\u0646\u062F\u0648\u0631\u0627",
                common: "\u0622\u0646\u062F\u0648\u0631\u0627"
            },
            pol: {
                official: "Ksi\u0119stwo Andory",
                common: "Andora"
            },
            por: {
                official: "Principado de Andorra",
                common: "Andorra"
            },
            rus: {
                official: "\u041A\u043D\u044F\u0436\u0435\u0441\u0442\u0432\u043E \u0410\u043D\u0434\u043E\u0440\u0440\u0430",
                common: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430"
            },
            slk: {
                official: "Andorrsk\xe9 knie\u017Eatstvo",
                common: "Andorra"
            },
            spa: {
                official: "Principado de Andorra",
                common: "Andorra"
            },
            srp: {
                official: "\u041A\u043D\u0435\u0436\u0435\u0432\u0438\u043D\u0430 \u0410\u043D\u0434\u043E\u0440\u0430",
                common: "\u0410\u043D\u0434\u043E\u0440\u0430"
            },
            swe: {
                official: "Furstend\xf6met Andorra",
                common: "Andorra"
            },
            tur: {
                official: "Andorra Prensli\u011Fi",
                common: "Andorra"
            },
            urd: {
                official: "\u0627\u0645\u0627\u0631\u0627\u062A\u0650 \u0627\u0646\u0688\u0648\u0631\u0627",
                common: "\u0627\u0646\u0688\u0648\u0631\u0627"
            },
            zho: {
                official: "\u5B89\u9053\u5C14\u516C\u56FD",
                common: "\u5B89\u9053\u5C14"
            }
        },
        latlng: [
            42.5,
            1.5
        ],
        landlocked: true,
        borders: [
            "FRA",
            "ESP"
        ],
        area: 468,
        demonyms: {
            eng: {
                f: "Andorran",
                m: "Andorran"
            },
            fra: {
                f: "Andorrane",
                m: "Andorran"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDE9",
        maps: {
            googleMaps: "https://goo.gl/maps/JqAnacWE2qEznKgw7",
            openStreetMaps: "https://www.openstreetmap.org/relation/9407"
        },
        population: 77265,
        fifa: "AND",
        car: {
            signs: [
                "AND"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ad.png",
            svg: "https://flagcdn.com/ad.svg",
            alt: "The flag of Andorra features three equal vertical bands of blue, yellow and red, with the coat of arms of Andorra centered in the yellow band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ad.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ad.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                42.5,
                1.52
            ]
        },
        postalCode: {
            format: "AD###",
            regex: "^(?:AD)*(\\d{3})$"
        }
    },
    {
        name: {
            common: "Burundi",
            official: "Republic of Burundi",
            nativeName: {
                fra: {
                    official: "R\xe9publique du Burundi",
                    common: "Burundi"
                },
                run: {
                    official: "Republika y'Uburundi ",
                    common: "Uburundi"
                }
            }
        },
        tld: [
            ".bi"
        ],
        cca2: "BI",
        ccn3: "108",
        cca3: "BDI",
        cioc: "BDI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BIF: {
                name: "Burundian franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "57"
            ]
        },
        capital: [
            "Gitega"
        ],
        altSpellings: [
            "BI",
            "Republic of Burundi",
            "Republika y'Uburundi",
            "R\xe9publique du Burundi"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            fra: "French",
            run: "Kirundi"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0648\u0631\u0648\u0646\u062F\u064A",
                common: "\u0628\u0648\u0631\u0648\u0646\u062F\u064A"
            },
            bre: {
                official: "Republik Burundi",
                common: "Burundi"
            },
            ces: {
                official: "Burundsk\xe1 republika",
                common: "Burundi"
            },
            cym: {
                official: "Gweriniaeth Bwrwndi",
                common: "Bwrwndi"
            },
            deu: {
                official: "Republik Burundi",
                common: "Burundi"
            },
            est: {
                official: "Burundi Vabariik",
                common: "Burundi"
            },
            fin: {
                official: "Burundin tasavalta",
                common: "Burundi"
            },
            fra: {
                official: "R\xe9publique du Burundi",
                common: "Burundi"
            },
            hrv: {
                official: "Burundi",
                common: "Burundi"
            },
            hun: {
                official: "Burundi",
                common: "Burundi"
            },
            ita: {
                official: "Repubblica del Burundi",
                common: "Burundi"
            },
            jpn: {
                official: "\u30D6\u30EB\u30F3\u30B8\u5171\u548C\u56FD",
                common: "\u30D6\u30EB\u30F3\u30B8"
            },
            kor: {
                official: "\uBD80\uB8EC\uB514",
                common: "\uBD80\uB8EC\uB514"
            },
            nld: {
                official: "Republiek Burundi",
                common: "Burundi"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0648\u0631\u0648\u0646\u062F\u06CC",
                common: "\u0628\u0648\u0631\u0648\u0646\u062F\u06CC"
            },
            pol: {
                official: "Republika Burundi",
                common: "Burundi"
            },
            por: {
                official: "Rep\xfablica do Burundi",
                common: "Burundi"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0443\u0440\u0443\u043D\u0434\u0438",
                common: "\u0411\u0443\u0440\u0443\u043D\u0434\u0438"
            },
            slk: {
                official: "Burundsk\xe1 republika",
                common: "Burundi"
            },
            spa: {
                official: "Rep\xfablica de Burundi",
                common: "Burundi"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0443\u0440\u0443\u043D\u0434\u0438",
                common: "\u0411\u0443\u0440\u0443\u043D\u0434\u0438"
            },
            swe: {
                official: "Republiken Burundi",
                common: "Burundi"
            },
            tur: {
                official: "Burundi Cumhuriyeti",
                common: "Burundi"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0631\u0648\u0646\u0688\u06CC",
                common: "\u0628\u0631\u0648\u0646\u0688\u06CC"
            },
            zho: {
                official: "\u5E03\u9686\u8FEA\u5171\u548C\u56FD",
                common: "\u5E03\u9686\u8FEA"
            }
        },
        latlng: [
            -3.5,
            30
        ],
        landlocked: true,
        borders: [
            "COD",
            "RWA",
            "TZA"
        ],
        area: 27834,
        demonyms: {
            eng: {
                f: "Burundian",
                m: "Burundian"
            },
            fra: {
                f: "Burundaise",
                m: "Burundais"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDEE",
        maps: {
            googleMaps: "https://goo.gl/maps/RXPWoRrB9tfrJpUG7",
            openStreetMaps: "https://www.openstreetmap.org/relation/195269"
        },
        population: 11890781,
        gini: {
            2013: 38.6
        },
        fifa: "BDI",
        car: {
            signs: [
                "RU"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bi.png",
            svg: "https://flagcdn.com/bi.svg",
            alt: "The flag of Burundi is divided by a white diagonal cross into four alternating triangular areas of red at the top and bottom, and green on the hoist and fly sides. A white circle, with three green-edged red six-pointed stars arranged to form a triangle, is superimposed at the center of the cross."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bi.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bi.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -3.43,
                29.93
            ]
        }
    },
    {
        name: {
            common: "South Africa",
            official: "Republic of South Africa",
            nativeName: {
                afr: {
                    official: "Republiek van Suid-Afrika",
                    common: "South Africa"
                },
                eng: {
                    official: "Republic of South Africa",
                    common: "South Africa"
                },
                nbl: {
                    official: "IRiphabliki yeSewula Afrika",
                    common: "Sewula Afrika"
                },
                nso: {
                    official: "Rephaboliki ya Afrika-Borwa ",
                    common: "Afrika-Borwa"
                },
                sot: {
                    official: "Rephaboliki ya Afrika Borwa",
                    common: "Afrika Borwa"
                },
                ssw: {
                    official: "IRiphabhulikhi yeNingizimu Afrika",
                    common: "Ningizimu Afrika"
                },
                tsn: {
                    official: "Rephaboliki ya Aforika Borwa",
                    common: "Aforika Borwa"
                },
                tso: {
                    official: "Riphabliki ra Afrika Dzonga",
                    common: "Afrika Dzonga"
                },
                ven: {
                    official: "Riphabu\u1E3Diki ya Afurika Tshipembe",
                    common: "Afurika Tshipembe"
                },
                xho: {
                    official: "IRiphabliki yaseMzantsi Afrika",
                    common: "Mzantsi Afrika"
                },
                zul: {
                    official: "IRiphabliki yaseNingizimu Afrika",
                    common: "Ningizimu Afrika"
                }
            }
        },
        tld: [
            ".za"
        ],
        cca2: "ZA",
        ccn3: "710",
        cca3: "ZAF",
        cioc: "RSA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            ZAR: {
                name: "South African rand",
                symbol: "R"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "7"
            ]
        },
        capital: [
            "Pretoria",
            "Bloemfontein",
            "Cape Town"
        ],
        altSpellings: [
            "ZA",
            "RSA",
            "Suid-Afrika",
            "Republic of South Africa"
        ],
        region: "Africa",
        subregion: "Southern Africa",
        languages: {
            afr: "Afrikaans",
            eng: "English",
            nbl: "Southern Ndebele",
            nso: "Northern Sotho",
            sot: "Southern Sotho",
            ssw: "Swazi",
            tsn: "Tswana",
            tso: "Tsonga",
            ven: "Venda",
            xho: "Xhosa",
            zul: "Zulu"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u0646\u0648\u0628 \u0623\u0641\u0631\u064A\u0642\u064A\u0627",
                common: "\u062C\u0646\u0648\u0628 \u0623\u0641\u0631\u064A\u0642\u064A\u0627"
            },
            bre: {
                official: "Republik Suafrika",
                common: "Suafrika"
            },
            ces: {
                official: "Jihoafrick\xe1 republika",
                common: "Jihoafrick\xe1 republika"
            },
            cym: {
                official: "Republic of South Africa",
                common: "South Africa"
            },
            deu: {
                official: "Republik S\xfcdafrika",
                common: "S\xfcdafrika"
            },
            est: {
                official: "L\xf5una-Aafrika Vabariik",
                common: "L\xf5una-Aafrika Vabariik"
            },
            fin: {
                official: "Etel\xe4-Afrikan tasavalta",
                common: "Etel\xe4-Afrikka"
            },
            fra: {
                official: "R\xe9publique d'Afrique du Sud",
                common: "Afrique du Sud"
            },
            hrv: {
                official: "Ju\u017Enoafri\u010Dka Republika",
                common: "Ju\u017Ena Afrika"
            },
            hun: {
                official: "D\xe9l-afrikai K\xf6zt\xe1rsas\xe1g",
                common: "D\xe9l-afrikai K\xf6zt\xe1rsas\xe1g"
            },
            ita: {
                official: "Repubblica del Sud Africa",
                common: "Sud Africa"
            },
            jpn: {
                official: "\u5357\u30A2\u30D5\u30EA\u30AB\u5171\u548C\u56FD",
                common: "\u5357\u30A2\u30D5\u30EA\u30AB"
            },
            kor: {
                official: "\uB0A8\uC544\uD504\uB9AC\uCE74 \uACF5\uD654\uAD6D",
                common: "\uB0A8\uC544\uD504\uB9AC\uCE74"
            },
            nld: {
                official: "Republiek Zuid-Afrika",
                common: "Zuid-Afrika"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0641\u0631\u06CC\u0642\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC",
                common: "\u0622\u0641\u0631\u06CC\u0642\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC"
            },
            pol: {
                official: "Republika Po\u0142udniowej Afryki",
                common: "Po\u0142udniowa Afryka"
            },
            por: {
                official: "Rep\xfablica da \xc1frica do Sul",
                common: "\xc1frica do Sul"
            },
            rus: {
                official: "\u042E\u0436\u043D\u043E-\u0410\u0444\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u042E\u0436\u043D\u0430\u044F \u0410\u0444\u0440\u0438\u043A\u0430"
            },
            slk: {
                official: "Juhoafrick\xe1 republika",
                common: "Ju\u017En\xe1 Afrika"
            },
            spa: {
                official: "Rep\xfablica de Sud\xe1frica",
                common: "Sud\xe1frica"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0408\u0443\u0436\u043D\u0430 \u0410\u0444\u0440\u0438\u043A\u0430",
                common: "\u0408\u0443\u0436\u043D\u043E\u0430\u0444\u0440\u0438\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430"
            },
            swe: {
                official: "Republiken Sydafrika",
                common: "Sydafrika"
            },
            tur: {
                official: "G\xfcney Afrika Cumhuriyeti",
                common: "G\xfcney Afrika"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0646\u0648\u0628\u06CC \u0627\u0641\u0631\u06CC\u0642\u0627",
                common: "\u062C\u0646\u0648\u0628\u06CC \u0627\u0641\u0631\u06CC\u0642\u0627"
            },
            zho: {
                official: "\u5357\u975E\u5171\u548C\u56FD",
                common: "\u5357\u975E"
            }
        },
        latlng: [
            -29,
            24
        ],
        landlocked: false,
        borders: [
            "BWA",
            "LSO",
            "MOZ",
            "NAM",
            "SWZ",
            "ZWE"
        ],
        area: 1221037,
        demonyms: {
            eng: {
                f: "South African",
                m: "South African"
            },
            fra: {
                f: "Sud-africaine",
                m: "Sud-africain"
            }
        },
        flag: "\uD83C\uDDFF\uD83C\uDDE6",
        maps: {
            googleMaps: "https://goo.gl/maps/CLCZ1R8Uz1KpYhRv6",
            openStreetMaps: "https://www.openstreetmap.org/relation/87565"
        },
        population: 59308690,
        gini: {
            2014: 63
        },
        fifa: "RSA",
        car: {
            signs: [
                "ZA"
            ],
            side: "left"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/za.png",
            svg: "https://flagcdn.com/za.svg",
            alt: "The flag of South Africa is composed of two equal horizontal bands of red and blue, with a yellow-edged black isosceles triangle superimposed on the hoist side of the field. This triangle has its base centered on the hoist end, spans about two-fifth the width and two-third the height of the field, and is enclosed on its sides by the arms of a white-edged green horizontally oriented Y-shaped band which extends along the boundary of the red and blue bands to the fly end of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/za.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/za.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -25.7,
                28.22
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "France",
            official: "French Republic",
            nativeName: {
                fra: {
                    official: "R\xe9publique fran\xe7aise",
                    common: "France"
                }
            }
        },
        tld: [
            ".fr"
        ],
        cca2: "FR",
        ccn3: "250",
        cca3: "FRA",
        cioc: "FRA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "3"
            ]
        },
        capital: [
            "Paris"
        ],
        altSpellings: [
            "FR",
            "French Republic",
            "R\xe9publique fran\xe7aise"
        ],
        region: "Europe",
        subregion: "Western Europe",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629",
                common: "\u0641\u0631\u0646\u0633\u0627"
            },
            bre: {
                official: "Republik Fra\xf1s",
                common: "Fra\xf1s"
            },
            ces: {
                official: "Francouzsk\xe1 republika",
                common: "Francie"
            },
            cym: {
                official: "French Republic",
                common: "France"
            },
            deu: {
                official: "Franz\xf6sische Republik",
                common: "Frankreich"
            },
            est: {
                official: "Prantsuse Vabariik",
                common: "Prantsusmaa"
            },
            fin: {
                official: "Ranskan tasavalta",
                common: "Ranska"
            },
            fra: {
                official: "R\xe9publique fran\xe7aise",
                common: "France"
            },
            hrv: {
                official: "Francuska Republika",
                common: "Francuska"
            },
            hun: {
                official: "Francia K\xf6zt\xe1rsas\xe1g",
                common: "Franciaorsz\xe1g"
            },
            ita: {
                official: "Repubblica francese",
                common: "Francia"
            },
            jpn: {
                official: "\u30D5\u30E9\u30F3\u30B9\u5171\u548C\u56FD",
                common: "\u30D5\u30E9\u30F3\u30B9"
            },
            kor: {
                official: "\uD504\uB791\uC2A4 \uACF5\uD654\uAD6D",
                common: "\uD504\uB791\uC2A4"
            },
            nld: {
                official: "Franse Republiek",
                common: "Frankrijk"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u0631\u0627\u0646\u0633\u0647",
                common: "\u0641\u0631\u0627\u0646\u0633\u0647"
            },
            pol: {
                official: "Republika Francuska",
                common: "Francja"
            },
            por: {
                official: "Rep\xfablica Francesa",
                common: "Fran\xe7a"
            },
            rus: {
                official: "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0424\u0440\u0430\u043D\u0446\u0438\u044F"
            },
            slk: {
                official: "Franc\xfazska republika",
                common: "Franc\xfazsko"
            },
            spa: {
                official: "Rep\xfablica franc\xe9s",
                common: "Francia"
            },
            srp: {
                official: "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430"
            },
            swe: {
                official: "Republiken Frankrike",
                common: "Frankrike"
            },
            tur: {
                official: "Fransa Cumhuriyeti",
                common: "Fransa"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0641\u0631\u0627\u0646\u0633",
                common: "\u0641\u0631\u0627\u0646\u0633"
            },
            zho: {
                official: "\u6CD5\u5170\u897F\u5171\u548C\u56FD",
                common: "\u6CD5\u56FD"
            }
        },
        latlng: [
            46,
            2
        ],
        landlocked: false,
        borders: [
            "AND",
            "BEL",
            "DEU",
            "ITA",
            "LUX",
            "MCO",
            "ESP",
            "CHE"
        ],
        area: 551695,
        demonyms: {
            eng: {
                f: "French",
                m: "French"
            },
            fra: {
                f: "Fran\xe7aise",
                m: "Fran\xe7ais"
            }
        },
        flag: "\uD83C\uDDEB\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/g7QxxSFsWyTPKuzd7",
            openStreetMaps: "https://www.openstreetmap.org/relation/1403916"
        },
        population: 67391582,
        gini: {
            2018: 32.4
        },
        fifa: "FRA",
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC-10:00",
            "UTC-09:30",
            "UTC-09:00",
            "UTC-08:00",
            "UTC-04:00",
            "UTC-03:00",
            "UTC+01:00",
            "UTC+02:00",
            "UTC+03:00",
            "UTC+04:00",
            "UTC+05:00",
            "UTC+10:00",
            "UTC+11:00",
            "UTC+12:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/fr.png",
            svg: "https://flagcdn.com/fr.svg",
            alt: "The flag of France is composed of three equal vertical bands of blue, white and red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/fr.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/fr.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                48.87,
                2.33
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Libya",
            official: "State of Libya",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u062F\u0648\u0644\u0629 \u0644\u064A\u0628\u064A\u0627",
                    common: "\u200F\u0644\u064A\u0628\u064A\u0627"
                }
            }
        },
        tld: [
            ".ly"
        ],
        cca2: "LY",
        ccn3: "434",
        cca3: "LBY",
        cioc: "LBA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            LYD: {
                name: "Libyan dinar",
                symbol: "\u0644.\u062F"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "18"
            ]
        },
        capital: [
            "Tripoli"
        ],
        altSpellings: [
            "LY",
            "State of Libya",
            "Dawlat Libya"
        ],
        region: "Africa",
        subregion: "Northern Africa",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0644\u0629 \u0644\u064A\u0628\u064A\u0627",
                common: "\u200F\u0644\u064A\u0628\u064A\u0627"
            },
            bre: {
                official: "Stad Libia",
                common: "Libia"
            },
            ces: {
                official: "St\xe1t Libye",
                common: "Libye"
            },
            cym: {
                official: "State of Libya",
                common: "Libya"
            },
            deu: {
                official: "Staat Libyen",
                common: "Libyen"
            },
            est: {
                official: "Liib\xfca",
                common: "Liib\xfca"
            },
            fin: {
                official: "Libyan valtio",
                common: "Libya"
            },
            fra: {
                official: "Grande R\xe9publique arabe libyenne populaire et socialiste",
                common: "Libye"
            },
            hrv: {
                official: "Dr\u017Eava Libiji",
                common: "Libija"
            },
            hun: {
                official: "L\xedbia \xc1llam",
                common: "L\xedbia"
            },
            ita: {
                official: "Stato della Libia",
                common: "Libia"
            },
            jpn: {
                official: "\u30EA\u30D3\u30A2\u306E\u56FD\u5BB6",
                common: "\u30EA\u30D3\u30A2"
            },
            kor: {
                official: "\uB9AC\uBE44\uC544",
                common: "\uB9AC\uBE44\uC544"
            },
            nld: {
                official: "Staat van Libi\xeb",
                common: "Libi\xeb"
            },
            per: {
                official: "\u062F\u0648\u0644\u062A \u0644\u06CC\u0628\u06CC",
                common: "\u0644\u06CC\u0628\u06CC"
            },
            pol: {
                official: "Pa\u0144stwo Libia",
                common: "Libia"
            },
            por: {
                official: "Estado da L\xedbia",
                common: "L\xedbia"
            },
            rus: {
                official: "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u041B\u0438\u0432\u0438\u0438",
                common: "\u041B\u0438\u0432\u0438\u044F"
            },
            slk: {
                official: "L\xedbya",
                common: "L\xedbya"
            },
            spa: {
                official: "Estado de Libia",
                common: "Libia"
            },
            srp: {
                official: "\u0414\u0440\u0436\u0430\u0432\u0430 \u041B\u0438\u0431\u0438\u0458\u0430",
                common: "\u041B\u0438\u0431\u0438\u0458\u0430"
            },
            swe: {
                official: "Staten Libyen",
                common: "Libyen"
            },
            tur: {
                official: "Libya Devleti",
                common: "Libya"
            },
            urd: {
                official: "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0644\u06CC\u0628\u06CC\u0627",
                common: "\u0644\u06CC\u0628\u06CC\u0627"
            },
            zho: {
                official: "\u5229\u6BD4\u4E9A\u56FD",
                common: "\u5229\u6BD4\u4E9A"
            }
        },
        latlng: [
            25,
            17
        ],
        landlocked: false,
        borders: [
            "DZA",
            "TCD",
            "EGY",
            "NER",
            "SDN",
            "TUN"
        ],
        area: 1759540,
        demonyms: {
            eng: {
                f: "Libyan",
                m: "Libyan"
            },
            fra: {
                f: "Libyenne",
                m: "Libyen"
            }
        },
        flag: "\uD83C\uDDF1\uD83C\uDDFE",
        maps: {
            googleMaps: "https://goo.gl/maps/eLgGnaQWcJEdYRMy5",
            openStreetMaps: "openstreetmap.org/relation/192758"
        },
        population: 6871287,
        fifa: "LBY",
        car: {
            signs: [
                "LAR"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ly.png",
            svg: "https://flagcdn.com/ly.svg",
            alt: "The flag of Libya is composed of three horizontal bands of red, black and green, with the black band twice the height of the other two bands. At the center of the black band is a fly-side facing white crescent and a five-pointed white star placed just outside the crescent opening."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ly.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ly.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                32.88,
                13.17
            ]
        }
    },
    {
        name: {
            common: "Mexico",
            official: "United Mexican States",
            nativeName: {
                spa: {
                    official: "Estados Unidos Mexicanos",
                    common: "M\xe9xico"
                }
            }
        },
        tld: [
            ".mx"
        ],
        cca2: "MX",
        ccn3: "484",
        cca3: "MEX",
        cioc: "MEX",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MXN: {
                name: "Mexican peso",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "2"
            ]
        },
        capital: [
            "Mexico City"
        ],
        altSpellings: [
            "MX",
            "Mexicanos",
            "United Mexican States",
            "Estados Unidos Mexicanos"
        ],
        region: "Americas",
        subregion: "North America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629 \u0627\u0644\u0645\u0643\u0633\u064A\u0643\u064A\u0629",
                common: "\u0627\u0644\u0645\u0633\u0643\u064A\u0643"
            },
            bre: {
                official: "Stado\xf9-Unanet Mec'hiko",
                common: "Mec'hiko"
            },
            ces: {
                official: "Spojen\xe9 st\xe1ty mexick\xe9",
                common: "Mexiko"
            },
            cym: {
                official: "United Mexican States",
                common: "Mexico"
            },
            deu: {
                official: "Vereinigte Mexikanische Staaten",
                common: "Mexiko"
            },
            est: {
                official: "Mehhiko \xdchendriigid",
                common: "Mehhiko"
            },
            fin: {
                official: "Meksikon yhdysvallat",
                common: "Meksiko"
            },
            fra: {
                official: "\xc9tats-Unis du Mexique",
                common: "Mexique"
            },
            hrv: {
                official: "Sjedinjene Meksi\u010Dke Dr\u017Eave",
                common: "Meksiko"
            },
            hun: {
                official: "Mexik\xf3i Egyes\xfclt \xc1llamok",
                common: "Mexik\xf3"
            },
            ita: {
                official: "Stati Uniti del Messico",
                common: "Messico"
            },
            jpn: {
                official: "\u30E1\u30AD\u30B7\u30B3\u5408\u8846\u56FD",
                common: "\u30E1\u30AD\u30B7\u30B3"
            },
            kor: {
                official: "\uBA55\uC2DC\uCF54 \uD569\uC911\uAD6D",
                common: "\uBA55\uC2DC\uCF54"
            },
            nld: {
                official: "Verenigde Mexicaanse Staten",
                common: "Mexico"
            },
            per: {
                official: "\u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F \u0645\u06A9\u0632\u06CC\u06A9",
                common: "\u0645\u06A9\u0632\u06CC\u06A9"
            },
            pol: {
                official: "Meksyka\u0144skie Stany Zjednoczone",
                common: "Meksyk"
            },
            por: {
                official: "Estados Unidos Mexicanos",
                common: "M\xe9xico"
            },
            rus: {
                official: "\u041C\u0435\u043A\u0441\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0435 \u0421\u043E\u0435\u0434\u0438\u043D\u0451\u043D\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B",
                common: "\u041C\u0435\u043A\u0441\u0438\u043A\u0430"
            },
            slk: {
                official: "Spojen\xe9 \u0161t\xe1\u0161y mexick\xe9",
                common: "Mexiko"
            },
            spa: {
                official: "Estados Unidos Mexicanos",
                common: "M\xe9xico"
            },
            srp: {
                official: "\u0421\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0435 \u041C\u0435\u043A\u0441\u0438\u0447\u043A\u0435 \u0414\u0440\u0436\u0430\u0432\u0435",
                common: "\u041C\u0435\u043A\u0441\u0438\u043A\u043E"
            },
            swe: {
                official: "Mexikos f\xf6renta stater",
                common: "Mexiko"
            },
            tur: {
                official: "Birle\u015Fik Meksika Devletleri",
                common: "Meksika"
            },
            urd: {
                official: "\u0631\u06CC\u0627\u0633\u062A\u06C1\u0627\u0626\u06D2 \u0645\u062A\u062D\u062F\u06C1 \u0645\u06CC\u06A9\u0633\u06CC\u06A9\u0648",
                common: "\u0645\u06CC\u06A9\u0633\u06CC\u06A9\u0648"
            },
            zho: {
                official: "\u58A8\u897F\u54E5\u5408\u4F17\u56FD",
                common: "\u58A8\u897F\u54E5"
            }
        },
        latlng: [
            23,
            -102
        ],
        landlocked: false,
        borders: [
            "BLZ",
            "GTM",
            "USA"
        ],
        area: 1964375,
        demonyms: {
            eng: {
                f: "Mexican",
                m: "Mexican"
            },
            fra: {
                f: "Mexicaine",
                m: "Mexicain"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDFD",
        maps: {
            googleMaps: "https://goo.gl/maps/s5g7imNPMDEePxzbA",
            openStreetMaps: "https://www.openstreetmap.org/relation/114686"
        },
        population: 128932753,
        gini: {
            2018: 45.4
        },
        fifa: "MEX",
        car: {
            signs: [
                "MEX"
            ],
            side: "right"
        },
        timezones: [
            "UTC-08:00",
            "UTC-07:00",
            "UTC-06:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mx.png",
            svg: "https://flagcdn.com/mx.svg",
            alt: "The flag of Mexico is composed of three equal vertical bands of green, white and red, with the national coat of arms centered in the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mx.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mx.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                19.43,
                -99.13
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Gabon",
            official: "Gabonese Republic",
            nativeName: {
                fra: {
                    official: "R\xe9publique gabonaise",
                    common: "Gabon"
                }
            }
        },
        tld: [
            ".ga"
        ],
        cca2: "GA",
        ccn3: "266",
        cca3: "GAB",
        cioc: "GAB",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XAF: {
                name: "Central African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "41"
            ]
        },
        capital: [
            "Libreville"
        ],
        altSpellings: [
            "GA",
            "Gabonese Republic",
            "R\xe9publique Gabonaise"
        ],
        region: "Africa",
        subregion: "Middle Africa",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u063A\u0627\u0628\u0648\u0646",
                common: "\u0627\u0644\u063A\u0627\u0628\u0648\u0646"
            },
            bre: {
                official: "Republik Gabonat",
                common: "Gabon"
            },
            ces: {
                official: "Gabonsk\xe1 republika",
                common: "Gabon"
            },
            cym: {
                official: "Gabonese Republic",
                common: "Gabon"
            },
            deu: {
                official: "Gabunische Republik",
                common: "Gabun"
            },
            est: {
                official: "Gaboni Vabariik",
                common: "Gabon"
            },
            fin: {
                official: "Gabonin tasavalta",
                common: "Gabon"
            },
            fra: {
                official: "R\xe9publique gabonaise",
                common: "Gabon"
            },
            hrv: {
                official: "Gabon Republika",
                common: "Gabon"
            },
            hun: {
                official: "Gaboni K\xf6zt\xe1rsas\xe1g",
                common: "Gabon"
            },
            ita: {
                official: "Repubblica gabonese",
                common: "Gabon"
            },
            jpn: {
                official: "\u30AC\u30DC\u30F3\u5171\u548C\u56FD",
                common: "\u30AC\u30DC\u30F3"
            },
            kor: {
                official: "\uAC00\uBD09 \uACF5\uD654\uAD6D",
                common: "\uAC00\uBD09"
            },
            nld: {
                official: "Republiek Gabon",
                common: "Gabon"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06AF\u0627\u0628\u064F\u0646",
                common: "\u06AF\u0627\u0628\u0646"
            },
            pol: {
                official: "Republika Gabo\u0144ska",
                common: "Gabon"
            },
            por: {
                official: "Rep\xfablica do Gab\xe3o",
                common: "Gab\xe3o"
            },
            rus: {
                official: "\u0413\u0430\u0431\u043E\u043D\u0430 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0413\u0430\u0431\u043E\u043D"
            },
            slk: {
                official: "Gabonsk\xe1 republika",
                common: "Gabon"
            },
            spa: {
                official: "Rep\xfablica de Gab\xf3n",
                common: "Gab\xf3n"
            },
            srp: {
                official: "\u0413\u0430\u0431\u043E\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0413\u0430\u0431\u043E\u043D"
            },
            swe: {
                official: "Republiken Gabon",
                common: "Gabon"
            },
            tur: {
                official: "Gabon Cumhuriyeti",
                common: "Gabon"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u06CC\u0628\u0648\u0646",
                common: "\u06AF\u06CC\u0628\u0648\u0646"
            },
            zho: {
                official: "\u52A0\u84EC\u5171\u548C\u56FD",
                common: "\u52A0\u84EC"
            }
        },
        latlng: [
            -1,
            11.75
        ],
        landlocked: false,
        borders: [
            "CMR",
            "COG",
            "GNQ"
        ],
        area: 267668,
        demonyms: {
            eng: {
                f: "Gabonese",
                m: "Gabonese"
            },
            fra: {
                f: "Gabonaise",
                m: "Gabonais"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDE6",
        maps: {
            googleMaps: "https://goo.gl/maps/vyRSkqw1H1fnq4ry6",
            openStreetMaps: "https://www.openstreetmap.org/relation/192793"
        },
        population: 2225728,
        gini: {
            2017: 38
        },
        fifa: "GAB",
        car: {
            signs: [
                "G"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ga.png",
            svg: "https://flagcdn.com/ga.svg",
            alt: "The flag of Gabon is composed of three equal horizontal bands of green, yellow and blue."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ga.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ga.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                0.38,
                9.45
            ]
        }
    },
    {
        name: {
            common: "Northern Mariana Islands",
            official: "Commonwealth of the Northern Mariana Islands",
            nativeName: {
                cal: {
                    official: "Commonwealth of the Northern Mariana Islands",
                    common: "Northern Mariana Islands"
                },
                cha: {
                    official: "Sankattan Siha Na Islas Mari\xe5nas",
                    common: "Na Islas Mari\xe5nas"
                },
                eng: {
                    official: "Commonwealth of the Northern Mariana Islands",
                    common: "Northern Mariana Islands"
                }
            }
        },
        tld: [
            ".mp"
        ],
        cca2: "MP",
        ccn3: "580",
        cca3: "MNP",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "670"
            ]
        },
        capital: [
            "Saipan"
        ],
        altSpellings: [
            "MP",
            "Commonwealth of the Northern Mariana Islands",
            "Sankattan Siha Na Islas Mari\xe5nas"
        ],
        region: "Oceania",
        subregion: "Micronesia",
        languages: {
            cal: "Carolinian",
            cha: "Chamorro",
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0643\u0648\u0645\u0648\u0646\u0648\u0644\u062B \u062C\u0632\u0631 \u0645\u0627\u0631\u064A\u0627\u0646\u0627 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629",
                common: "\u062C\u0632\u0631 \u0645\u0627\u0631\u064A\u0627\u0646\u0627 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629"
            },
            bre: {
                official: "Kenglad Inizi Mariana an Norzh",
                common: "Inizi Mariana an Norzh"
            },
            ces: {
                official: "Spole\u010Denstv\xed Severn\xedch Marian",
                common: "Severn\xed Mariany"
            },
            cym: {
                official: "Commonwealth of the Northern Mariana Islands",
                common: "Northern Mariana Islands"
            },
            deu: {
                official: "Commonwealth der N\xf6rdlichen Marianen",
                common: "N\xf6rdliche Marianen"
            },
            est: {
                official: "P\xf5hja-Mariaani \xdchendus",
                common: "P\xf5hja-Mariaanid"
            },
            fin: {
                official: "Pohjois-Mariaanit",
                common: "Pohjois-Mariaanit"
            },
            fra: {
                official: "Commonwealth des \xeeles Mariannes du Nord",
                common: "\xceles Mariannes du Nord"
            },
            hrv: {
                official: "Zajednica je Sjeverni Marijanski otoci",
                common: "Sjevernomarijanski otoci"
            },
            hun: {
                official: "\xc9szaki-Mariana-szigetek",
                common: "\xc9szaki-Mariana-szigetek"
            },
            ita: {
                official: "Commonwealth delle Isole Marianne Settentrionali",
                common: "Isole Marianne Settentrionali"
            },
            jpn: {
                official: "\u5317\u30DE\u30EA\u30A2\u30CA\u8AF8\u5CF6",
                common: "\u5317\u30DE\u30EA\u30A2\u30CA\u8AF8\u5CF6"
            },
            kor: {
                official: "\uBD81\uB9C8\uB9AC\uC544\uB098 \uC81C\uB3C4",
                common: "\uBD81\uB9C8\uB9AC\uC544\uB098 \uC81C\uB3C4"
            },
            nld: {
                official: "Commonwealth van de Noordelijke Marianen",
                common: "Noordelijke Marianeneilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u0645\u0627\u0631\u06CC\u0627\u0646\u0627\u06CC \u0634\u0645\u0627\u0644\u06CC",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u0645\u0627\u0631\u06CC\u0627\u0646\u0627\u06CC \u0634\u0645\u0627\u0644\u06CC"
            },
            pol: {
                official: "Wsp\xf3lnota Marian\xf3w P\xf3\u0142nocnych",
                common: "Mariany P\xf3\u0142nocne"
            },
            por: {
                official: "Comunidade das Ilhas Marianas do Norte",
                common: "Marianas Setentrionais"
            },
            rus: {
                official: "\u0421\u043E\u0434\u0440\u0443\u0436\u0435\u0441\u0442\u0432\u043E \u0421\u0435\u0432\u0435\u0440\u043D\u044B\u0445 \u041C\u0430\u0440\u0438\u0430\u043D\u0441\u043A\u0438\u0445 \u043E\u0441\u0442\u0440\u043E\u0432\u043E\u0432",
                common: "\u0421\u0435\u0432\u0435\u0440\u043D\u044B\u0435 \u041C\u0430\u0440\u0438\u0430\u043D\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Spolo\u010Denstvo ostrovov Severn\xe9 Mari\xe1ny",
                common: "Severn\xe9 Mari\xe1ny"
            },
            spa: {
                official: "Mancomunidad de las Islas Marianas del Norte",
                common: "Islas Marianas del Norte"
            },
            srp: {
                official: "\u041A\u043E\u043C\u043E\u043D\u0432\u0435\u043B\u0442 \u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u0440\u0438\u0458\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                common: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u0440\u0438\u0458\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "Nordmarianerna",
                common: "Nordmarianerna"
            },
            tur: {
                official: "Kuzey Mariana Adalar\u0131 Milletler Toplulu\u011Fu",
                common: "Kuzey Mariana Adalar\u0131"
            },
            urd: {
                official: "\u062F\u0648\u0644\u062A\u0650 \u0645\u0634\u062A\u0631\u06A9\u06C1 \u062C\u0632\u0627\u0626\u0631 \u0634\u0645\u0627\u0644\u06CC \u0645\u0627\u0631\u06CC\u0627\u0646\u0627",
                common: "\u062C\u0632\u0627\u0626\u0631 \u0634\u0645\u0627\u0644\u06CC \u0645\u0627\u0631\u06CC\u0627\u0646\u0627"
            },
            zho: {
                official: "\u5317\u9A6C\u91CC\u4E9A\u7EB3\u7FA4\u5C9B",
                common: "\u5317\u9A6C\u91CC\u4E9A\u7EB3\u7FA4\u5C9B"
            }
        },
        latlng: [
            15.2,
            145.75
        ],
        landlocked: false,
        area: 464,
        demonyms: {
            eng: {
                f: "American",
                m: "American"
            },
            fra: {
                f: "Am\xe9ricaine",
                m: "Am\xe9rican"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDF5",
        maps: {
            googleMaps: "https://goo.gl/maps/cpZ67knoRAcfu1417",
            openStreetMaps: "https://www.openstreetmap.org/relation/306004"
        },
        population: 57557,
        car: {
            signs: [
                "USA"
            ],
            side: "right"
        },
        timezones: [
            "UTC+10:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mp.png",
            svg: "https://flagcdn.com/mp.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                15.2,
                145.75
            ]
        }
    },
    {
        name: {
            common: "North Macedonia",
            official: "Republic of North Macedonia",
            nativeName: {
                mkd: {
                    official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430",
                    common: "\u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430"
                }
            }
        },
        tld: [
            ".mk"
        ],
        cca2: "MK",
        ccn3: "807",
        cca3: "MKD",
        cioc: "MKD",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MKD: {
                name: "denar",
                symbol: "den"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "89"
            ]
        },
        capital: [
            "Skopje"
        ],
        altSpellings: [
            "MK",
            "The former Yugoslav Republic of Macedonia",
            "Republic of North Macedonia",
            "Macedonia, The Former Yugoslav Republic of",
            "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430"
        ],
        region: "Europe",
        subregion: "Southeast Europe",
        languages: {
            mkd: "Macedonian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0634\u0645\u0627\u0644 \u0645\u0642\u062F\u0648\u0646\u064A\u0627",
                common: "\u0634\u0645\u0627\u0644 \u0645\u0642\u062F\u0648\u0646\u064A\u0627"
            },
            bre: {
                official: "Republik Makedonia an Norzh",
                common: "Makedonia an Norzh"
            },
            ces: {
                official: "Republika Severn\xed Makedonie",
                common: "Severn\xed Makedonie"
            },
            cym: {
                official: "Republic of North Macedonia",
                common: "North Macedonia"
            },
            deu: {
                official: "Republik Nordmazedonien",
                common: "Nordmazedonien"
            },
            est: {
                official: "P\xf5hja-Makedoonia Vabariik",
                common: "P\xf5hja-Makedoonia"
            },
            fin: {
                official: "Pohjois-Makedonian tasavalta",
                common: "Pohjois-Makedonia"
            },
            fra: {
                official: "R\xe9publique de Mac\xe9doine du Nord",
                common: "Mac\xe9doine du Nord"
            },
            hrv: {
                official: "Republika Sjeverna Makedonija",
                common: "Sjeverna Makedonija"
            },
            hun: {
                official: "\xc9szak-maced\xf3n K\xf6zt\xe1rsas\xe1g",
                common: "\xc9szak-Maced\xf3nia"
            },
            ita: {
                official: "Repubblica di Macedonia del Nord",
                common: "Macedonia del Nord"
            },
            jpn: {
                official: "\u5317\u30DE\u30B1\u30C9\u30CB\u30A2\u5171\u548C\u56FD",
                common: "\u5317\u30DE\u30B1\u30C9\u30CB\u30A2 "
            },
            kor: {
                official: "\uBD81\uB9C8\uCF00\uB3C4\uB2C8\uC544 \uACF5\uD654\uAD6D",
                common: "\uBD81\uB9C8\uCF00\uB3C4\uB2C8\uC544"
            },
            nld: {
                official: "Republiek Noord-Macedoni\xeb",
                common: "Noord-Macedoni\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0642\u062F\u0648\u0646\u06CC\u0647 \u0634\u0645\u0627\u0644\u06CC",
                common: "\u0645\u0642\u062F\u0648\u0646\u06CC\u0647 \u0634\u0645\u0627\u0644\u06CC"
            },
            pol: {
                official: "Republika Macedonii P\xf3\u0142nocnej",
                common: "Macedonia P\xf3\u0142nocna"
            },
            por: {
                official: "Rep\xfablica da Maced\xf4nia do Norte",
                common: "Maced\xf3nia do Norte"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u044F",
                common: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u044F"
            },
            slk: {
                official: "Severomaced\xf3nska republika",
                common: "Severn\xe9 Maced\xf3nsko"
            },
            spa: {
                official: "Rep\xfablica de Macedonia del Norte",
                common: "Macedonia del Norte"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430",
                common: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041C\u0430\u043A\u0435\u0434\u043E\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Nordmakedonien",
                common: "Nordmakedonien"
            },
            tur: {
                official: "Kuzey Makedonya Cumhuriyeti",
                common: "Kuzey Makedonya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0642\u062F\u0648\u0646\u06CC\u06C1",
                common: "\u0634\u0645\u0627\u0644\u06CC \u0645\u0642\u062F\u0648\u0646\u06CC\u06C1"
            },
            zho: {
                official: "\u5317\u99AC\u5176\u9813\u5171\u548C\u570B",
                common: "\u5317\u99AC\u5176\u9813"
            }
        },
        latlng: [
            41.83333333,
            22
        ],
        landlocked: true,
        borders: [
            "ALB",
            "BGR",
            "GRC",
            "UNK",
            "SRB"
        ],
        area: 25713,
        demonyms: {
            eng: {
                f: "Macedonian",
                m: "Macedonian"
            },
            fra: {
                f: "Mac\xe9donienne",
                m: "Mac\xe9donien"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDF0",
        maps: {
            googleMaps: "https://goo.gl/maps/55Q8MEnF6ACdu3q79",
            openStreetMaps: "https://www.openstreetmap.org/relation/53293"
        },
        population: 2077132,
        gini: {
            2018: 33
        },
        fifa: "MKD",
        car: {
            signs: [
                "MK"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mk.png",
            svg: "https://flagcdn.com/mk.svg",
            alt: "The flag of North Macedonia has a red field, at the center of which is a golden-yellow sun with eight broadening rays that extend to the edges of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mk.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mk.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                42,
                21.43
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "China",
            official: "People's Republic of China",
            nativeName: {
                zho: {
                    official: "\u4E2D\u534E\u4EBA\u6C11\u5171\u548C\u56FD",
                    common: "\u4E2D\u56FD"
                }
            }
        },
        tld: [
            ".cn",
            ".\u4E2D\u56FD",
            ".\u4E2D\u570B",
            ".\u516C\u53F8",
            ".\u7F51\u7EDC"
        ],
        cca2: "CN",
        ccn3: "156",
        cca3: "CHN",
        cioc: "CHN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            CNY: {
                name: "Chinese yuan",
                symbol: "\xa5"
            }
        },
        idd: {
            root: "+8",
            suffixes: [
                "6"
            ]
        },
        capital: [
            "Beijing"
        ],
        altSpellings: [
            "CN",
            "Zh\u014Dnggu\xf3",
            "Zhongguo",
            "Zhonghua",
            "People's Republic of China",
            "\u4E2D\u534E\u4EBA\u6C11\u5171\u548C\u56FD",
            "Zh\u014Dnghu\xe1 R\xe9nm\xedn G\xf2ngh\xe9gu\xf3"
        ],
        region: "Asia",
        subregion: "Eastern Asia",
        languages: {
            zho: "Chinese"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u064A\u0646 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                common: "\u0627\u0644\u0635\u064A\u0646"
            },
            bre: {
                official: "Republik Pobl Sina",
                common: "Sina"
            },
            ces: {
                official: "\u010C\xednsk\xe1 lidov\xe1 republika",
                common: "\u010C\xedna"
            },
            cym: {
                official: "Gweriniaeth Pobl Tsieina",
                common: "Tsieina"
            },
            deu: {
                official: "Volksrepublik China",
                common: "China"
            },
            est: {
                official: "Hiina Rahvavabariik",
                common: "Hiina"
            },
            fin: {
                official: "Kiinan kansantasavalta",
                common: "Kiina"
            },
            fra: {
                official: "R\xe9publique populaire de Chine",
                common: "Chine"
            },
            hrv: {
                official: "Narodna Republika Kina",
                common: "Kina"
            },
            hun: {
                official: "K\xednai N\xe9pk\xf6zt\xe1rsas\xe1g",
                common: "K\xedna"
            },
            ita: {
                official: "Repubblica popolare cinese",
                common: "Cina"
            },
            jpn: {
                official: "\u4E2D\u83EF\u4EBA\u6C11\u5171\u548C\u56FD",
                common: "\u4E2D\u56FD"
            },
            kor: {
                official: "\uC911\uD654\uC778\uBBFC\uACF5\uD654\uAD6D",
                common: "\uC911\uAD6D"
            },
            nld: {
                official: "Volksrepubliek China",
                common: "China"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062E\u0644\u0642 \u0686\u06CC\u0646",
                common: "\u0686\u06CC\u0646"
            },
            pol: {
                official: "Chi\u0144ska Republika Ludowa",
                common: "Chiny"
            },
            por: {
                official: "Rep\xfablica Popular da China",
                common: "China"
            },
            rus: {
                official: "\u041D\u0430\u0440\u043E\u0434\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0438\u0442\u0430\u0439",
                common: "\u041A\u0438\u0442\u0430\u0439"
            },
            slk: {
                official: "\u010C\xednska \u013Eudov\xe1 republika",
                common: "\u010C\xedna"
            },
            spa: {
                official: "Rep\xfablica Popular de China",
                common: "China"
            },
            srp: {
                official: "\u041D\u0430\u0440\u043E\u0434\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0438\u043D\u0430",
                common: "\u041A\u0438\u043D\u0430"
            },
            swe: {
                official: "Folkrepubliken Kina",
                common: "Kina"
            },
            tur: {
                official: "\xc7in Halk Cumhuriyeti",
                common: "\xc7in"
            },
            urd: {
                official: "\u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u06CC\u0646",
                common: "\u0686\u06CC\u0646"
            }
        },
        latlng: [
            35,
            105
        ],
        landlocked: false,
        borders: [
            "AFG",
            "BTN",
            "MMR",
            "HKG",
            "IND",
            "KAZ",
            "NPL",
            "PRK",
            "KGZ",
            "LAO",
            "MAC",
            "MNG",
            "PAK",
            "RUS",
            "TJK",
            "VNM"
        ],
        area: 9706961,
        demonyms: {
            eng: {
                f: "Chinese",
                m: "Chinese"
            },
            fra: {
                f: "Chinoise",
                m: "Chinois"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDF3",
        maps: {
            googleMaps: "https://goo.gl/maps/p9qC6vgiFRRXzvGi7",
            openStreetMaps: "https://www.openstreetmap.org/relation/270056"
        },
        population: 1402112000,
        gini: {
            2016: 38.5
        },
        fifa: "CHN",
        car: {
            signs: [
                "RC"
            ],
            side: "right"
        },
        timezones: [
            "UTC+08:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cn.png",
            svg: "https://flagcdn.com/cn.svg",
            alt: "The flag of China has a red field. In the canton are five yellow five-pointed stars \u2014 a large star and four smaller stars arranged in a vertical arc on the fly side of the large star."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cn.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cn.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                39.92,
                116.38
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Yemen",
            official: "Republic of Yemen",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u064A\u0645\u0646\u064A\u0629",
                    common: "\u0627\u0644\u064A\u064E\u0645\u064E\u0646"
                }
            }
        },
        tld: [
            ".ye"
        ],
        cca2: "YE",
        ccn3: "887",
        cca3: "YEM",
        cioc: "YEM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            YER: {
                name: "Yemeni rial",
                symbol: "\uFDFC"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "67"
            ]
        },
        capital: [
            "Sana'a"
        ],
        altSpellings: [
            "YE",
            "Yemeni Republic",
            "al-Jumh\u016Briyyah al-Yamaniyyah"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u064A\u0645\u0646\u064A\u0629",
                common: "\u0627\u0644\u064A\u0645\u0646"
            },
            bre: {
                official: "Republik Yemen",
                common: "Yemen"
            },
            ces: {
                official: "Jemensk\xe1 republika",
                common: "Jemen"
            },
            cym: {
                official: "Republic of Yemen",
                common: "Yemen"
            },
            deu: {
                official: "Republik Jemen",
                common: "Jemen"
            },
            est: {
                official: "Jeemeni Vabariik",
                common: "Jeemen"
            },
            fin: {
                official: "Jemenin tasavalta",
                common: "Jemen"
            },
            fra: {
                official: "R\xe9publique du Y\xe9men",
                common: "Y\xe9men"
            },
            hrv: {
                official: "Republika Jemen",
                common: "Jemen"
            },
            hun: {
                official: "Jemeni K\xf6zt\xe1rsas\xe1g",
                common: "Jemen"
            },
            ita: {
                official: "Repubblica dello Yemen",
                common: "Yemen"
            },
            jpn: {
                official: "\u30A4\u30A8\u30E1\u30F3\u5171\u548C\u56FD",
                common: "\u30A4\u30A8\u30E1\u30F3"
            },
            kor: {
                official: "\uC608\uBA58 \uACF5\uD654\uAD6D",
                common: "\uC608\uBA58"
            },
            nld: {
                official: "Republiek Jemen",
                common: "Jemen"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06CC\u0645\u0646",
                common: "\u06CC\u0645\u0646"
            },
            pol: {
                official: "Republika Jeme\u0144ska",
                common: "Jemen"
            },
            por: {
                official: "Rep\xfablica do I\xeamen",
                common: "I\xe9men"
            },
            rus: {
                official: "\u0419\u0435\u043C\u0435\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0419\u0435\u043C\u0435\u043D"
            },
            slk: {
                official: "Jemensk\xe1 republika",
                common: "Jemen"
            },
            spa: {
                official: "Rep\xfablica de Yemen",
                common: "Yemen"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0408\u0435\u043C\u0435\u043D",
                common: "\u0408\u0435\u043C\u0435\u043D"
            },
            swe: {
                official: "Republiken Jemen",
                common: "Jemen"
            },
            tur: {
                official: "Yemen Cumhuriyeti",
                common: "Yemen"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06CC\u0645\u0646",
                common: "\u06CC\u0645\u0646"
            },
            zho: {
                official: "\u4E5F\u95E8\u5171\u548C\u56FD",
                common: "\u4E5F\u95E8"
            }
        },
        latlng: [
            15,
            48
        ],
        landlocked: false,
        borders: [
            "OMN",
            "SAU"
        ],
        area: 527968,
        demonyms: {
            eng: {
                f: "Yemeni",
                m: "Yemeni"
            },
            fra: {
                f: "Y\xe9m\xe9nite",
                m: "Y\xe9m\xe9nite"
            }
        },
        flag: "\uD83C\uDDFE\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/WCmE76HKcLideQQw7",
            openStreetMaps: "https://www.openstreetmap.org/relation/305092"
        },
        population: 29825968,
        gini: {
            2014: 36.7
        },
        fifa: "YEM",
        car: {
            signs: [
                "YAR"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ye.png",
            svg: "https://flagcdn.com/ye.svg",
            alt: "The flag of Yemen is composed of three equal horizontal bands of red, white and black."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ye.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ye.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                15.37,
                44.19
            ]
        }
    },
    {
        name: {
            common: "Saint Barth\xe9lemy",
            official: "Collectivity of Saint Barth\xe9lemy",
            nativeName: {
                fra: {
                    official: "Collectivit\xe9 de Saint-Barth\xe9lemy",
                    common: "Saint-Barth\xe9lemy"
                }
            }
        },
        tld: [
            ".bl"
        ],
        cca2: "BL",
        ccn3: "652",
        cca3: "BLM",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "90"
            ]
        },
        capital: [
            "Gustavia"
        ],
        altSpellings: [
            "BL",
            "St. Barthelemy",
            "Collectivity of Saint Barth\xe9lemy",
            "Collectivit\xe9 de Saint-Barth\xe9lemy"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062A\u062C\u0645\u0639 \u0627\u0644\u0625\u0642\u0644\u064A\u0645\u064A \u0644\u0633\u0627\u0646\u062A \u0628\u0627\u0631\u062A\u064A\u0644\u064A\u0645\u064A",
                common: "\u0633\u0627\u0646 \u0628\u0627\u0631\u062A\u0644\u064A\u0645\u064A"
            },
            bre: {
                official: "Saint-Barth\xe9lemy",
                common: "Saint-Barth\xe9lemy"
            },
            ces: {
                official: "Svat\xfd Bartolom\u011Bj",
                common: "Svat\xfd Bartolom\u011Bj"
            },
            cym: {
                official: "Collectivity of Saint Barth\xe9lemy",
                common: "Saint Barth\xe9lemy"
            },
            deu: {
                official: "Gebietsk\xf6rperschaft Saint-Barth\xe9lemy",
                common: "Saint-Barth\xe9lemy"
            },
            est: {
                official: "Saint-Barth\xe9lemy territoriaal\xfchendus",
                common: "Saint-Barth\xe9lemy"
            },
            fin: {
                official: "Saint-Barth\xe9lemyn yhteis\xf6",
                common: "Saint-Barth\xe9lemy"
            },
            fra: {
                official: "Collectivit\xe9 de Saint-Barth\xe9lemy",
                common: "Saint-Barth\xe9lemy"
            },
            hrv: {
                official: "Kolektivnost sv Barth\xe9lemy",
                common: "Saint Barth\xe9lemy"
            },
            hun: {
                official: "Saint-Barth\xe9lemy",
                common: "Saint-Barth\xe9lemy"
            },
            ita: {
                official: "Collettivit\xe0 di Saint Barth\xe9lemy",
                common: "Antille Francesi"
            },
            jpn: {
                official: "\u30B5\u30F3\xb7\u30D0\u30EB\u30C6\u30EB\u30DF\u30FC\u5CF6\u306E\u96C6\u5408\u4F53",
                common: "\u30B5\u30F3\u30FB\u30D0\u30EB\u30C6\u30EB\u30DF\u30FC"
            },
            kor: {
                official: "\uC0DD\uBC14\uB974\uD154\uB808\uBBF8",
                common: "\uC0DD\uBC14\uB974\uD154\uB808\uBBF8"
            },
            nld: {
                official: "Gemeenschap Saint Barth\xe9lemy",
                common: "Saint Barth\xe9lemy"
            },
            per: {
                official: "\u0633\u0646 \u0628\u0627\u0631\u062A\u0644\u0645\u06CC",
                common: "\u0633\u0646 \u0628\u0627\u0631\u062A\u0644\u0645\u06CC"
            },
            pol: {
                official: "Saint-Barth\xe9lemy",
                common: "Saint-Barth\xe9lemy"
            },
            por: {
                official: "Coletividade de Saint Barth\xe9lemy",
                common: "S\xe3o Bartolomeu"
            },
            rus: {
                official: "\u041A\u043E\u043B\u043B\u0435\u043A\u0442\u0438\u0432\u043D\u043E\u0441\u0442\u044C \u0421\u0430\u043D\u043A\u0442 -\u0411\u0430\u0440\u0442\u0435\u043B\u044C\u043C\u0438",
                common: "\u0421\u0435\u043D-\u0411\u0430\u0440\u0442\u0435\u043B\u0435\u043C\u0438"
            },
            slk: {
                official: "Sv\xe4t\xfd Bartolomej",
                common: "Sv\xe4t\xfd Bartolomej"
            },
            spa: {
                official: "Colectividad de San Barth\xe9lemy",
                common: "San Bartolom\xe9"
            },
            srp: {
                official: "\u0421\u0435\u043D \u0411\u0430\u0440\u0442\u0435\u043B\u0435\u043C\u0438",
                common: "\u0422\u0435\u0440\u0438\u0442\u043E\u0440\u0438\u0458\u0430\u043B\u043D\u0438 K\u043E\u043B\u0435\u043A\u0442\u0438\u0432 \u0421\u0435\u043D \u0411\u0430\u0440\u0442\u0435\u043B\u0435\u043C\u0438"
            },
            swe: {
                official: "Saint-Barth\xe9lemy",
                common: "Saint-Barth\xe9lemy"
            },
            tur: {
                official: "Saint Barth\xe9lemy",
                common: "Saint Barth\xe9lemy"
            },
            urd: {
                official: "\u0633\u06CC\u0646\u0679 \u0628\u0627\u0631\u062A\u06BE\u06CC\u0645\u0644\u06D2",
                common: "\u0633\u06CC\u0646\u0679 \u0628\u0627\u0631\u062A\u06BE\u06CC\u0645\u0644\u06D2"
            },
            zho: {
                official: "\u5723\u5DF4\u6CF0\u52D2\u7C73\u96C6\u4F53",
                common: "\u5723\u5DF4\u6CF0\u52D2\u7C73"
            }
        },
        latlng: [
            18.5,
            -63.41666666
        ],
        landlocked: false,
        area: 21,
        demonyms: {
            eng: {
                f: "Saint Barth\xe9lemy Islander",
                m: "Saint Barth\xe9lemy Islander"
            },
            fra: {
                f: "Barth\xe9lom\xe9enne",
                m: "Barth\xe9lom\xe9en"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDF1",
        maps: {
            googleMaps: "https://goo.gl/maps/Mc7GqH466S7AAk297",
            openStreetMaps: "https://www.openstreetmap.org/relation/7552779"
        },
        population: 4255,
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bl.png",
            svg: "https://flagcdn.com/bl.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                17.88,
                -62.85
            ]
        },
        postalCode: {
            format: "### ###"
        }
    },
    {
        name: {
            common: "Guernsey",
            official: "Bailiwick of Guernsey",
            nativeName: {
                eng: {
                    official: "Bailiwick of Guernsey",
                    common: "Guernsey"
                },
                fra: {
                    official: "Bailliage de Guernesey",
                    common: "Guernesey"
                },
                nfr: {
                    official: "Dg\xe8rn\xe9siais",
                    common: "Dg\xe8rn\xe9siais"
                }
            }
        },
        tld: [
            ".gg"
        ],
        cca2: "GG",
        ccn3: "831",
        cca3: "GGY",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            GBP: {
                name: "British pound",
                symbol: "\xa3"
            },
            GGP: {
                name: "Guernsey pound",
                symbol: "\xa3"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "4"
            ]
        },
        capital: [
            "St. Peter Port"
        ],
        altSpellings: [
            "GG",
            "Bailiwick of Guernsey",
            "Bailliage de Guernesey"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            eng: "English",
            fra: "French",
            nfr: "Guern\xe9siais"
        },
        translations: {
            ara: {
                official: "\u063A\u064A\u0631\u0646\u0632\u064A",
                common: "\u063A\u064A\u0631\u0646\u0632\u064A"
            },
            bre: {
                official: "Gwernenez",
                common: "Gwernenez"
            },
            ces: {
                official: "Rycht\xe1\u0159stv\xed Guernsey",
                common: "Guernsey"
            },
            cym: {
                official: "Bailiwick of Guernsey",
                common: "Guernsey"
            },
            deu: {
                official: "Vogtei Guernsey",
                common: "Guernsey"
            },
            est: {
                official: "Guernsey foogtkond",
                common: "Guernsey"
            },
            fin: {
                official: "Guernsey",
                common: "Guernsey"
            },
            fra: {
                official: "Bailliage de Guernesey",
                common: "Guernesey"
            },
            hrv: {
                official: "Struka Guernsey",
                common: "Guernsey"
            },
            hun: {
                official: "Guernsey",
                common: "Guernsey"
            },
            ita: {
                official: "Baliato di Guernsey",
                common: "Guernsey"
            },
            jpn: {
                official: "\u30AC\u30FC\u30F3\u30B8\u30FC\u306E\u5F97\u610F\u5206\u91CE",
                common: "\u30AC\u30FC\u30F3\u30B8\u30FC"
            },
            kor: {
                official: "\uAC74\uC9C0 \uC12C",
                common: "\uAC74\uC9C0 \uC12C"
            },
            nld: {
                official: "Baljuwschap Guernsey",
                common: "Guernsey"
            },
            per: {
                official: "\u06AF\u0631\u0646\u0632\u06CC",
                common: "\u06AF\u0631\u0646\u0632\u06CC"
            },
            pol: {
                official: "Baliwat Guernsey",
                common: "Guernsey"
            },
            por: {
                official: "Bailiado de Guernsey",
                common: "Guernsey"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043D\u043D\u043E\u0435 \u0432\u043B\u0430\u0434\u0435\u043D\u0438\u0435 \u0413\u0435\u0440\u043D\u0441\u0438",
                common: "\u0413\u0435\u0440\u043D\u0441\u0438"
            },
            slk: {
                official: "Guernsey",
                common: "Guernsey"
            },
            spa: {
                official: "Bail\xeda de Guernsey",
                common: "Guernsey"
            },
            srp: {
                official: "\u0411\u0435\u0458\u043B\u0438\u0432\u0438\u043A \u0413\u0435\u0440\u043D\u0437\u0438",
                common: "\u0413\u0435\u0440\u043D\u0437\u0438"
            },
            swe: {
                official: "Guernsey",
                common: "Guernsey"
            },
            tur: {
                official: "Guernsey Muhaf\u0131zl\u0131\u011F\u0131",
                common: "Guernsey"
            },
            urd: {
                official: "\u06AF\u0631\u0646\u0632\u06CC \u0631\u0648\u062F\u0628\u0627\u0631",
                common: "\u06AF\u0631\u0646\u0632\u06CC"
            },
            zho: {
                official: "\u6839\u897F\u5C9B",
                common: "\u6839\u897F\u5C9B"
            }
        },
        latlng: [
            49.46666666,
            -2.58333333
        ],
        landlocked: false,
        area: 78,
        demonyms: {
            eng: {
                f: "Channel Islander",
                m: "Channel Islander"
            },
            fra: {
                f: "Guernesiaise",
                m: "Guernesiais"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/6kXnQU5QvEZMD9VB7",
            openStreetMaps: "https://www.openstreetmap.org/relation/270009"
        },
        population: 62999,
        car: {
            signs: [
                "GBG"
            ],
            side: "left"
        },
        timezones: [
            "UTC+00:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gg.png",
            svg: "https://flagcdn.com/gg.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gg.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gg.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                49.45,
                -2.54
            ]
        },
        postalCode: {
            format: "@# #@@|@## #@@|@@# #@@|@@## #@@|@#@ #@@|@@#@ #@@|GIR0AA",
            regex: "^(([A-Z]\\d{2}[A-Z]{2})|([A-Z]\\d{3}[A-Z]{2})|([A-Z]{2}\\d{2}[A-Z]{2})|([A-Z]{2}\\d{3}[A-Z]{2})|([A-Z]\\d[A-Z]\\d[A-Z]{2})|([A-Z]{2}\\d[A-Z]\\d[A-Z]{2})|(GIR0AA))$"
        }
    },
    {
        name: {
            common: "Solomon Islands",
            official: "Solomon Islands",
            nativeName: {
                eng: {
                    official: "Solomon Islands",
                    common: "Solomon Islands"
                }
            }
        },
        tld: [
            ".sb"
        ],
        cca2: "SB",
        ccn3: "090",
        cca3: "SLB",
        cioc: "SOL",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SBD: {
                name: "Solomon Islands dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "77"
            ]
        },
        capital: [
            "Honiara"
        ],
        altSpellings: [
            "SB"
        ],
        region: "Oceania",
        subregion: "Melanesia",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u0633\u0644\u064A\u0645\u0627\u0646",
                common: "\u062C\u0632\u0631 \u0633\u0644\u064A\u0645\u0627\u0646"
            },
            bre: {
                official: "Inizi Salomon",
                common: "Inizi Salomon"
            },
            ces: {
                official: "\u0160alamounovy ostrovy",
                common: "\u0160alamounovy ostrovy"
            },
            cym: {
                official: "Solomon Islands",
                common: "Solomon Islands"
            },
            deu: {
                official: "Salomonen",
                common: "Salomonen"
            },
            est: {
                official: "Saalomoni Saared",
                common: "Saalomoni Saared"
            },
            fin: {
                official: "Salomonsaaret",
                common: "Salomonsaaret"
            },
            fra: {
                official: "\xceles Salomon",
                common: "\xceles Salomon"
            },
            hrv: {
                official: "Solomonski Otoci",
                common: "Solomonski Otoci"
            },
            hun: {
                official: "Salamon-szigetek",
                common: "Salamon-szigetek"
            },
            ita: {
                official: "Isole Salomone",
                common: "Isole Salomone"
            },
            jpn: {
                official: "\u30BD\u30ED\u30E2\u30F3\u8AF8\u5CF6",
                common: "\u30BD\u30ED\u30E2\u30F3\u8AF8\u5CF6"
            },
            kor: {
                official: "\uC194\uB85C\uBAAC \uC81C\uB3C4",
                common: "\uC194\uB85C\uBAAC \uC81C\uB3C4"
            },
            nld: {
                official: "Solomon eilanden",
                common: "Salomonseilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u0633\u0644\u06CC\u0645\u0627\u0646",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u0633\u0644\u06CC\u0645\u0627\u0646"
            },
            pol: {
                official: "Wyspy Salomona",
                common: "Wyspy Salomona"
            },
            por: {
                official: "Ilhas Salom\xe3o",
                common: "Ilhas Salom\xe3o"
            },
            rus: {
                official: "\u0421\u043E\u043B\u043E\u043C\u043E\u043D\u043E\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u0421\u043E\u043B\u043E\u043C\u043E\u043D\u043E\u0432\u044B \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Salomonove ostrovy",
                common: "Salomonove ostrovy"
            },
            spa: {
                official: "islas Salom\xf3n",
                common: "Islas Salom\xf3n"
            },
            srp: {
                official: "\u0421\u043E\u043B\u043E\u043C\u043E\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                common: "\u0421\u043E\u043B\u043E\u043C\u043E\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "Salomon\xf6arna",
                common: "Salomon\xf6arna"
            },
            tur: {
                official: "Solomon Adalar\u0131",
                common: "Solomon Adalar\u0131"
            },
            urd: {
                official: "\u062C\u0632\u0627\u0626\u0631 \u0633\u0644\u06CC\u0645\u0627\u0646",
                common: "\u062C\u0632\u0627\u0626\u0631 \u0633\u0644\u06CC\u0645\u0627\u0646"
            },
            zho: {
                official: "\u6240\u7F57\u95E8\u7FA4\u5C9B",
                common: "\u6240\u7F57\u95E8\u7FA4\u5C9B"
            }
        },
        latlng: [
            -8,
            159
        ],
        landlocked: false,
        area: 28896,
        demonyms: {
            eng: {
                f: "Solomon Islander",
                m: "Solomon Islander"
            },
            fra: {
                f: "Salomonienne",
                m: "Salomonien"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDE7",
        maps: {
            googleMaps: "https://goo.gl/maps/JbPkx86Ywjv8C1n8A",
            openStreetMaps: "https://www.openstreetmap.org/relation/1857436"
        },
        population: 686878,
        gini: {
            2012: 37.1
        },
        fifa: "SOL",
        car: {
            signs: [
                "SOL"
            ],
            side: "left"
        },
        timezones: [
            "UTC+11:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sb.png",
            svg: "https://flagcdn.com/sb.svg",
            alt: "The flag of Solomon Islands features a thin yellow diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. Above and beneath this band are a blue and green triangle respectively. Five white five-pointed stars arranged in an X shape are situated on the hoist side of the upper blue triangle."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sb.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sb.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -9.43,
                159.95
            ]
        }
    },
    {
        name: {
            common: "Svalbard and Jan Mayen",
            official: "Svalbard og Jan Mayen",
            nativeName: {
                nor: {
                    official: "Svalbard og Jan Mayen",
                    common: "Svalbard og Jan Mayen"
                }
            }
        },
        tld: [
            ".sj"
        ],
        cca2: "SJ",
        ccn3: "744",
        cca3: "SJM",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            NOK: {
                name: "krone",
                symbol: "kr"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "779"
            ]
        },
        capital: [
            "Longyearbyen"
        ],
        altSpellings: [
            "SJ",
            "Svalbard and Jan Mayen Islands"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            nor: "Norwegian"
        },
        translations: {
            ara: {
                official: "\u0633\u0641\u0627\u0644\u0628\u0627\u0631\u062F \u0648\u064A\u0627\u0646 \u0645\u0627\u064A\u0646",
                common: "\u0633\u0641\u0627\u0644\u0628\u0627\u0631\u062F \u0648\u064A\u0627\u0646 \u0645\u0627\u064A\u0646"
            },
            bre: {
                official: "Svalbard ha Jan Mayen",
                common: "Svalbard ha Jan Mayen"
            },
            ces: {
                official: "\u0160picberky a Jan Mayen",
                common: "\u0160picberky a Jan Mayen"
            },
            cym: {
                official: "Svalbard og Jan Mayen",
                common: "Svalbard and Jan Mayen"
            },
            deu: {
                official: "Spitzbergen und Jan Mayen",
                common: "Spitzbergen und Jan Mayen"
            },
            est: {
                official: "Svalbard",
                common: "Svalbard"
            },
            fin: {
                official: "Huippuvuoret",
                common: "Huippuvuoret"
            },
            fra: {
                official: "Jan Mayen Svalbard",
                common: "Svalbard et Jan Mayen"
            },
            hrv: {
                official: "Svalbard og Jan Mayen",
                common: "Svalbard i Jan Mayen"
            },
            hun: {
                official: "Svalbard \xe9s Jan Mayen",
                common: "Svalbard \xe9s Jan Mayen"
            },
            ita: {
                official: "Svalbard og Jan Mayen",
                common: "Svalbard e Jan Mayen"
            },
            jpn: {
                official: "\u30B9\u30D0\u30FC\u30EB\u30D0\u30EB\u8AF8\u5CF6OG\u30E4\u30F3\u30DE\u30A4\u30A8\u30F3",
                common: "\u30B9\u30F4\u30A1\u30FC\u30EB\u30D0\u30EB\u8AF8\u5CF6\u304A\u3088\u3073\u30E4\u30F3\u30DE\u30A4\u30A8\u30F3\u5CF6"
            },
            kor: {
                official: "\uC2A4\uBC1C\uBC14\uB974 \uC580\uB9C8\uC60C \uC81C\uB3C4",
                common: "\uC2A4\uBC1C\uBC14\uB974 \uC580\uB9C8\uC60C \uC81C\uB3C4"
            },
            nld: {
                official: "Svalbard og Jan Mayen",
                common: "Svalbard en Jan Mayen"
            },
            per: {
                official: "\u0633\u0648\u0627\u0644\u0628\u0627\u0631\u062F \u0648 \u06CC\u0627\u0646 \u0645\u0627\u06CC\u0646",
                common: "\u0633\u0648\u0627\u0644\u0628\u0627\u0631\u062F \u0648 \u06CC\u0627\u0646 \u0645\u0627\u06CC\u0646"
            },
            pol: {
                official: "Svalbard i Jan Mayen",
                common: "Svalbard i Jan Mayen"
            },
            por: {
                official: "Svalbard og Jan Mayen",
                common: "Ilhas Svalbard e Jan Mayen"
            },
            rus: {
                official: "\u0421\u0432\u0430\u043B\u044C\u0431\u0430\u0440\u0434\u0430 \u043E\u0433 \u042F\u043D-\u041C\u0430\u0439\u0435\u043D",
                common: "\u0428\u043F\u0438\u0446\u0431\u0435\u0440\u0433\u0435\u043D \u0438 \u042F\u043D-\u041C\u0430\u0439\u0435\u043D"
            },
            slk: {
                official: "Svalbard a Jan Mayen",
                common: "Svalbard a Jan Mayen"
            },
            spa: {
                official: "Svalbard og Jan Mayen",
                common: "Islas Svalbard y Jan Mayen"
            },
            srp: {
                official: "\u0421\u0432\u0430\u043B\u0431\u0430\u0440\u0434 \u0438 \u0408\u0430\u043D \u041C\u0430\u0458\u0435\u043D",
                common: "\u0421\u0432\u0430\u043B\u0431\u0430\u0440\u0434 \u0438 \u0408\u0430\u043D \u041C\u0430\u0458\u0435\u043D"
            },
            swe: {
                official: "Svalbard och Jan Mayen",
                common: "Svalbard och Jan Mayen"
            },
            tur: {
                official: "Svalbard ve Jan Mayen",
                common: "Svalbard ve Jan Mayen"
            },
            urd: {
                official: "\u0633\u0648\u0627\u0644\u0628\u0627\u0631\u0688 \u0627\u0648\u0631 \u062C\u0627\u0646 \u0645\u06CC\u0626\u0646",
                common: "\u0633\u0648\u0627\u0644\u0628\u0627\u0631\u0688 \u0627\u0648\u0631 \u062C\u0627\u0646 \u0645\u06CC\u0626\u0646"
            },
            zho: {
                official: "\u65AF\u74E6\u5C14\u5DF4\u7279",
                common: "\u65AF\u74E6\u5C14\u5DF4\u7279"
            }
        },
        latlng: [
            78,
            20
        ],
        landlocked: false,
        area: 61399,
        demonyms: {
            eng: {
                f: "Norwegian",
                m: "Norwegian"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDEF",
        maps: {
            googleMaps: "https://goo.gl/maps/L2wyyn3cQ16PzQ5J8",
            openStreetMaps: "https://www.openstreetmap.org/relation/1337397"
        },
        population: 2562,
        car: {
            signs: [
                "N"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sj.png",
            svg: "https://flagcdn.com/sj.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                78.22,
                15.63
            ]
        }
    },
    {
        name: {
            common: "Faroe Islands",
            official: "Faroe Islands",
            nativeName: {
                dan: {
                    official: "F\xe6r\xf8erne",
                    common: "F\xe6r\xf8erne"
                },
                fao: {
                    official: "F\xf8royar",
                    common: "F\xf8royar"
                }
            }
        },
        tld: [
            ".fo"
        ],
        cca2: "FO",
        ccn3: "234",
        cca3: "FRO",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            DKK: {
                name: "Danish krone",
                symbol: "kr"
            },
            FOK: {
                name: "Faroese kr\xf3na",
                symbol: "kr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "98"
            ]
        },
        capital: [
            "T\xf3rshavn"
        ],
        altSpellings: [
            "FO",
            "F\xf8royar",
            "F\xe6r\xf8erne"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            dan: "Danish",
            fao: "Faroese"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u0641\u0627\u0631\u0648",
                common: "\u062C\u0632\u0631 \u0641\u0627\u0631\u0648"
            },
            bre: {
                official: "Inizi Faero",
                common: "Inizi Faero"
            },
            ces: {
                official: "Faersk\xe9 ostrovy",
                common: "Faersk\xe9 ostrovy"
            },
            cym: {
                official: "Faroe Islands",
                common: "Faroe Islands"
            },
            deu: {
                official: "F\xe4r\xf6er",
                common: "F\xe4r\xf6er-Inseln"
            },
            est: {
                official: "F\xe4\xe4ri saared",
                common: "F\xe4\xe4ri saared"
            },
            fin: {
                official: "F\xe4rsaaret",
                common: "F\xe4rsaaret"
            },
            fra: {
                official: "\xceles F\xe9ro\xe9",
                common: "\xceles F\xe9ro\xe9"
            },
            hrv: {
                official: "Farski Otoci",
                common: "Farski Otoci"
            },
            hun: {
                official: "Fer\xf6er",
                common: "Fer\xf6er"
            },
            ita: {
                official: "Isole Faroe",
                common: "Isole Far Oer"
            },
            jpn: {
                official: "\u30D5\u30A7\u30ED\u30FC\u8AF8\u5CF6",
                common: "\u30D5\u30A7\u30ED\u30FC\u8AF8\u5CF6"
            },
            kor: {
                official: "\uD398\uB85C \uC81C\uB3C4",
                common: "\uD398\uB85C \uC81C\uB3C4"
            },
            nld: {
                official: "Faer\xf6er",
                common: "Faer\xf6er"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u0641\u0627\u0631\u0648\u0626\u0647",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u0641\u0627\u0631\u0648\u0626\u0647"
            },
            pol: {
                official: "Wyspy Owcze",
                common: "Wyspy Owcze"
            },
            por: {
                official: "Ilhas Faroe",
                common: "Ilhas Faro\xe9"
            },
            rus: {
                official: "\u0424\u0430\u0440\u0435\u0440\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u0424\u0430\u0440\u0435\u0440\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Faersk\xe9 ostrovy",
                common: "Faersk\xe9 ostrovy"
            },
            spa: {
                official: "Islas Feroe",
                common: "Islas Faroe"
            },
            srp: {
                official: "\u0424\u0430\u0440\u0441\u043A\u0430 \u043E\u0441\u0442\u0440\u0432\u0430",
                common: "\u0424\u0430\u0440\u0441\u043A\u0430 \u043E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "F\xe4r\xf6arna",
                common: "F\xe4r\xf6arna"
            },
            tur: {
                official: "Faroe Adalar\u0131",
                common: "Faroe Adalar\u0131"
            },
            urd: {
                official: "\u062C\u0632\u0627\u0626\u0631 \u0641\u0627\u0631\u0648",
                common: "\u062C\u0632\u0627\u0626\u0631 \u0641\u0627\u0631\u0648"
            },
            zho: {
                official: "\u6CD5\u7F57\u7FA4\u5C9B",
                common: "\u6CD5\u7F57\u7FA4\u5C9B"
            }
        },
        latlng: [
            62,
            -7
        ],
        landlocked: false,
        area: 1393,
        demonyms: {
            eng: {
                f: "Faroese",
                m: "Faroese"
            },
            fra: {
                f: "F\xe9ro\xefenne",
                m: "F\xe9ro\xefen"
            }
        },
        flag: "\uD83C\uDDEB\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/6sTru4SmHdEVcNkM6",
            openStreetMaps: "https://www.openstreetmap.org/relation/52939"
        },
        population: 48865,
        fifa: "FRO",
        car: {
            signs: [
                "FO"
            ],
            side: "right"
        },
        timezones: [
            "UTC+00:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/fo.png",
            svg: "https://flagcdn.com/fo.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/fo.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/fo.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                62.01,
                -6.77
            ]
        },
        postalCode: {
            format: "FO-###",
            regex: "^(?:FO)*(\\d{3})$"
        }
    },
    {
        name: {
            common: "Uzbekistan",
            official: "Republic of Uzbekistan",
            nativeName: {
                rus: {
                    official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D",
                    common: "\u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D"
                },
                uzb: {
                    official: "O'zbekiston Respublikasi",
                    common: "O\u2018zbekiston"
                }
            }
        },
        tld: [
            ".uz"
        ],
        cca2: "UZ",
        ccn3: "860",
        cca3: "UZB",
        cioc: "UZB",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            UZS: {
                name: "Uzbekistani so\u02BBm",
                symbol: "so'm"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "98"
            ]
        },
        capital: [
            "Tashkent"
        ],
        altSpellings: [
            "UZ",
            "Republic of Uzbekistan",
            "O\u2018zbekiston Respublikasi",
            "\u040E\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u043E\u043D \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430\u0441\u0438"
        ],
        region: "Asia",
        subregion: "Central Asia",
        languages: {
            rus: "Russian",
            uzb: "Uzbek"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0648\u0632\u0628\u0627\u0643\u0633\u062A\u0627\u0646",
                common: "\u0623\u0648\u0632\u0628\u0627\u0643\u0633\u062A\u0627\u0646"
            },
            bre: {
                official: "Republik Ouzbekistan",
                common: "Ouzbekistan"
            },
            ces: {
                official: "Republika Uzbekist\xe1n",
                common: "Uzbekist\xe1n"
            },
            cym: {
                official: "Republic of Uzbekistan",
                common: "Uzbekistan"
            },
            deu: {
                official: "Republik Usbekistan",
                common: "Usbekistan"
            },
            est: {
                official: "Usbekistani Vabariik",
                common: "Usbekistan"
            },
            fin: {
                official: "Uzbekistanin tasavalta",
                common: "Uzbekistan"
            },
            fra: {
                official: "R\xe9publique d'Ouzb\xe9kistan",
                common: "Ouzb\xe9kistan"
            },
            hrv: {
                official: "Republika Uzbekistan",
                common: "Uzbekistan"
            },
            hun: {
                official: "\xdczb\xe9g K\xf6zt\xe1rsas\xe1g",
                common: "\xdczbegiszt\xe1n"
            },
            ita: {
                official: "Repubblica di Uzbekistan",
                common: "Uzbekistan"
            },
            jpn: {
                official: "\u30A6\u30BA\u30D9\u30AD\u30B9\u30BF\u30F3\u5171\u548C\u56FD",
                common: "\u30A6\u30BA\u30D9\u30AD\u30B9\u30BF\u30F3"
            },
            kor: {
                official: "\uC6B0\uC988\uBCA0\uD0A4\uC2A4\uD0C4 \uACF5\uD654\uAD6D",
                common: "\uC6B0\uC988\uBCA0\uD0A4\uC2A4\uD0C4"
            },
            nld: {
                official: "Republiek Oezbekistan",
                common: "Oezbekistan"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0632\u0628\u06A9\u0633\u062A\u0627\u0646",
                common: "\u0627\u0632\u0628\u06A9\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Republika Uzbekistanu",
                common: "Uzbekistan"
            },
            por: {
                official: "Rep\xfablica do Usbequist\xe3o",
                common: "Uzbequist\xe3o"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D",
                common: "\u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            slk: {
                official: "Uzbeck\xe1 republika",
                common: "Uzbekistan"
            },
            spa: {
                official: "Rep\xfablica de Uzbekist\xe1n",
                common: "Uzbekist\xe1n"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D",
                common: "\u0423\u0437\u0431\u0435\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            swe: {
                official: "Republiken Uzbekistan",
                common: "Uzbekistan"
            },
            tur: {
                official: "\xd6zbekistan Cumhuriyeti",
                common: "\xd6zbekistan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0632\u0628\u06A9\u0633\u062A\u0627\u0646",
                common: "\u0627\u0632\u0628\u06A9\u0633\u062A\u0627\u0646"
            },
            zho: {
                official: "\u4E4C\u5179\u522B\u514B\u65AF\u5766\u5171\u548C\u56FD",
                common: "\u4E4C\u5179\u522B\u514B\u65AF\u5766"
            }
        },
        latlng: [
            41,
            64
        ],
        landlocked: true,
        borders: [
            "AFG",
            "KAZ",
            "KGZ",
            "TJK",
            "TKM"
        ],
        area: 447400,
        demonyms: {
            eng: {
                f: "Uzbekistani",
                m: "Uzbekistani"
            },
            fra: {
                f: "Ouzb\xe8ke",
                m: "Ouzb\xe8ke"
            }
        },
        flag: "\uD83C\uDDFA\uD83C\uDDFF",
        maps: {
            googleMaps: "https://goo.gl/maps/AJpo6MjMx23qSWCz8",
            openStreetMaps: "https://www.openstreetmap.org/relation/196240"
        },
        population: 34232050,
        gini: {
            2003: 35.3
        },
        fifa: "UZB",
        car: {
            signs: [
                "UZ"
            ],
            side: "right"
        },
        timezones: [
            "UTC+05:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/uz.png",
            svg: "https://flagcdn.com/uz.svg",
            alt: "The flag of Uzbekistan is composed of three equal horizontal bands of turquoise, white with red top and bottom edges, and green. On the hoist side of the turquoise band is a fly-side facing white crescent and twelve five-pointed white stars arranged just outside the crescent opening in three rows comprising three, four and five stars."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/uz.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/uz.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                41.32,
                69.25
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Egypt",
            official: "Arab Republic of Egypt",
            nativeName: {
                ara: {
                    official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0635\u0631 \u0627\u0644\u0639\u0631\u0628\u064A\u0629",
                    common: "\u0645\u0635\u0631"
                }
            }
        },
        tld: [
            ".eg",
            ".\u0645\u0635\u0631"
        ],
        cca2: "EG",
        ccn3: "818",
        cca3: "EGY",
        cioc: "EGY",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EGP: {
                name: "Egyptian pound",
                symbol: "\xa3"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "0"
            ]
        },
        capital: [
            "Cairo"
        ],
        altSpellings: [
            "EG",
            "Arab Republic of Egypt"
        ],
        region: "Africa",
        subregion: "Northern Africa",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0635\u0631 \u0627\u0644\u0639\u0631\u0628\u064A\u0629",
                common: "\u0645\u0635\u0631"
            },
            bre: {
                official: "Republik arab Egipt",
                common: "Egipt"
            },
            ces: {
                official: "Egyptsk\xe1 arabsk\xe1 republika",
                common: "Egypt"
            },
            cym: {
                official: "Gweriniaeth Arabaidd yr Aifft",
                common: "Yr Aifft"
            },
            deu: {
                official: "Arabische Republik \xc4gypten",
                common: "\xc4gypten"
            },
            est: {
                official: "Egiptuse Araabia Vabariik",
                common: "Egiptus"
            },
            fin: {
                official: "Egyptin arabitasavalta",
                common: "Egypti"
            },
            fra: {
                official: "R\xe9publique arabe d'\xc9gypte",
                common: "\xc9gypte"
            },
            hrv: {
                official: "Arapska Republika Egipat",
                common: "Egipat"
            },
            hun: {
                official: "Egyiptomi Arab K\xf6zt\xe1rsas\xe1g",
                common: "Egyiptom"
            },
            ita: {
                official: "Repubblica araba d'Egitto",
                common: "Egitto"
            },
            jpn: {
                official: "\u30A8\u30B8\u30D7\u30C8\xb7\u30A2\u30E9\u30D6\u5171\u548C\u56FD",
                common: "\u30A8\u30B8\u30D7\u30C8"
            },
            kor: {
                official: "\uC774\uC9D1\uD2B8 \uC544\uB78D \uACF5\uD654\uAD6D",
                common: "\uC774\uC9D1\uD2B8"
            },
            nld: {
                official: "Arabische Republiek Egypte",
                common: "Egypte"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0639\u0631\u0628\u06CC \u0645\u0635\u0631",
                common: "\u0645\u0635\u0631"
            },
            pol: {
                official: "Arabska Republika Egiptu",
                common: "Egipt"
            },
            por: {
                official: "Rep\xfablica \xc1rabe do Egipto",
                common: "Egito"
            },
            rus: {
                official: "\u0410\u0440\u0430\u0431\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u0433\u0438\u043F\u0435\u0442",
                common: "\u0415\u0433\u0438\u043F\u0435\u0442"
            },
            slk: {
                official: "Egyptsk\xe1 arabsk\xe1 republika",
                common: "Egypt"
            },
            spa: {
                official: "Rep\xfablica \xc1rabe de Egipto",
                common: "Egipto"
            },
            srp: {
                official: "\u0410\u0440\u0430\u043F\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u0433\u0438\u043F\u0430\u0442",
                common: "\u0415\u0433\u0438\u043F\u0430\u0442"
            },
            swe: {
                official: "Arabrepubliken Egypten",
                common: "Egypten"
            },
            tur: {
                official: "M\u0131s\u0131r Arap Cumhuriyeti",
                common: "M\u0131s\u0131r"
            },
            urd: {
                official: "\u0645\u0635\u0631\u06CC \u0639\u0631\u0628 \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1",
                common: "\u0645\u0635\u0631"
            },
            zho: {
                official: "\u963F\u62C9\u4F2F\u57C3\u53CA\u5171\u548C\u56FD",
                common: "\u57C3\u53CA"
            }
        },
        latlng: [
            27,
            30
        ],
        landlocked: false,
        borders: [
            "ISR",
            "LBY",
            "PSE",
            "SDN"
        ],
        area: 1002450,
        demonyms: {
            eng: {
                f: "Egyptian",
                m: "Egyptian"
            },
            fra: {
                f: "\xc9gyptienne",
                m: "\xc9gyptien"
            }
        },
        flag: "\uD83C\uDDEA\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/uoDRhXbsqjG6L7VG7",
            openStreetMaps: "https://www.openstreetmap.org/relation/1473947"
        },
        population: 102334403,
        gini: {
            2017: 31.5
        },
        fifa: "EGY",
        car: {
            signs: [
                "ET"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/eg.png",
            svg: "https://flagcdn.com/eg.svg",
            alt: "The flag of Egypt is composed of three equal horizontal bands of red, white and black, with Egypt's national emblem \u2014 a hoist-side facing gold eagle of Saladin \u2014 centered in the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/eg.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/eg.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                30.05,
                31.25
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Senegal",
            official: "Republic of Senegal",
            nativeName: {
                fra: {
                    official: "R\xe9publique du S\xe9n\xe9gal",
                    common: "S\xe9n\xe9gal"
                }
            }
        },
        tld: [
            ".sn"
        ],
        cca2: "SN",
        ccn3: "686",
        cca3: "SEN",
        cioc: "SEN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XOF: {
                name: "West African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "21"
            ]
        },
        capital: [
            "Dakar"
        ],
        altSpellings: [
            "SN",
            "Republic of Senegal",
            "R\xe9publique du S\xe9n\xe9gal"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0633\u0646\u063A\u0627\u0644",
                common: "\u0627\u0644\u0633\u0646\u063A\u0627\u0644"
            },
            bre: {
                official: "Republik Senegal",
                common: "Senegal"
            },
            ces: {
                official: "Senegalsk\xe1 republika",
                common: "Senegal"
            },
            cym: {
                official: "Republic of Senegal",
                common: "Senegal"
            },
            deu: {
                official: "Republik Senegal",
                common: "Senegal"
            },
            est: {
                official: "Senegali Vabariik",
                common: "Senegal"
            },
            fin: {
                official: "Senegalin tasavalta",
                common: "Senegal"
            },
            fra: {
                official: "R\xe9publique du S\xe9n\xe9gal",
                common: "S\xe9n\xe9gal"
            },
            hrv: {
                official: "Republika Senegal",
                common: "Senegal"
            },
            hun: {
                official: "Szeneg\xe1li K\xf6zt\xe1rsas\xe1g",
                common: "Szeneg\xe1l"
            },
            ita: {
                official: "Repubblica del Senegal",
                common: "Senegal"
            },
            jpn: {
                official: "\u30BB\u30CD\u30AC\u30EB\u5171\u548C\u56FD",
                common: "\u30BB\u30CD\u30AC\u30EB"
            },
            kor: {
                official: "\uC138\uB124\uAC08 \uACF5\uD654\uAD6D",
                common: "\uC138\uB124\uAC08"
            },
            nld: {
                official: "Republiek Senegal",
                common: "Senegal"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0646\u06AF\u0627\u0644",
                common: "\u0633\u0646\u06AF\u0627\u0644"
            },
            pol: {
                official: "Senegal",
                common: "Senegal"
            },
            por: {
                official: "Rep\xfablica do Senegal",
                common: "Senegal"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u043D\u0435\u0433\u0430\u043B",
                common: "\u0421\u0435\u043D\u0435\u0433\u0430\u043B"
            },
            slk: {
                official: "Senegalsk\xe1 republika",
                common: "Senegal"
            },
            spa: {
                official: "Rep\xfablica de Senegal",
                common: "Senegal"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u043D\u0435\u0433\u0430\u043B",
                common: "\u0421\u0435\u043D\u0435\u0433\u0430\u043B"
            },
            swe: {
                official: "Republiken Senegal",
                common: "Senegal"
            },
            tur: {
                official: "Senegal Cumhuriyeti",
                common: "Senegal"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u06CC\u0646\u06CC\u06AF\u0627\u0644",
                common: "\u0633\u06CC\u0646\u06CC\u06AF\u0627\u0644"
            },
            zho: {
                official: "\u585E\u5185\u52A0\u5C14\u5171\u548C\u56FD",
                common: "\u585E\u5185\u52A0\u5C14"
            }
        },
        latlng: [
            14,
            -14
        ],
        landlocked: false,
        borders: [
            "GMB",
            "GIN",
            "GNB",
            "MLI",
            "MRT"
        ],
        area: 196722,
        demonyms: {
            eng: {
                f: "Senegalese",
                m: "Senegalese"
            },
            fra: {
                f: "S\xe9n\xe9galaise",
                m: "S\xe9n\xe9galais"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDF3",
        maps: {
            googleMaps: "https://goo.gl/maps/o5f1uD5nyihCL3HCA",
            openStreetMaps: "https://www.openstreetmap.org/relation/192775"
        },
        population: 16743930,
        gini: {
            2011: 40.3
        },
        fifa: "SEN",
        car: {
            signs: [
                "SN"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sn.png",
            svg: "https://flagcdn.com/sn.svg",
            alt: "The flag of Senegal is composed of three equal vertical bands of green, golden-yellow and red, with a five-pointed green star centered in the golden-yellow band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sn.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sn.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                14.73,
                -17.63
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Sri Lanka",
            official: "Democratic Socialist Republic of Sri Lanka",
            nativeName: {
                sin: {
                    official: "\u0DC1\u0DCA\u200D\u0DBB\u0DD3 \u0DBD\u0D82\u0D9A\u0DCF \u0DB4\u0DCA\u200D\u0DBB\u0DA2\u0DCF\u0DAD\u0DCF\u0DB1\u0DCA\u0DAD\u0DCA\u200D\u0DBB\u0DD2\u0D9A \u0DC3\u0DB8\u0DCF\u0DA2\u0DC0\u0DCF\u0DAF\u0DD3 \u0DA2\u0DB1\u0DBB\u0DA2\u0DBA",
                    common: "\u0DC1\u0DCA\u200D\u0DBB\u0DD3 \u0DBD\u0D82\u0D9A\u0DCF\u0DC0"
                },
                tam: {
                    official: "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8 \u0B9A\u0BA9\u0BA8\u0BBE\u0BAF\u0B95 \u0B9A\u0BCB\u0B9A\u0BB2\u0BBF\u0B9A\u0B95\u0BCD \u0B95\u0BC1\u0B9F\u0BBF\u0BAF\u0BB0\u0B9A\u0BC1",
                    common: "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8"
                }
            }
        },
        tld: [
            ".lk",
            ".\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8",
            ".\u0DBD\u0D82\u0D9A\u0DCF"
        ],
        cca2: "LK",
        ccn3: "144",
        cca3: "LKA",
        cioc: "SRI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            LKR: {
                name: "Sri Lankan rupee",
                symbol: "Rs  \u0DBB\u0DD4"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "4"
            ]
        },
        capital: [
            "Sri Jayawardenepura Kotte"
        ],
        altSpellings: [
            "LK",
            "ila\u1E45kai",
            "Democratic Socialist Republic of Sri Lanka"
        ],
        region: "Asia",
        subregion: "Southern Asia",
        languages: {
            sin: "Sinhala",
            tam: "Tamil"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0631\u064A\u0644\u0627\u0646\u0643\u0627 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                common: "\u0633\u0631\u064A\u0644\u0627\u0646\u0643\u0627"
            },
            bre: {
                official: "Republik Demokratel ha Sokialour Sri Lanka",
                common: "Sri Lanka"
            },
            ces: {
                official: "Sr\xedlansk\xe1 demokratick\xe1 socialistick\xe1 republika",
                common: "Sr\xed Lanka"
            },
            cym: {
                official: "Democratic Socialist Republic of Sri Lanka",
                common: "Sri Lanka"
            },
            deu: {
                official: "Demokratische Sozialistische Republik Sri Lanka",
                common: "Sri Lanka"
            },
            est: {
                official: "Sri Lanka Demokraatlik Sotsialistlik Vabariik",
                common: "Sri Lanka"
            },
            fin: {
                official: "Sri Lankan demokraattinen sosialistinen tasavalta",
                common: "Sri Lanka"
            },
            fra: {
                official: "R\xe9publique d\xe9mocratique socialiste du Sri Lanka",
                common: "Sri Lanka"
            },
            hrv: {
                official: "Demokratska Socijalisti\u010Dke Republike \u0160ri Lanke",
                common: "\u0160ri Lanka"
            },
            hun: {
                official: "Sr\xed Lanka-i Demokratikus Szocialista K\xf6zt\xe1rsas\xe1g",
                common: "Sr\xed Lanka"
            },
            ita: {
                official: "Repubblica democratica socialista dello Sri Lanka",
                common: "Sri Lanka"
            },
            jpn: {
                official: "\u30B9\u30EA\u30E9\u30F3\u30AB\u6C11\u4E3B\u793E\u4F1A\u4E3B\u7FA9\u5171\u548C\u56FD",
                common: "\u30B9\u30EA\u30E9\u30F3\u30AB"
            },
            kor: {
                official: "\uC2A4\uB9AC\uB791\uCE74 \uBBFC\uC8FC \uC0AC\uD68C\uC8FC\uC758 \uACF5\uD654\uAD6D",
                common: "\uC2A4\uB9AC\uB791\uCE74"
            },
            nld: {
                official: "Democratische Socialistische Republiek Sri Lanka",
                common: "Sri Lanka"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u0633\u0648\u0633\u06CC\u0627\u0644\u06CC\u0633\u062A\u06CC \u0633\u0631\u06CC\u200C\u0644\u0627\u0646\u06A9\u0627",
                common: "\u0633\u0631\u06CC\u200C\u0644\u0627\u0646\u06A9\u0627"
            },
            pol: {
                official: "Demokratyczno-Socjalistyczna Republika Sri Lanki",
                common: "Sri Lanka"
            },
            por: {
                official: "Rep\xfablica Democr\xe1tica Socialista do Sri Lanka",
                common: "Sri Lanka"
            },
            rus: {
                official: "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0421\u043E\u0446\u0438\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0428\u0440\u0438-\u041B\u0430\u043D\u043A\u0430",
                common: "\u0428\u0440\u0438-\u041B\u0430\u043D\u043A\u0430"
            },
            slk: {
                official: "Sr\xedlansk\xe1 demokratick\xe1 socialistick\xe1 republika",
                common: "Sr\xed Lanka"
            },
            spa: {
                official: "Rep\xfablica Democr\xe1tica Socialista de Sri Lanka",
                common: "Sri Lanka"
            },
            srp: {
                official: "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0421\u043E\u0446\u0438\u0458\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0440\u0438 \u041B\u0430\u043D\u043A\u0430",
                common: "\u0421\u0440\u0438 \u041B\u0430\u043D\u043A\u0430"
            },
            swe: {
                official: "Demokratiska socialistiska republiken Sri Lanka",
                common: "Sri Lanka"
            },
            tur: {
                official: "Sri Lanka Demokratik Sosyalist Cumhuriyeti",
                common: "Sri Lanka"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC \u0648 \u0627\u0634\u062A\u0631\u0627\u06A9\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0631\u06CC \u0644\u0646\u06A9\u0627",
                common: "\u0633\u0631\u06CC \u0644\u0646\u06A9\u0627"
            },
            zho: {
                official: "\u65AF\u91CC\u5170\u5361\u6C11\u4E3B\u793E\u4F1A\u4E3B\u4E49\u5171\u548C\u56FD",
                common: "\u65AF\u91CC\u5170\u5361"
            }
        },
        latlng: [
            7,
            81
        ],
        landlocked: false,
        borders: [
            "IND"
        ],
        area: 65610,
        demonyms: {
            eng: {
                f: "Sri Lankan",
                m: "Sri Lankan"
            },
            fra: {
                f: "Sri-lankaise",
                m: "Sri-lankais"
            }
        },
        flag: "\uD83C\uDDF1\uD83C\uDDF0",
        maps: {
            googleMaps: "https://goo.gl/maps/VkPHoeFSfgzRQCDv8",
            openStreetMaps: "https://www.openstreetmap.org/relation/536807"
        },
        population: 21919000,
        gini: {
            2016: 39.3
        },
        fifa: "SRI",
        car: {
            signs: [
                "CL"
            ],
            side: "left"
        },
        timezones: [
            "UTC+05:30"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/lk.png",
            svg: "https://flagcdn.com/lk.svg",
            alt: "The flag of Sri Lanka features two large adjacent but separate rectangular areas, centered on a golden-yellow field. The smaller hoist-side rectangle is divided into two equal vertical bands of teal and orange, and the larger fly-side rectangle is maroon with a centered golden-yellow lion holding a Kastane sword in its right fore-paw and four golden-yellow Bo leaves, one in each corner."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/lk.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/lk.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                6.89,
                79.9
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Palestine",
            official: "State of Palestine",
            nativeName: {
                ara: {
                    official: "\u062F\u0648\u0644\u0629 \u0641\u0644\u0633\u0637\u064A\u0646",
                    common: "\u0641\u0644\u0633\u0637\u064A\u0646"
                }
            }
        },
        tld: [
            ".ps",
            "\u0641\u0644\u0633\u0637\u064A\u0646."
        ],
        cca2: "PS",
        ccn3: "275",
        cca3: "PSE",
        cioc: "PLE",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EGP: {
                name: "Egyptian pound",
                symbol: "E\xa3"
            },
            ILS: {
                name: "Israeli new shekel",
                symbol: "\u20AA"
            },
            JOD: {
                name: "Jordanian dinar",
                symbol: "JD"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "70"
            ]
        },
        capital: [
            "Ramallah",
            "Jerusalem"
        ],
        altSpellings: [
            "PS",
            "Palestine, State of",
            "State of Palestine",
            "Dawlat Filas\u1E6Din"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0644\u0629 \u0641\u0644\u0633\u0637\u064A\u0646",
                common: "\u0641\u0644\u0633\u0637\u064A\u0646"
            },
            bre: {
                official: "Stad Palestina",
                common: "Palestina"
            },
            ces: {
                official: "St\xe1t Palestina",
                common: "Palestina"
            },
            cym: {
                official: "State of Palestine",
                common: "Palestine"
            },
            deu: {
                official: "Staat Pal\xe4stina",
                common: "Pal\xe4stina"
            },
            est: {
                official: "Palestiina Riik",
                common: "Palestiina"
            },
            fin: {
                official: "Palestiinan valtio",
                common: "Palestiina"
            },
            fra: {
                official: "\xc9tat de Palestine",
                common: "Palestine"
            },
            hrv: {
                official: "State of Palestine",
                common: "Palestina"
            },
            hun: {
                official: "Palesztin Auton\xf3mia",
                common: "Palesztina"
            },
            ita: {
                official: "Stato di Palestina",
                common: "Palestina"
            },
            jpn: {
                official: "\u30D1\u30EC\u30B9\u30C1\u30CA\u81EA\u6CBB\u653F\u5E9C",
                common: "\u30D1\u30EC\u30B9\u30C1\u30CA"
            },
            kor: {
                official: "\uD314\uB808\uC2A4\uD0C0\uC778\uAD6D",
                common: "\uD314\uB808\uC2A4\uD0C0\uC778"
            },
            nld: {
                official: "Staat Palestina",
                common: "Palestijnse gebieden"
            },
            per: {
                official: "\u062F\u0648\u0644\u062A \u0641\u0644\u0633\u0637\u06CC\u0646",
                common: "\u0641\u0644\u0633\u0637\u06CC\u0646"
            },
            pol: {
                official: "Pa\u0144stwo Palestyna",
                common: "Palestyna"
            },
            por: {
                official: "Estado da Palestina",
                common: "Palestina"
            },
            rus: {
                official: "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u041F\u0430\u043B\u0435\u0441\u0442\u0438\u043D\u0430",
                common: "\u041F\u0430\u043B\u0435\u0441\u0442\u0438\u043D\u0430"
            },
            slk: {
                official: "Palest\xednsky \u0161t\xe1t",
                common: "Palest\xedna"
            },
            spa: {
                official: "Estado de Palestina",
                common: "Palestina"
            },
            srp: {
                official: "\u0414\u0440\u0436\u0430\u0432\u0430 \u041F\u0430\u043B\u0435\u0441\u0442\u0438\u043D\u0430",
                common: "\u041F\u0430\u043B\u0435\u0441\u0442\u0438\u043D\u0430"
            },
            swe: {
                official: "Palestina",
                common: "Palestina"
            },
            tur: {
                official: "Filistin Devleti",
                common: "Filistin"
            },
            urd: {
                official: "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0641\u0644\u0633\u0637\u06CC\u0646",
                common: "\u0641\u0644\u0633\u0637\u06CC\u0646"
            },
            zho: {
                official: "\u5DF4\u52D2\u65AF\u5766\u56FD",
                common: "\u5DF4\u52D2\u65AF\u5766"
            }
        },
        latlng: [
            31.9,
            35.2
        ],
        landlocked: false,
        borders: [
            "ISR",
            "EGY",
            "JOR"
        ],
        area: 6220,
        demonyms: {
            eng: {
                f: "Palestinian",
                m: "Palestinian"
            },
            fra: {
                f: "Palestinienne",
                m: "Palestinien"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/QvTbkRdmdWEoYAmt5",
            openStreetMaps: "https://www.openstreetmap.org/relation/1703814"
        },
        population: 4803269,
        gini: {
            2016: 33.7
        },
        fifa: "PLE",
        car: {
            signs: [
                "PS"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ps.png",
            svg: "https://flagcdn.com/ps.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ps.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ps.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                31.9,
                35.2
            ]
        }
    },
    {
        name: {
            common: "Bangladesh",
            official: "People's Republic of Bangladesh",
            nativeName: {
                ben: {
                    official: "\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6 \u0997\u09A3\u09AA\u09CD\u09B0\u099C\u09BE\u09A4\u09A8\u09CD\u09A4\u09CD\u09B0\u09C0",
                    common: "\u09AC\u09BE\u0982\u09B2\u09BE\u09A6\u09C7\u09B6"
                }
            }
        },
        tld: [
            ".bd"
        ],
        cca2: "BD",
        ccn3: "050",
        cca3: "BGD",
        cioc: "BAN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BDT: {
                name: "Bangladeshi taka",
                symbol: "\u09F3"
            }
        },
        idd: {
            root: "+8",
            suffixes: [
                "80"
            ]
        },
        capital: [
            "Dhaka"
        ],
        altSpellings: [
            "BD",
            "People's Republic of Bangladesh",
            "G\xf4n\xf4pr\xf4jat\xf4ntri Bangladesh"
        ],
        region: "Asia",
        subregion: "Southern Asia",
        languages: {
            ben: "Bengali"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0646\u063A\u0644\u0627\u062F\u064A\u0634 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                common: "\u0628\u0646\u063A\u0644\u0627\u062F\u064A\u0634"
            },
            bre: {
                official: "Republik pobl Bangladesh",
                common: "Bangladesh"
            },
            ces: {
                official: "Banglad\xe9\u0161sk\xe1 lidov\xe1 republika",
                common: "Banglad\xe9\u0161"
            },
            cym: {
                official: "Gweriniaeth Pobl Bangladesh",
                common: "Bangladesh"
            },
            deu: {
                official: "Volksrepublik Bangladesch",
                common: "Bangladesch"
            },
            est: {
                official: "Bangladeshi Rahvavabariik",
                common: "Bangladesh"
            },
            fin: {
                official: "Bangladeshin kansantasavalta",
                common: "Bangladesh"
            },
            fra: {
                official: "La R\xe9publique populaire du Bangladesh",
                common: "Bangladesh"
            },
            hrv: {
                official: "Narodna Republika Banglade\u0161",
                common: "Banglade\u0161"
            },
            hun: {
                official: "Banglades",
                common: "Banglades"
            },
            ita: {
                official: "Repubblica popolare del Bangladesh",
                common: "Bangladesh"
            },
            jpn: {
                official: "\u30D0\u30F3\u30B0\u30E9\u30C7\u30B7\u30E5\u4EBA\u6C11\u5171\u548C\u56FD",
                common: "\u30D0\u30F3\u30B0\u30E9\u30C7\u30B7\u30E5"
            },
            kor: {
                official: "\uBC29\uAE00\uB77C\uB370\uC2DC \uC778\uBBFC \uACF5\uD654\uAD6D",
                common: "\uBC29\uAE00\uB77C\uB370\uC2DC"
            },
            nld: {
                official: "Volksrepubliek Bangladesh",
                common: "Bangladesh"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062E\u0644\u0642 \u0628\u0646\u06AF\u0644\u0627\u062F\u0634",
                common: "\u0628\u0646\u06AF\u0644\u0627\u062F\u0634"
            },
            pol: {
                official: "Ludowa Republika Bangladeszu",
                common: "Bangladesz"
            },
            por: {
                official: "Rep\xfablica Popular do Bangladesh",
                common: "Bangladesh"
            },
            rus: {
                official: "\u041D\u0430\u0440\u043E\u0434\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0430\u043D\u0433\u043B\u0430\u0434\u0435\u0448",
                common: "\u0411\u0430\u043D\u0433\u043B\u0430\u0434\u0435\u0448"
            },
            slk: {
                official: "Banglad\xe9\u0161ska \u013Eudov\xe1 republika",
                common: "Banglad\xe9\u0161"
            },
            spa: {
                official: "Rep\xfablica Popular de Bangladesh",
                common: "Bangladesh"
            },
            srp: {
                official: "\u041D\u0430\u0440\u043E\u0434\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0430\u043D\u0433\u043B\u0430\u0434\u0435\u0448",
                common: "\u0411\u0430\u043D\u0433\u043B\u0430\u0434\u0435\u0448"
            },
            swe: {
                official: "Folkrepubliken Bangladesh",
                common: "Bangladesh"
            },
            tur: {
                official: "Banglade\u015F Halk Cumhuriyeti",
                common: "Banglade\u015F"
            },
            urd: {
                official: "\u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0646\u06AF\u0644\u06C1 \u062F\u06CC\u0634",
                common: "\u0628\u0646\u06AF\u0644\u06C1 \u062F\u06CC\u0634"
            },
            zho: {
                official: "\u5B5F\u52A0\u62C9\u4EBA\u6C11\u5171\u548C\u56FD",
                common: "\u5B5F\u52A0\u62C9\u56FD"
            }
        },
        latlng: [
            24,
            90
        ],
        landlocked: false,
        borders: [
            "MMR",
            "IND"
        ],
        area: 147570,
        demonyms: {
            eng: {
                f: "Bangladeshi",
                m: "Bangladeshi"
            },
            fra: {
                f: "Bangladaise",
                m: "Bangladais"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDE9",
        maps: {
            googleMaps: "https://goo.gl/maps/op6gmLbHcvv6rLhH6",
            openStreetMaps: "https://www.openstreetmap.org/relation/184640"
        },
        population: 164689383,
        gini: {
            2016: 32.4
        },
        fifa: "BAN",
        car: {
            signs: [
                "BD"
            ],
            side: "left"
        },
        timezones: [
            "UTC+06:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bd.png",
            svg: "https://flagcdn.com/bd.svg",
            alt: "The flag of Bangladesh has a dark green field bearing a large red circle that is offset slightly towards the hoist side of center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bd.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bd.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                23.72,
                90.4
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Peru",
            official: "Republic of Peru",
            nativeName: {
                aym: {
                    official: "Piruw Suyu",
                    common: "Piruw"
                },
                que: {
                    official: "Piruw Ripuwlika",
                    common: "Piruw"
                },
                spa: {
                    official: "Rep\xfablica del Per\xfa",
                    common: "Per\xfa"
                }
            }
        },
        tld: [
            ".pe"
        ],
        cca2: "PE",
        ccn3: "604",
        cca3: "PER",
        cioc: "PER",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            PEN: {
                name: "Peruvian sol",
                symbol: "S/ "
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "1"
            ]
        },
        capital: [
            "Lima"
        ],
        altSpellings: [
            "PE",
            "Republic of Peru",
            "Rep\xfablica del Per\xfa"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            aym: "Aymara",
            que: "Quechua",
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u064A\u0631\u0648",
                common: "\u0628\u064A\u0631\u0648"
            },
            bre: {
                official: "Republik Perou",
                common: "Perou"
            },
            ces: {
                official: "Peru\xe1nsk\xe1 republika",
                common: "Peru"
            },
            cym: {
                official: "Republic of Peru",
                common: "Peru"
            },
            deu: {
                official: "Republik Peru",
                common: "Peru"
            },
            est: {
                official: "Peruu Vabariik",
                common: "Peruu"
            },
            fin: {
                official: "Perun tasavalta",
                common: "Peru"
            },
            fra: {
                official: "R\xe9publique du P\xe9rou",
                common: "P\xe9rou"
            },
            hrv: {
                official: "Republika Peru",
                common: "Peru"
            },
            hun: {
                official: "Perui K\xf6zt\xe1rsas\xe1g",
                common: "Peru"
            },
            ita: {
                official: "Repubblica del Per\xf9",
                common: "Per\xf9"
            },
            jpn: {
                official: "\u30DA\u30EB\u30FC\u5171\u548C\u56FD",
                common: "\u30DA\u30EB\u30FC"
            },
            kor: {
                official: "\uD398\uB8E8 \uACF5\uD654\uAD6D",
                common: "\uD398\uB8E8"
            },
            nld: {
                official: "Republiek Peru",
                common: "Peru"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u067E\u0631\u0648",
                common: "\u067E\u0631\u0648"
            },
            pol: {
                official: "Republika Peru",
                common: "Peru"
            },
            por: {
                official: "Rep\xfablica do Peru",
                common: "Per\xfa"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0435\u0440\u0443",
                common: "\u041F\u0435\u0440\u0443"
            },
            slk: {
                official: "Peru\xe1nska republika",
                common: "Peru"
            },
            spa: {
                official: "Rep\xfablica de Per\xfa",
                common: "Per\xfa"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0435\u0440\u0443",
                common: "\u041F\u0435\u0440\u0443"
            },
            swe: {
                official: "Republiken Peru",
                common: "Peru"
            },
            tur: {
                official: "Peru Cumhuriyeti",
                common: "Peru"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u06CC\u0631\u0648",
                common: "\u067E\u06CC\u0631\u0648"
            },
            zho: {
                official: "\u79D8\u9C81\u5171\u548C\u56FD",
                common: "\u79D8\u9C81"
            }
        },
        latlng: [
            -10,
            -76
        ],
        landlocked: false,
        borders: [
            "BOL",
            "BRA",
            "CHL",
            "COL",
            "ECU"
        ],
        area: 1285216,
        demonyms: {
            eng: {
                f: "Peruvian",
                m: "Peruvian"
            },
            fra: {
                f: "P\xe9ruvienne",
                m: "P\xe9ruvien"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/uDWEUaXNcZTng1fP6",
            openStreetMaps: "https://www.openstreetmap.org/relation/288247"
        },
        population: 32971846,
        gini: {
            2019: 41.5
        },
        fifa: "PER",
        car: {
            signs: [
                "PE"
            ],
            side: "right"
        },
        timezones: [
            "UTC-05:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/pe.png",
            svg: "https://flagcdn.com/pe.svg",
            alt: "The flag of Peru is composed of three equal vertical bands of red, white and red, with the national emblem centered in the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/pe.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/pe.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -12.05,
                -77.05
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Singapore",
            official: "Republic of Singapore",
            nativeName: {
                eng: {
                    official: "Republic of Singapore",
                    common: "Singapore"
                },
                zho: {
                    official: "\u65B0\u52A0\u5761\u5171\u548C\u56FD",
                    common: "\u65B0\u52A0\u5761"
                },
                msa: {
                    official: "Republik Singapura",
                    common: "Singapura"
                },
                tam: {
                    official: "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD \u0B95\u0BC1\u0B9F\u0BBF\u0BAF\u0BB0\u0B9A\u0BC1",
                    common: "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD"
                }
            }
        },
        tld: [
            ".sg",
            ".\u65B0\u52A0\u5761",
            ".\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD"
        ],
        cca2: "SG",
        ccn3: "702",
        cca3: "SGP",
        cioc: "SGP",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SGD: {
                name: "Singapore dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "5"
            ]
        },
        capital: [
            "Singapore"
        ],
        altSpellings: [
            "SG",
            "Singapura",
            "Republik Singapura",
            "\u65B0\u52A0\u5761\u5171\u548C\u56FD"
        ],
        region: "Asia",
        subregion: "South-Eastern Asia",
        languages: {
            eng: "English",
            zho: "Chinese",
            msa: "Malay",
            tam: "Tamil"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0646\u063A\u0627\u0641\u0648\u0631\u0629",
                common: "\u0633\u0646\u063A\u0627\u0641\u0648\u0631\u0629"
            },
            bre: {
                official: "Republik Singapour",
                common: "Singapour"
            },
            ces: {
                official: "Singapursk\xe1 republika",
                common: "Singapur"
            },
            cym: {
                official: "Republic of Singapore",
                common: "Singapore"
            },
            deu: {
                official: "Republik Singapur",
                common: "Singapur"
            },
            est: {
                official: "Singapuri Vabariik",
                common: "Singapur"
            },
            fin: {
                official: "Singaporen tasavalta",
                common: "Singapore"
            },
            fra: {
                official: "R\xe9publique de Singapour",
                common: "Singapour"
            },
            hrv: {
                official: "Republika Singapur",
                common: "Singapur"
            },
            hun: {
                official: "Szingap\xfari K\xf6zt\xe1rsas\xe1g",
                common: "Szingap\xfar"
            },
            ita: {
                official: "Repubblica di Singapore",
                common: "Singapore"
            },
            jpn: {
                official: "\u30B7\u30F3\u30AC\u30DD\u30FC\u30EB\u5171\u548C\u56FD",
                common: "\u30B7\u30F3\u30AC\u30DD\u30FC\u30EB"
            },
            kor: {
                official: "\uC2F1\uAC00\uD3EC\uB974 \uACF5\uD654\uAD6D",
                common: "\uC2F1\uAC00\uD3EC\uB974"
            },
            nld: {
                official: "Republiek Singapore",
                common: "Singapore"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0646\u06AF\u0627\u067E\u0648\u0631",
                common: "\u0633\u0646\u06AF\u0627\u067E\u0648\u0631"
            },
            pol: {
                official: "Republika Singapuru",
                common: "Singapur"
            },
            por: {
                official: "Rep\xfablica de Singapura",
                common: "Singapura"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0438\u043D\u0433\u0430\u043F\u0443\u0440",
                common: "\u0421\u0438\u043D\u0433\u0430\u043F\u0443\u0440"
            },
            slk: {
                official: "Singapursk\xe1 republika",
                common: "Singapur"
            },
            spa: {
                official: "Rep\xfablica de Singapur",
                common: "Singapur"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0438\u043D\u0433\u0430\u043F\u0443\u0440",
                common: "\u0421\u0438\u043D\u0433\u0430\u043F\u0443\u0440"
            },
            swe: {
                official: "Republiken Singapore",
                common: "Singapore"
            },
            tur: {
                official: "Singapur Cumhuriyeti",
                common: "Singapur"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0646\u06AF\u0627\u067E\u0648\u0631",
                common: "\u0633\u0646\u06AF\u0627\u067E\u0648\u0631"
            }
        },
        latlng: [
            1.36666666,
            103.8
        ],
        landlocked: false,
        area: 710,
        demonyms: {
            eng: {
                f: "Singaporean",
                m: "Singaporean"
            },
            fra: {
                f: "Singapourienne",
                m: "Singapourien"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/QbQt9Y9b5KFzsahV6",
            openStreetMaps: "https://www.openstreetmap.org/relation/536780"
        },
        population: 5685807,
        fifa: "SIN",
        car: {
            signs: [
                "SGP"
            ],
            side: "left"
        },
        timezones: [
            "UTC+08:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sg.png",
            svg: "https://flagcdn.com/sg.svg",
            alt: "The flag of Singapore is composed of two equal horizontal bands of red and white. On the hoist side of the red band is a fly-side facing white crescent which partially encloses five small five-pointed white stars arranged in the shape of a pentagon."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sg.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sg.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                1.28,
                103.85
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Turkey",
            official: "Republic of Turkey",
            nativeName: {
                tur: {
                    official: "T\xfcrkiye Cumhuriyeti",
                    common: "T\xfcrkiye"
                }
            }
        },
        tld: [
            ".tr"
        ],
        cca2: "TR",
        ccn3: "792",
        cca3: "TUR",
        cioc: "TUR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            TRY: {
                name: "Turkish lira",
                symbol: "\u20BA"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "0"
            ]
        },
        capital: [
            "Ankara"
        ],
        altSpellings: [
            "TR",
            "Turkiye",
            "Republic of Turkey",
            "T\xfcrkiye Cumhuriyeti"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            tur: "Turkish"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062A\u0631\u0643\u064A\u0629",
                common: "\u062A\u0631\u0643\u064A\u0627"
            },
            bre: {
                official: "Republik Turkia",
                common: "Turkia"
            },
            ces: {
                official: "Tureck\xe1 republika",
                common: "Turecko"
            },
            cym: {
                official: "Republic of Turkey",
                common: "Turkey"
            },
            deu: {
                official: "Republik T\xfcrkei",
                common: "T\xfcrkei"
            },
            est: {
                official: "T\xfcrgi Vabariik",
                common: "T\xfcrgi"
            },
            fin: {
                official: "Turkin tasavalta",
                common: "Turkki"
            },
            fra: {
                official: "R\xe9publique de Turquie",
                common: "Turquie"
            },
            hrv: {
                official: "Republika Turska",
                common: "Turska"
            },
            hun: {
                official: "T\xf6r\xf6k K\xf6zt\xe1rsas\xe1g",
                common: "T\xf6r\xf6korsz\xe1g"
            },
            ita: {
                official: "Repubblica di Turchia",
                common: "Turchia"
            },
            jpn: {
                official: "\u30C8\u30EB\u30B3\u5171\u548C\u56FD",
                common: "\u30C8\u30EB\u30B3"
            },
            kor: {
                official: "\uD130\uD0A4 \uACF5\uD654\uAD6D",
                common: "\uD130\uD0A4"
            },
            nld: {
                official: "Republiek Turkije",
                common: "Turkije"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0631\u06A9\u06CC\u0647",
                common: "\u062A\u0631\u06A9\u06CC\u0647"
            },
            pol: {
                official: "Republika Turcji",
                common: "Turcja"
            },
            por: {
                official: "Rep\xfablica da Turquia",
                common: "Turquia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0443\u0440\u0446\u0438\u0438",
                common: "\u0422\u0443\u0440\u0446\u0438\u044F"
            },
            slk: {
                official: "Tureck\xe1 republika",
                common: "Turecko"
            },
            spa: {
                official: "Rep\xfablica de Turqu\xeda",
                common: "Turqu\xeda"
            },
            srp: {
                official: "\u0422\u0443\u0440\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0422\u0443\u0440\u0441\u043A\u0430"
            },
            swe: {
                official: "Republiken Turkiet",
                common: "Turkiet"
            },
            tur: {
                official: "T\xfcrkiye Cumhuriyeti",
                common: "T\xfcrkiye"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062A\u0631\u06A9\u06CC",
                common: "\u062A\u0631\u06A9\u06CC"
            },
            zho: {
                official: "\u571F\u8033\u5176\u5171\u548C\u56FD",
                common: "\u571F\u8033\u5176"
            }
        },
        latlng: [
            39,
            35
        ],
        landlocked: false,
        borders: [
            "ARM",
            "AZE",
            "BGR",
            "GEO",
            "GRC",
            "IRN",
            "IRQ",
            "SYR"
        ],
        area: 783562,
        demonyms: {
            eng: {
                f: "Turkish",
                m: "Turkish"
            },
            fra: {
                f: "Turque",
                m: "Turc"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/dXFFraiUDfcB6Quk6",
            openStreetMaps: "https://www.openstreetmap.org/relation/174737"
        },
        population: 84339067,
        gini: {
            2019: 41.9
        },
        fifa: "TUR",
        car: {
            signs: [
                "TR"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Europe",
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tr.png",
            svg: "https://flagcdn.com/tr.svg",
            alt: "The flag of Turkey has a red field bearing a large fly-side facing white crescent and a smaller five-pointed white star placed just outside the crescent opening. The white crescent and star are offset slightly towards the hoist side of center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/tr.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/tr.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                39.93,
                32.87
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Afghanistan",
            official: "Islamic Republic of Afghanistan",
            nativeName: {
                prs: {
                    official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
                    common: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
                },
                pus: {
                    official: "\u062F \u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646 \u0627\u0633\u0644\u0627\u0645\u064A \u062C\u0645\u0647\u0648\u0631\u06CC\u062A",
                    common: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
                },
                tuk: {
                    official: "Owganystan Yslam Respublikasy",
                    common: "Owganystan"
                }
            }
        },
        tld: [
            ".af"
        ],
        cca2: "AF",
        ccn3: "004",
        cca3: "AFG",
        cioc: "AFG",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            AFN: {
                name: "Afghan afghani",
                symbol: "\u060B"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "3"
            ]
        },
        capital: [
            "Kabul"
        ],
        altSpellings: [
            "AF",
            "Af\u0121\u0101nist\u0101n"
        ],
        region: "Asia",
        subregion: "Southern Asia",
        languages: {
            prs: "Dari",
            pus: "Pashto",
            tuk: "Turkmen"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0641\u0641\u0627\u0646\u0633\u062A\u0627\u0646 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A\u0629",
                common: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
            },
            bre: {
                official: "Republik Islamek Afghanistan",
                common: "Afghanistan"
            },
            ces: {
                official: "Afgh\xe1nsk\xe1 isl\xe1msk\xe1 republika",
                common: "Afgh\xe1nist\xe1n"
            },
            cym: {
                official: "Gweriniaeth Islamaidd Affganistan",
                common: "Affganistan"
            },
            deu: {
                official: "Islamische Republik Afghanistan",
                common: "Afghanistan"
            },
            est: {
                official: "Afganistani Islamivabariik",
                common: "Afganistan"
            },
            fin: {
                official: "Afganistanin islamilainen tasavalta",
                common: "Afganistan"
            },
            fra: {
                official: "R\xe9publique islamique d'Afghanistan",
                common: "Afghanistan"
            },
            hrv: {
                official: "Islamska Republika Afganistan",
                common: "Afganistan"
            },
            hun: {
                official: "Afganiszt\xe1ni Iszl\xe1m K\xf6zt\xe1rsas\xe1g",
                common: "Afganiszt\xe1n"
            },
            ita: {
                official: "Repubblica islamica dell'Afghanistan",
                common: "Afghanistan"
            },
            jpn: {
                official: "\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3\xb7\u30A4\u30B9\u30E9\u30E0\u5171\u548C\u56FD",
                common: "\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3"
            },
            kor: {
                official: "\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4 \uC774\uC2AC\uB78C \uACF5\uD654\uAD6D",
                common: "\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4"
            },
            nld: {
                official: "Islamitische Republiek Afghanistan",
                common: "Afghanistan"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
                common: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Islamska Republika Afganistanu",
                common: "Afganistan"
            },
            por: {
                official: "Rep\xfablica Isl\xe2mica do Afeganist\xe3o",
                common: "Afeganist\xe3o"
            },
            rus: {
                official: "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
                common: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D"
            },
            slk: {
                official: "Afg\xe1nsky islamsk\xfd \u0161t\xe1t",
                common: "Afganistan"
            },
            spa: {
                official: "Rep\xfablica Isl\xe1mica de Afganist\xe1n",
                common: "Afganist\xe1n"
            },
            srp: {
                official: "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u0432\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D",
                common: "\u0410\u0432\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D"
            },
            swe: {
                official: "Islamiska republiken Afghanistan",
                common: "Afghanistan"
            },
            tur: {
                official: "Afganistan \u0130slam Cumhuriyeti",
                common: "Afganistan"
            },
            urd: {
                official: "\u0627\u0633\u0644\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646",
                common: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646"
            },
            zho: {
                official: "\u963F\u5BCC\u6C57\u4F0A\u65AF\u5170\u5171\u548C\u56FD",
                common: "\u963F\u5BCC\u6C57"
            }
        },
        latlng: [
            33,
            65
        ],
        landlocked: true,
        borders: [
            "IRN",
            "PAK",
            "TKM",
            "UZB",
            "TJK",
            "CHN"
        ],
        area: 652230,
        demonyms: {
            eng: {
                f: "Afghan",
                m: "Afghan"
            },
            fra: {
                f: "Afghane",
                m: "Afghan"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDEB",
        maps: {
            googleMaps: "https://goo.gl/maps/BXBGw7yUUFknCfva9",
            openStreetMaps: "https://www.openstreetmap.org/relation/303427"
        },
        population: 40218234,
        fifa: "AFG",
        car: {
            signs: [
                "AFG"
            ],
            side: "right"
        },
        timezones: [
            "UTC+04:30"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Flag_of_the_Taliban.svg/320px-Flag_of_the_Taliban.svg.png",
            svg: "https://upload.wikimedia.org/wikipedia/commons/5/5c/Flag_of_the_Taliban.svg",
            alt: "The flag of the Islamic Emirate of Afghanistan has a white field with Arabic inscriptions \u2014 the Shahada \u2014 in black across its center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/af.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/af.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                34.52,
                69.18
            ]
        }
    },
    {
        name: {
            common: "Aruba",
            official: "Aruba",
            nativeName: {
                nld: {
                    official: "Aruba",
                    common: "Aruba"
                },
                pap: {
                    official: "Aruba",
                    common: "Aruba"
                }
            }
        },
        tld: [
            ".aw"
        ],
        cca2: "AW",
        ccn3: "533",
        cca3: "ABW",
        cioc: "ARU",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            AWG: {
                name: "Aruban florin",
                symbol: "\u0192"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "97"
            ]
        },
        capital: [
            "Oranjestad"
        ],
        altSpellings: [
            "AW"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            nld: "Dutch",
            pap: "Papiamento"
        },
        translations: {
            ara: {
                official: "\u0623\u0631\u0648\u0628\u0627",
                common: "\u0623\u0631\u0648\u0628\u0627"
            },
            bre: {
                official: "Aruba",
                common: "Aruba"
            },
            ces: {
                official: "Aruba",
                common: "Aruba"
            },
            cym: {
                official: "Aruba",
                common: "Aruba"
            },
            deu: {
                official: "Aruba",
                common: "Aruba"
            },
            est: {
                official: "Aruba",
                common: "Aruba"
            },
            fin: {
                official: "Aruba",
                common: "Aruba"
            },
            fra: {
                official: "Aruba",
                common: "Aruba"
            },
            hrv: {
                official: "Aruba",
                common: "Aruba"
            },
            hun: {
                official: "Aruba",
                common: "Aruba"
            },
            ita: {
                official: "Aruba",
                common: "Aruba"
            },
            jpn: {
                official: "\u30A2\u30EB\u30D0",
                common: "\u30A2\u30EB\u30D0"
            },
            kor: {
                official: "\uC544\uB8E8\uBC14",
                common: "\uC544\uB8E8\uBC14"
            },
            nld: {
                official: "Aruba",
                common: "Aruba"
            },
            per: {
                official: "\u0622\u0631\u0648\u0628\u0627",
                common: "\u0622\u0631\u0648\u0628\u0627"
            },
            pol: {
                official: "Aruba",
                common: "Aruba"
            },
            por: {
                official: "Aruba",
                common: "Aruba"
            },
            rus: {
                official: "\u0410\u0440\u0443\u0431\u0430",
                common: "\u0410\u0440\u0443\u0431\u0430"
            },
            slk: {
                official: "Aruba",
                common: "Aruba"
            },
            spa: {
                official: "Aruba",
                common: "Aruba"
            },
            srp: {
                official: "\u0410\u0440\u0443\u0431\u0430",
                common: "\u0410\u0440\u0443\u0431\u0430"
            },
            swe: {
                official: "Aruba",
                common: "Aruba"
            },
            tur: {
                official: "Aruba",
                common: "Aruba"
            },
            urd: {
                official: "\u0627\u0631\u0648\u0628\u0627",
                common: "\u0627\u0631\u0648\u0628\u0627"
            },
            zho: {
                official: "\u963F\u9C81\u5DF4",
                common: "\u963F\u9C81\u5DF4"
            }
        },
        latlng: [
            12.5,
            -69.96666666
        ],
        landlocked: false,
        area: 180,
        demonyms: {
            eng: {
                f: "Aruban",
                m: "Aruban"
            },
            fra: {
                f: "Arubaise",
                m: "Arubais"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDFC",
        maps: {
            googleMaps: "https://goo.gl/maps/8hopbQqifHAgyZyg8",
            openStreetMaps: "https://www.openstreetmap.org/relation/1231749"
        },
        population: 106766,
        fifa: "ARU",
        car: {
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/aw.png",
            svg: "https://flagcdn.com/aw.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/aw.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/aw.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                12.52,
                -70.03
            ]
        }
    },
    {
        name: {
            common: "Cook Islands",
            official: "Cook Islands",
            nativeName: {
                eng: {
                    official: "Cook Islands",
                    common: "Cook Islands"
                },
                rar: {
                    official: "K\u016Bki '\u0100irani",
                    common: "K\u016Bki '\u0100irani"
                }
            }
        },
        tld: [
            ".ck"
        ],
        cca2: "CK",
        ccn3: "184",
        cca3: "COK",
        cioc: "COK",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            CKD: {
                name: "Cook Islands dollar",
                symbol: "$"
            },
            NZD: {
                name: "New Zealand dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "82"
            ]
        },
        capital: [
            "Avarua"
        ],
        altSpellings: [
            "CK",
            "K\u016Bki '\u0100irani"
        ],
        region: "Oceania",
        subregion: "Polynesia",
        languages: {
            eng: "English",
            rar: "Cook Islands M\u0101ori"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u0643\u0648\u0643",
                common: "\u062C\u0632\u0631 \u0643\u0648\u0643"
            },
            bre: {
                official: "Inizi Cook",
                common: "Inizi Cook"
            },
            ces: {
                official: "Cookovy ostrovy",
                common: "Cookovy ostrovy"
            },
            cym: {
                official: "Ynysoedd Cook",
                common: "Ynysoedd Cook"
            },
            deu: {
                official: "Cookinseln",
                common: "Cookinseln"
            },
            est: {
                official: "Cooki saared",
                common: "Cooki saared"
            },
            fin: {
                official: "Cookinsaaret",
                common: "Cookinsaaret"
            },
            fra: {
                official: "\xceles Cook",
                common: "\xceles Cook"
            },
            hrv: {
                official: "Cook Islands",
                common: "Cookovo Oto\u010Dje"
            },
            hun: {
                official: "Cook-szigetek",
                common: "Cook-szigetek"
            },
            ita: {
                official: "Isole Cook",
                common: "Isole Cook"
            },
            jpn: {
                official: "\u30AF\u30C3\u30AF\u8AF8\u5CF6",
                common: "\u30AF\u30C3\u30AF\u8AF8\u5CF6"
            },
            kor: {
                official: "\uCFE1 \uC81C\uB3C4",
                common: "\uCFE1 \uC81C\uB3C4"
            },
            nld: {
                official: "Cook eilanden",
                common: "Cookeilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u06A9",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u06A9"
            },
            pol: {
                official: "Wyspy Cooka",
                common: "Wyspy Cooka"
            },
            por: {
                official: "Ilhas Cook",
                common: "Ilhas Cook"
            },
            rus: {
                official: "\u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u041A\u0443\u043A\u0430",
                common: "\u041E\u0441\u0442\u0440\u043E\u0432\u0430 \u041A\u0443\u043A\u0430"
            },
            slk: {
                official: "Cookove ostrovy",
                common: "Cookove ostrovy"
            },
            spa: {
                official: "Islas Cook",
                common: "Islas Cook"
            },
            srp: {
                official: "\u041A\u0443\u043A\u043E\u0432\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                common: "\u041A\u0443\u043A\u043E\u0432\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "Cook\xf6arna",
                common: "Cook\xf6arna"
            },
            tur: {
                official: "Cook Adalar\u0131",
                common: "Cook Adalar\u0131"
            },
            urd: {
                official: "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06A9",
                common: "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06A9"
            },
            zho: {
                official: "\u5E93\u514B\u7FA4\u5C9B",
                common: "\u5E93\u514B\u7FA4\u5C9B"
            }
        },
        latlng: [
            -21.23333333,
            -159.76666666
        ],
        landlocked: false,
        area: 236,
        demonyms: {
            eng: {
                f: "Cook Islander",
                m: "Cook Islander"
            },
            fra: {
                f: "Cookienne",
                m: "Cookien"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDF0",
        maps: {
            googleMaps: "https://goo.gl/maps/nrGZrvWRGB4WHgDC9",
            openStreetMaps: "https://www.openstreetmap.org/relation/2184233"
        },
        population: 18100,
        fifa: "COK",
        car: {
            signs: [
                "NZ"
            ],
            side: "left"
        },
        timezones: [
            "UTC-10:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ck.png",
            svg: "https://flagcdn.com/ck.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ck.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ck.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -21.2,
                -159.77
            ]
        }
    },
    {
        name: {
            common: "United Kingdom",
            official: "United Kingdom of Great Britain and Northern Ireland",
            nativeName: {
                eng: {
                    official: "United Kingdom of Great Britain and Northern Ireland",
                    common: "United Kingdom"
                }
            }
        },
        tld: [
            ".uk"
        ],
        cca2: "GB",
        ccn3: "826",
        cca3: "GBR",
        cioc: "GBR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            GBP: {
                name: "British pound",
                symbol: "\xa3"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "4"
            ]
        },
        capital: [
            "London"
        ],
        altSpellings: [
            "GB",
            "UK",
            "Great Britain"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629 \u0644\u0628\u0631\u064A\u0637\u0627\u0646\u064A\u0627 \u0627\u0644\u0639\u0638\u0645\u0649 \u0648\u0627\u064A\u0631\u0644\u0646\u062F\u0627 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629",
                common: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629"
            },
            bre: {
                official: "Rouantelezh-Unanet Breizh-Veur ha Norzhiwerzhon",
                common: "Rouantelezh-Unanet"
            },
            ces: {
                official: "Spojen\xe9 kr\xe1lovstv\xed Velk\xe9 Brit\xe1nie a Severn\xedho Irska",
                common: "Spojen\xe9 kr\xe1lovstv\xed"
            },
            cym: {
                official: "United Kingdom of Great Britain and Northern Ireland",
                common: "United Kingdom"
            },
            deu: {
                official: "Vereinigtes K\xf6nigreich Gro\xdfbritannien und Nordirland",
                common: "Vereinigtes K\xf6nigreich"
            },
            est: {
                official: "Suurbritannia ja P\xf5hja-Iiri \xdchendkuningriik",
                common: "Suurbritannia"
            },
            fin: {
                official: "Ison-Britannian ja Pohjois-Irlannin yhdistynyt kuningaskunta",
                common: "Yhdistynyt kuningaskunta"
            },
            fra: {
                official: "Royaume-Uni de Grande-Bretagne et d'Irlande du Nord",
                common: "Royaume-Uni"
            },
            hrv: {
                official: "Ujedinjeno Kraljevstvo Velike Britanije i Sjeverne Irske",
                common: "Ujedinjeno Kraljevstvo"
            },
            hun: {
                official: "Nagy-Britannia \xe9s \xc9szak-\xcdrorsz\xe1g Egyes\xfclt Kir\xe1lys\xe1ga",
                common: "Egyes\xfclt Kir\xe1lys\xe1g"
            },
            ita: {
                official: "Regno Unito di Gran Bretagna e Irlanda del Nord",
                common: "Regno Unito"
            },
            jpn: {
                official: "\u30B0\u30EC\u30FC\u30C8\xb7\u30D6\u30EA\u30C6\u30F3\u304A\u3088\u3073\u5317\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u9023\u5408\u738B\u56FD",
                common: "\u30A4\u30AE\u30EA\u30B9"
            },
            kor: {
                official: "\uADF8\uB808\uC774\uD2B8\uBE0C\uB9AC\uD2BC \uBD81\uC544\uC77C\uB79C\uB4DC \uC5F0\uD569 \uC655\uAD6D",
                common: "\uC601\uAD6D"
            },
            nld: {
                official: "Verenigd Koninkrijk van Groot-Brittanni\xeb en Noord-Ierland",
                common: "Verenigd Koninkrijk"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0645\u062A\u062D\u062F \u0628\u0631\u06CC\u062A\u0627\u0646\u06CC\u0627\u06CC \u06A9\u0628\u06CC\u0631 \u0648 \u0627\u06CC\u0631\u0644\u0646\u062F \u0634\u0645\u0627\u0644\u06CC",
                common: "\u0627\u0646\u06AF\u0644\u06CC\u0633"
            },
            pol: {
                official: "Zjednoczone Kr\xf3lestwo Wielkiej Brytanii i Irlandii P\xf3\u0142nocnej",
                common: "Zjednoczone Kr\xf3lestwo"
            },
            por: {
                official: "Reino Unido da Gr\xe3-Bretanha e Irlanda do Norte",
                common: "Reino Unido"
            },
            rus: {
                official: "\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u043E\u0435 \u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0412\u0435\u043B\u0438\u043A\u043E\u0431\u0440\u0438\u0442\u0430\u043D\u0438\u0438 \u0438 \u0421\u0435\u0432\u0435\u0440\u043D\u043E\u0439 \u0418\u0440\u043B\u0430\u043D\u0434\u0438\u0438",
                common: "\u0412\u0435\u043B\u0438\u043A\u043E\u0431\u0440\u0438\u0442\u0430\u043D\u0438\u044F"
            },
            slk: {
                official: "Spojen\xe9 kr\xe1\u013Eovstvo Ve\u013Ekej Brit\xe1nie a Severn\xe9ho\xccrska",
                common: "Ve\u013Ek\xe1 Brit\xe1nia (Spojen\xe9 kr\xe1\u013Eovstvo)"
            },
            spa: {
                official: "Reino Unido de Gran Breta\xf1a e Irlanda del Norte",
                common: "Reino Unido"
            },
            srp: {
                official: "\u0423\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u043E \u041A\u0440\u0430\u0459\u0435\u0432\u0441\u0442\u0432\u043E \u0412\u0435\u043B\u0438\u043A\u0435 \u0411\u0440\u0438\u0442\u0430\u043D\u0438\u0458\u0435 \u0438 \u0421\u0435\u0432\u0435\u0440\u043D\u0435 \u0418\u0440\u0441\u043A\u0435",
                common: "\u0423\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u043E \u041A\u0440\u0430\u0459\u0435\u0432\u0441\u0442\u0432\u043E"
            },
            swe: {
                official: "F\xf6renade konungariket Storbritannien och Nordirland",
                common: "Storbritannien"
            },
            tur: {
                official: "B\xfcy\xfck Britanya ve Kuzey \u0130rlanda Birle\u015Fik Krall\u0131\u011F\u0131",
                common: "Birle\u015Fik Krall\u0131k"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0645\u062A\u062D\u062F\u06C1 \u0628\u0631\u0637\u0627\u0646\u06CC\u06C1 \u0639\u0638\u0645\u06CC \u0648 \u0634\u0645\u0627\u0644\u06CC \u0622\u0626\u0631\u0644\u06CC\u0646\u0688",
                common: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0645\u062A\u062D\u062F\u06C1"
            },
            zho: {
                official: "\u5927\u4E0D\u5217\u98A0\u53CA\u5317\u7231\u5C14\u5170\u8054\u5408\u738B\u56FD",
                common: "\u82F1\u56FD"
            }
        },
        latlng: [
            54,
            -2
        ],
        landlocked: false,
        borders: [
            "IRL"
        ],
        area: 242900,
        demonyms: {
            eng: {
                f: "British",
                m: "British"
            },
            fra: {
                f: "Britannique",
                m: "Britannique"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDE7",
        maps: {
            googleMaps: "https://goo.gl/maps/FoDtc3UKMkFsXAjHA",
            openStreetMaps: "https://www.openstreetmap.org/relation/62149"
        },
        population: 67215293,
        gini: {
            2017: 35.1
        },
        car: {
            signs: [
                "GB"
            ],
            side: "left"
        },
        timezones: [
            "UTC-08:00",
            "UTC-05:00",
            "UTC-04:00",
            "UTC-03:00",
            "UTC-02:00",
            "UTC",
            "UTC+01:00",
            "UTC+02:00",
            "UTC+06:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gb.png",
            svg: "https://flagcdn.com/gb.svg",
            alt: "The flag of the United Kingdom \u2014 the Union Jack \u2014 has a blue field. It features the white-edged red cross of Saint George superimposed on the diagonal red cross of Saint Patrick which is superimposed on the diagonal white cross of Saint Andrew."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gb.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gb.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                51.5,
                -0.08
            ]
        },
        postalCode: {
            format: "@# #@@|@## #@@|@@# #@@|@@## #@@|@#@ #@@|@@#@ #@@|GIR0AA",
            regex: "^(([A-Z]\\d{2}[A-Z]{2})|([A-Z]\\d{3}[A-Z]{2})|([A-Z]{2}\\d{2}[A-Z]{2})|([A-Z]{2}\\d{3}[A-Z]{2})|([A-Z]\\d[A-Z]\\d[A-Z]{2})|([A-Z]{2}\\d[A-Z]\\d[A-Z]{2})|(GIR0AA))$"
        }
    },
    {
        name: {
            common: "Zambia",
            official: "Republic of Zambia",
            nativeName: {
                eng: {
                    official: "Republic of Zambia",
                    common: "Zambia"
                }
            }
        },
        tld: [
            ".zm"
        ],
        cca2: "ZM",
        ccn3: "894",
        cca3: "ZMB",
        cioc: "ZAM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            ZMW: {
                name: "Zambian kwacha",
                symbol: "ZK"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "60"
            ]
        },
        capital: [
            "Lusaka"
        ],
        altSpellings: [
            "ZM",
            "Republic of Zambia"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0632\u0627\u0645\u0628\u064A\u0627",
                common: "\u0632\u0627\u0645\u0628\u064A\u0627"
            },
            bre: {
                official: "Republik Zambia",
                common: "Zambia"
            },
            ces: {
                official: "Zambijsk\xe1 republika",
                common: "Zambie"
            },
            cym: {
                official: "Republic of Zambia",
                common: "Zambia"
            },
            deu: {
                official: "Republik Sambia",
                common: "Sambia"
            },
            est: {
                official: "Sambia Vabariik",
                common: "Sambia"
            },
            fin: {
                official: "Sambian tasavalta",
                common: "Sambia"
            },
            fra: {
                official: "R\xe9publique de Zambie",
                common: "Zambie"
            },
            hrv: {
                official: "Republika Zambija",
                common: "Zambija"
            },
            hun: {
                official: "Zambiai K\xf6zt\xe1rsas\xe1g",
                common: "Zambia"
            },
            ita: {
                official: "Repubblica di Zambia",
                common: "Zambia"
            },
            jpn: {
                official: "\u30B6\u30F3\u30D3\u30A2\u5171\u548C\u56FD",
                common: "\u30B6\u30F3\u30D3\u30A2"
            },
            kor: {
                official: "\uC7A0\uBE44\uC544 \uACF5\uD654\uAD6D",
                common: "\uC7A0\uBE44\uC544"
            },
            nld: {
                official: "Republiek Zambia",
                common: "Zambia"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0632\u0627\u0645\u0628\u06CC\u0627",
                common: "\u0632\u0627\u0645\u0628\u06CC\u0627"
            },
            pol: {
                official: "Republika Zambii",
                common: "Zambia"
            },
            por: {
                official: "Rep\xfablica da Z\xe2mbia",
                common: "Z\xe2mbia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0417\u0430\u043C\u0431\u0438\u044F",
                common: "\u0417\u0430\u043C\u0431\u0438\u044F"
            },
            slk: {
                official: "Zambijsk\xe1 republika",
                common: "Zambia"
            },
            spa: {
                official: "Rep\xfablica de Zambia",
                common: "Zambia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0417\u0430\u043C\u0431\u0438\u0458\u0430",
                common: "\u0417\u0430\u043C\u0431\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Zambia",
                common: "Zambia"
            },
            tur: {
                official: "Zambiya Cumhuriyeti",
                common: "Zambiya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0632\u06CC\u0645\u0628\u06CC\u0627",
                common: "\u0632\u06CC\u0645\u0628\u06CC\u0627"
            },
            zho: {
                official: "\u8D5E\u6BD4\u4E9A\u5171\u548C\u56FD",
                common: "\u8D5E\u6BD4\u4E9A"
            }
        },
        latlng: [
            -15,
            30
        ],
        landlocked: true,
        borders: [
            "AGO",
            "BWA",
            "COD",
            "MWI",
            "MOZ",
            "NAM",
            "TZA",
            "ZWE"
        ],
        area: 752612,
        demonyms: {
            eng: {
                f: "Zambian",
                m: "Zambian"
            },
            fra: {
                f: "Zambienne",
                m: "Zambien"
            }
        },
        flag: "\uD83C\uDDFF\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/mweBcqvW8TppZW6q9",
            openStreetMaps: "https://www.openstreetmap.org/relation/195271"
        },
        population: 18383956,
        gini: {
            2015: 57.1
        },
        fifa: "ZAM",
        car: {
            signs: [
                "RNR"
            ],
            side: "left"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/zm.png",
            svg: "https://flagcdn.com/zm.svg",
            alt: "The flag of Zambia has a green field, on the fly side of which is a soaring orange African fish eagle above a rectangular area divided into three equal vertical bands of red, black and orange."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/zm.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/zm.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -15.42,
                28.28
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Finland",
            official: "Republic of Finland",
            nativeName: {
                fin: {
                    official: "Suomen tasavalta",
                    common: "Suomi"
                },
                swe: {
                    official: "Republiken Finland",
                    common: "Finland"
                }
            }
        },
        tld: [
            ".fi"
        ],
        cca2: "FI",
        ccn3: "246",
        cca3: "FIN",
        cioc: "FIN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "58"
            ]
        },
        capital: [
            "Helsinki"
        ],
        altSpellings: [
            "FI",
            "Suomi",
            "Republic of Finland",
            "Suomen tasavalta",
            "Republiken Finland"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            fin: "Finnish",
            swe: "Swedish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0641\u0646\u0644\u0646\u062F\u0627",
                common: "\u0641\u0646\u0644\u0646\u062F\u0627"
            },
            bre: {
                official: "Republik Finland",
                common: "Finland"
            },
            ces: {
                official: "Finsk\xe1 republika",
                common: "Finsko"
            },
            cym: {
                official: "Republic of Finland",
                common: "Finland"
            },
            deu: {
                official: "Republik Finnland",
                common: "Finnland"
            },
            est: {
                official: "Soome Vabariik",
                common: "Soome"
            },
            fin: {
                official: "Suomen tasavalta",
                common: "Suomi"
            },
            fra: {
                official: "R\xe9publique de Finlande",
                common: "Finlande"
            },
            hrv: {
                official: "Republika Finska",
                common: "Finska"
            },
            hun: {
                official: "Finn K\xf6zt\xe1rsas\xe1g",
                common: "Finnorsz\xe1g"
            },
            ita: {
                official: "Repubblica di Finlandia",
                common: "Finlandia"
            },
            jpn: {
                official: "\u30D5\u30A3\u30F3\u30E9\u30F3\u30C9\u5171\u548C\u56FD",
                common: "\u30D5\u30A3\u30F3\u30E9\u30F3\u30C9"
            },
            kor: {
                official: "\uD540\uB780\uB4DC \uACF5\uD654\uAD6D",
                common: "\uD540\uB780\uB4DC"
            },
            nld: {
                official: "Republiek Finland",
                common: "Finland"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u0646\u0644\u0627\u0646\u062F",
                common: "\u0641\u0646\u0644\u0627\u0646\u062F"
            },
            pol: {
                official: "Republika Finlandii",
                common: "Finlandia"
            },
            por: {
                official: "Rep\xfablica da Finl\xe2ndia",
                common: "Finl\xe2ndia"
            },
            rus: {
                official: "\u0424\u0438\u043D\u043B\u044F\u043D\u0434\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0424\u0438\u043D\u043B\u044F\u043D\u0434\u0438\u044F"
            },
            slk: {
                official: "F\xednska republika",
                common: "F\xednsko"
            },
            spa: {
                official: "Rep\xfablica de Finlandia",
                common: "Finlandia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0424\u0438\u043D\u0441\u043A\u0430",
                common: "\u0424\u0438\u043D\u0441\u043A\u0430"
            },
            swe: {
                official: "Republiken Finland",
                common: "Finland"
            },
            tur: {
                official: "Finlandiya Cumhuriyeti",
                common: "Finlandiya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0641\u0646 \u0644\u06CC\u0646\u0688",
                common: "\u0641\u0646 \u0644\u06CC\u0646\u0688"
            },
            zho: {
                official: "\u82AC\u5170\u5171\u548C\u56FD",
                common: "\u82AC\u5170"
            }
        },
        latlng: [
            64,
            26
        ],
        landlocked: false,
        borders: [
            "NOR",
            "SWE",
            "RUS"
        ],
        area: 338424,
        demonyms: {
            eng: {
                f: "Finnish",
                m: "Finnish"
            },
            fra: {
                f: "Finlandaise",
                m: "Finlandais"
            }
        },
        flag: "\uD83C\uDDEB\uD83C\uDDEE",
        maps: {
            googleMaps: "https://goo.gl/maps/HjgWDCNKRAYHrkMn8",
            openStreetMaps: "openstreetmap.org/relation/54224"
        },
        population: 5530719,
        gini: {
            2018: 27.3
        },
        fifa: "FIN",
        car: {
            signs: [
                "FIN"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/fi.png",
            svg: "https://flagcdn.com/fi.svg",
            alt: "The flag of Finland has a white field with a large blue cross that extend to the edges of the field. The vertical part of this cross is offset towards the hoist side."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/fi.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/fi.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                60.17,
                24.93
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(?:FI)*(\\d{5})$"
        }
    },
    {
        name: {
            common: "Niger",
            official: "Republic of Niger",
            nativeName: {
                fra: {
                    official: "R\xe9publique du Niger",
                    common: "Niger"
                }
            }
        },
        tld: [
            ".ne"
        ],
        cca2: "NE",
        ccn3: "562",
        cca3: "NER",
        cioc: "NIG",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XOF: {
                name: "West African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "27"
            ]
        },
        capital: [
            "Niamey"
        ],
        altSpellings: [
            "NE",
            "Nijar"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0646\u064A\u062C\u0631",
                common: "\u0627\u0644\u0646\u064A\u062C\u0631"
            },
            bre: {
                official: "Republik Niger",
                common: "Niger"
            },
            ces: {
                official: "Nigersk\xe1 republika",
                common: "Niger"
            },
            cym: {
                official: "Republic of Niger",
                common: "Niger"
            },
            deu: {
                official: "Republik Niger",
                common: "Niger"
            },
            est: {
                official: "Nigeri Vabariik",
                common: "Niger"
            },
            fin: {
                official: "Nigerin tasavalta",
                common: "Niger"
            },
            fra: {
                official: "R\xe9publique du Niger",
                common: "Niger"
            },
            hrv: {
                official: "Republika Niger",
                common: "Niger"
            },
            hun: {
                official: "Nigeri K\xf6zt\xe1rsas\xe1g",
                common: "Niger"
            },
            ita: {
                official: "Repubblica del Niger",
                common: "Niger"
            },
            jpn: {
                official: "\u30CB\u30B8\u30A7\u30FC\u30EB\u5171\u548C\u56FD",
                common: "\u30CB\u30B8\u30A7\u30FC\u30EB"
            },
            kor: {
                official: "\uB2C8\uC81C\uB974 \uACF5\uD654\uAD6D",
                common: "\uB2C8\uC81C\uB974"
            },
            nld: {
                official: "Republiek Niger",
                common: "Niger"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0646\u06CC\u062C\u0631",
                common: "\u0646\u06CC\u062C\u0631"
            },
            pol: {
                official: "Republika Nigru",
                common: "Niger"
            },
            por: {
                official: "Rep\xfablica do N\xedger",
                common: "N\xedger"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u0433\u0435\u0440",
                common: "\u041D\u0438\u0433\u0435\u0440"
            },
            slk: {
                official: "Nig\xe9rsk\xe1 republika",
                common: "Niger"
            },
            spa: {
                official: "Rep\xfablica de N\xedger",
                common: "N\xedger"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u0433\u0435\u0440",
                common: "\u041D\u0438\u0433\u0435\u0440"
            },
            swe: {
                official: "Republiken Niger",
                common: "Niger"
            },
            tur: {
                official: "Nijer Cumhuriyeti",
                common: "Nijer"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u0627\u0626\u062C\u0631",
                common: "\u0646\u0627\u0626\u062C\u0631"
            },
            zho: {
                official: "\u5C3C\u65E5\u5C14\u5171\u548C\u56FD",
                common: "\u5C3C\u65E5\u5C14"
            }
        },
        latlng: [
            16,
            8
        ],
        landlocked: true,
        borders: [
            "DZA",
            "BEN",
            "BFA",
            "TCD",
            "LBY",
            "MLI",
            "NGA"
        ],
        area: 1267000,
        demonyms: {
            eng: {
                f: "Nigerien",
                m: "Nigerien"
            },
            fra: {
                f: "Nig\xe9rienne",
                m: "Nig\xe9rien"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/VKNU2TLsZcgxM49c8",
            openStreetMaps: "https://www.openstreetmap.org/relation/192786"
        },
        population: 24206636,
        gini: {
            2014: 34.3
        },
        fifa: "NIG",
        car: {
            signs: [
                "RN"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ne.png",
            svg: "https://flagcdn.com/ne.svg",
            alt: "The flag of Niger features three equal horizontal bands of orange, white and green, with an orange circle centered in the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ne.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ne.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                13.52,
                2.12
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Christmas Island",
            official: "Territory of Christmas Island",
            nativeName: {
                eng: {
                    official: "Territory of Christmas Island",
                    common: "Christmas Island"
                }
            }
        },
        tld: [
            ".cx"
        ],
        cca2: "CX",
        ccn3: "162",
        cca3: "CXR",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            AUD: {
                name: "Australian dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "1"
            ]
        },
        capital: [
            "Flying Fish Cove"
        ],
        altSpellings: [
            "CX",
            "Territory of Christmas Island"
        ],
        region: "Oceania",
        subregion: "Australia and New Zealand",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u064A\u0631\u0629 \u0643\u0631\u064A\u0633\u0645\u0627\u0633",
                common: "\u062C\u0632\u064A\u0631\u0629 \u0643\u0631\u064A\u0633\u0645\u0627\u0633"
            },
            bre: {
                official: "Tiriad Enez Christmas",
                common: "Enez Christmas"
            },
            ces: {
                official: "Teritorium V\xe1no\u010Dn\xedho ostrova",
                common: "V\xe1no\u010Dn\xed ostrov"
            },
            cym: {
                official: "Tiriogaeth yr Ynys y Nadolig",
                common: "Ynys y Nadolig"
            },
            deu: {
                official: "Gebiet der Weihnachtsinsel",
                common: "Weihnachtsinsel"
            },
            est: {
                official: "J\xf5ulusaare ala",
                common: "J\xf5ulusaar"
            },
            fin: {
                official: "Joulusaaren alue",
                common: "Joulusaari"
            },
            fra: {
                official: "Territoire de l'\xeele Christmas",
                common: "\xcele Christmas"
            },
            hrv: {
                official: "Teritorij Bo\u017Ei\u0107ni otok",
                common: "Bo\u017Ei\u0107ni otok"
            },
            hun: {
                official: "Kar\xe1csony-sziget",
                common: "Kar\xe1csony-sziget"
            },
            ita: {
                official: "Territorio di Christmas Island",
                common: "Isola di Natale"
            },
            jpn: {
                official: "\u30AF\u30EA\u30B9\u30DE\u30B9\u5CF6\u306E\u9818\u571F",
                common: "\u30AF\u30EA\u30B9\u30DE\u30B9\u5CF6"
            },
            kor: {
                official: "\uD06C\uB9AC\uC2A4\uB9C8\uC2A4 \uC12C",
                common: "\uD06C\uB9AC\uC2A4\uB9C8\uC2A4 \uC12C"
            },
            nld: {
                official: "Grondgebied van Christmas Island",
                common: "Christmaseiland"
            },
            per: {
                official: "\u062C\u0632\u06CC\u0631\u0647\u0654 \u06A9\u0631\u06CC\u0633\u0645\u0633",
                common: "\u062C\u0632\u06CC\u0631\u0647\u0654 \u06A9\u0631\u06CC\u0633\u0645\u0633"
            },
            pol: {
                official: "Wyspa Bo\u017Cego Narodzenia",
                common: "Wyspa Bo\u017Cego Narodzenia"
            },
            por: {
                official: "Territ\xf3rio da Ilha Christmas",
                common: "Ilha do Natal"
            },
            rus: {
                official: "\u0422\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u0420\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u0430",
                common: "\u041E\u0441\u0442\u0440\u043E\u0432 \u0420\u043E\u0436\u0434\u0435\u0441\u0442\u0432\u0430"
            },
            slk: {
                official: "Terit\xf3rium Viano\u010Dn\xe9ho ostrova",
                common: "Viano\u010Dn\xfa ostrov"
            },
            spa: {
                official: "Territorio de la Isla de Navidad",
                common: "Isla de Navidad"
            },
            srp: {
                official: "\u0411\u043E\u0436\u0438\u045B\u043D\u043E \u041E\u0441\u0442\u0440\u0432\u043E",
                common: "\u0411\u043E\u0436\u0438\u045B\u043D\u043E \u041E\u0441\u0442\u0440\u0432\u043E"
            },
            swe: {
                official: "Jul\xf6n",
                common: "Jul\xf6n"
            },
            tur: {
                official: "Christmas Adas\u0131",
                common: "Christmas Adas\u0131"
            },
            urd: {
                official: "\u0631\u06CC\u0627\u0633\u062A\u0650 \u062C\u0632\u06CC\u0631\u06C1 \u06A9\u0631\u0633\u0645\u0633",
                common: "\u062C\u0632\u06CC\u0631\u06C1 \u06A9\u0631\u0633\u0645\u0633"
            },
            zho: {
                official: "\u5723\u8BDE\u5C9B",
                common: "\u5723\u8BDE\u5C9B"
            }
        },
        latlng: [
            -10.5,
            105.66666666
        ],
        landlocked: false,
        area: 135,
        demonyms: {
            eng: {
                f: "Christmas Islander",
                m: "Christmas Islander"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDFD",
        maps: {
            googleMaps: "https://goo.gl/maps/ZC17hHsQZpShN5wk9",
            openStreetMaps: "https://www.openstreetmap.org/relation/6365444"
        },
        population: 2072,
        car: {
            signs: [
                "AUS"
            ],
            side: "left"
        },
        timezones: [
            "UTC+07:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cx.png",
            svg: "https://flagcdn.com/cx.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cx.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cx.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -10.42,
                105.68
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Tokelau",
            official: "Tokelau",
            nativeName: {
                eng: {
                    official: "Tokelau",
                    common: "Tokelau"
                },
                smo: {
                    official: "Tokelau",
                    common: "Tokelau"
                },
                tkl: {
                    official: "Tokelau",
                    common: "Tokelau"
                }
            }
        },
        tld: [
            ".tk"
        ],
        cca2: "TK",
        ccn3: "772",
        cca3: "TKL",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            NZD: {
                name: "New Zealand dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "90"
            ]
        },
        capital: [
            "Fakaofo"
        ],
        altSpellings: [
            "TK"
        ],
        region: "Oceania",
        subregion: "Polynesia",
        languages: {
            eng: "English",
            smo: "Samoan",
            tkl: "Tokelauan"
        },
        translations: {
            ara: {
                official: "\u062A\u0648\u0643\u064A\u0644\u0627\u0648",
                common: "\u062A\u0648\u0643\u064A\u0644\u0627\u0648"
            },
            bre: {
                official: "Tokelau",
                common: "Tokelau"
            },
            ces: {
                official: "Tokelau",
                common: "Tokelau"
            },
            cym: {
                official: "Tokelau",
                common: "Tokelau"
            },
            deu: {
                official: "Tokelau",
                common: "Tokelau"
            },
            est: {
                official: "Tokelau",
                common: "Tokelau"
            },
            fin: {
                official: "Tokelau",
                common: "Tokelau"
            },
            fra: {
                official: "\xceles Tokelau",
                common: "Tokelau"
            },
            hrv: {
                official: "Tokelau",
                common: "Tokelau"
            },
            hun: {
                official: "Tokelau-szigetek",
                common: "Tokelau-szigetek"
            },
            ita: {
                official: "Tokelau",
                common: "Isole Tokelau"
            },
            jpn: {
                official: "\u30C8\u30B1\u30E9\u30A6\u8AF8\u5CF6",
                common: "\u30C8\u30B1\u30E9\u30A6"
            },
            kor: {
                official: "\uD1A0\uCF08\uB77C\uC6B0",
                common: "\uD1A0\uCF08\uB77C\uC6B0"
            },
            nld: {
                official: "Tokelau",
                common: "Tokelau"
            },
            per: {
                official: "\u062A\u0648\u06A9\u0644\u0627\u0626\u0648",
                common: "\u062A\u0648\u06A9\u0644\u0627\u0626\u0648"
            },
            pol: {
                official: "Tokelau",
                common: "Tokelau"
            },
            por: {
                official: "Tokelau",
                common: "Tokelau"
            },
            rus: {
                official: "\u0422\u043E\u043A\u0435\u043B\u0430\u0443",
                common: "\u0422\u043E\u043A\u0435\u043B\u0430\u0443"
            },
            slk: {
                official: "Tokelausk\xe9 ostrovy",
                common: "Tokelau"
            },
            spa: {
                official: "Tokelau",
                common: "Islas Tokelau"
            },
            srp: {
                official: "\u0422\u043E\u043A\u0435\u043B\u0430\u0443",
                common: "\u0422\u043E\u043A\u0435\u043B\u0430\u0443"
            },
            swe: {
                official: "Tokelau\xf6arna",
                common: "Tokelau\xf6arna"
            },
            tur: {
                official: "Tokelau",
                common: "Tokelau"
            },
            urd: {
                official: "\u0679\u0648\u06A9\u06CC\u0644\u0627\u0624",
                common: "\u0679\u0648\u06A9\u06CC\u0644\u0627\u0624"
            },
            zho: {
                official: "\u6258\u514B\u52B3",
                common: "\u6258\u514B\u52B3"
            }
        },
        latlng: [
            -9,
            -172
        ],
        landlocked: false,
        area: 12,
        demonyms: {
            eng: {
                f: "Tokelauan",
                m: "Tokelauan"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDF0",
        maps: {
            googleMaps: "https://goo.gl/maps/Ap5qN8qien6pT9UN6",
            openStreetMaps: "https://www.openstreetmap.org/relation/2186600"
        },
        population: 1411,
        car: {
            signs: [
                ""
            ],
            side: "left"
        },
        timezones: [
            "UTC+13:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tk.png",
            svg: "https://flagcdn.com/tk.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -9.38,
                -171.22
            ]
        }
    },
    {
        name: {
            common: "Guinea-Bissau",
            official: "Republic of Guinea-Bissau",
            nativeName: {
                por: {
                    official: "Rep\xfablica da Guin\xe9-Bissau",
                    common: "Guin\xe9-Bissau"
                },
                pov: {
                    official: "Rep\xfablica da Guin\xe9-Bissau",
                    common: "Guin\xe9-Bissau"
                }
            }
        },
        tld: [
            ".gw"
        ],
        cca2: "GW",
        ccn3: "624",
        cca3: "GNB",
        cioc: "GBS",
        independent: true,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            XOF: {
                name: "West African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "45"
            ]
        },
        capital: [
            "Bissau"
        ],
        altSpellings: [
            "GW",
            "Republic of Guinea-Bissau",
            "Rep\xfablica da Guin\xe9-Bissau"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            por: "Portuguese",
            pov: "Upper Guinea Creole"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u064A\u0646\u064A\u0627 \u0628\u064A\u0633\u0627\u0648",
                common: "\u063A\u064A\u0646\u064A\u0627 \u0628\u064A\u0633\u0627\u0648"
            },
            bre: {
                official: "Republik Ginea-Bissau",
                common: "Ginea-Bissau"
            },
            ces: {
                official: "Republika Guinea-Bissau",
                common: "Guinea-Bissau"
            },
            cym: {
                official: "Republic of Guinea-Bissau",
                common: "Guinea-Bissau"
            },
            deu: {
                official: "Republik Guinea-Bissau",
                common: "Guinea-Bissau"
            },
            est: {
                official: "Guinea-Bissau Vabariik",
                common: "Guinea-Bissau"
            },
            fin: {
                official: "Guinea-Bissaun tasavalta",
                common: "Guinea-Bissau"
            },
            fra: {
                official: "R\xe9publique de Guin\xe9e-Bissau",
                common: "Guin\xe9e-Bissau"
            },
            hrv: {
                official: "Republika Gvineja Bisau",
                common: "Gvineja Bisau"
            },
            hun: {
                official: "Bissau-Guineai K\xf6zt\xe1rsas\xe1g",
                common: "Bissau-Guinea"
            },
            ita: {
                official: "Repubblica di Guinea-Bissau",
                common: "Guinea-Bissau"
            },
            jpn: {
                official: "\u30AE\u30CB\u30A2\u30D3\u30B5\u30A6\u5171\u548C\u56FD",
                common: "\u30AE\u30CB\u30A2\u30D3\u30B5\u30A6"
            },
            kor: {
                official: "\uAE30\uB2C8\uBE44\uC0AC\uC6B0 \uACF5\uD654\uAD6D",
                common: "\uAE30\uB2C8\uBE44\uC0AC\uC6B0"
            },
            nld: {
                official: "Republiek Guinee-Bissau",
                common: "Guinee-Bissau"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06AF\u06CC\u0646\u0647 \u0628\u06CC\u0633\u0627\u0626\u0648",
                common: "\u06AF\u06CC\u0646\u0647 \u0628\u06CC\u0633\u0627\u0626\u0648"
            },
            pol: {
                official: "Republika Gwinei Bissau",
                common: "Gwinea Bissau"
            },
            por: {
                official: "Rep\xfablica da Guin\xe9-Bissau",
                common: "Guin\xe9-Bissau"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0438\u043D\u0435\u044F -\u0411\u0438\u0441\u0430\u0443",
                common: "\u0413\u0432\u0438\u043D\u0435\u044F-\u0411\u0438\u0441\u0430\u0443"
            },
            slk: {
                official: "Guinejsko-bissausk\xe1 republika",
                common: "Guinea-Bissau"
            },
            spa: {
                official: "Rep\xfablica de Guinea-Bissau",
                common: "Guinea-Bis\xe1u"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0438\u043D\u0435\u0458\u0430 \u0411\u0438\u0441\u0430\u043E",
                common: "\u0413\u0432\u0438\u043D\u0435\u0458\u0430 \u0411\u0438\u0441\u0430\u043E"
            },
            swe: {
                official: "Republiken Guinea-Bissau",
                common: "Guinea-Bissau"
            },
            tur: {
                official: "Gine-Bissau Cumhuriyeti",
                common: "Gine-Bissau"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u0646\u06CC \u0628\u0633\u0627\u0624",
                common: "\u06AF\u0646\u06CC \u0628\u0633\u0627\u0624"
            },
            zho: {
                official: "\u51E0\u5185\u4E9A\u6BD4\u7ECD\u5171\u548C\u56FD",
                common: "\u51E0\u5185\u4E9A\u6BD4\u7ECD"
            }
        },
        latlng: [
            12,
            -15
        ],
        landlocked: false,
        borders: [
            "GIN",
            "SEN"
        ],
        area: 36125,
        demonyms: {
            eng: {
                f: "Guinea-Bissauan",
                m: "Guinea-Bissauan"
            },
            fra: {
                f: "Bissau-Guin\xe9enne",
                m: "Bissau-Guin\xe9en"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDFC",
        maps: {
            googleMaps: "https://goo.gl/maps/5Wyaz17miUc1zLc67",
            openStreetMaps: "https://www.openstreetmap.org/relation/192776"
        },
        population: 1967998,
        gini: {
            2010: 50.7
        },
        fifa: "GNB",
        car: {
            signs: [
                "RGB"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gw.png",
            svg: "https://flagcdn.com/gw.svg",
            alt: "The flag of Guinea-Bissau features a red vertical band on its hoist side that takes up about two-fifth the width of the field, and two equal horizontal bands of yellow and green adjoining the vertical band. A five-pointed black star is centered in the vertical band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gw.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gw.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                11.85,
                -15.58
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Azerbaijan",
            official: "Republic of Azerbaijan",
            nativeName: {
                aze: {
                    official: "Az\u0259rbaycan Respublikas\u0131",
                    common: "Az\u0259rbaycan"
                }
            }
        },
        tld: [
            ".az"
        ],
        cca2: "AZ",
        ccn3: "031",
        cca3: "AZE",
        cioc: "AZE",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            AZN: {
                name: "Azerbaijani manat",
                symbol: "\u20BC"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "94"
            ]
        },
        capital: [
            "Baku"
        ],
        altSpellings: [
            "AZ",
            "Republic of Azerbaijan",
            "Az\u0259rbaycan Respublikas\u0131"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            aze: "Azerbaijani"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0630\u0631\u0628\u064A\u062C\u0627\u0646",
                common: "\u0623\u0630\u0631\u0628\u064A\u062C\u0627\u0646"
            },
            bre: {
                official: "Republik Azerbaidjan",
                common: "Azerbaidjan"
            },
            ces: {
                official: "\xc1zerb\xe1jd\u017E\xe1nsk\xe1 republika",
                common: "\xc1zerb\xe1jd\u017E\xe1n"
            },
            cym: {
                official: "Gweriniaeth Aserbaijan",
                common: "Aserbaijan"
            },
            deu: {
                official: "Republik Aserbaidschan",
                common: "Aserbaidschan"
            },
            est: {
                official: "Aserbaid\u017Eaani Vabariik",
                common: "Aserbaid\u017Eaan"
            },
            fin: {
                official: "Azerbaidzanin tasavalta",
                common: "Azerbaidzan"
            },
            fra: {
                official: "R\xe9publique d'Azerba\xefdjan",
                common: "Azerba\xefdjan"
            },
            hrv: {
                official: "Republika Azerbajd\u017Ean",
                common: "Azerbajd\u017Ean"
            },
            hun: {
                official: "Azerbajdzs\xe1n",
                common: "Azerbajdzs\xe1n"
            },
            ita: {
                official: "Repubblica dell'Azerbaigian",
                common: "Azerbaijan"
            },
            jpn: {
                official: "\u30A2\u30BC\u30EB\u30D0\u30A4\u30B8\u30E3\u30F3\u5171\u548C\u56FD",
                common: "\u30A2\u30BC\u30EB\u30D0\u30A4\u30B8\u30E3\u30F3"
            },
            kor: {
                official: "\uC544\uC81C\uB974\uBC14\uC774\uC794 \uACF5\uD654\uAD6D",
                common: "\uC544\uC81C\uB974\uBC14\uC774\uC794"
            },
            nld: {
                official: "Republiek Azerbeidzjan",
                common: "Azerbeidzjan"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0630\u0631\u0628\u0627\u06CC\u062C\u0627\u0646",
                common: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0630\u0631\u0628\u0627\u06CC\u062C\u0627\u0646"
            },
            pol: {
                official: "Republika Azerbejd\u017Canu",
                common: "Azerbejd\u017Can"
            },
            por: {
                official: "Rep\xfablica do Azerbaij\xe3o",
                common: "Azerbeij\xe3o"
            },
            rus: {
                official: "\u0410\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0410\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043D"
            },
            slk: {
                official: "Azerbaj\u01C6ansk\xe1 republika",
                common: "Azerbaj\u01C7an"
            },
            spa: {
                official: "Rep\xfablica de Azerbaiy\xe1n",
                common: "Azerbaiy\xe1n"
            },
            srp: {
                official: "\u0410\u0437\u0435\u0440\u0431\u0435\u0458\u045F\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0410\u0437\u0435\u0440\u0431\u0435\u0458\u045F\u0430\u043D"
            },
            swe: {
                official: "Republiken Azerbajdzjan",
                common: "Azerbajdzjan"
            },
            tur: {
                official: "Azerbaycan Cumhuriyeti",
                common: "Azerbaycan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0622\u0630\u0631\u0628\u0627\u0626\u06CC\u062C\u0627\u0646",
                common: "\u0622\u0630\u0631\u0628\u0627\u0626\u06CC\u062C\u0627\u0646"
            },
            zho: {
                official: "\u963F\u585E\u62DC\u7586\u5171\u548C\u56FD",
                common: "\u963F\u585E\u62DC\u7586"
            }
        },
        latlng: [
            40.5,
            47.5
        ],
        landlocked: true,
        borders: [
            "ARM",
            "GEO",
            "IRN",
            "RUS",
            "TUR"
        ],
        area: 86600,
        demonyms: {
            eng: {
                f: "Azerbaijani",
                m: "Azerbaijani"
            },
            fra: {
                f: "Azerba\xefdjanaise",
                m: "Azerba\xefdjanais"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDFF",
        maps: {
            googleMaps: "https://goo.gl/maps/az3Zz7ar2aoB9AUc6",
            openStreetMaps: "https://www.openstreetmap.org/relation/364110"
        },
        population: 10110116,
        gini: {
            2005: 26.6
        },
        fifa: "AZE",
        car: {
            signs: [
                "AZ"
            ],
            side: "right"
        },
        timezones: [
            "UTC+04:00"
        ],
        continents: [
            "Europe",
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/az.png",
            svg: "https://flagcdn.com/az.svg",
            alt: "The flag of Azerbaijan features three equal horizontal bands of blue, red and green, with a white fly-side facing crescent and eight-pointed star centered in the red band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/az.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/az.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                40.38,
                49.87
            ]
        },
        postalCode: {
            format: "AZ ####",
            regex: "^(?:AZ)*(\\d{4})$"
        }
    },
    {
        name: {
            common: "R\xe9union",
            official: "R\xe9union Island",
            nativeName: {
                fra: {
                    official: "Ile de la R\xe9union",
                    common: "La R\xe9union"
                }
            }
        },
        tld: [
            ".re"
        ],
        cca2: "RE",
        ccn3: "638",
        cca3: "REU",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "62"
            ]
        },
        capital: [
            "Saint-Denis"
        ],
        altSpellings: [
            "RE",
            "Reunion"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u064A\u0631\u0629 \u0644\u0627 \u0631\u064A\u0648\u0646\u064A\u0648\u0646",
                common: "\u0644\u0627 \u0631\u064A\u0648\u0646\u064A\u0648\u0646"
            },
            bre: {
                official: "Enez ar Re\xfcnion",
                common: "Re\xfcnion"
            },
            ces: {
                official: "R\xe9union",
                common: "R\xe9union"
            },
            cym: {
                official: "R\xe9union Island",
                common: "R\xe9union"
            },
            deu: {
                official: "R\xe9union",
                common: "R\xe9union"
            },
            est: {
                official: "R\xe9unioni departemang",
                common: "R\xe9union"
            },
            fin: {
                official: "R\xe9union",
                common: "R\xe9union"
            },
            fra: {
                official: "Ile de la R\xe9union",
                common: "R\xe9union"
            },
            hrv: {
                official: "R\xe9union Island",
                common: "R\xe9union"
            },
            hun: {
                official: "R\xe9union",
                common: "R\xe9union"
            },
            ita: {
                official: "R\xe9union",
                common: "Riunione"
            },
            jpn: {
                official: "\u30EC\u30E6\u30CB\u30AA\u30F3\u5CF6",
                common: "\u30EC\u30E6\u30CB\u30AA\u30F3"
            },
            kor: {
                official: "\uB808\uC704\uB2C8\uC639",
                common: "\uB808\uC704\uB2C8\uC639"
            },
            nld: {
                official: "R\xe9union",
                common: "R\xe9union"
            },
            per: {
                official: "\u0631\u0626\u0648\u0646\u06CC\u0648\u0646",
                common: "\u0631\u0626\u0648\u0646\u06CC\u0648\u0646"
            },
            pol: {
                official: "Reunion",
                common: "Reunion"
            },
            por: {
                official: "Ilha da Reuni\xe3o",
                common: "Reuni\xe3o"
            },
            rus: {
                official: "\u0420\u0435\u044E\u043D\u044C\u043E\u043D",
                common: "\u0420\u0435\u044E\u043D\u044C\u043E\u043D"
            },
            slk: {
                official: "R\xe9unionsk\xfd z\xe1morsk\xfd departm\xe1n",
                common: "R\xe9union"
            },
            spa: {
                official: "Isla de la Reuni\xf3n",
                common: "Reuni\xf3n"
            },
            srp: {
                official: "\u0420\u0435\u0438\u043D\u0438\u043E\u043D",
                common: "\u0420\u0435\u0438\u043D\u0438\u043E\u043D"
            },
            swe: {
                official: "R\xe9union",
                common: "R\xe9union"
            },
            tur: {
                official: "R\xe9union",
                common: "R\xe9union"
            },
            urd: {
                official: "\u0631\u06D2 \u06CC\u0648\u0646\u06CC\u0648\u06BA \u062C\u0632\u06CC\u0631\u06C1",
                common: "\u0631\u06D2 \u06CC\u0648\u0646\u06CC\u0648\u06BA"
            },
            zho: {
                official: "\u7559\u5C3C\u65FA\u5C9B",
                common: "\u7559\u5C3C\u65FA\u5C9B"
            }
        },
        latlng: [
            -21.15,
            55.5
        ],
        landlocked: false,
        area: 2511,
        demonyms: {
            eng: {
                f: "R\xe9unionese",
                m: "R\xe9unionese"
            },
            fra: {
                f: "R\xe9unionnaise",
                m: "R\xe9unionnais"
            }
        },
        flag: "\uD83C\uDDF7\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/wWpBrXsp8UHVbah29",
            openStreetMaps: "https://www.openstreetmap.org/relation/1785276"
        },
        population: 840974,
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC+04:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/re.png",
            svg: "https://flagcdn.com/re.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -20.88,
                55.45
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^((97|98)(4|7|8)\\d{2})$"
        }
    },
    {
        name: {
            common: "Djibouti",
            official: "Republic of Djibouti",
            nativeName: {
                ara: {
                    official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u064A\u0628\u0648\u062A\u064A",
                    common: "\u062C\u064A\u0628\u0648\u062A\u064A\u200E"
                },
                fra: {
                    official: "R\xe9publique de Djibouti",
                    common: "Djibouti"
                }
            }
        },
        tld: [
            ".dj"
        ],
        cca2: "DJ",
        ccn3: "262",
        cca3: "DJI",
        cioc: "DJI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            DJF: {
                name: "Djiboutian franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "53"
            ]
        },
        capital: [
            "Djibouti"
        ],
        altSpellings: [
            "DJ",
            "Jabuuti",
            "Gabuuti",
            "Republic of Djibouti",
            "R\xe9publique de Djibouti",
            "Gabuutih Ummuuno",
            "Jamhuuriyadda Jabuuti"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            ara: "Arabic",
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u064A\u0628\u0648\u062A\u064A",
                common: "\u062C\u064A\u0628\u0648\u062A\u064A"
            },
            bre: {
                official: "Republik Djibouti",
                common: "Djibouti"
            },
            ces: {
                official: "D\u017Eibutsk\xe1 republika",
                common: "D\u017Eibutsko"
            },
            cym: {
                official: "Gweriniaeth Jibwti",
                common: "Jibwti"
            },
            deu: {
                official: "Republik Dschibuti",
                common: "Dschibuti"
            },
            est: {
                official: "Djibouti Vabariik",
                common: "Djibouti"
            },
            fin: {
                official: "Dijiboutin tasavalta",
                common: "Dijibouti"
            },
            fra: {
                official: "R\xe9publique de Djibouti",
                common: "Djibouti"
            },
            hrv: {
                official: "Republika D\u017Eibuti",
                common: "D\u017Eibuti"
            },
            hun: {
                official: "Dzsibuti K\xf6zt\xe1rsas\xe1g",
                common: "Dzsibuti"
            },
            ita: {
                official: "Repubblica di Gibuti",
                common: "Gibuti"
            },
            jpn: {
                official: "\u30B8\u30D6\u30C1\u5171\u548C\u56FD",
                common: "\u30B8\u30D6\u30C1"
            },
            kor: {
                official: "\uC9C0\uBD80\uD2F0 \uACF5\uD654\uAD6D",
                common: "\uC9C0\uBD80\uD2F0"
            },
            nld: {
                official: "Republiek Djibouti",
                common: "Djibouti"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062C\u06CC\u0628\u0648\u062A\u06CC",
                common: "\u062C\u06CC\u0628\u0648\u062A\u06CC"
            },
            pol: {
                official: "Republika D\u017Cibuti",
                common: "D\u017Cibuti"
            },
            por: {
                official: "Rep\xfablica do Djibouti",
                common: "Djibouti"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0414\u0436\u0438\u0431\u0443\u0442\u0438",
                common: "\u0414\u0436\u0438\u0431\u0443\u0442\u0438"
            },
            slk: {
                official: "\u01C5ibutsk\xe1 republika",
                common: "\u01C5ibutsko"
            },
            spa: {
                official: "Rep\xfablica de Djibouti",
                common: "Djibouti"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u040F\u0438\u0431\u0443\u0442\u0438",
                common: "\u040F\u0438\u0431\u0443\u0442\u0438"
            },
            swe: {
                official: "Republiken Djibouti",
                common: "Djibouti"
            },
            tur: {
                official: "Cibuti Cumhuriyeti",
                common: "Cibuti"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0628\u0648\u062A\u06CC",
                common: "\u062C\u0628\u0648\u062A\u06CC"
            },
            zho: {
                official: "\u5409\u5E03\u63D0\u5171\u548C\u56FD",
                common: "\u5409\u5E03\u63D0"
            }
        },
        latlng: [
            11.5,
            43
        ],
        landlocked: false,
        borders: [
            "ERI",
            "ETH",
            "SOM"
        ],
        area: 23200,
        demonyms: {
            eng: {
                f: "Djibouti",
                m: "Djibouti"
            },
            fra: {
                f: "Djiboutienne",
                m: "Djiboutien"
            }
        },
        flag: "\uD83C\uDDE9\uD83C\uDDEF",
        maps: {
            googleMaps: "https://goo.gl/maps/V1HWfzN3bS1kwf4C6",
            openStreetMaps: "https://www.openstreetmap.org/relation/192801"
        },
        population: 988002,
        gini: {
            2017: 41.6
        },
        fifa: "DJI",
        car: {
            signs: [
                "DJI"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/dj.png",
            svg: "https://flagcdn.com/dj.svg",
            alt: "The flag of Djibouti is composed of two equal horizontal bands of light blue and light green, with a white isosceles triangle superimposed on the hoist side of the field. The triangle has its base on the hoist end, spans about two-fifth the width of the field and bears a red five-pointed star at its center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/dj.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/dj.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                11.58,
                43.15
            ]
        }
    },
    {
        name: {
            common: "North Korea",
            official: "Democratic People's Republic of Korea",
            nativeName: {
                kor: {
                    official: "\uC870\uC120\uBBFC\uC8FC\uC8FC\uC758\uC778\uBBFC\uACF5\uD654\uAD6D",
                    common: "\uC870\uC120"
                }
            }
        },
        tld: [
            ".kp"
        ],
        cca2: "KP",
        ccn3: "408",
        cca3: "PRK",
        cioc: "PRK",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            KPW: {
                name: "North Korean won",
                symbol: "\u20A9"
            }
        },
        idd: {
            root: "+8",
            suffixes: [
                "50"
            ]
        },
        capital: [
            "Pyongyang"
        ],
        altSpellings: [
            "KP",
            "Democratic People's Republic of Korea",
            "DPRK",
            "\uC870\uC120\uBBFC\uC8FC\uC8FC\uC758\uC778\uBBFC\uACF5\uD654\uAD6D",
            "Chos\u014Fn Minjuju\u016Di Inmin Konghwaguk",
            "Korea, Democratic People's Republic of",
            "\uBD81\uD55C",
            "\uBD81\uC870\uC120"
        ],
        region: "Asia",
        subregion: "Eastern Asia",
        languages: {
            kor: "Korean"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0631\u064A\u0627 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                common: "\u0643\u0648\u0631\u064A\u0627 \u0627\u0644\u0634\u0645\u0627\u0644\u064A\u0629"
            },
            bre: {
                official: "Republik Poblel ha Demokratel Korea",
                common: "Korea an Norzh"
            },
            ces: {
                official: "Korejsk\xe1 lidov\u011B demokratick\xe1 republika",
                common: "Severn\xed Korea"
            },
            cym: {
                official: "Democratic People's Republic of Korea",
                common: "North Korea"
            },
            deu: {
                official: "Demokratische Volksrepublik Korea",
                common: "Nordkorea"
            },
            est: {
                official: "Korea Rahvademokraatlik Vabariik",
                common: "P\xf5hja-Korea"
            },
            fin: {
                official: "Korean demokraattinen kansantasavalta",
                common: "Pohjois-Korea"
            },
            fra: {
                official: "R\xe9publique populaire d\xe9mocratique de Cor\xe9e",
                common: "Cor\xe9e du Nord"
            },
            hrv: {
                official: "Demokratska Narodna Republika Koreja",
                common: "Sjeverna Koreja"
            },
            hun: {
                official: "Koreai N\xe9pi Demokratikus K\xf6zt\xe1rsas\xe1g",
                common: "\xc9szak-Korea"
            },
            ita: {
                official: "Repubblica democratica popolare di Corea",
                common: "Corea del Nord"
            },
            jpn: {
                official: "\u671D\u9BAE\u6C11\u4E3B\u4E3B\u7FA9\u4EBA\u6C11\u5171\u548C\u56FD",
                common: "\u671D\u9BAE\u6C11\u4E3B\u4E3B\u7FA9\u4EBA\u6C11\u5171\u548C\u56FD"
            },
            kor: {
                official: "\uC870\uC120\uBBFC\uC8FC\uC8FC\uC758\uC778\uBBFC\uACF5\uD654\uAD6D",
                common: "\uC870\uC120"
            },
            nld: {
                official: "Democratische Volksrepubliek Korea",
                common: "Noord-Korea"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u062E\u0644\u0642 \u06A9\u0631\u0647",
                common: "\u06A9\u064F\u0631\u0647 \u0634\u0645\u0627\u0644\u06CC"
            },
            pol: {
                official: "Korea\u0144ska Republika Ludowo-Demokratyczna",
                common: "Korea P\xf3\u0142nocna"
            },
            por: {
                official: "Rep\xfablica Popular Democr\xe1tica da Coreia",
                common: "Coreia do Norte"
            },
            rus: {
                official: "\u041A\u043E\u0440\u0435\u0439\u0441\u043A\u0430\u044F \u041D\u0430\u0440\u043E\u0434\u043D\u043E-\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0440\u0435\u044F",
                common: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u041A\u043E\u0440\u0435\u044F"
            },
            slk: {
                official: "K\xf3rejsk\xe1 \u013Eudovodemokratick\xe1 republika",
                common: "Severn\xe1 K\xf3rea"
            },
            spa: {
                official: "Rep\xfablica Popular Democr\xe1tica de Corea",
                common: "Corea del Norte"
            },
            srp: {
                official: "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u041D\u0430\u0440\u043E\u0434\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0440\u0435\u0458\u0430",
                common: "\u0421\u0435\u0432\u0435\u0440\u043D\u0430 \u041A\u043E\u0440\u0435\u0458\u0430"
            },
            swe: {
                official: "Demokratiska Folkrepubliken Korea",
                common: "Nordkorea"
            },
            tur: {
                official: "Kore Demokratik Halk Cumhuriyeti",
                common: "Kuzey Kore"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC \u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u0631\u06CC\u0627",
                common: "\u0634\u0645\u0627\u0644\u06CC \u06A9\u0648\u0631\u06CC\u0627"
            },
            zho: {
                official: "\u671D\u9C9C\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u671D\u9C9C"
            }
        },
        latlng: [
            40,
            127
        ],
        landlocked: false,
        borders: [
            "CHN",
            "KOR",
            "RUS"
        ],
        area: 120538,
        demonyms: {
            eng: {
                f: "North Korean",
                m: "North Korean"
            },
            fra: {
                f: "Nord-cor\xe9enne",
                m: "Nord-cor\xe9en"
            }
        },
        flag: "\uD83C\uDDF0\uD83C\uDDF5",
        maps: {
            googleMaps: "https://goo.gl/maps/9q5T2DMeH5JL7Tky6",
            openStreetMaps: "https://www.openstreetmap.org/relation/192734"
        },
        population: 25778815,
        fifa: "PRK",
        car: {
            signs: [
                ""
            ],
            side: "right"
        },
        timezones: [
            "UTC+09:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/kp.png",
            svg: "https://flagcdn.com/kp.svg",
            alt: "The flag of North Korea is composed of three horizontal bands \u2014 a large central white-edged red band, and a blue band above and beneath the red band. On the hoist side of the red band is a red five-pointed star within a white circle."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/kp.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/kp.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                39.02,
                125.75
            ]
        },
        postalCode: {
            format: "###-###",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Mauritius",
            official: "Republic of Mauritius",
            nativeName: {
                eng: {
                    official: "Republic of Mauritius",
                    common: "Mauritius"
                },
                fra: {
                    official: "R\xe9publique de Maurice",
                    common: "Maurice"
                },
                mfe: {
                    official: "Republik Moris",
                    common: "Moris"
                }
            }
        },
        tld: [
            ".mu"
        ],
        cca2: "MU",
        ccn3: "480",
        cca3: "MUS",
        cioc: "MRI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MUR: {
                name: "Mauritian rupee",
                symbol: "\u20A8"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "30"
            ]
        },
        capital: [
            "Port Louis"
        ],
        altSpellings: [
            "MU",
            "Republic of Mauritius",
            "R\xe9publique de Maurice"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            eng: "English",
            fra: "French",
            mfe: "Mauritian Creole"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0648\u0631\u064A\u0634\u064A\u0648\u0633",
                common: "\u0645\u0648\u0631\u064A\u0634\u064A\u0648\u0633"
            },
            bre: {
                official: "Republik Moris",
                common: "Moris"
            },
            ces: {
                official: "Mauricijsk\xe1 republika",
                common: "Mauricius"
            },
            cym: {
                official: "Republic of Mauritius",
                common: "Mauritius"
            },
            deu: {
                official: "Republik Mauritius",
                common: "Mauritius"
            },
            est: {
                official: "Mauritiuse Vabariik",
                common: "Mauritius"
            },
            fin: {
                official: "Mauritiuksen tasavalta",
                common: "Mauritius"
            },
            fra: {
                official: "R\xe9publique de Maurice",
                common: "\xcele Maurice"
            },
            hrv: {
                official: "Republika Mauricijus",
                common: "Mauricijus"
            },
            hun: {
                official: "Mauritiusi K\xf6zt\xe1rsas\xe1g",
                common: "Mauritius"
            },
            ita: {
                official: "Repubblica di Mauritius",
                common: "Mauritius"
            },
            jpn: {
                official: "\u30E2\u30FC\u30EA\u30B7\u30E3\u30B9\u5171\u548C\u56FD",
                common: "\u30E2\u30FC\u30EA\u30B7\u30E3\u30B9"
            },
            kor: {
                official: "\uBAA8\uB9AC\uC154\uC2A4 \uACF5\uD654\uAD6D",
                common: "\uBAA8\uB9AC\uC154\uC2A4"
            },
            nld: {
                official: "Republiek Mauritius",
                common: "Mauritius"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0648\u0631\u06CC\u0633",
                common: "\u0645\u0648\u0631\u06CC\u0633"
            },
            pol: {
                official: "Republika Mauritiusu",
                common: "Mauritius"
            },
            por: {
                official: "Rep\xfablica das Maur\xedcias",
                common: "Maur\xedcio"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0432\u0440\u0438\u043A\u0438\u0439",
                common: "\u041C\u0430\u0432\u0440\u0438\u043A\u0438\u0439"
            },
            slk: {
                official: "Maur\xedcijsk\xe1 republika",
                common: "Maur\xedcius"
            },
            spa: {
                official: "Rep\xfablica de Mauricio",
                common: "Mauricio"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0443\u0440\u0438\u0446\u0438\u0458\u0443\u0441",
                common: "\u041C\u0430\u0443\u0440\u0438\u0446\u0438\u0458\u0443\u0441"
            },
            swe: {
                official: "Republiken Mauritius",
                common: "Mauritius"
            },
            tur: {
                official: "Mauritius Cumhuriyeti",
                common: "Mauritius"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0648\u0631\u06CC\u0634\u0633",
                common: "\u0645\u0648\u0631\u06CC\u0634\u0633"
            },
            zho: {
                official: "\u6BDB\u91CC\u6C42\u65AF\u5171\u548C\u56FD",
                common: "\u6BDB\u91CC\u6C42\u65AF"
            }
        },
        latlng: [
            -20.28333333,
            57.55
        ],
        landlocked: false,
        area: 2040,
        demonyms: {
            eng: {
                f: "Mauritian",
                m: "Mauritian"
            },
            fra: {
                f: "Mauricienne",
                m: "Mauricien"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDFA",
        maps: {
            googleMaps: "https://goo.gl/maps/PpKtZ4W3tir5iGrz7",
            openStreetMaps: "https://www.openstreetmap.org/relation/535828"
        },
        population: 1265740,
        gini: {
            2017: 36.8
        },
        fifa: "MRI",
        car: {
            signs: [
                "MS"
            ],
            side: "left"
        },
        timezones: [
            "UTC+04:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mu.png",
            svg: "https://flagcdn.com/mu.svg",
            alt: "The flag of Mauritius is composed of four equal horizontal bands of red, blue, yellow and green."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mu.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mu.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -20.15,
                57.48
            ]
        }
    },
    {
        name: {
            common: "Montserrat",
            official: "Montserrat",
            nativeName: {
                eng: {
                    official: "Montserrat",
                    common: "Montserrat"
                }
            }
        },
        tld: [
            ".ms"
        ],
        cca2: "MS",
        ccn3: "500",
        cca3: "MSR",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            XCD: {
                name: "Eastern Caribbean dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "664"
            ]
        },
        capital: [
            "Plymouth"
        ],
        altSpellings: [
            "MS"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0645\u0648\u0646\u062A\u0633\u0631\u0627\u062A",
                common: "\u0645\u0648\u0646\u062A\u0633\u0631\u0627\u062A"
            },
            bre: {
                official: "Montserrat",
                common: "Montserrat"
            },
            ces: {
                official: "Montserrat",
                common: "Montserrat"
            },
            cym: {
                official: "Montserrat",
                common: "Montserrat"
            },
            deu: {
                official: "Montserrat",
                common: "Montserrat"
            },
            est: {
                official: "Montserrat",
                common: "Montserrat"
            },
            fin: {
                official: "Montserrat",
                common: "Montserrat"
            },
            fra: {
                official: "Montserrat",
                common: "Montserrat"
            },
            hrv: {
                official: "Montserrat",
                common: "Montserrat"
            },
            hun: {
                official: "Montserrat",
                common: "Montserrat"
            },
            ita: {
                official: "Montserrat",
                common: "Montserrat"
            },
            jpn: {
                official: "\u30E2\u30F3\u30C8\u30BB\u30E9\u30C8",
                common: "\u30E2\u30F3\u30C8\u30BB\u30E9\u30C8"
            },
            kor: {
                official: "\uBAAC\uD2B8\uC138\uB7AB",
                common: "\uBAAC\uD2B8\uC138\uB7AB"
            },
            nld: {
                official: "Montserrat",
                common: "Montserrat"
            },
            per: {
                official: "\u0645\u0648\u0646\u062A\u0633\u0631\u0627\u062A",
                common: "\u0645\u0648\u0646\u062A\u0633\u0631\u0627\u062A"
            },
            pol: {
                official: "Montserrat",
                common: "Montserrat"
            },
            por: {
                official: "Montserrat",
                common: "Montserrat"
            },
            rus: {
                official: "\u041C\u043E\u043D\u0442\u0441\u0435\u0440\u0440\u0430\u0442",
                common: "\u041C\u043E\u043D\u0442\u0441\u0435\u0440\u0440\u0430\u0442"
            },
            slk: {
                official: "Montserrat",
                common: "Montserrat"
            },
            spa: {
                official: "Montserrat",
                common: "Montserrat"
            },
            srp: {
                official: "\u041C\u043E\u043D\u0442\u0441\u0435\u0440\u0430\u0442",
                common: "\u041C\u043E\u043D\u0442\u0441\u0435\u0440\u0430\u0442"
            },
            swe: {
                official: "Montserrat",
                common: "Montserrat"
            },
            tur: {
                official: "Montserrat",
                common: "Montserrat"
            },
            urd: {
                official: "\u0645\u0627\u0646\u0679\u0633\u0631\u06CC\u0679",
                common: "\u0645\u0627\u0646\u0679\u0633\u0631\u06CC\u0679"
            },
            zho: {
                official: "\u8499\u7279\u585E\u62C9\u7279",
                common: "\u8499\u7279\u585E\u62C9\u7279"
            }
        },
        latlng: [
            16.75,
            -62.2
        ],
        landlocked: false,
        area: 102,
        demonyms: {
            eng: {
                f: "Montserratian",
                m: "Montserratian"
            },
            fra: {
                f: "Montserratienne",
                m: "Montserratien"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/CSbe7UmxPmiwQB7GA",
            openStreetMaps: "https://www.openstreetmap.org/relation/537257"
        },
        population: 4922,
        fifa: "MSR",
        car: {
            signs: [
                "GB"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ms.png",
            svg: "https://flagcdn.com/ms.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ms.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ms.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                16.7,
                -62.22
            ]
        }
    },
    {
        name: {
            common: "United States Virgin Islands",
            official: "Virgin Islands of the United States",
            nativeName: {
                eng: {
                    official: "Virgin Islands of the United States",
                    common: "United States Virgin Islands"
                }
            }
        },
        tld: [
            ".vi"
        ],
        cca2: "VI",
        ccn3: "850",
        cca3: "VIR",
        cioc: "ISV",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "340"
            ]
        },
        capital: [
            "Charlotte Amalie"
        ],
        altSpellings: [
            "VI",
            "Virgin Islands, U.S."
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u0627\u0644\u0639\u0630\u0631\u0627\u0621 \u0627\u0644\u0627\u0645\u0631\u064A\u0643\u064A\u0629",
                common: "\u062C\u0632\u0631 \u0627\u0644\u0639\u0630\u0631\u0627\u0621 \u0627\u0644\u0627\u0645\u0631\u064A\u0643\u064A\u0629"
            },
            bre: {
                official: "Inizi Gwerc'h ar Stado\xf9-Unanet",
                common: "Inizi Gwerc'h ar Stado\xf9-Unanet"
            },
            ces: {
                official: "Americk\xe9 Panensk\xe9 ostrovy",
                common: "Americk\xe9 Panensk\xe9 ostrovy"
            },
            cym: {
                official: "Virgin Islands of the United States",
                common: "United States Virgin Islands"
            },
            deu: {
                official: "Amerikanische Jungferninseln",
                common: "Amerikanische Jungferninseln"
            },
            est: {
                official: "\xdchendriikide Neitsisaared",
                common: "Neitsisaared, USA"
            },
            fin: {
                official: "Yhdysvaltain Neitsytsaaret",
                common: "Neitsytsaaret"
            },
            fra: {
                official: "\xceles Vierges des \xc9tats-Unis",
                common: "\xceles Vierges des \xc9tats-Unis"
            },
            hrv: {
                official: "Djevi\u010Danski Otoci SAD",
                common: "Ameri\u010Dki Djevi\u010Danski Otoci"
            },
            hun: {
                official: "Amerikai Virgin-szigetek",
                common: "Amerikai Virgin-szigetek"
            },
            ita: {
                official: "Isole Vergini degli Stati Uniti",
                common: "Isole Vergini americane"
            },
            jpn: {
                official: "\u7C73\u56FD\u306E\u30D0\u30FC\u30B8\u30F3\u8AF8\u5CF6",
                common: "\u30A2\u30E1\u30EA\u30AB\u9818\u30F4\u30A1\u30FC\u30B8\u30F3\u8AF8\u5CF6"
            },
            kor: {
                official: "\uBBF8\uAD6D\uB839 \uBC84\uC9C4\uC544\uC77C\uB79C\uB4DC",
                common: "\uBBF8\uAD6D\uB839 \uBC84\uC9C4\uC544\uC77C\uB79C\uB4DC"
            },
            nld: {
                official: "Maagdeneilanden van de Verenigde Staten",
                common: "Amerikaanse Maagdeneilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u0648\u06CC\u0631\u062C\u06CC\u0646 \u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u0648\u06CC\u0631\u062C\u06CC\u0646 \u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627"
            },
            pol: {
                official: "Wyspy Dziewicze Stan\xf3w Zjednoczonych",
                common: "Wyspy Dziewicze Stan\xf3w Zjednoczonych"
            },
            por: {
                official: "Ilhas Virgens dos Estados Unidos",
                common: "Ilhas Virgens dos Estados Unidos"
            },
            rus: {
                official: "\u0412\u0438\u0440\u0433\u0438\u043D\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u044B\u0445 \u0428\u0442\u0430\u0442\u043E\u0432",
                common: "\u0412\u0438\u0440\u0433\u0438\u043D\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Americk\xe9 Panensk\xe9 ostrovy",
                common: "Americk\xe9 Panensk\xe9 ostrovy"
            },
            spa: {
                official: "Islas V\xedrgenes de los Estados Unidos",
                common: "Islas V\xedrgenes de los Estados Unidos"
            },
            srp: {
                official: "\u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0430 \u0414\u0435\u0432\u0438\u0447\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                common: "\u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0430 \u0414\u0435\u0432\u0438\u0447\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "Amerikanska Jungfru\xf6arna",
                common: "Amerikanska Jungfru\xf6arna"
            },
            tur: {
                official: "Amerika Birle\u015Fik Devletleri Virjin Adalar\u0131",
                common: "ABD Virjin Adalar\u0131"
            },
            urd: {
                official: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u062C\u0632\u0627\u0626\u0631 \u0648\u0631\u062C\u0646",
                common: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u062C\u0632\u0627\u0626\u0631 \u0648\u0631\u062C\u0646"
            },
            zho: {
                official: "\u7F8E\u5C5E\u7EF4\u5C14\u4EAC\u7FA4\u5C9B",
                common: "\u7F8E\u5C5E\u7EF4\u5C14\u4EAC\u7FA4\u5C9B"
            }
        },
        latlng: [
            18.35,
            -64.933333
        ],
        landlocked: false,
        area: 347,
        demonyms: {
            eng: {
                f: "Virgin Islander",
                m: "Virgin Islander"
            }
        },
        flag: "\uD83C\uDDFB\uD83C\uDDEE",
        maps: {
            googleMaps: "https://goo.gl/maps/mBfreywj8dor6q4m9",
            openStreetMaps: "openstreetmap.org/relation/286898"
        },
        population: 106290,
        fifa: "VIR",
        car: {
            signs: [
                "USA"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/vi.png",
            svg: "https://flagcdn.com/vi.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                18.35,
                -64.93
            ]
        }
    },
    {
        name: {
            common: "Colombia",
            official: "Republic of Colombia",
            nativeName: {
                spa: {
                    official: "Rep\xfablica de Colombia",
                    common: "Colombia"
                }
            }
        },
        tld: [
            ".co"
        ],
        cca2: "CO",
        ccn3: "170",
        cca3: "COL",
        cioc: "COL",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            COP: {
                name: "Colombian peso",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "7"
            ]
        },
        capital: [
            "Bogot\xe1"
        ],
        altSpellings: [
            "CO",
            "Republic of Colombia",
            "Rep\xfablica de Colombia"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0644\u0648\u0645\u0628\u064A\u0627",
                common: "\u0643\u0648\u0644\u0648\u0645\u0628\u064A\u0627"
            },
            bre: {
                official: "Republik Kolombia",
                common: "Kolombia"
            },
            ces: {
                official: "Kolumbijsk\xe1 republika",
                common: "Kolumbie"
            },
            cym: {
                official: "Gweriniaeth Colombia",
                common: "Colombia"
            },
            deu: {
                official: "Republik Kolumbien",
                common: "Kolumbien"
            },
            est: {
                official: "Colombia Vabariik",
                common: "Colombia"
            },
            fin: {
                official: "Kolumbian tasavalta",
                common: "Kolumbia"
            },
            fra: {
                official: "R\xe9publique de Colombie",
                common: "Colombie"
            },
            hrv: {
                official: "Republika Kolumbija",
                common: "Kolumbija"
            },
            hun: {
                official: "Kolumbiai K\xf6zt\xe1rsas\xe1g",
                common: "Kolumbia"
            },
            ita: {
                official: "Repubblica di Colombia",
                common: "Colombia"
            },
            jpn: {
                official: "\u30B3\u30ED\u30F3\u30D3\u30A2\u5171\u548C\u56FD",
                common: "\u30B3\u30ED\u30F3\u30D3\u30A2"
            },
            kor: {
                official: "\uCF5C\uB86C\uBE44\uC544 \uACF5\uD654\uAD6D",
                common: "\uCF5C\uB86C\uBE44\uC544"
            },
            nld: {
                official: "Republiek Colombia",
                common: "Colombia"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0644\u0645\u0628\u06CC\u0627",
                common: "\u06A9\u0644\u0645\u0628\u06CC\u0627"
            },
            pol: {
                official: "Republika Kolumbii",
                common: "Kolumbia"
            },
            por: {
                official: "Rep\xfablica da Col\xf4mbia",
                common: "Col\xf4mbia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043B\u0443\u043C\u0431\u0438\u044F",
                common: "\u041A\u043E\u043B\u0443\u043C\u0431\u0438\u044F"
            },
            slk: {
                official: "Kolumbijsk\xe1 republika",
                common: "Kolumbia"
            },
            spa: {
                official: "Rep\xfablica de Colombia",
                common: "Colombia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043B\u0443\u043C\u0431\u0438\u0458\u0430",
                common: "\u041A\u043E\u043B\u0443\u043C\u0431\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Colombia",
                common: "Colombia"
            },
            tur: {
                official: "Kolombiya Cumhuriyeti",
                common: "Kolombiya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u0644\u0645\u0628\u06CC\u0627",
                common: "\u06A9\u0648\u0644\u0645\u0628\u06CC\u0627"
            },
            zho: {
                official: "\u54E5\u4F26\u6BD4\u4E9A\u5171\u548C\u56FD",
                common: "\u54E5\u4F26\u6BD4\u4E9A"
            }
        },
        latlng: [
            4,
            -72
        ],
        landlocked: false,
        borders: [
            "BRA",
            "ECU",
            "PAN",
            "PER",
            "VEN"
        ],
        area: 1141748,
        demonyms: {
            eng: {
                f: "Colombian",
                m: "Colombian"
            },
            fra: {
                f: "Colombienne",
                m: "Colombien"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/zix9qNFX69E9yZ2M6",
            openStreetMaps: "https://www.openstreetmap.org/relation/120027"
        },
        population: 50882884,
        gini: {
            2019: 51.3
        },
        fifa: "COL",
        car: {
            signs: [
                "CO"
            ],
            side: "right"
        },
        timezones: [
            "UTC-05:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/co.png",
            svg: "https://flagcdn.com/co.svg",
            alt: "The flag of Colombia is composed of three horizontal bands of yellow, blue and red, with the yellow band twice the height of the other two bands."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/co.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/co.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                4.71,
                -74.07
            ]
        }
    },
    {
        name: {
            common: "Greece",
            official: "Hellenic Republic",
            nativeName: {
                ell: {
                    official: "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AE \u0394\u03B7\u03BC\u03BF\u03BA\u03C1\u03B1\u03C4\u03AF\u03B1",
                    common: "\u0395\u03BB\u03BB\u03AC\u03B4\u03B1"
                }
            }
        },
        tld: [
            ".gr"
        ],
        cca2: "GR",
        ccn3: "300",
        cca3: "GRC",
        cioc: "GRE",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "0"
            ]
        },
        capital: [
            "Athens"
        ],
        altSpellings: [
            "GR",
            "Ell\xe1da",
            "Hellenic Republic",
            "\u0395\u03BB\u03BB\u03B7\u03BD\u03B9\u03BA\u03AE \u0394\u03B7\u03BC\u03BF\u03BA\u03C1\u03B1\u03C4\u03AF\u03B1"
        ],
        region: "Europe",
        subregion: "Southern Europe",
        languages: {
            ell: "Greek"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0647\u064A\u0644\u064A\u0646\u064A\u0629",
                common: "\u0627\u0644\u064A\u0648\u0646\u0627\u0646"
            },
            bre: {
                official: "Republik Hellenek",
                common: "Gres"
            },
            ces: {
                official: "\u0158eck\xe1 republika",
                common: "\u0158ecko"
            },
            cym: {
                official: "Hellenic Republic",
                common: "Greece"
            },
            deu: {
                official: "Hellenische Republik",
                common: "Griechenland"
            },
            est: {
                official: "Kreeka Vabariik",
                common: "Kreeka"
            },
            fin: {
                official: "Helleenien tasavalta",
                common: "Kreikka"
            },
            fra: {
                official: "R\xe9publique hell\xe9nique",
                common: "Gr\xe8ce"
            },
            hrv: {
                official: "Helenska Republika",
                common: "Gr\u010Dka"
            },
            hun: {
                official: "G\xf6r\xf6g K\xf6zt\xe1rsas\xe1g",
                common: "G\xf6r\xf6gorsz\xe1g"
            },
            ita: {
                official: "Repubblica ellenica",
                common: "Grecia"
            },
            jpn: {
                official: "\u30AE\u30EA\u30B7\u30E3\u5171\u548C\u56FD",
                common: "\u30AE\u30EA\u30B7\u30E3"
            },
            kor: {
                official: "\uADF8\uB9AC\uC2A4 \uACF5\uD654\uAD6D",
                common: "\uADF8\uB9AC\uC2A4"
            },
            nld: {
                official: "Helleense Republiek",
                common: "Griekenland"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06CC\u0648\u0646\u0627\u0646",
                common: "\u06CC\u0648\u0646\u0627\u0646"
            },
            pol: {
                official: "Republika Grecka",
                common: "Grecja"
            },
            por: {
                official: "Rep\xfablica Hel\xe9nica",
                common: "Gr\xe9cia"
            },
            rus: {
                official: "\u0413\u0440\u0435\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0413\u0440\u0435\u0446\u0438\u044F"
            },
            slk: {
                official: "Gr\xe9cka republika",
                common: "Gre\xe9cko"
            },
            spa: {
                official: "Rep\xfablica Hel\xe9nica",
                common: "Grecia"
            },
            srp: {
                official: "\u0425\u0435\u043B\u0435\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0413\u0440\u0447\u043A\u0430"
            },
            swe: {
                official: "Republiken Grekland",
                common: "Grekland"
            },
            tur: {
                official: "Helen Cumhuriyeti",
                common: "Yunanistan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06C1\u06CC\u0644\u06CC\u0646\u06CC\u06C1",
                common: "\u06CC\u0648\u0646\u0627\u0646"
            },
            zho: {
                official: "\u5E0C\u814A\u5171\u548C\u56FD",
                common: "\u5E0C\u814A"
            }
        },
        latlng: [
            39,
            22
        ],
        landlocked: false,
        borders: [
            "ALB",
            "BGR",
            "TUR",
            "MKD"
        ],
        area: 131990,
        demonyms: {
            eng: {
                f: "Greek",
                m: "Greek"
            },
            fra: {
                f: "Grecque",
                m: "Grec"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/LHGcAvuRyD2iKECC6",
            openStreetMaps: "https://www.openstreetmap.org/relation/192307"
        },
        population: 10715549,
        gini: {
            2018: 32.9
        },
        fifa: "GRE",
        car: {
            signs: [
                "GR"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gr.png",
            svg: "https://flagcdn.com/gr.svg",
            alt: "The flag of Greece is composed of nine equal horizontal bands of blue alternating with white. A blue square bearing a white cross is superimposed in the canton."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gr.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gr.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                37.98,
                23.73
            ]
        },
        postalCode: {
            format: "### ##",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Croatia",
            official: "Republic of Croatia",
            nativeName: {
                hrv: {
                    official: "Republika Hrvatska",
                    common: "Hrvatska"
                }
            }
        },
        tld: [
            ".hr"
        ],
        cca2: "HR",
        ccn3: "191",
        cca3: "HRV",
        cioc: "CRO",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "85"
            ]
        },
        capital: [
            "Zagreb"
        ],
        altSpellings: [
            "HR",
            "Hrvatska",
            "Republic of Croatia",
            "Republika Hrvatska"
        ],
        region: "Europe",
        subregion: "Southeast Europe",
        languages: {
            hrv: "Croatian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0631\u0648\u0627\u062A\u064A\u0627",
                common: "\u0643\u0631\u0648\u0627\u062A\u064A\u0627"
            },
            bre: {
                official: "Republik Kroatia",
                common: "Kroatia"
            },
            ces: {
                official: "Chorvatsk\xe1 republika",
                common: "Chorvatsko"
            },
            cym: {
                official: "Gweriniaeth Croatia",
                common: "Croatia"
            },
            deu: {
                official: "Republik Kroatien",
                common: "Kroatien"
            },
            est: {
                official: "Horvaatia Vabariik",
                common: "Horvaatia"
            },
            fin: {
                official: "Kroatian tasavalta",
                common: "Kroatia"
            },
            fra: {
                official: "R\xe9publique de Croatie",
                common: "Croatie"
            },
            hrv: {
                official: "Republika Hrvatska",
                common: "Hrvatska"
            },
            hun: {
                official: "Horv\xe1t K\xf6zt\xe1rsas\xe1g",
                common: "Horv\xe1torsz\xe1g"
            },
            ita: {
                official: "Repubblica di Croazia",
                common: "Croazia"
            },
            jpn: {
                official: "\u30AF\u30ED\u30A2\u30C1\u30A2\u5171\u548C\u56FD",
                common: "\u30AF\u30ED\u30A2\u30C1\u30A2"
            },
            kor: {
                official: "\uD06C\uB85C\uC544\uD2F0\uC544 \uACF5\uD654\uAD6D",
                common: "\uD06C\uB85C\uC544\uD2F0\uC544"
            },
            nld: {
                official: "Republiek Kroati\xeb",
                common: "Kroati\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0631\u0648\u0627\u0633\u06CC",
                common: "\u06A9\u0631\u064F\u0648\u0627\u0633\u06CC"
            },
            pol: {
                official: "Republika Chorwacji",
                common: "Chorwacja"
            },
            por: {
                official: "Rep\xfablica da Cro\xe1cia",
                common: "Cro\xe1cia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0425\u043E\u0440\u0432\u0430\u0442\u0438\u044F",
                common: "\u0425\u043E\u0440\u0432\u0430\u0442\u0438\u044F"
            },
            slk: {
                official: "Chorv\xe1tska republika",
                common: "Chorv\xe1tsko"
            },
            spa: {
                official: "Rep\xfablica de Croacia",
                common: "Croacia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0425\u0440\u0432\u0430\u0442\u0441\u043A\u0430",
                common: "\u0425\u0440\u0432\u0430\u0442\u0441\u043A\u0430"
            },
            swe: {
                official: "Republiken Kroatien",
                common: "Kroatien"
            },
            tur: {
                official: "H\u0131rvatistan Cumhuriyeti",
                common: "H\u0131rvatistan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0631\u0648\u06CC\u0626\u0634\u0627",
                common: "\u06A9\u0631\u0648\u06CC\u0626\u0634\u0627"
            },
            zho: {
                official: "\u514B\u7F57\u5730\u4E9A\u5171\u548C\u56FD",
                common: "\u514B\u7F57\u5730\u4E9A"
            }
        },
        latlng: [
            45.16666666,
            15.5
        ],
        landlocked: false,
        borders: [
            "BIH",
            "HUN",
            "MNE",
            "SRB",
            "SVN"
        ],
        area: 56594,
        demonyms: {
            eng: {
                f: "Croatian",
                m: "Croatian"
            },
            fra: {
                f: "Croate",
                m: "Croate"
            }
        },
        flag: "\uD83C\uDDED\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/qSG6xTKUmrYpwmGQ6",
            openStreetMaps: "https://www.openstreetmap.org/relation/214885"
        },
        population: 4047200,
        gini: {
            2018: 29.7
        },
        fifa: "CRO",
        car: {
            signs: [
                "HR"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/hr.png",
            svg: "https://flagcdn.com/hr.svg",
            alt: "The flag of Croatia is composed of three equal horizontal bands of red, white and blue, with coat of arms of Croatia superimposed in the center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/hr.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/hr.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                45.8,
                16
            ]
        },
        postalCode: {
            format: "HR-#####",
            regex: "^(?:HR)*(\\d{5})$"
        }
    },
    {
        name: {
            common: "Morocco",
            official: "Kingdom of Morocco",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0645\u063A\u0631\u0628\u064A\u0629",
                    common: "\u0627\u0644\u0645\u063A\u0631\u0628"
                },
                ber: {
                    official: "\u2D5C\u2D30\u2D33\u2D4D\u2D37\u2D49\u2D5C \u2D4F \u2D4D\u2D4E\u2D56\u2D54\u2D49\u2D31",
                    common: "\u2D4D\u2D4E\u2D30\u2D56\u2D54\u2D49\u2D31"
                }
            }
        },
        tld: [
            ".ma",
            "\u0627\u0644\u0645\u063A\u0631\u0628."
        ],
        cca2: "MA",
        ccn3: "504",
        cca3: "MAR",
        cioc: "MAR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MAD: {
                name: "Moroccan dirham",
                symbol: "\u062F.\u0645."
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "12"
            ]
        },
        capital: [
            "Rabat"
        ],
        altSpellings: [
            "MA",
            "Kingdom of Morocco",
            "Al-Mamlakah al-Ma\u0121ribiyah"
        ],
        region: "Africa",
        subregion: "Northern Africa",
        languages: {
            ara: "Arabic",
            ber: "Berber"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0645\u063A\u0631\u0628\u064A\u0629",
                common: "\u0627\u0644\u0645\u063A\u0631\u0628"
            },
            bre: {
                official: "Rouantelezh Maroko",
                common: "Maroko"
            },
            ces: {
                official: "Marock\xe9 kr\xe1lovstv\xed",
                common: "Maroko"
            },
            cym: {
                official: "Kingdom of Morocco",
                common: "Morocco"
            },
            deu: {
                official: "K\xf6nigreich Marokko",
                common: "Marokko"
            },
            est: {
                official: "Maroko Kuningriik",
                common: "Maroko"
            },
            fin: {
                official: "Marokon kuningaskunta",
                common: "Marokko"
            },
            fra: {
                official: "Royaume du Maroc",
                common: "Maroc"
            },
            hrv: {
                official: "Kraljevina Maroko",
                common: "Maroko"
            },
            hun: {
                official: "Marokk\xf3i Kir\xe1lys\xe1g",
                common: "Marokk\xf3"
            },
            ita: {
                official: "Regno del Marocco",
                common: "Marocco"
            },
            jpn: {
                official: "\u30E2\u30ED\u30C3\u30B3\u738B\u56FD",
                common: "\u30E2\u30ED\u30C3\u30B3"
            },
            kor: {
                official: "\uBAA8\uB85C\uCF54 \uC655\uAD6D",
                common: "\uBAA8\uB85C\uCF54"
            },
            nld: {
                official: "Koninkrijk Marokko",
                common: "Marokko"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0645\u0631\u0627\u06A9\u0634",
                common: "\u0645\u0631\u0627\u06A9\u0634"
            },
            pol: {
                official: "Kr\xf3lestwo Maroka\u0144skie",
                common: "Maroko"
            },
            por: {
                official: "Reino de Marrocos",
                common: "Marrocos"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u041C\u0430\u0440\u043E\u043A\u043A\u043E",
                common: "\u041C\u0430\u0440\u043E\u043A\u043A\u043E"
            },
            slk: {
                official: "Marock\xe9 knie\u017Eatstvo",
                common: "Maroko"
            },
            spa: {
                official: "Reino de Marruecos",
                common: "Marruecos"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u041C\u0430\u0440\u043E\u043A\u043E",
                common: "\u041C\u0430\u0440\u043E\u043A\u043E"
            },
            swe: {
                official: "Konungariket Marocko",
                common: "Marocko"
            },
            tur: {
                official: "Fas Krall\u0131\u011F\u0131",
                common: "Fas"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0645\u0631\u0627\u06A9\u0634",
                common: "\u0645\u0631\u0627\u06A9\u0634"
            },
            zho: {
                official: "\u6469\u6D1B\u54E5\u738B\u56FD",
                common: "\u6469\u6D1B\u54E5"
            }
        },
        latlng: [
            32,
            -5
        ],
        landlocked: false,
        borders: [
            "DZA",
            "ESH",
            "ESP"
        ],
        area: 446550,
        demonyms: {
            eng: {
                f: "Moroccan",
                m: "Moroccan"
            },
            fra: {
                f: "Marocaine",
                m: "Marocain"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDE6",
        maps: {
            googleMaps: "https://goo.gl/maps/6oMv3dyBZg3iaXQ5A",
            openStreetMaps: "https://www.openstreetmap.org/relation/3630439"
        },
        population: 36910558,
        gini: {
            2013: 39.5
        },
        fifa: "MAR",
        car: {
            signs: [
                "MA"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ma.png",
            svg: "https://flagcdn.com/ma.svg",
            alt: "The flag of Morocco features a green pentagram \u2014 a five-pointed linear star \u2014 centered on a red field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ma.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ma.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                34.02,
                -6.82
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Algeria",
            official: "People's Democratic Republic of Algeria",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0634\u0639\u0628\u064A\u0629 \u0627\u0644\u062C\u0632\u0627\u0626\u0631\u064A\u0629",
                    common: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
                }
            }
        },
        tld: [
            ".dz",
            "\u0627\u0644\u062C\u0632\u0627\u0626\u0631."
        ],
        cca2: "DZ",
        ccn3: "012",
        cca3: "DZA",
        cioc: "ALG",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            DZD: {
                name: "Algerian dinar",
                symbol: "\u062F.\u062C"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "13"
            ]
        },
        capital: [
            "Algiers"
        ],
        altSpellings: [
            "DZ",
            "Dzayer",
            "Alg\xe9rie"
        ],
        region: "Africa",
        subregion: "Northern Africa",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0634\u0639\u0628\u064A\u0629 \u0627\u0644\u062C\u0632\u0627\u0626\u0631\u064A\u0629",
                common: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
            },
            bre: {
                official: "Republik Aljerian Demokratel ha Poblel",
                common: "Aljeria"
            },
            ces: {
                official: "Al\u017E\xedrsk\xe1 demokratick\xe1 a lidov\xe1 republika",
                common: "Al\u017E\xedrsko"
            },
            cym: {
                official: "Gweriniaeth Ddemocrataidd Pobl Algeria",
                common: "Algeria"
            },
            deu: {
                official: "Demokratische Volksrepublik Algerien",
                common: "Algerien"
            },
            est: {
                official: "Al\u017Eeeria Demokraatlik Rahvavabariik",
                common: "Al\u017Eeeria"
            },
            fin: {
                official: "Algerian demokraattinen kansantasavalta",
                common: "Algeria"
            },
            fra: {
                official: "R\xe9publique d\xe9mocratique et populaire d'Alg\xe9rie",
                common: "Alg\xe9rie"
            },
            hrv: {
                official: "Narodna Demokratska Republika Al\u017Eir",
                common: "Al\u017Eir"
            },
            hun: {
                official: "Alg\xe9riai N\xe9pi Demokratikus K\xf6zt\xe1rsas\xe1g",
                common: "Alg\xe9ria"
            },
            ita: {
                official: "Repubblica popolare democratica di Algeria",
                common: "Algeria"
            },
            jpn: {
                official: "\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2"
            },
            kor: {
                official: "\uC54C\uC81C\uB9AC \uC778\uBBFC \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                common: "\uC54C\uC81C\uB9AC"
            },
            nld: {
                official: "Democratische Volksrepubliek Algerije",
                common: "Algerije"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u062E\u0644\u0642 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631",
                common: "\u0627\u0644\u062C\u0632\u0627\u06CC\u0631"
            },
            pol: {
                official: "Algierska Republika Ludowo-Demokratyczna",
                common: "Algieria"
            },
            por: {
                official: "Rep\xfablica Argelina Democr\xe1tica e Popular",
                common: "Arg\xe9lia"
            },
            rus: {
                official: "\u041D\u0430\u0440\u043E\u0434\u043D\u043E-\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043B\u0436\u0438\u0440",
                common: "\u0410\u043B\u0436\u0438\u0440"
            },
            slk: {
                official: "Al\u017E\xedrska demokratick\xe1 \u013Eudov\xe1 republika",
                common: "Al\u017E\xedrsko"
            },
            spa: {
                official: "Rep\xfablica Argelina Democr\xe1tica y Popular",
                common: "Argelia"
            },
            srp: {
                official: "\u041D\u0430\u0440\u043E\u0434\u043D\u0430 \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043B\u0436\u0438\u0440",
                common: "\u0410\u043B\u0436\u0438\u0440"
            },
            swe: {
                official: "Demokratiska folkrepubliken Algeriet",
                common: "Algeriet"
            },
            tur: {
                official: "Cezayir Demokratik Halk Cumhuriyeti",
                common: "Cezayir"
            },
            urd: {
                official: "\u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0644\u062C\u0632\u0627\u0626\u0631",
                common: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631"
            },
            zho: {
                official: "\u963F\u5C14\u53CA\u5229\u4E9A\u4EBA\u6C11\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u963F\u5C14\u53CA\u5229\u4E9A"
            }
        },
        latlng: [
            28,
            3
        ],
        landlocked: false,
        borders: [
            "TUN",
            "LBY",
            "NER",
            "ESH",
            "MRT",
            "MLI",
            "MAR"
        ],
        area: 2381741,
        demonyms: {
            eng: {
                f: "Algerian",
                m: "Algerian"
            },
            fra: {
                f: "Alg\xe9rienne",
                m: "Alg\xe9rien"
            }
        },
        flag: "\uD83C\uDDE9\uD83C\uDDFF",
        maps: {
            googleMaps: "https://goo.gl/maps/RsAyAfyaiNVb8DpW8",
            openStreetMaps: "https://www.openstreetmap.org/relation/192756"
        },
        population: 44700000,
        gini: {
            2011: 27.6
        },
        fifa: "ALG",
        car: {
            signs: [
                "DZ"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/dz.png",
            svg: "https://flagcdn.com/dz.svg",
            alt: "The flag of Algeria features two equal vertical bands of green and white. A five-pointed red star within a fly-side facing red crescent is centered over the two-color boundary."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/dz.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/dz.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                36.75,
                3.05
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Antarctica",
            official: "Antarctica"
        },
        tld: [
            ".aq"
        ],
        cca2: "AQ",
        ccn3: "010",
        cca3: "ATA",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        idd: {},
        altSpellings: [
            "AQ"
        ],
        region: "Antarctic",
        translations: {
            ara: {
                official: "\u0623\u0646\u062A\u0627\u0631\u062A\u064A\u0643\u0627",
                common: "\u0623\u0646\u062A\u0627\u0631\u062A\u064A\u0643\u0627"
            },
            bre: {
                official: "Antarktika",
                common: "Antarktika"
            },
            ces: {
                official: "Antarktida",
                common: "Antarktida"
            },
            cym: {
                official: "Yr Antarctig",
                common: "Yr Antarctig"
            },
            deu: {
                official: "Antarktika",
                common: "Antarktis"
            },
            est: {
                official: "Antarktika",
                common: "Antarktika"
            },
            fin: {
                official: "Etel\xe4manner",
                common: "Etel\xe4manner"
            },
            fra: {
                official: "Antarctique",
                common: "Antarctique"
            },
            hrv: {
                official: "Antarktika",
                common: "Antarktika"
            },
            hun: {
                official: "Antarktisz",
                common: "Antarktisz"
            },
            ita: {
                official: "Antartide",
                common: "Antartide"
            },
            jpn: {
                official: "\u5357\u6975\u5927\u9678",
                common: "\u5357\u6975"
            },
            kor: {
                official: "\uB0A8\uADF9",
                common: "\uB0A8\uADF9"
            },
            nld: {
                official: "Antarctica",
                common: "Antarctica"
            },
            per: {
                official: "\u062C\u0646\u0648\u0628\u06AF\u0627\u0646",
                common: "\u062C\u0646\u0648\u0628\u06AF\u0627\u0646"
            },
            pol: {
                official: "Antarktyka",
                common: "Antarktyka"
            },
            por: {
                official: "Ant\xe1rtica",
                common: "Ant\xe1rtida"
            },
            rus: {
                official: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0434\u0430",
                common: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0434\u0430"
            },
            slk: {
                official: "Antarkt\xedda",
                common: "Antarkt\xedda"
            },
            spa: {
                official: "Ant\xe1rtida",
                common: "Ant\xe1rtida"
            },
            srp: {
                official: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A",
                common: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A"
            },
            swe: {
                official: "Antarktis",
                common: "Antarktis"
            },
            tur: {
                official: "Antarktika",
                common: "Antarktika"
            },
            urd: {
                official: "\u0627\u0646\u0679\u0627\u0631\u06A9\u0679\u06A9\u0627",
                common: "\u0627\u0646\u0679\u0627\u0631\u06A9\u0679\u06A9\u0627"
            },
            zho: {
                official: "\u5357\u6781\u6D32",
                common: "\u5357\u6781\u6D32"
            }
        },
        latlng: [
            -90,
            0
        ],
        landlocked: false,
        area: 14000000,
        demonyms: {
            eng: {
                f: "Antarctican",
                m: "Antarctican"
            },
            fra: {
                f: "Antarcticaine",
                m: "Antarcticain"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDF6",
        maps: {
            googleMaps: "https://goo.gl/maps/kyBuJriu4itiXank7",
            openStreetMaps: "https://www.openstreetmap.org/node/36966060"
        },
        population: 1000,
        car: {
            signs: [
                ""
            ],
            side: "right"
        },
        timezones: [
            "UTC-03:00",
            "UTC+03:00",
            "UTC+05:00",
            "UTC+06:00",
            "UTC+07:00",
            "UTC+08:00",
            "UTC+10:00",
            "UTC+12:00"
        ],
        continents: [
            "Antarctica"
        ],
        flags: {
            png: "https://flagcdn.com/w320/aq.png",
            svg: "https://flagcdn.com/aq.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/aq.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/aq.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {}
    },
    {
        name: {
            common: "Netherlands",
            official: "Kingdom of the Netherlands",
            nativeName: {
                nld: {
                    official: "Koninkrijk der Nederlanden",
                    common: "Nederland"
                }
            }
        },
        tld: [
            ".nl"
        ],
        cca2: "NL",
        ccn3: "528",
        cca3: "NLD",
        cioc: "NED",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "1"
            ]
        },
        capital: [
            "Amsterdam"
        ],
        altSpellings: [
            "NL",
            "Holland",
            "Nederland",
            "The Netherlands"
        ],
        region: "Europe",
        subregion: "Western Europe",
        languages: {
            nld: "Dutch"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u0647\u0648\u0644\u0646\u062F\u0627",
                common: "\u0647\u0648\u0644\u0646\u062F\u0627"
            },
            bre: {
                official: "Rouantelezh an Izelvroio\xf9",
                common: "Izelvroio\xf9"
            },
            ces: {
                official: "Nizozemsk\xe9 kr\xe1lovstv\xed",
                common: "Nizozemsko"
            },
            cym: {
                official: "Kingdom of the Netherlands",
                common: "Netherlands"
            },
            deu: {
                official: "Niederlande",
                common: "Niederlande"
            },
            est: {
                official: "Madalmaade Kuningriik",
                common: "Holland"
            },
            fin: {
                official: "Alankomaat",
                common: "Alankomaat"
            },
            fra: {
                official: "Pays-Bas",
                common: "Pays-Bas"
            },
            hrv: {
                official: "Holandija",
                common: "Nizozemska"
            },
            hun: {
                official: "Holland Kir\xe1lys\xe1g",
                common: "Hollandia"
            },
            ita: {
                official: "Paesi Bassi",
                common: "Paesi Bassi"
            },
            jpn: {
                official: "\u30AA\u30E9\u30F3\u30C0",
                common: "\u30AA\u30E9\u30F3\u30C0"
            },
            kor: {
                official: "\uB124\uB35C\uB780\uB4DC \uC655\uAD6D",
                common: "\uB124\uB35C\uB780\uB4DC"
            },
            nld: {
                official: "Nederland",
                common: "Nederland"
            },
            per: {
                official: "\u0647\u0644\u0646\u062F",
                common: "\u0647\u0644\u0646\u062F"
            },
            pol: {
                official: "Kr\xf3lestwo Niderland\xf3w",
                common: "Holandia"
            },
            por: {
                official: "Holanda",
                common: "Holanda"
            },
            rus: {
                official: "\u041D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u044B",
                common: "\u041D\u0438\u0434\u0435\u0440\u043B\u0430\u043D\u0434\u044B"
            },
            slk: {
                official: "Holandsk\xe9 kr\xe1\u013Eovstvo",
                common: "Holansko"
            },
            spa: {
                official: "Pa\xedses Bajos",
                common: "Pa\xedses Bajos"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0425\u043E\u043B\u0430\u043D\u0434\u0438\u0458\u0430",
                common: "\u0425\u043E\u043B\u0430\u043D\u0434\u0438\u0458\u0430"
            },
            swe: {
                official: "Nederl\xe4nderna",
                common: "Nederl\xe4nderna"
            },
            tur: {
                official: "Hollanda",
                common: "Hollanda"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0646\u06CC\u062F\u0631\u0644\u06CC\u0646\u0688\u0632",
                common: "\u0646\u06CC\u062F\u0631\u0644\u06CC\u0646\u0688\u0632"
            },
            zho: {
                official: "\u8377\u5170",
                common: "\u8377\u5170"
            }
        },
        latlng: [
            52.5,
            5.75
        ],
        landlocked: false,
        borders: [
            "BEL",
            "DEU"
        ],
        area: 41850,
        demonyms: {
            eng: {
                f: "Dutch",
                m: "Dutch"
            },
            fra: {
                f: "N\xe9erlandaise",
                m: "N\xe9erlandais"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDF1",
        maps: {
            googleMaps: "https://goo.gl/maps/Hv6zQswGhFxoVVBm6",
            openStreetMaps: "https://www.openstreetmap.org/relation/47796"
        },
        population: 16655799,
        gini: {
            2018: 28.1
        },
        fifa: "NED",
        car: {
            signs: [
                "NL"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/nl.png",
            svg: "https://flagcdn.com/nl.svg",
            alt: "The flag of the Netherlands is composed of three equal horizontal bands of red, white and blue."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/nl.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/nl.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                52.35,
                4.92
            ]
        },
        postalCode: {
            format: "#### @@",
            regex: "^(\\d{4}[A-Z]{2})$"
        }
    },
    {
        name: {
            common: "Sudan",
            official: "Republic of the Sudan",
            nativeName: {
                ara: {
                    official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0633\u0648\u062F\u0627\u0646",
                    common: "\u0627\u0644\u0633\u0648\u062F\u0627\u0646"
                },
                eng: {
                    official: "Republic of the Sudan",
                    common: "Sudan"
                }
            }
        },
        tld: [
            ".sd"
        ],
        cca2: "SD",
        ccn3: "729",
        cca3: "SDN",
        cioc: "SUD",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SDG: {
                name: "Sudanese pound",
                symbol: "\u062C.\u0633"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "49"
            ]
        },
        capital: [
            "Khartoum"
        ],
        altSpellings: [
            "SD",
            "Republic of the Sudan",
            "Jumh\u016Br\u012Byat as-S\u016Bd\u0101n"
        ],
        region: "Africa",
        subregion: "Northern Africa",
        languages: {
            ara: "Arabic",
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0633\u0648\u062F\u0627\u0646",
                common: "\u0627\u0644\u0633\u0648\u062F\u0627\u0646"
            },
            bre: {
                official: "Republik Soudan",
                common: "Soudan"
            },
            ces: {
                official: "S\xfad\xe1nsk\xe1 republika",
                common: "S\xfad\xe1n"
            },
            cym: {
                official: "Republic of the Sudan",
                common: "Sudan"
            },
            deu: {
                official: "Republik Sudan",
                common: "Sudan"
            },
            est: {
                official: "Sudaani Vabariik",
                common: "Sudaan"
            },
            fin: {
                official: "Sudanin tasavalta",
                common: "Sudan"
            },
            fra: {
                official: "R\xe9publique du Soudan",
                common: "Soudan"
            },
            hrv: {
                official: "Republika Sudan",
                common: "Sudan"
            },
            hun: {
                official: "Szud\xe1ni K\xf6zt\xe1rsas\xe1g",
                common: "Szud\xe1n"
            },
            ita: {
                official: "Repubblica del Sudan",
                common: "Sudan"
            },
            jpn: {
                official: "\u30B9\u30FC\u30C0\u30F3\u5171\u548C\u56FD",
                common: "\u30B9\u30FC\u30C0\u30F3"
            },
            kor: {
                official: "\uC218\uB2E8 \uACF5\uD654\uAD6D",
                common: "\uC218\uB2E8"
            },
            nld: {
                official: "Republiek Soedan",
                common: "Soedan"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0648\u062F\u0627\u0646",
                common: "\u0633\u0648\u062F\u0627\u0646"
            },
            pol: {
                official: "Republika Sudanu",
                common: "Sudan"
            },
            por: {
                official: "Rep\xfablica do Sud\xe3o",
                common: "Sud\xe3o"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0443\u0434\u0430\u043D",
                common: "\u0421\u0443\u0434\u0430\u043D"
            },
            slk: {
                official: "Sud\xe1nska republika",
                common: "Sud\xe1n"
            },
            spa: {
                official: "Rep\xfablica de Sud\xe1n",
                common: "Sud\xe1n"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0443\u0434\u0430\u043D",
                common: "\u0421\u0443\u0434\u0430\u043D"
            },
            swe: {
                official: "Republiken Sudan",
                common: "Sudan"
            },
            tur: {
                official: "Sudan Cumhuriyeti",
                common: "Sudan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0648\u062F\u0627\u0646",
                common: "\u0633\u0648\u062F\u0627\u0646"
            },
            zho: {
                official: "\u82CF\u4E39\u5171\u548C\u56FD",
                common: "\u82CF\u4E39"
            }
        },
        latlng: [
            15,
            30
        ],
        landlocked: false,
        borders: [
            "CAF",
            "TCD",
            "EGY",
            "ERI",
            "ETH",
            "LBY",
            "SSD"
        ],
        area: 1886068,
        demonyms: {
            eng: {
                f: "Sudanese",
                m: "Sudanese"
            },
            fra: {
                f: "Soudanaise",
                m: "Soudanais"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDE9",
        maps: {
            googleMaps: "https://goo.gl/maps/bNW7YUJCaqR8zcXn7",
            openStreetMaps: "https://www.openstreetmap.org/relation/192789"
        },
        population: 43849269,
        gini: {
            2014: 34.2
        },
        fifa: "SDN",
        car: {
            signs: [
                "SUD"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sd.png",
            svg: "https://flagcdn.com/sd.svg",
            alt: "The flag of Sudan is composed of three equal horizontal bands of red, white and black, with a green isosceles triangle superimposed on the hoist side. The green triangle spans about two-fifth the width of the field with its base on the hoist end."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sd.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sd.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                15.6,
                32.53
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Fiji",
            official: "Republic of Fiji",
            nativeName: {
                eng: {
                    official: "Republic of Fiji",
                    common: "Fiji"
                },
                fij: {
                    official: "Matanitu Tugalala o Viti",
                    common: "Viti"
                },
                hif: {
                    official: "\u0930\u093F\u092A\u092C\u094D\u0932\u093F\u0915 \u0911\u092B \u092B\u0940\u091C\u0940",
                    common: "\u092B\u093F\u091C\u0940"
                }
            }
        },
        tld: [
            ".fj"
        ],
        cca2: "FJ",
        ccn3: "242",
        cca3: "FJI",
        cioc: "FIJ",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            FJD: {
                name: "Fijian dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "79"
            ]
        },
        capital: [
            "Suva"
        ],
        altSpellings: [
            "FJ",
            "Viti",
            "Republic of Fiji",
            "Matanitu ko Viti",
            "Fij\u012B Ga\u1E47ar\u0101jya"
        ],
        region: "Oceania",
        subregion: "Melanesia",
        languages: {
            eng: "English",
            fij: "Fijian",
            hif: "Fiji Hindi"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u0632\u0631 \u0641\u064A\u062C\u064A",
                common: "\u0641\u064A\u062C\u064A"
            },
            bre: {
                official: "Republik Fidji",
                common: "Fidji"
            },
            ces: {
                official: "Republika Fid\u017Eijsk\xfdch ostrov\u016F",
                common: "Fid\u017Ei"
            },
            cym: {
                official: "Republic of Fiji",
                common: "Fiji"
            },
            deu: {
                official: "Republik Fidschi",
                common: "Fidschi"
            },
            est: {
                official: "Fid\u017Ei Vabariik",
                common: "Fid\u017Ei"
            },
            fin: {
                official: "Fid\u017Ein tasavalta",
                common: "Fid\u017Ei"
            },
            fra: {
                official: "R\xe9publique des Fidji",
                common: "Fidji"
            },
            hrv: {
                official: "Republika Fid\u017Ei",
                common: "Fi\u0111i"
            },
            hun: {
                official: "Fidzsi-szigeteki K\xf6zt\xe1rsas\xe1g",
                common: "Fidzsi-szigetek"
            },
            ita: {
                official: "Repubblica di Figi",
                common: "Figi"
            },
            jpn: {
                official: "\u30D5\u30A3\u30B8\u30FC\u5171\u548C\u56FD",
                common: "\u30D5\u30A3\u30B8\u30FC"
            },
            kor: {
                official: "\uD53C\uC9C0 \uACF5\uD654\uAD6D",
                common: "\uD53C\uC9C0"
            },
            nld: {
                official: "Republiek Fiji",
                common: "Fiji"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062C\u0632\u0627\u06CC\u0631 \u0641\u06CC\u062C\u06CC",
                common: "\u0641\u06CC\u062C\u06CC"
            },
            pol: {
                official: "Republika Fid\u017Ci",
                common: "Fid\u017Ci"
            },
            por: {
                official: "Rep\xfablica de Fiji",
                common: "Fiji"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0424\u0438\u0434\u0436\u0438",
                common: "\u0424\u0438\u0434\u0436\u0438"
            },
            slk: {
                official: "Fi\u01C6ijsk\xe1 republika",
                common: "Fi\u01C6i"
            },
            spa: {
                official: "Rep\xfablica de Fiji",
                common: "Fiyi"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0424\u0438\u045F\u0438",
                common: "\u0424\u0438\u045F\u0438"
            },
            swe: {
                official: "Republiken Fiji",
                common: "Fiji"
            },
            tur: {
                official: "Fiji Cumhuriyeti",
                common: "Fiji"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0641\u062C\u06CC",
                common: "\u0641\u062C\u06CC"
            },
            zho: {
                official: "\u6590\u6D4E\u5171\u548C\u56FD",
                common: "\u6590\u6D4E"
            }
        },
        latlng: [
            17.7134,
            178.065
        ],
        landlocked: false,
        area: 18272,
        demonyms: {
            eng: {
                f: "Fijian",
                m: "Fijian"
            },
            fra: {
                f: "Fidjienne",
                m: "Fidjien"
            }
        },
        flag: "\uD83C\uDDEB\uD83C\uDDEF",
        maps: {
            googleMaps: "https://goo.gl/maps/r9fhDqoLZdg1zmE99",
            openStreetMaps: "https://www.openstreetmap.org/relation/571747"
        },
        population: 896444,
        gini: {
            2013: 36.7
        },
        fifa: "FIJ",
        car: {
            signs: [
                "FJI"
            ],
            side: "left"
        },
        timezones: [
            "UTC+12:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/fj.png",
            svg: "https://flagcdn.com/fj.svg",
            alt: "The flag of Fiji has a light blue field. It features the flag of the United Kingdom \u2014 the Union Jack \u2014 in the canton and the shield of the national coat of arms centered in the fly half."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/fj.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/fj.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -18.13,
                178.42
            ]
        }
    },
    {
        name: {
            common: "Liechtenstein",
            official: "Principality of Liechtenstein",
            nativeName: {
                deu: {
                    official: "F\xfcrstentum Liechtenstein",
                    common: "Liechtenstein"
                }
            }
        },
        tld: [
            ".li"
        ],
        cca2: "LI",
        ccn3: "438",
        cca3: "LIE",
        cioc: "LIE",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            CHF: {
                name: "Swiss franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "23"
            ]
        },
        capital: [
            "Vaduz"
        ],
        altSpellings: [
            "LI",
            "Principality of Liechtenstein",
            "F\xfcrstentum Liechtenstein"
        ],
        region: "Europe",
        subregion: "Western Europe",
        languages: {
            deu: "German"
        },
        translations: {
            ara: {
                official: "\u0625\u0645\u0627\u0631\u0629 \u0644\u064A\u062E\u062A\u0646\u0634\u062A\u0627\u064A\u0646",
                common: "\u0644\u064A\u062E\u062A\u0646\u0634\u062A\u0627\u064A\u0646"
            },
            bre: {
                official: "Pri\xf1selezh Liechtenstein",
                common: "Liechtenstein"
            },
            ces: {
                official: "Kn\xed\u017Eectv\xed Lichten\u0161tejnsk\xe9",
                common: "Lichten\u0161tejnsko"
            },
            cym: {
                official: "Principality of Liechtenstein",
                common: "Liechtenstein"
            },
            deu: {
                official: "F\xfcrstentum Liechtenstein",
                common: "Liechtenstein"
            },
            est: {
                official: "Liechtensteini V\xfcrstiriik",
                common: "Liechtenstein"
            },
            fin: {
                official: "Liechensteinin ruhtinaskunta",
                common: "Liechenstein"
            },
            fra: {
                official: "Principaut\xe9 du Liechtenstein",
                common: "Liechtenstein"
            },
            hrv: {
                official: "Kne\u017Eevina Lihten\u0161tajn",
                common: "Lihten\u0161tajn"
            },
            hun: {
                official: "Liechtensteini Hercegs\xe9g",
                common: "Liechtenstein"
            },
            ita: {
                official: "Principato del Liechtenstein",
                common: "Liechtenstein"
            },
            jpn: {
                official: "\u30EA\u30D2\u30C6\u30F3\u30B7\u30E5\u30BF\u30A4\u30F3\u516C\u56FD",
                common: "\u30EA\u30D2\u30C6\u30F3\u30B7\u30E5\u30BF\u30A4\u30F3"
            },
            kor: {
                official: "\uB9AC\uD788\uD150\uC288\uD0C0\uC778 \uACF5\uAD6D",
                common: "\uB9AC\uD788\uD150\uC288\uD0C0\uC778"
            },
            nld: {
                official: "Vorstendom Liechtenstein",
                common: "Liechtenstein"
            },
            per: {
                official: "\u0634\u0627\u0647\u0632\u0627\u062F\u0647\u200C\u0646\u0634\u06CC\u0646 \u0644\u06CC\u062E\u062A\u0646\u200C\u0627\u0634\u062A\u0627\u06CC\u0646",
                common: "\u0644\u06CC\u062E\u062A\u0646\u200C\u0627\u0634\u062A\u0627\u06CC\u0646"
            },
            pol: {
                official: "Ksi\u0119stwo Liechtensteinu",
                common: "Liechtenstein"
            },
            por: {
                official: "Principado de Liechtenstein",
                common: "Liechtenstein"
            },
            rus: {
                official: "\u041A\u043D\u044F\u0436\u0435\u0441\u0442\u0432\u043E \u041B\u0438\u0445\u0442\u0435\u043D\u0448\u0442\u0435\u0439\u043D",
                common: "\u041B\u0438\u0445\u0442\u0435\u043D\u0448\u0442\u0435\u0439\u043D"
            },
            slk: {
                official: "Lichten\u0161tajnsk\xe9 knie\u017Eatstvo",
                common: "Lichten\u0161tajnsko"
            },
            spa: {
                official: "Principado de Liechtenstein",
                common: "Liechtenstein"
            },
            srp: {
                official: "\u041A\u043D\u0435\u0436\u0435\u0432\u0438\u043D\u0430 \u041B\u0438\u0445\u0442\u0435\u043D\u0448\u0442\u0430\u0458\u043D",
                common: "\u041B\u0438\u0445\u0442\u0435\u043D\u0448\u0442\u0430\u0458\u043D"
            },
            swe: {
                official: "Furstend\xf6met Liechtenstein",
                common: "Liechtenstein"
            },
            tur: {
                official: "Lihten\u015Ftayn Prensli\u011Fi",
                common: "Lihten\u015Ftayn"
            },
            urd: {
                official: "\u0627\u0645\u0627\u0631\u0627\u062A \u0644\u06CC\u062E\u062A\u06CC\u0646\u0633\u062A\u0627\u0626\u0646",
                common: "\u0644\u06CC\u062E\u062A\u06CC\u0646\u0633\u062A\u0627\u0626\u0646"
            },
            zho: {
                official: "\u5217\u652F\u6566\u58EB\u767B\u516C\u56FD",
                common: "\u5217\u652F\u6566\u58EB\u767B"
            }
        },
        latlng: [
            47.26666666,
            9.53333333
        ],
        landlocked: true,
        borders: [
            "AUT",
            "CHE"
        ],
        area: 160,
        demonyms: {
            eng: {
                f: "Liechtensteiner",
                m: "Liechtensteiner"
            },
            fra: {
                f: "Liechtensteinoise",
                m: "Liechtensteinois"
            }
        },
        flag: "\uD83C\uDDF1\uD83C\uDDEE",
        maps: {
            googleMaps: "https://goo.gl/maps/KNuHeiJzAPodwM7y6",
            openStreetMaps: "https://www.openstreetmap.org/relation/1155955"
        },
        population: 38137,
        fifa: "LIE",
        car: {
            signs: [
                "FL"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/li.png",
            svg: "https://flagcdn.com/li.svg",
            alt: "The flag of Liechtenstein is composed of two equal horizontal bands of blue and red, with a golden-yellow crown on the hoist side of the blue band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/li.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/li.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                47.13,
                9.52
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Nepal",
            official: "Federal Democratic Republic of Nepal",
            nativeName: {
                nep: {
                    official: "\u0928\u0947\u092A\u093E\u0932 \u0938\u0902\u0918\u0940\u092F \u0932\u094B\u0915\u0924\u093E\u0928\u094D\u0924\u094D\u0930\u093F\u0915 \u0917\u0923\u0924\u0928\u094D\u0924\u094D\u0930",
                    common: "\u0928\u0947\u092A\u093E\u0932"
                }
            }
        },
        tld: [
            ".np"
        ],
        cca2: "NP",
        ccn3: "524",
        cca3: "NPL",
        cioc: "NEP",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            NPR: {
                name: "Nepalese rupee",
                symbol: "\u20A8"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "77"
            ]
        },
        capital: [
            "Kathmandu"
        ],
        altSpellings: [
            "NP",
            "Federal Democratic Republic of Nepal",
            "Lokt\u0101ntrik Ganatantra Nep\u0101l"
        ],
        region: "Asia",
        subregion: "Southern Asia",
        languages: {
            nep: "Nepali"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0646\u064A\u0628\u0627\u0644 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                common: "\u0646\u064A\u0628\u0627\u0644"
            },
            bre: {
                official: "Republik Demokratel Kevreadel Nepal",
                common: "Nepal"
            },
            ces: {
                official: "Federativn\xed demokratick\xe1 republika Nep\xe1l",
                common: "Nep\xe1l"
            },
            cym: {
                official: "Federal Democratic Republic of Nepal",
                common: "Nepal"
            },
            deu: {
                official: "Demokratische Bundesrepublik Nepal",
                common: "Nepal"
            },
            est: {
                official: "Nepali Demokraatlik Liitvabariik",
                common: "Nepal"
            },
            fin: {
                official: "Nepalin demokraattinen liittotasavalta",
                common: "Nepal"
            },
            fra: {
                official: "R\xe9publique du N\xe9pal",
                common: "N\xe9pal"
            },
            hrv: {
                official: "Savezna Demokratska Republika Nepal",
                common: "Nepal"
            },
            hun: {
                official: "Nep\xe1li Sz\xf6vets\xe9gi Demokratikus K\xf6zt\xe1rsas\xe1g",
                common: "Nep\xe1l"
            },
            ita: {
                official: "Repubblica federale democratica del Nepal",
                common: "Nepal"
            },
            jpn: {
                official: "\u30CD\u30D1\u30FC\u30EB\u9023\u90A6\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u30CD\u30D1\u30FC\u30EB"
            },
            kor: {
                official: "\uB124\uD314 \uC5F0\uBC29 \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                common: "\uB124\uD314"
            },
            nld: {
                official: "Federale Democratische Republiek Nepal",
                common: "Nepal"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u0644 \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u0646\u067E\u0627\u0644",
                common: "\u0646\u067E\u0627\u0644"
            },
            pol: {
                official: "Federalna Demokratyczna Republika Nepalu",
                common: "Nepal"
            },
            por: {
                official: "Rep\xfablica Democr\xe1tica Federal do Nepal",
                common: "Nepal"
            },
            rus: {
                official: "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0435\u043F\u0430\u043B",
                common: "\u041D\u0435\u043F\u0430\u043B"
            },
            slk: {
                official: "Nep\xe1lska federat\xedvna demokratick\xe1 republika",
                common: "Nep\xe1l"
            },
            spa: {
                official: "Rep\xfablica Democr\xe1tica Federal de Nepal",
                common: "Nepal"
            },
            srp: {
                official: "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0435\u043F\u0430\u043B",
                common: "\u041D\u0435\u043F\u0430\u043B"
            },
            swe: {
                official: "Demokratiska f\xf6rbundsrepubliken Nepal",
                common: "Nepal"
            },
            tur: {
                official: "Nepal Federal Demokratik Cumhuriyeti",
                common: "Nepal"
            },
            urd: {
                official: "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u06CC\u067E\u0627\u0644",
                common: "\u0646\u06CC\u067E\u0627\u0644"
            },
            zho: {
                official: "\u5C3C\u6CCA\u5C14\u8054\u90A6\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u5C3C\u6CCA\u5C14"
            }
        },
        latlng: [
            28,
            84
        ],
        landlocked: true,
        borders: [
            "CHN",
            "IND"
        ],
        area: 147181,
        demonyms: {
            eng: {
                f: "Nepalese",
                m: "Nepalese"
            },
            fra: {
                f: "N\xe9palaise",
                m: "N\xe9palais"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDF5",
        maps: {
            googleMaps: "https://goo.gl/maps/UMj2zpbQp7B5c3yT7",
            openStreetMaps: "https://www.openstreetmap.org/relation/184633"
        },
        population: 29136808,
        gini: {
            2010: 32.8
        },
        fifa: "NEP",
        car: {
            signs: [
                "NEP"
            ],
            side: "left"
        },
        timezones: [
            "UTC+05:45"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/np.png",
            svg: "https://flagcdn.com/np.svg",
            alt: "The flag of Nepal is the world's only non-quadrilateral flag of a sovereign country. It takes the shape of two adjoining right-angled triangles and has a crimson red field with deep blue edges. Within the smaller upper triangle is an emblem of the upper half of a white sun resting on an upward facing white crescent. The lower triangle bears a white sun with twelve rays."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/np.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/np.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                27.72,
                85.32
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Puerto Rico",
            official: "Commonwealth of Puerto Rico",
            nativeName: {
                eng: {
                    official: "Commonwealth of Puerto Rico",
                    common: "Puerto Rico"
                },
                spa: {
                    official: "Estado Libre Asociado de Puerto Rico",
                    common: "Puerto Rico"
                }
            }
        },
        tld: [
            ".pr"
        ],
        cca2: "PR",
        ccn3: "630",
        cca3: "PRI",
        cioc: "PUR",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "787",
                "939"
            ]
        },
        capital: [
            "San Juan"
        ],
        altSpellings: [
            "PR",
            "Commonwealth of Puerto Rico",
            "Estado Libre Asociado de Puerto Rico"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English",
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u0643\u0648\u0645\u0646\u0648\u0644\u062B \u0628\u0648\u064A\u0631\u062A\u0648\u0631\u064A\u0643\u0648",
                common: "\u0628\u0648\u064A\u0631\u062A\u0648\u0631\u064A\u0643\u0648"
            },
            bre: {
                official: "Kenglad Puerto Rico",
                common: "Puerto Rico"
            },
            ces: {
                official: "Portoriko",
                common: "Portoriko"
            },
            cym: {
                official: "Commonwealth of Puerto Rico",
                common: "Puerto Rico"
            },
            deu: {
                official: "Freistaat Puerto Rico",
                common: "Puerto Rico"
            },
            est: {
                official: "Puerto Rico \xdchendus",
                common: "Puerto Rico"
            },
            fin: {
                official: "Puerto Rico",
                common: "Puerto Rico"
            },
            fra: {
                official: "Porto Rico",
                common: "Porto Rico"
            },
            hrv: {
                official: "Zajednica Puerto Rico",
                common: "Portoriko"
            },
            hun: {
                official: "Puerto Rico",
                common: "Puerto Rico"
            },
            ita: {
                official: "Commonwealth di Porto Rico",
                common: "Porto Rico"
            },
            jpn: {
                official: "\u30D7\u30A8\u30EB\u30C8\u30EA\u30B3\u306E\u30B3\u30E2\u30F3\u30A6\u30A7\u30EB\u30B9",
                common: "\u30D7\u30A8\u30EB\u30C8\u30EA\u30B3"
            },
            kor: {
                official: "\uD478\uC5D0\uB974\uD1A0\uB9AC\uCF54",
                common: "\uD478\uC5D0\uB974\uD1A0\uB9AC\uCF54"
            },
            nld: {
                official: "Gemenebest van Puerto Rico",
                common: "Puerto Rico"
            },
            per: {
                official: "\u0642\u0644\u0645\u0631\u0648 \u0647\u0645\u0633\u0648\u062F \u067E\u0648\u0631\u062A\u0648\u0631\u06CC\u06A9\u0648",
                common: "\u067E\u0648\u0631\u062A\u0648\u0631\u06CC\u06A9\u0648"
            },
            pol: {
                official: "Wolne Stowarzyszone Pa\u0144stwo Portoryko",
                common: "Portoryko"
            },
            por: {
                official: "Commonwealth of Puerto Rico",
                common: "Porto Rico"
            },
            rus: {
                official: "\u0421\u043E\u0434\u0440\u0443\u0436\u0435\u0441\u0442\u0432\u043E \u041F\u0443\u044D\u0440\u0442\u043E-\u0420\u0438\u043A\u043E",
                common: "\u041F\u0443\u044D\u0440\u0442\u043E-\u0420\u0438\u043A\u043E"
            },
            slk: {
                official: "Portorick\xe9 spolo\u010Denstvo",
                common: "Portoriko"
            },
            spa: {
                official: "Asociado de Puerto Rico",
                common: "Puerto Rico"
            },
            srp: {
                official: "\u041A\u043E\u043C\u043E\u043D\u0432\u0435\u043B\u0442 \u041F\u043E\u0440\u0442\u043E\u0440\u0438\u043A\u043E",
                common: "\u041F\u043E\u0440\u0442\u043E\u0440\u0438\u043A\u043E"
            },
            swe: {
                official: "Puerto Rico",
                common: "Puerto Rico"
            },
            tur: {
                official: "Porto Riko Toplulu\u011Fu",
                common: "Porto Riko"
            },
            urd: {
                official: " \u062F\u0648\u0644\u062A\u0650 \u0645\u0634\u062A\u0631\u06A9\u06C1 \u067E\u0648\u0631\u0679\u0648 \u0631\u06CC\u06A9\u0648",
                common: "\u067E\u0648\u0631\u0679\u0648 \u0631\u06CC\u06A9\u0648"
            },
            zho: {
                official: "\u6CE2\u591A\u9ECE\u5404\u8054\u90A6",
                common: "\u6CE2\u591A\u9ECE\u5404"
            }
        },
        latlng: [
            18.25,
            -66.5
        ],
        landlocked: false,
        area: 8870,
        demonyms: {
            eng: {
                f: "Puerto Rican",
                m: "Puerto Rican"
            },
            fra: {
                f: "Portoricaine",
                m: "Portoricain"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/sygfDbtwn389wu8x5",
            openStreetMaps: "https://www.openstreetmap.org/relation/4422604"
        },
        population: 3194034,
        fifa: "PUR",
        car: {
            signs: [
                "USA"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/pr.png",
            svg: "https://flagcdn.com/pr.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                18.47,
                -66.12
            ]
        },
        postalCode: {
            format: "#####-####",
            regex: "^(\\d{9})$"
        }
    },
    {
        name: {
            common: "Georgia",
            official: "Georgia",
            nativeName: {
                kat: {
                    official: "\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD",
                    common: "\u10E1\u10D0\u10E5\u10D0\u10E0\u10D7\u10D5\u10D4\u10DA\u10DD"
                }
            }
        },
        tld: [
            ".ge"
        ],
        cca2: "GE",
        ccn3: "268",
        cca3: "GEO",
        cioc: "GEO",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            GEL: {
                name: "lari",
                symbol: "\u20BE"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "95"
            ]
        },
        capital: [
            "Tbilisi"
        ],
        altSpellings: [
            "GE",
            "Sakartvelo"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            kat: "Georgian"
        },
        translations: {
            ara: {
                official: "\u062C\u0648\u0631\u062C\u064A\u0627",
                common: "\u062C\u0648\u0631\u062C\u064A\u0627"
            },
            bre: {
                official: "Republik Jorjia",
                common: "Jorjia"
            },
            ces: {
                official: "Gruzie",
                common: "Gruzie"
            },
            cym: {
                official: "Georgia",
                common: "Georgia"
            },
            deu: {
                official: "Georgien",
                common: "Georgien"
            },
            est: {
                official: "Gruusia",
                common: "Gruusia"
            },
            fin: {
                official: "Georgia",
                common: "Georgia"
            },
            fra: {
                official: "R\xe9publique de G\xe9orgie",
                common: "G\xe9orgie"
            },
            hrv: {
                official: "Gruzija",
                common: "Gruzija"
            },
            hun: {
                official: "Gr\xfazia",
                common: "Gr\xfazia"
            },
            ita: {
                official: "Georgia",
                common: "Georgia"
            },
            jpn: {
                official: "\u30B0\u30EB\u30B8\u30A2",
                common: "\u30B0\u30EB\u30B8\u30A2"
            },
            kor: {
                official: "\uC870\uC9C0\uC544",
                common: "\uC870\uC9C0\uC544"
            },
            nld: {
                official: "Georgia",
                common: "Georgi\xeb"
            },
            per: {
                official: "\u06AF\u0631\u062C\u0633\u062A\u0627\u0646",
                common: "\u06AF\u0631\u062C\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Gruzja",
                common: "Gruzja"
            },
            por: {
                official: "Georgia",
                common: "Ge\xf3rgia"
            },
            rus: {
                official: "\u0413\u0440\u0443\u0437\u0438\u044F",
                common: "\u0413\u0440\u0443\u0437\u0438\u044F"
            },
            slk: {
                official: "Gruz\xednsko",
                common: "Gruz\xednsko"
            },
            spa: {
                official: "Georgia",
                common: "Georgia"
            },
            srp: {
                official: "\u0413\u0440\u0443\u0437\u0438\u0458\u0430",
                common: "\u0413\u0440\u0443\u0437\u0438\u0458\u0430"
            },
            swe: {
                official: "Georgien",
                common: "Georgien"
            },
            tur: {
                official: "G\xfcrcistan",
                common: "G\xfcrcistan"
            },
            urd: {
                official: "\u062C\u0627\u0631\u062C\u06CC\u0627",
                common: "\u062C\u0627\u0631\u062C\u06CC\u0627"
            },
            zho: {
                official: "\u683C\u9C81\u5409\u4E9A",
                common: "\u683C\u9C81\u5409\u4E9A"
            }
        },
        latlng: [
            42,
            43.5
        ],
        landlocked: false,
        borders: [
            "ARM",
            "AZE",
            "RUS",
            "TUR"
        ],
        area: 69700,
        demonyms: {
            eng: {
                f: "Georgian",
                m: "Georgian"
            },
            fra: {
                f: "G\xe9orgienne",
                m: "G\xe9orgien"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/bvCaGBePR1ZEDK5cA",
            openStreetMaps: "https://www.openstreetmap.org/relation/28699"
        },
        population: 3714000,
        gini: {
            2019: 35.9
        },
        fifa: "GEO",
        car: {
            signs: [
                "GE"
            ],
            side: "right"
        },
        timezones: [
            "UTC+04:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ge.png",
            svg: "https://flagcdn.com/ge.svg",
            alt: "The flag of Georgia has a white field with a large centered red cross that extends to the edges and divides the field into four quarters. A small red Bolnur-Katskhuri cross is centered in each quarter."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ge.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ge.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                41.68,
                44.83
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Pakistan",
            official: "Islamic Republic of Pakistan",
            nativeName: {
                eng: {
                    official: "Islamic Republic of Pakistan",
                    common: "Pakistan"
                },
                urd: {
                    official: "\u0627\u0633\u0644\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C2 \u067E\u0627\u0643\u0633\u062A\u0627\u0646",
                    common: "\u067E\u0627\u0643\u0633\u062A\u0627\u0646"
                }
            }
        },
        tld: [
            ".pk"
        ],
        cca2: "PK",
        ccn3: "586",
        cca3: "PAK",
        cioc: "PAK",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            PKR: {
                name: "Pakistani rupee",
                symbol: "\u20A8"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "2"
            ]
        },
        capital: [
            "Islamabad"
        ],
        altSpellings: [
            "PK",
            "P\u0101kist\u0101n",
            "Islamic Republic of Pakistan",
            "Isl\u0101m\u012B Jumh\u016Briya'eh P\u0101kist\u0101n"
        ],
        region: "Asia",
        subregion: "Southern Asia",
        languages: {
            eng: "English",
            urd: "Urdu"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0627\u0643\u0633\u062A\u0627\u0646 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A\u0629",
                common: "\u0628\u0627\u0643\u0633\u062A\u0627\u0646"
            },
            bre: {
                official: "Republik islamek Pakistan",
                common: "Pakistan"
            },
            ces: {
                official: "P\xe1kist\xe1nsk\xe1 isl\xe1msk\xe1 republika",
                common: "P\xe1kist\xe1n"
            },
            cym: {
                official: "Islamic Republic of Pakistan",
                common: "Pakistan"
            },
            deu: {
                official: "Islamische Republik Pakistan",
                common: "Pakistan"
            },
            est: {
                official: "Pakistani Islamivabariik",
                common: "Pakistan"
            },
            fin: {
                official: "Pakistanin islamilainen tasavalta",
                common: "Pakistan"
            },
            fra: {
                official: "R\xe9publique islamique du Pakistan",
                common: "Pakistan"
            },
            hrv: {
                official: "Islamska Republika Pakistan",
                common: "Pakistan"
            },
            hun: {
                official: "Pakiszt\xe1n",
                common: "Pakiszt\xe1n"
            },
            ita: {
                official: "Repubblica islamica del Pakistan",
                common: "Pakistan"
            },
            jpn: {
                official: "\u30D1\u30AD\u30B9\u30BF\u30F3",
                common: "\u30D1\u30AD\u30B9\u30BF\u30F3"
            },
            kor: {
                official: "\uD30C\uD0A4\uC2A4\uD0C4 \uC774\uC2AC\uB78C \uACF5\uD654\uAD6D",
                common: "\uD30C\uD0A4\uC2A4\uD0C4"
            },
            nld: {
                official: "Islamitische Republiek Pakistan",
                common: "Pakistan"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u067E\u0627\u06A9\u0633\u062A\u0627\u0646",
                common: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Islamska Republika Pakistanu",
                common: "Pakistan"
            },
            por: {
                official: "Rep\xfablica Isl\xe2mica do Paquist\xe3o",
                common: "Paquist\xe3o"
            },
            rus: {
                official: "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043A\u0438\u0441\u0442\u0430\u043D",
                common: "\u041F\u0430\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            slk: {
                official: "Pakistansk\xe1 islamsk\xe1 republika",
                common: "Pakistan"
            },
            spa: {
                official: "Rep\xfablica Isl\xe1mica de Pakist\xe1n",
                common: "Pakist\xe1n"
            },
            srp: {
                official: "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043A\u0438\u0441\u0442\u0430\u043D",
                common: "\u041F\u0430\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            swe: {
                official: "Islamiska republiken Pakistan",
                common: "Pakistan"
            },
            tur: {
                official: "Pakistan \u0130slam Cumhuriyeti",
                common: "Pakistan"
            },
            urd: {
                official: "\u0627\u0633\u0644\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0627\u06A9\u0633\u062A\u0627\u0646",
                common: "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646"
            },
            zho: {
                official: "\u5DF4\u57FA\u65AF\u5766\u4F0A\u65AF\u5170\u5171\u548C\u56FD",
                common: "\u5DF4\u57FA\u65AF\u5766"
            }
        },
        latlng: [
            30,
            70
        ],
        landlocked: false,
        borders: [
            "AFG",
            "CHN",
            "IND",
            "IRN"
        ],
        area: 881912,
        demonyms: {
            eng: {
                f: "Pakistani",
                m: "Pakistani"
            },
            fra: {
                f: "Pakistanaise",
                m: "Pakistanais"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDF0",
        maps: {
            googleMaps: "https://goo.gl/maps/5LYujdfR5yLUXoERA",
            openStreetMaps: "https://www.openstreetmap.org/relation/307573"
        },
        population: 220892331,
        gini: {
            2018: 31.6
        },
        fifa: "PAK",
        car: {
            signs: [
                "PK"
            ],
            side: "left"
        },
        timezones: [
            "UTC+05:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/pk.png",
            svg: "https://flagcdn.com/pk.svg",
            alt: "The flag of Pakistan is composed of a white vertical band on its hoist side that takes up about one-fourth the width of the field and a dark green rectangular area that spans the rest of the field. A white fly-side facing crescent and five-pointed star are centered in the dark green area."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/pk.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/pk.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                33.68,
                73.05
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Monaco",
            official: "Principality of Monaco",
            nativeName: {
                fra: {
                    official: "Principaut\xe9 de Monaco",
                    common: "Monaco"
                }
            }
        },
        tld: [
            ".mc"
        ],
        cca2: "MC",
        ccn3: "492",
        cca3: "MCO",
        cioc: "MON",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "77"
            ]
        },
        capital: [
            "Monaco"
        ],
        altSpellings: [
            "MC",
            "Principality of Monaco",
            "Principaut\xe9 de Monaco"
        ],
        region: "Europe",
        subregion: "Western Europe",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0625\u0645\u0627\u0631\u0629 \u0645\u0648\u0646\u0627\u0643\u0648",
                common: "\u0645\u0648\u0646\u0627\u0643\u0648"
            },
            bre: {
                official: "Pri\xf1selezh Monako",
                common: "Monako"
            },
            ces: {
                official: "Monack\xe9 kn\xed\u017Eectv\xed",
                common: "Monako"
            },
            cym: {
                official: "Principality of Monaco",
                common: "Monaco"
            },
            deu: {
                official: "F\xfcrstentum Monaco",
                common: "Monaco"
            },
            est: {
                official: "Monaco V\xfcrstiriik",
                common: "Monaco"
            },
            fin: {
                official: "Monacon ruhtinaskunta",
                common: "Monaco"
            },
            fra: {
                official: "Principaut\xe9 de Monaco",
                common: "Monaco"
            },
            hrv: {
                official: "Kne\u017Eevina Monako",
                common: "Monako"
            },
            hun: {
                official: "Monac\xf3i Hercegs\xe9g",
                common: "Monaco"
            },
            ita: {
                official: "Principato di Monaco",
                common: "Principato di Monaco"
            },
            jpn: {
                official: "\u30E2\u30CA\u30B3\u516C\u56FD",
                common: "\u30E2\u30CA\u30B3"
            },
            kor: {
                official: "\uBAA8\uB098\uCF54 \uACF5\uAD6D",
                common: "\uBAA8\uB098\uCF54"
            },
            nld: {
                official: "Vorstendom Monaco",
                common: "Monaco"
            },
            per: {
                official: "\u0634\u0627\u0647\u0632\u0627\u062F\u0647\u200C\u0646\u0634\u06CC\u0646 \u0645\u0648\u0646\u0627\u06A9\u0648",
                common: "\u0645\u0648\u0646\u0627\u06A9\u0648"
            },
            pol: {
                official: "Ksi\u0119stwo Monako",
                common: "Monako"
            },
            por: {
                official: "Principado do M\xf3naco",
                common: "M\xf3naco"
            },
            rus: {
                official: "\u041A\u043D\u044F\u0436\u0435\u0441\u0442\u0432\u043E \u041C\u043E\u043D\u0430\u043A\u043E",
                common: "\u041C\u043E\u043D\u0430\u043A\u043E"
            },
            slk: {
                official: "Monack\xe9 knie\u017Eatstvo",
                common: "Monako"
            },
            spa: {
                official: "Principado de M\xf3naco",
                common: "M\xf3naco"
            },
            srp: {
                official: "\u041A\u043D\u0435\u0436\u0435\u0432\u0438\u043D\u0430 \u041C\u043E\u043D\u0430\u043A\u043E",
                common: "\u041C\u043E\u043D\u0430\u043A\u043E"
            },
            swe: {
                official: "Furstend\xf6met Monaco",
                common: "Monaco"
            },
            tur: {
                official: "Monako Prensli\u011Fi",
                common: "Monako"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0646\u0627\u06A9\u0648",
                common: "\u0645\u0648\u0646\u0627\u06A9\u0648"
            },
            zho: {
                official: "\u6469\u7EB3\u54E5\u516C\u56FD",
                common: "\u6469\u7EB3\u54E5"
            }
        },
        latlng: [
            43.73333333,
            7.4
        ],
        landlocked: false,
        borders: [
            "FRA"
        ],
        area: 2.02,
        demonyms: {
            eng: {
                f: "Monegasque",
                m: "Monegasque"
            },
            fra: {
                f: "Mon\xe9gasque",
                m: "Mon\xe9gasque"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDE8",
        maps: {
            googleMaps: "https://goo.gl/maps/DGpndDot28bYdXYn7",
            openStreetMaps: "https://www.openstreetmap.org/relation/1124039"
        },
        population: 39244,
        car: {
            signs: [
                "MC"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mc.png",
            svg: "https://flagcdn.com/mc.svg",
            alt: "The flag of Monaco is composed of two equal horizontal bands of red and white."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mc.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mc.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                43.73,
                7.42
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Botswana",
            official: "Republic of Botswana",
            nativeName: {
                eng: {
                    official: "Republic of Botswana",
                    common: "Botswana"
                },
                tsn: {
                    official: "Lefatshe la Botswana",
                    common: "Botswana"
                }
            }
        },
        tld: [
            ".bw"
        ],
        cca2: "BW",
        ccn3: "072",
        cca3: "BWA",
        cioc: "BOT",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BWP: {
                name: "Botswana pula",
                symbol: "P"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "67"
            ]
        },
        capital: [
            "Gaborone"
        ],
        altSpellings: [
            "BW",
            "Republic of Botswana",
            "Lefatshe la Botswana"
        ],
        region: "Africa",
        subregion: "Southern Africa",
        languages: {
            eng: "English",
            tsn: "Tswana"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0648\u062A\u0633\u0648\u0627\u0646\u0627",
                common: "\u0628\u0648\u062A\u0633\u0648\u0627\u0646\u0627"
            },
            bre: {
                official: "Republik Botswana",
                common: "Botswana"
            },
            ces: {
                official: "Botswansk\xe1 republika",
                common: "Botswana"
            },
            cym: {
                official: "Republic of Botswana",
                common: "Botswana"
            },
            deu: {
                official: "Republik Botsuana",
                common: "Botswana"
            },
            est: {
                official: "Botswana Vabariik",
                common: "Botswana"
            },
            fin: {
                official: "Botswanan tasavalta",
                common: "Botswana"
            },
            fra: {
                official: "R\xe9publique du Botswana",
                common: "Botswana"
            },
            hrv: {
                official: "Republika Bocvana",
                common: "Bocvana"
            },
            hun: {
                official: "Botswanai K\xf6zt\xe1rsas\xe1g",
                common: "Botswana"
            },
            ita: {
                official: "Repubblica del Botswana",
                common: "Botswana"
            },
            jpn: {
                official: "\u30DC\u30C4\u30EF\u30CA\u5171\u548C\u56FD",
                common: "\u30DC\u30C4\u30EF\u30CA"
            },
            kor: {
                official: "\uBCF4\uCE20\uC640\uB098 \uACF5\uD654\uAD6D",
                common: "\uBCF4\uCE20\uC640\uB098"
            },
            nld: {
                official: "Republiek Botswana",
                common: "Botswana"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0648\u062A\u0633\u0648\u0627\u0646\u0627",
                common: "\u0628\u0648\u062A\u0633\u0648\u0627\u0646\u0627"
            },
            pol: {
                official: "Republika Botswany",
                common: "Botswana"
            },
            por: {
                official: "Rep\xfablica do Botswana",
                common: "Botswana"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u043E\u0442\u0441\u0432\u0430\u043D\u0430",
                common: "\u0411\u043E\u0442\u0441\u0432\u0430\u043D\u0430"
            },
            slk: {
                official: "Botswansk\xe1 republika",
                common: "Botswana"
            },
            spa: {
                official: "Rep\xfablica de Botswana",
                common: "Botswana"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u043E\u0446\u0432\u0430\u043D\u0430",
                common: "\u0411\u043E\u0446\u0432\u0430\u043D\u0430"
            },
            swe: {
                official: "Republiken Botswana",
                common: "Botswana"
            },
            tur: {
                official: "Botsvana Cumhuriyeti",
                common: "Botsvana"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0648\u0679\u0633\u0648\u0627\u0646\u0627",
                common: "\u0628\u0648\u0679\u0633\u0648\u0627\u0646\u0627"
            },
            zho: {
                official: "\u535A\u8328\u74E6\u7EB3\u5171\u548C\u56FD",
                common: "\u535A\u8328\u74E6\u7EB3"
            }
        },
        latlng: [
            -22,
            24
        ],
        landlocked: true,
        borders: [
            "NAM",
            "ZAF",
            "ZMB",
            "ZWE"
        ],
        area: 582000,
        demonyms: {
            eng: {
                f: "Motswana",
                m: "Motswana"
            },
            fra: {
                f: "Botswanaise",
                m: "Botswanais"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDFC",
        maps: {
            googleMaps: "https://goo.gl/maps/E364KeLy6N4JwxwQ8",
            openStreetMaps: "https://www.openstreetmap.org/relation/1889339"
        },
        population: 2351625,
        gini: {
            2015: 53.3
        },
        fifa: "BOT",
        car: {
            signs: [
                "BW"
            ],
            side: "left"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bw.png",
            svg: "https://flagcdn.com/bw.svg",
            alt: "The flag of Botswana has a light blue field with a white-edged black horizontal band across its center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bw.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bw.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -24.63,
                25.9
            ]
        }
    },
    {
        name: {
            common: "Lebanon",
            official: "Lebanese Republic",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0644\u0628\u0646\u0627\u0646\u064A\u0629",
                    common: "\u0644\u0628\u0646\u0627\u0646"
                },
                fra: {
                    official: "R\xe9publique libanaise",
                    common: "Liban"
                }
            }
        },
        tld: [
            ".lb"
        ],
        cca2: "LB",
        ccn3: "422",
        cca3: "LBN",
        cioc: "LBN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            LBP: {
                name: "Lebanese pound",
                symbol: "\u0644.\u0644"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "61"
            ]
        },
        capital: [
            "Beirut"
        ],
        altSpellings: [
            "LB",
            "Lebanese Republic",
            "Al-Jumh\u016Br\u012Byah Al-Libn\u0101n\u012Byah"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic",
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0644\u0628\u0646\u0627\u0646\u064A\u0629",
                common: "\u0644\u0628\u0646\u0627\u0646"
            },
            bre: {
                official: "Republik Liban",
                common: "Liban"
            },
            ces: {
                official: "Libanonsk\xe1 republika",
                common: "Libanon"
            },
            cym: {
                official: "Lebanese Republic",
                common: "Lebanon"
            },
            deu: {
                official: "Libanesische Republik",
                common: "Libanon"
            },
            est: {
                official: "Liibanoni Vabariik",
                common: "Liibanon"
            },
            fin: {
                official: "Libanonin tasavalta",
                common: "Libanon"
            },
            fra: {
                official: "R\xe9publique libanaise",
                common: "Liban"
            },
            hrv: {
                official: "Libanonska Republika",
                common: "Libanon"
            },
            hun: {
                official: "Libanoni K\xf6zt\xe1rsas\xe1g",
                common: "Libanon"
            },
            ita: {
                official: "Repubblica libanese",
                common: "Libano"
            },
            jpn: {
                official: "\u30EC\u30D0\u30CE\u30F3\u5171\u548C\u56FD",
                common: "\u30EC\u30D0\u30CE\u30F3"
            },
            kor: {
                official: "\uB808\uBC14\uB17C \uACF5\uD654\uAD6D",
                common: "\uB808\uBC14\uB17C"
            },
            nld: {
                official: "Libanese Republiek",
                common: "Libanon"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0644\u0628\u0646\u0627\u0646",
                common: "\u0644\u0628\u0646\u0627\u0646"
            },
            pol: {
                official: "Republika Liba\u0144ska",
                common: "Liban"
            },
            por: {
                official: "Rep\xfablica Libanesa",
                common: "L\xedbano"
            },
            rus: {
                official: "\u041B\u0438\u0432\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041B\u0438\u0432\u0430\u043D"
            },
            slk: {
                official: "Libanonsk\xe1 republika",
                common: "Libanon"
            },
            spa: {
                official: "Rep\xfablica Libanesa",
                common: "L\xedbano"
            },
            srp: {
                official: "\u041B\u0438\u0431\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041B\u0438\u0431\u0430\u043D"
            },
            swe: {
                official: "Republiken Libanon",
                common: "Libanon"
            },
            tur: {
                official: "L\xfcbnan Cumhuriyeti",
                common: "L\xfcbnan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0644\u0628\u0646\u0627\u0646",
                common: "\u0644\u0628\u0646\u0627\u0646"
            },
            zho: {
                official: "\u9ECE\u5DF4\u5AE9\u5171\u548C\u56FD",
                common: "\u9ECE\u5DF4\u5AE9"
            }
        },
        latlng: [
            33.83333333,
            35.83333333
        ],
        landlocked: false,
        borders: [
            "ISR",
            "SYR"
        ],
        area: 10452,
        demonyms: {
            eng: {
                f: "Lebanese",
                m: "Lebanese"
            },
            fra: {
                f: "Libanaise",
                m: "Libanais"
            }
        },
        flag: "\uD83C\uDDF1\uD83C\uDDE7",
        maps: {
            googleMaps: "https://goo.gl/maps/Sz5VCU8UFBqMyTdc9",
            openStreetMaps: "https://www.openstreetmap.org/relation/184843"
        },
        population: 6825442,
        gini: {
            2011: 31.8
        },
        fifa: "LBN",
        car: {
            signs: [
                "RL"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/lb.png",
            svg: "https://flagcdn.com/lb.svg",
            alt: "The flag of Lebanon is composed of three horizontal bands of red, white and red. The white band is twice the height of the red bands and bears a green Lebanese Cedar tree at its center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/lb.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/lb.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                33.87,
                35.5
            ]
        },
        postalCode: {
            format: "#### ####|####",
            regex: "^(\\d{4}(\\d{4})?)$"
        }
    },
    {
        name: {
            common: "Papua New Guinea",
            official: "Independent State of Papua New Guinea",
            nativeName: {
                eng: {
                    official: "Independent State of Papua New Guinea",
                    common: "Papua New Guinea"
                },
                hmo: {
                    official: "Independen Stet bilong Papua Niugini",
                    common: "Papua Niu Gini"
                },
                tpi: {
                    official: "Independen Stet bilong Papua Niugini",
                    common: "Papua Niugini"
                }
            }
        },
        tld: [
            ".pg"
        ],
        cca2: "PG",
        ccn3: "598",
        cca3: "PNG",
        cioc: "PNG",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            PGK: {
                name: "Papua New Guinean kina",
                symbol: "K"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "75"
            ]
        },
        capital: [
            "Port Moresby"
        ],
        altSpellings: [
            "PG",
            "Independent State of Papua New Guinea",
            "Independen Stet bilong Papua Niugini"
        ],
        region: "Oceania",
        subregion: "Melanesia",
        languages: {
            eng: "English",
            hmo: "Hiri Motu",
            tpi: "Tok Pisin"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0644\u0629 \u0628\u0627\u0628\u0648\u0627 \u063A\u064A\u0646\u064A\u0627 \u0627\u0644\u062C\u062F\u064A\u062F\u0629",
                common: "\u0628\u0627\u0628\u0648\u0627 \u063A\u064A\u0646\u064A\u0627 \u0627\u0644\u062C\u062F\u064A\u062F\u0629"
            },
            bre: {
                official: "Stad dizalc'h Papoua-Ginea Nevez",
                common: "Papoua-Ginea Nevez"
            },
            ces: {
                official: "Nez\xe1visl\xfd st\xe1t Papua Nov\xe1 Guinea",
                common: "Papua-Nov\xe1 Guinea"
            },
            cym: {
                official: "Independent State of Papua New Guinea",
                common: "Papua New Guinea"
            },
            deu: {
                official: "Unabh\xe4ngiger Staat Papua-Neuguinea",
                common: "Papua-Neuguinea"
            },
            est: {
                official: "Paapua Uus-Guinea Iseseisvusriik",
                common: "Paapua Uus-Guinea"
            },
            fin: {
                official: "Papua-Uuden-Guinean Itsen\xe4inen valtio",
                common: "Papua-Uusi-Guinea"
            },
            fra: {
                official: "\xc9tat ind\xe9pendant de Papouasie-Nouvelle-Guin\xe9e",
                common: "Papouasie-Nouvelle-Guin\xe9e"
            },
            hrv: {
                official: "Nezavisna Dr\u017Eava Papui Novoj Gvineji",
                common: "Papua Nova Gvineja"
            },
            hun: {
                official: "P\xe1pua \xdaj-Guinea F\xfcggetlen \xc1llam",
                common: "P\xe1pua \xdaj-Guinea"
            },
            ita: {
                official: "Stato indipendente di Papua Nuova Guinea",
                common: "Papua Nuova Guinea"
            },
            jpn: {
                official: "\u30D1\u30D7\u30A2\u30CB\u30E5\u30FC\u30AE\u30CB\u30A2\u72EC\u7ACB\u56FD",
                common: "\u30D1\u30D7\u30A2\u30CB\u30E5\u30FC\u30AE\u30CB\u30A2"
            },
            kor: {
                official: "\uD30C\uD478\uC544\uB274\uAE30\uB2C8 \uB3C5\uB9BD\uAD6D",
                common: "\uD30C\uD478\uC544\uB274\uAE30\uB2C8"
            },
            nld: {
                official: "Onafhankelijke Staat Papoea -Nieuw-Guinea",
                common: "Papoea-Nieuw-Guinea"
            },
            per: {
                official: "\u0645\u0645\u0644\u06A9\u062A \u0645\u0633\u062A\u0642\u0644 \u067E\u0627\u067E\u0648\u0622 \u06AF\u06CC\u0646\u0647\u0654 \u0646\u0648",
                common: "\u067E\u0627\u067E\u0648\u0622 \u06AF\u06CC\u0646\u0647 \u0646\u0648"
            },
            pol: {
                official: "Niezale\u017Cne Pa\u0144stwo Papui-Nowej Gwinei",
                common: "Papua-Nowa Gwinea"
            },
            por: {
                official: "Estado Independente da Papua Nova Guin\xe9",
                common: "Papua Nova Guin\xe9"
            },
            rus: {
                official: "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043C\u043E\u0435 \u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u041F\u0430\u043F\u0443\u0430-\u041D\u043E\u0432\u043E\u0439 \u0413\u0432\u0438\u043D\u0435\u0438",
                common: "\u041F\u0430\u043F\u0443\u0430 \u2014 \u041D\u043E\u0432\u0430\u044F \u0413\u0432\u0438\u043D\u0435\u044F"
            },
            slk: {
                official: "Nez\xe1visl\xfd \u0161t\xe1t Papua-Nov\xe1 Guinea",
                common: "Papua-Nov\xe1 Guinea"
            },
            spa: {
                official: "Estado Independiente de Pap\xfaa Nueva Guinea",
                common: "Pap\xfaa Nueva Guinea"
            },
            srp: {
                official: "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u043D\u0430 \u0414\u0440\u0436\u0430\u0432\u0430 \u041F\u0430\u043F\u0443\u0430 \u041D\u043E\u0432\u0430 \u0413\u0432\u0438\u043D\u0435\u0458\u0430",
                common: "\u041F\u0430\u043F\u0443\u0430 \u041D\u043E\u0432\u0430 \u0413\u0432\u0438\u043D\u0435\u0458\u0430"
            },
            swe: {
                official: "Den oberoende staten Papua Nya Guinea",
                common: "Papua Nya Guinea"
            },
            tur: {
                official: "Papua Yeni Gine Ba\u011F\u0131ms\u0131z Devleti",
                common: "Papua Yeni Gine"
            },
            urd: {
                official: "\u0622\u0632\u0627\u062F \u0631\u06CC\u0627\u0633\u062A\u0650 \u067E\u0627\u067E\u0648\u0627 \u0646\u06CC\u0648 \u06AF\u0646\u06CC",
                common: "\u067E\u0627\u067E\u0648\u0627 \u0646\u06CC\u0648 \u06AF\u0646\u06CC"
            },
            zho: {
                official: "\u5DF4\u5E03\u4E9A\u65B0\u51E0\u5185\u4E9A",
                common: "\u5DF4\u5E03\u4E9A\u65B0\u51E0\u5185\u4E9A"
            }
        },
        latlng: [
            -6,
            147
        ],
        landlocked: false,
        borders: [
            "IDN"
        ],
        area: 462840,
        demonyms: {
            eng: {
                f: "Papua New Guinean",
                m: "Papua New Guinean"
            },
            fra: {
                f: "Papouasienne",
                m: "Papouasien"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/ChGmzZBjZ3vnBwR2A",
            openStreetMaps: "https://goo.gl/maps/ChGmzZBjZ3vnBwR2A"
        },
        population: 8947027,
        gini: {
            2009: 41.9
        },
        fifa: "PNG",
        car: {
            signs: [
                "PNG"
            ],
            side: "left"
        },
        timezones: [
            "UTC+10:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/pg.png",
            svg: "https://flagcdn.com/pg.svg",
            alt: "The flag of Papua New Guinea is divided diagonally, from the upper hoist-side corner to the lower fly-side corner, into a lower black and an upper red triangle. On the hoist side of the lower black triangle is a representation of the Southern Cross constellation made up of one small and four larger five-pointed white stars. A golden Raggiana bird-of-paradise is situated on the fly side of the upper red triangle."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/pg.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/pg.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -9.45,
                147.18
            ]
        },
        postalCode: {
            format: "###",
            regex: "^(\\d{3})$"
        }
    },
    {
        name: {
            common: "Mayotte",
            official: "Department of Mayotte",
            nativeName: {
                fra: {
                    official: "D\xe9partement de Mayotte",
                    common: "Mayotte"
                }
            }
        },
        tld: [
            ".yt"
        ],
        cca2: "YT",
        ccn3: "175",
        cca3: "MYT",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "62"
            ]
        },
        capital: [
            "Mamoudzou"
        ],
        altSpellings: [
            "YT",
            "Department of Mayotte",
            "D\xe9partement de Mayotte"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0645\u0627\u064A\u0648\u062A",
                common: "\u0645\u0627\u064A\u0648\u062A"
            },
            bre: {
                official: "Departamant Mayotte",
                common: "Mayotte"
            },
            ces: {
                official: "Mayotte",
                common: "Mayotte"
            },
            cym: {
                official: "Department of Mayotte",
                common: "Mayotte"
            },
            deu: {
                official: "\xdcbersee-D\xe9partement Mayotte",
                common: "Mayotte"
            },
            est: {
                official: "Mayotte",
                common: "Mayotte"
            },
            fin: {
                official: "Mayotte",
                common: "Mayotte"
            },
            fra: {
                official: "D\xe9partement de Mayotte",
                common: "Mayotte"
            },
            hrv: {
                official: "Odjel Mayotte",
                common: "Mayotte"
            },
            hun: {
                official: "Mayotte",
                common: "Mayotte"
            },
            ita: {
                official: "Dipartimento di Mayotte",
                common: "Mayotte"
            },
            jpn: {
                official: "\u30DE\u30E8\u30C3\u30C8\u79D1",
                common: "\u30DE\u30E8\u30C3\u30C8"
            },
            kor: {
                official: "\uB9C8\uC694\uD2B8",
                common: "\uB9C8\uC694\uD2B8"
            },
            nld: {
                official: "Afdeling Mayotte",
                common: "Mayotte"
            },
            per: {
                official: "\u0645\u062C\u0645\u0648\u0639\u0647 \u0634\u0647\u0631\u0633\u062A\u0627\u0646\u06CC \u0645\u0627\u06CC\u0648\u062A",
                common: "\u0645\u0627\u06CC\u0648\u062A"
            },
            pol: {
                official: "Majotta",
                common: "Majotta"
            },
            por: {
                official: "Departamento de Mayotte",
                common: "Mayotte"
            },
            rus: {
                official: "\u0414\u0435\u043F\u0430\u0440\u0442\u0430\u043C\u0435\u043D\u0442 \u041C\u0430\u0439\u043E\u0442\u0442\u0430",
                common: "\u041C\u0430\u0439\u043E\u0442\u0442\u0430"
            },
            slk: {
                official: "Department Mayotte",
                common: "Mayotte"
            },
            spa: {
                official: "Departamento de Mayotte",
                common: "Mayotte"
            },
            srp: {
                official: "\u041C\u0430\u0458\u043E\u0442",
                common: "\u041C\u0430\u0458\u043E\u0442"
            },
            swe: {
                official: "Departementsomr\xe5det Mayotte",
                common: "Mayotte"
            },
            tur: {
                official: "Mayotte",
                common: "Mayotte"
            },
            urd: {
                official: "\u0645\u0627\u06CC\u0648\u0679",
                common: "\u0645\u0627\u06CC\u0648\u0679"
            },
            zho: {
                official: "\u9A6C\u7EA6\u7279",
                common: "\u9A6C\u7EA6\u7279"
            }
        },
        latlng: [
            -12.83333333,
            45.16666666
        ],
        landlocked: false,
        area: 374,
        demonyms: {
            eng: {
                f: "Mahoran",
                m: "Mahoran"
            },
            fra: {
                f: "Mahoraise",
                m: "Mahorais"
            }
        },
        flag: "\uD83C\uDDFE\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/1e7MXmfBwQv3TQGF7",
            openStreetMaps: "https://www.openstreetmap.org/relation/1259885"
        },
        population: 226915,
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/yt.png",
            svg: "https://flagcdn.com/yt.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -12.78,
                45.22
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Dominican Republic",
            official: "Dominican Republic",
            nativeName: {
                spa: {
                    official: "Rep\xfablica Dominicana",
                    common: "Rep\xfablica Dominicana"
                }
            }
        },
        tld: [
            ".do"
        ],
        cca2: "DO",
        ccn3: "214",
        cca3: "DOM",
        cioc: "DOM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            DOP: {
                name: "Dominican peso",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "809",
                "829",
                "849"
            ]
        },
        capital: [
            "Santo Domingo"
        ],
        altSpellings: [
            "DO"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062F\u0648\u0645\u064A\u0646\u064A\u0643\u0627\u0646",
                common: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062F\u0648\u0645\u064A\u0646\u064A\u0643\u0627\u0646"
            },
            bre: {
                official: "Republik Dominikan",
                common: "Republik Dominikan"
            },
            ces: {
                official: "Dominik\xe1nsk\xe1 republika",
                common: "Dominik\xe1nsk\xe1 republika"
            },
            cym: {
                official: "Gweriniaeth Dominica",
                common: "Gweriniaeth Dominica"
            },
            deu: {
                official: "Dominikanische Republik",
                common: "Dominikanische Republik"
            },
            est: {
                official: "Dominikaani Vabariik",
                common: "Dominikaani Vabariik"
            },
            fin: {
                official: "Dominikaaninen tasavalta",
                common: "Dominikaaninen tasavalta"
            },
            fra: {
                official: "R\xe9publique Dominicaine",
                common: "R\xe9publique dominicaine"
            },
            hrv: {
                official: "Dominikanska Republika",
                common: "Dominikanska Republika"
            },
            hun: {
                official: "Dominikai K\xf6zt\xe1rsas\xe1g",
                common: "Dominikai K\xf6zt\xe1rsas\xe1g"
            },
            ita: {
                official: "Repubblica Dominicana",
                common: "Repubblica Dominicana"
            },
            jpn: {
                official: "\u30C9\u30DF\u30CB\u30AB\u5171\u548C\u56FD",
                common: "\u30C9\u30DF\u30CB\u30AB\u5171\u548C\u56FD"
            },
            kor: {
                official: "\uB3C4\uBBF8\uB2C8\uCE74 \uACF5\uD654\uAD6D",
                common: "\uB3C4\uBBF8\uB2C8\uCE74 \uACF5\uD654\uAD6D"
            },
            nld: {
                official: "Dominicaanse Republiek",
                common: "Dominicaanse Republiek"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0646",
                common: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0646"
            },
            pol: {
                official: "Republika Dominika\u0144ska",
                common: "Dominikana"
            },
            por: {
                official: "Rep\xfablica Dominicana",
                common: "Rep\xfablica Dominicana"
            },
            rus: {
                official: "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430"
            },
            slk: {
                official: "Dominik\xe1nska republika",
                common: "Dominik\xe1nska republika"
            },
            spa: {
                official: "Rep\xfablica Dominicana",
                common: "Rep\xfablica Dominicana"
            },
            srp: {
                official: "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430\u043D\u0430"
            },
            swe: {
                official: "Dominikanska republiken",
                common: "Dominikanska republiken"
            },
            tur: {
                official: "Dominik Cumhuriyeti",
                common: "Dominik Cumhuriyeti"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0688\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0646",
                common: "\u0688\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0646"
            },
            zho: {
                official: "\u591A\u660E\u5C3C\u52A0\u5171\u548C\u56FD",
                common: "\u591A\u660E\u5C3C\u52A0"
            }
        },
        latlng: [
            19,
            -70.66666666
        ],
        landlocked: false,
        borders: [
            "HTI"
        ],
        area: 48671,
        demonyms: {
            eng: {
                f: "Dominican",
                m: "Dominican"
            },
            fra: {
                f: "Dominicaine",
                m: "Dominicain"
            }
        },
        flag: "\uD83C\uDDE9\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/soxooTHxEeiAbn3UA",
            openStreetMaps: "https://www.openstreetmap.org/relation/307828"
        },
        population: 10847904,
        gini: {
            2019: 41.9
        },
        fifa: "DOM",
        car: {
            signs: [
                "DOM"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/do.png",
            svg: "https://flagcdn.com/do.svg",
            alt: "The flag of the Dominican Republic is divided into four rectangles by a centered white cross that extends to the edges of the field and bears the national coat of arms in its center. The upper hoist-side and lower fly-side rectangles are blue and the lower hoist-side and upper fly-side rectangles are red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/do.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/do.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                18.47,
                -69.9
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Norfolk Island",
            official: "Territory of Norfolk Island",
            nativeName: {
                eng: {
                    official: "Territory of Norfolk Island",
                    common: "Norfolk Island"
                },
                pih: {
                    official: "Teratri of Norf'k Ailen",
                    common: "Norf'k Ailen"
                }
            }
        },
        tld: [
            ".nf"
        ],
        cca2: "NF",
        ccn3: "574",
        cca3: "NFK",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            AUD: {
                name: "Australian dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "72"
            ]
        },
        capital: [
            "Kingston"
        ],
        altSpellings: [
            "NF",
            "Territory of Norfolk Island",
            "Teratri of Norf'k Ailen"
        ],
        region: "Oceania",
        subregion: "Australia and New Zealand",
        languages: {
            eng: "English",
            pih: "Norfuk"
        },
        translations: {
            ara: {
                official: "\u0625\u0642\u0644\u064A\u0645 \u062C\u0632\u064A\u0631\u0629 \u0646\u0648\u0631\u0641\u0648\u0644\u0643",
                common: "\u062C\u0632\u064A\u0631\u0629 \u0646\u0648\u0631\u0641\u0648\u0644\u0643"
            },
            bre: {
                official: "Tiriad Enez Norfolk",
                common: "Enez Norfolk"
            },
            ces: {
                official: "Teritorium ostrova Norfolk",
                common: "Norfolk"
            },
            cym: {
                official: "Territory of Norfolk Island",
                common: "Norfolk Island"
            },
            deu: {
                official: "Gebiet der Norfolkinsel",
                common: "Norfolkinsel"
            },
            est: {
                official: "Norfolki saare ala",
                common: "Norfolk"
            },
            fin: {
                official: "Norfolkinsaaren territorio",
                common: "Norfolkinsaari"
            },
            fra: {
                official: "Territoire de l'\xeele Norfolk",
                common: "\xcele Norfolk"
            },
            hrv: {
                official: "Teritorij Norfolk Island",
                common: "Otok Norfolk"
            },
            hun: {
                official: "Norfolk-sziget",
                common: "Norfolk-sziget"
            },
            ita: {
                official: "Territorio di Norfolk Island",
                common: "Isola Norfolk"
            },
            jpn: {
                official: "\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u5CF6\u306E\u9818\u571F",
                common: "\u30CE\u30FC\u30D5\u30A9\u30FC\u30AF\u5CF6"
            },
            kor: {
                official: "\uB178\uD37D \uC12C",
                common: "\uB178\uD37D \uC12C"
            },
            nld: {
                official: "Grondgebied van Norfolk Island",
                common: "Norfolkeiland"
            },
            per: {
                official: "\u0642\u0644\u0645\u0631\u0648 \u062C\u0632\u0627\u06CC\u0631 \u0646\u0648\u0631\u0641\u06A9",
                common: "\u062C\u0632\u06CC\u0631\u0647 \u0646\u0648\u0631\u0641\u06A9"
            },
            pol: {
                official: "Terytorium Wyspy Norfolk",
                common: "Wyspa Norfolk"
            },
            por: {
                official: "Territ\xf3rio da Ilha Norfolk",
                common: "Ilha Norfolk"
            },
            rus: {
                official: "\u0422\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u041D\u043E\u0440\u0444\u043E\u043B\u043A",
                common: "\u041D\u043E\u0440\u0444\u043E\u043B\u043A"
            },
            slk: {
                official: "Terit\xf3rium ostrova Norfolk",
                common: "Norfolk"
            },
            spa: {
                official: "Territorio de la Isla Norfolk",
                common: "Isla de Norfolk"
            },
            srp: {
                official: "\u0422\u0435\u0440\u0438\u0442\u043E\u0440\u0438\u0458\u0430 \u041E\u0441\u0442\u0440\u0432\u0430 \u041D\u043E\u0440\u0444\u043E\u043A",
                common: "\u041D\u043E\u0440\u0444\u043E\u043A"
            },
            swe: {
                official: "Norfolk\xf6n",
                common: "Norfolk\xf6n"
            },
            tur: {
                official: "Norfolk Adas\u0131",
                common: "Norfolk Adas\u0131"
            },
            urd: {
                official: "\u062C\u0632\u06CC\u0631\u06C1 \u0646\u0648\u0631\u0641\u06A9 \u062E\u0637\u06C1",
                common: "\u062C\u0632\u06CC\u0631\u06C1 \u0646\u0648\u0631\u0641\u06A9"
            },
            zho: {
                official: "\u8BFA\u798F\u514B\u5C9B",
                common: "\u8BFA\u798F\u514B\u5C9B"
            }
        },
        latlng: [
            -29.03333333,
            167.95
        ],
        landlocked: false,
        area: 36,
        demonyms: {
            eng: {
                f: "Norfolk Islander",
                m: "Norfolk Islander"
            },
            fra: {
                f: "Norfolkaise",
                m: "Norfolkais"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDEB",
        maps: {
            googleMaps: "https://goo.gl/maps/pbvtm6XYd1iZbjky5",
            openStreetMaps: "https://www.openstreetmap.org/relation/2574988"
        },
        population: 2302,
        car: {
            signs: [
                "AUS"
            ],
            side: "left"
        },
        timezones: [
            "UTC+11:30"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/nf.png",
            svg: "https://flagcdn.com/nf.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -29.05,
                167.97
            ]
        }
    },
    {
        name: {
            common: "Bouvet Island",
            official: "Bouvet Island",
            nativeName: {
                nor: {
                    official: "Bouvet\xf8ya",
                    common: "Bouvet\xf8ya"
                }
            }
        },
        tld: [
            ".bv"
        ],
        cca2: "BV",
        ccn3: "074",
        cca3: "BVT",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        idd: {
            root: "+4",
            suffixes: [
                "7"
            ]
        },
        altSpellings: [
            "BV",
            "Bouvet\xf8ya",
            "Bouvet-\xf8ya"
        ],
        region: "Antarctic",
        languages: {
            nor: "Norwegian"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u0628\u0648\u0641\u064A\u0647",
                common: "\u062C\u0632\u0631 \u0628\u0648\u0641\u064A\u0647"
            },
            bre: {
                official: "Enez Bouvet",
                common: "Enez Bouvet"
            },
            ces: {
                official: "Bouvet\u016Fv ostrov",
                common: "Bouvet\u016Fv ostrov"
            },
            cym: {
                official: "Bouvet Island",
                common: "Bouvet Island"
            },
            deu: {
                official: "Bouvetinsel",
                common: "Bouvetinsel"
            },
            est: {
                official: "Bouvet\u2019 saar",
                common: "Bouvet\u2019 saar"
            },
            fin: {
                official: "Bouvet'nsaari",
                common: "Bouvet'nsaari"
            },
            fra: {
                official: "\xcele Bouvet",
                common: "\xcele Bouvet"
            },
            hrv: {
                official: "Bouvet Island",
                common: "Otok Bouvet"
            },
            hun: {
                official: "Bouvet-sziget",
                common: "Bouvet-sziget"
            },
            ita: {
                official: "Isola Bouvet",
                common: "Isola Bouvet"
            },
            jpn: {
                official: "\u30D6\u30FC\u30F4\u30A7\u5CF6",
                common: "\u30D6\u30FC\u30D9\u5CF6"
            },
            kor: {
                official: "\uBD80\uBCA0 \uC12C",
                common: "\uBD80\uBCA0 \uC12C"
            },
            nld: {
                official: "Bouvet Island",
                common: "Bouveteiland"
            },
            per: {
                official: "\u062C\u0632\u06CC\u0631\u0647\u0654 \u0628\u0648\u0648\u0647",
                common: "\u062C\u0632\u06CC\u0631\u0647\u0654 \u0628\u0648\u0648\u0647"
            },
            pol: {
                official: "Wyspa Bouveta",
                common: "Wyspa Bouveta"
            },
            por: {
                official: "Ilha Bouvet",
                common: "Ilha Bouvet"
            },
            rus: {
                official: "\u041E\u0441\u0442\u0440\u043E\u0432 \u0411\u0443\u0432\u0435",
                common: "\u041E\u0441\u0442\u0440\u043E\u0432 \u0411\u0443\u0432\u0435"
            },
            slk: {
                official: "Bouvetov ostrov",
                common: "Bouvetov ostrov"
            },
            spa: {
                official: "Isla Bouvet",
                common: "Isla Bouvet"
            },
            srp: {
                official: "\u0411\u0443\u0432\u0435",
                common: "\u0411\u0443\u0432\u0435"
            },
            swe: {
                official: "Bouvet\xf6n",
                common: "Bouvet\xf6n"
            },
            tur: {
                official: "Bouvet Adas\u0131",
                common: "Bouvet Adas\u0131"
            },
            urd: {
                official: "\u062C\u0632\u06CC\u0631\u06C1 \u0628\u0648\u0648\u06C1",
                common: "\u062C\u0632\u06CC\u0631\u06C1 \u0628\u0648\u0648\u06C1"
            },
            zho: {
                official: "\u5E03\u7EF4\u5C9B",
                common: "\u5E03\u7EF4\u5C9B"
            }
        },
        latlng: [
            54.4208,
            3.3464
        ],
        landlocked: false,
        area: 49,
        flag: "\uD83C\uDDE7\uD83C\uDDFB",
        maps: {
            googleMaps: "https://goo.gl/maps/7WRQAEKZb4uK36yi9",
            openStreetMaps: "https://www.openstreetmap.org/way/174996681"
        },
        population: 0,
        car: {
            signs: [
                ""
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Antarctica"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bv.png",
            svg: "https://flagcdn.com/bv.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {}
    },
    {
        name: {
            common: "Qatar",
            official: "State of Qatar",
            nativeName: {
                ara: {
                    official: "\u062F\u0648\u0644\u0629 \u0642\u0637\u0631",
                    common: "\u0642\u0637\u0631"
                }
            }
        },
        tld: [
            ".qa",
            "\u0642\u0637\u0631."
        ],
        cca2: "QA",
        ccn3: "634",
        cca3: "QAT",
        cioc: "QAT",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            QAR: {
                name: "Qatari riyal",
                symbol: "\u0631.\u0642"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "74"
            ]
        },
        capital: [
            "Doha"
        ],
        altSpellings: [
            "QA",
            "State of Qatar",
            "Dawlat Qa\u1E6Dar"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0644\u0629 \u0642\u0637\u0631",
                common: "\u0642\u0637\u0631"
            },
            bre: {
                official: "Stad Katar",
                common: "Katar"
            },
            ces: {
                official: "St\xe1t Katar",
                common: "Katar"
            },
            cym: {
                official: "State of Qatar",
                common: "Qatar"
            },
            deu: {
                official: "Staat Katar",
                common: "Katar"
            },
            est: {
                official: "Katari Riik",
                common: "Katar"
            },
            fin: {
                official: "Qatarin valtio",
                common: "Qatar"
            },
            fra: {
                official: "\xc9tat du Qatar",
                common: "Qatar"
            },
            hrv: {
                official: "Dr\u017Eava Katar",
                common: "Katar"
            },
            hun: {
                official: "Katari \xc1llam",
                common: "Katar"
            },
            ita: {
                official: "Stato del Qatar",
                common: "Qatar"
            },
            jpn: {
                official: "\u30AB\u30BF\u30FC\u30EB\u56FD",
                common: "\u30AB\u30BF\u30FC\u30EB"
            },
            kor: {
                official: "\uCE74\uD0C0\uB974\uAD6D",
                common: "\uCE74\uD0C0\uB974"
            },
            nld: {
                official: "Staat Qatar",
                common: "Qatar"
            },
            per: {
                official: "\u062F\u0648\u0644\u062A \u0642\u0637\u0631",
                common: "\u0642\u0637\u0631"
            },
            pol: {
                official: "Pa\u0144stwo Katar",
                common: "Katar"
            },
            por: {
                official: "Estado do Qatar",
                common: "Catar"
            },
            rus: {
                official: "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u041A\u0430\u0442\u0430\u0440",
                common: "\u041A\u0430\u0442\u0430\u0440"
            },
            slk: {
                official: "Katarsk\xfd \u0161t\xe1t",
                common: "Katar"
            },
            spa: {
                official: "Estado de Qatar",
                common: "Catar"
            },
            srp: {
                official: "\u0414\u0440\u0436\u0430\u0432\u0430 \u041A\u0430\u0442\u0430\u0440",
                common: "\u041A\u0430\u0442\u0430\u0440"
            },
            swe: {
                official: "Staten Qatar",
                common: "Qatar"
            },
            tur: {
                official: "Katar Devleti",
                common: "Katar"
            },
            urd: {
                official: "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0642\u0637\u0631",
                common: "\u0642\u0637\u0631"
            },
            zho: {
                official: "\u5361\u5854\u5C14\u56FD",
                common: "\u5361\u5854\u5C14"
            }
        },
        latlng: [
            25.5,
            51.25
        ],
        landlocked: false,
        borders: [
            "SAU"
        ],
        area: 11586,
        demonyms: {
            eng: {
                f: "Qatari",
                m: "Qatari"
            },
            fra: {
                f: "Qatarienne",
                m: "Qatarien"
            }
        },
        flag: "\uD83C\uDDF6\uD83C\uDDE6",
        maps: {
            googleMaps: "https://goo.gl/maps/ZV76Y49z7LLUZ2KQ6",
            openStreetMaps: "https://www.openstreetmap.org/relation/305095"
        },
        population: 2881060,
        fifa: "QAT",
        car: {
            signs: [
                "Q"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/qa.png",
            svg: "https://flagcdn.com/qa.svg",
            alt: "The flag of Qatar has a maroon field, on the hoist side of which is a white vertical band that spans about one-third the width of the field and is separated from the rest of the field by nine adjoining fly-side pointing white isosceles triangles that serve as a serrated line."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/qa.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/qa.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                25.28,
                51.53
            ]
        }
    },
    {
        name: {
            common: "Madagascar",
            official: "Republic of Madagascar",
            nativeName: {
                fra: {
                    official: "R\xe9publique de Madagascar",
                    common: "Madagascar"
                },
                mlg: {
                    official: "Repoblikan'i Madagasikara",
                    common: "Madagasikara"
                }
            }
        },
        tld: [
            ".mg"
        ],
        cca2: "MG",
        ccn3: "450",
        cca3: "MDG",
        cioc: "MAD",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MGA: {
                name: "Malagasy ariary",
                symbol: "Ar"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "61"
            ]
        },
        capital: [
            "Antananarivo"
        ],
        altSpellings: [
            "MG",
            "Republic of Madagascar",
            "Repoblikan'i Madagasikara",
            "R\xe9publique de Madagascar"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            fra: "French",
            mlg: "Malagasy"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u062F\u063A\u0634\u0642\u0631",
                common: "\u0645\u062F\u063A\u0634\u0642\u0631"
            },
            bre: {
                official: "Republik Madagaskar",
                common: "Madagaskar"
            },
            ces: {
                official: "Madagaskarsk\xe1 republika",
                common: "Madagaskar"
            },
            cym: {
                official: "Republic of Madagascar",
                common: "Madagascar"
            },
            deu: {
                official: "Republik Madagaskar",
                common: "Madagaskar"
            },
            est: {
                official: "Madagaskari Vabariik",
                common: "Madagaskar"
            },
            fin: {
                official: "Madagaskarin tasavalta",
                common: "Madagaskar"
            },
            fra: {
                official: "R\xe9publique de Madagascar",
                common: "Madagascar"
            },
            hrv: {
                official: "Republika Madagaskar",
                common: "Madagaskar"
            },
            hun: {
                official: "Madagaszk\xe1ri K\xf6zt\xe1rsas\xe1g",
                common: "Madagaszk\xe1r"
            },
            ita: {
                official: "Repubblica del Madagascar",
                common: "Madagascar"
            },
            jpn: {
                official: "\u30DE\u30C0\u30AC\u30B9\u30AB\u30EB\u5171\u548C\u56FD",
                common: "\u30DE\u30C0\u30AC\u30B9\u30AB\u30EB"
            },
            kor: {
                official: "\uB9C8\uB2E4\uAC00\uC2A4\uCE74\uB974 \uACF5\uD654\uAD6D",
                common: "\uB9C8\uB2E4\uAC00\uC2A4\uCE74\uB974"
            },
            nld: {
                official: "Republiek Madagaskar",
                common: "Madagaskar"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0627\u062F\u0627\u06AF\u0627\u0633\u06A9\u0627\u0631",
                common: "\u0645\u0627\u062F\u0627\u06AF\u0627\u0633\u06A9\u0627\u0631"
            },
            pol: {
                official: "Republika Madagaskaru",
                common: "Madagaskar"
            },
            por: {
                official: "Rep\xfablica de Madag\xe1scar",
                common: "Madag\xe1scar"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0434\u0430\u0433\u0430\u0441\u043A\u0430\u0440",
                common: "\u041C\u0430\u0434\u0430\u0433\u0430\u0441\u043A\u0430\u0440"
            },
            slk: {
                official: "Madagaskarsk\xe1 republika",
                common: "Madagaskar"
            },
            spa: {
                official: "Rep\xfablica de Madagascar",
                common: "Madagascar"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0434\u0430\u0433\u0430\u0441\u043A\u0430\u0440",
                common: "\u041C\u0430\u0434\u0430\u0433\u0430\u0441\u043A\u0430\u0440"
            },
            swe: {
                official: "Republiken Madagaskar",
                common: "Madagaskar"
            },
            tur: {
                official: "Madagaskar Cumhuriyeti",
                common: "Madagaskar"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0688\u063A\u0627\u0633\u06A9\u0631",
                common: "\u0645\u0688\u063A\u0627\u0633\u06A9\u0631"
            },
            zho: {
                official: "\u9A6C\u8FBE\u52A0\u65AF\u52A0\u5171\u548C\u56FD",
                common: "\u9A6C\u8FBE\u52A0\u65AF\u52A0"
            }
        },
        latlng: [
            -20,
            47
        ],
        landlocked: false,
        area: 587041,
        demonyms: {
            eng: {
                f: "Malagasy",
                m: "Malagasy"
            },
            fra: {
                f: "Malgache",
                m: "Malgache"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/AHQh2ABBaFW6Ngj26",
            openStreetMaps: "https://www.openstreetmap.org/relation/447325"
        },
        population: 27691019,
        gini: {
            2012: 42.6
        },
        fifa: "MAD",
        car: {
            signs: [
                "RM"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mg.png",
            svg: "https://flagcdn.com/mg.svg",
            alt: "The flag of Madagascar features a white vertical band on the hoist side that takes up about one-third the width of the field, and two equal horizontal bands of red and green adjoining the vertical band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mg.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mg.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -18.92,
                47.52
            ]
        },
        postalCode: {
            format: "###",
            regex: "^(\\d{3})$"
        }
    },
    {
        name: {
            common: "India",
            official: "Republic of India",
            nativeName: {
                eng: {
                    official: "Republic of India",
                    common: "India"
                },
                hin: {
                    official: "\u092D\u093E\u0930\u0924 \u0917\u0923\u0930\u093E\u091C\u094D\u092F",
                    common: "\u092D\u093E\u0930\u0924"
                },
                tam: {
                    official: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0B95\u0BCD \u0B95\u0BC1\u0B9F\u0BBF\u0BAF\u0BB0\u0B9A\u0BC1",
                    common: "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
                }
            }
        },
        tld: [
            ".in"
        ],
        cca2: "IN",
        ccn3: "356",
        cca3: "IND",
        cioc: "IND",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            INR: {
                name: "Indian rupee",
                symbol: "\u20B9"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "1"
            ]
        },
        capital: [
            "New Delhi"
        ],
        altSpellings: [
            "IN",
            "Bh\u0101rat",
            "Republic of India",
            "Bharat Ganrajya",
            "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE"
        ],
        region: "Asia",
        subregion: "Southern Asia",
        languages: {
            eng: "English",
            hin: "Hindi",
            tam: "Tamil"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0647\u0646\u062F",
                common: "\u0627\u0644\u0647\u0646\u062F"
            },
            bre: {
                official: "Republik India",
                common: "India"
            },
            ces: {
                official: "Indick\xe1 republika",
                common: "Indie"
            },
            cym: {
                official: "Republic of India",
                common: "India"
            },
            deu: {
                official: "Republik Indien",
                common: "Indien"
            },
            est: {
                official: "India Vabariik",
                common: "India"
            },
            fin: {
                official: "Intian tasavalta",
                common: "Intia"
            },
            fra: {
                official: "R\xe9publique de l'Inde",
                common: "Inde"
            },
            hrv: {
                official: "Republika Indija",
                common: "Indija"
            },
            hun: {
                official: "Indiai K\xf6zt\xe1rsas\xe1g",
                common: "India"
            },
            ita: {
                official: "Repubblica dell'India",
                common: "India"
            },
            jpn: {
                official: "\u30A4\u30F3\u30C9\u5171\u548C\u56FD",
                common: "\u30A4\u30F3\u30C9"
            },
            kor: {
                official: "\uC778\uB3C4 \uACF5\uD654\uAD6D",
                common: "\uC778\uB3C4"
            },
            nld: {
                official: "Republiek India",
                common: "India"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0647\u0646\u062F\u0648\u0633\u062A\u0627\u0646",
                common: "\u0647\u0646\u062F"
            },
            pol: {
                official: "Republika Indii",
                common: "Indie"
            },
            por: {
                official: "Rep\xfablica da \xcdndia",
                common: "\xcdndia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u043D\u0434\u0438\u044F",
                common: "\u0418\u043D\u0434\u0438\u044F"
            },
            slk: {
                official: "Indick\xe1 republika",
                common: "India"
            },
            spa: {
                official: "Rep\xfablica de la India",
                common: "India"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u043D\u0434\u0438\u0458\u0430",
                common: "\u0418\u043D\u0434\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Indien",
                common: "Indien"
            },
            tur: {
                official: "Hindistan Cumhuriyeti",
                common: "Hindistan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u06BE\u0627\u0631\u062A",
                common: "\u0628\u06BE\u0627\u0631\u062A"
            },
            zho: {
                official: "\u5370\u5EA6\u5171\u548C\u56FD",
                common: "\u5370\u5EA6"
            }
        },
        latlng: [
            20,
            77
        ],
        landlocked: false,
        borders: [
            "BGD",
            "BTN",
            "MMR",
            "CHN",
            "NPL",
            "PAK"
        ],
        area: 3287590,
        demonyms: {
            eng: {
                f: "Indian",
                m: "Indian"
            },
            fra: {
                f: "Indienne",
                m: "Indien"
            }
        },
        flag: "\uD83C\uDDEE\uD83C\uDDF3",
        maps: {
            googleMaps: "https://goo.gl/maps/WSk3fLwG4vtPQetp7",
            openStreetMaps: "https://www.openstreetmap.org/relation/304716"
        },
        population: 1380004385,
        gini: {
            2011: 35.7
        },
        fifa: "IND",
        car: {
            signs: [
                "IND"
            ],
            side: "left"
        },
        timezones: [
            "UTC+05:30"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/in.png",
            svg: "https://flagcdn.com/in.svg",
            alt: "The flag of India is composed of three equal horizontal bands of saffron, white and green. A navy blue wheel with twenty-four spokes \u2014 the Ashoka Chakra \u2014 is centered in the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/in.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/in.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                28.6,
                77.2
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Syria",
            official: "Syrian Arab Republic",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0648\u0631\u064A\u0629",
                    common: "\u0633\u0648\u0631\u064A\u0627"
                }
            }
        },
        tld: [
            ".sy",
            "\u0633\u0648\u0631\u064A\u0627."
        ],
        cca2: "SY",
        ccn3: "760",
        cca3: "SYR",
        cioc: "SYR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SYP: {
                name: "Syrian pound",
                symbol: "\xa3"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "63"
            ]
        },
        capital: [
            "Damascus"
        ],
        altSpellings: [
            "SY",
            "Syrian Arab Republic",
            "Al-Jumh\u016Br\u012Byah Al-\u02BBArab\u012Byah As-S\u016Br\u012Byah"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0648\u0631\u064A\u0629",
                common: "\u0633\u0648\u0631\u064A\u0627"
            },
            bre: {
                official: "Republik Arab Siriat",
                common: "Siria"
            },
            ces: {
                official: "Syrsk\xe1 arabsk\xe1 republika",
                common: "S\xfdrie"
            },
            cym: {
                official: "Syrian Arab Republic",
                common: "Syria"
            },
            deu: {
                official: "Arabische Republik Syrien",
                common: "Syrien"
            },
            est: {
                official: "S\xfc\xfcria Araabia Vabariik",
                common: "S\xfc\xfcria"
            },
            fin: {
                official: "Syyrian arabitasavalta",
                common: "Syyria"
            },
            fra: {
                official: "R\xe9publique arabe syrienne",
                common: "Syrie"
            },
            hrv: {
                official: "Sirijska Arapska Republika",
                common: "Sirija"
            },
            hun: {
                official: "Sz\xedriai Arab K\xf6zt\xe1rsas\xe1g",
                common: "Sz\xedria"
            },
            ita: {
                official: "Repubblica araba siriana",
                common: "Siria"
            },
            jpn: {
                official: "\u30B7\u30EA\u30A2\u30A2\u30E9\u30D6\u5171\u548C\u56FD",
                common: "\u30B7\u30EA\u30A2\u30FB\u30A2\u30E9\u30D6\u5171\u548C\u56FD"
            },
            kor: {
                official: "\uC2DC\uB9AC\uC544 \uC544\uB78D \uACF5\uD654\uAD6D",
                common: "\uC2DC\uB9AC\uC544"
            },
            nld: {
                official: "Syrische Arabische Republiek",
                common: "Syri\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0639\u0631\u0628\u06CC \u0633\u0648\u0631\u06CC\u0647",
                common: "\u0633\u0648\u0631\u06CC\u0647"
            },
            pol: {
                official: "Syryjska Republika Arabska",
                common: "Syria"
            },
            por: {
                official: "Rep\xfablica \xc1rabe S\xedria",
                common: "S\xedria"
            },
            rus: {
                official: "\u0421\u0438\u0440\u0438\u0439\u0441\u043A\u0430\u044F \u0410\u0440\u0430\u0431\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0421\u0438\u0440\u0438\u044F"
            },
            slk: {
                official: "S\xfdrska arabsk\xe1 republika",
                common: "S\xfdria"
            },
            spa: {
                official: "Rep\xfablica \xc1rabe Siria",
                common: "Siria"
            },
            srp: {
                official: "\u0421\u0438\u0440\u0438\u0458\u0441\u043A\u0430 \u0410\u0440\u0430\u043F\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0421\u0438\u0440\u0438\u0458\u0430"
            },
            swe: {
                official: "Syriska arabiska republiken",
                common: "Syrien"
            },
            tur: {
                official: "Suriye Arap Cumhuriyeti",
                common: "Suriye"
            },
            urd: {
                official: "\u0639\u0631\u0628 \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0648\u0631\u06CC\u06C1",
                common: "\u0633\u0648\u0631\u06CC\u06C1"
            },
            zho: {
                official: "\u53D9\u5229\u4E9A\u963F\u62C9\u4F2F\u5171\u548C\u56FD",
                common: "\u53D9\u5229\u4E9A"
            }
        },
        latlng: [
            35,
            38
        ],
        landlocked: false,
        borders: [
            "IRQ",
            "ISR",
            "JOR",
            "LBN",
            "TUR"
        ],
        area: 185180,
        demonyms: {
            eng: {
                f: "Syrian",
                m: "Syrian"
            },
            fra: {
                f: "Syrienne",
                m: "Syrien"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDFE",
        maps: {
            googleMaps: "https://goo.gl/maps/Xe3VnFbwdb4nv2SM9",
            openStreetMaps: "https://www.openstreetmap.org/relation/184840"
        },
        population: 17500657,
        gini: {
            2003: 37.5
        },
        fifa: "SYR",
        car: {
            signs: [
                "SYR"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sy.png",
            svg: "https://flagcdn.com/sy.svg",
            alt: "The flag of Syria is composed of three equal horizontal bands of red, white and black. At the center of the white band are two small five-pointed green stars arranged in a horizontal line."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sy.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sy.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                33.5,
                36.3
            ]
        }
    },
    {
        name: {
            common: "Montenegro",
            official: "Montenegro",
            nativeName: {
                cnr: {
                    official: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430",
                    common: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430"
                }
            }
        },
        tld: [
            ".me"
        ],
        cca2: "ME",
        ccn3: "499",
        cca3: "MNE",
        cioc: "MNE",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "82"
            ]
        },
        capital: [
            "Podgorica"
        ],
        altSpellings: [
            "ME",
            "Crna Gora"
        ],
        region: "Europe",
        subregion: "Southeast Europe",
        languages: {
            cnr: "Montenegrin"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0628\u0644 \u0627\u0644\u0627\u0633\u0648\u062F",
                common: "\u0627\u0644\u062C\u0628\u0644 \u0627\u0644\u0627\u0633\u0648\u062F"
            },
            bre: {
                official: "Republik Montenegro",
                common: "Montenegro"
            },
            ces: {
                official: "\u010Cern\xe1 Hora",
                common: "\u010Cern\xe1 Hora"
            },
            cym: {
                official: "Montenegro",
                common: "Montenegro"
            },
            deu: {
                official: "Montenegro",
                common: "Montenegro"
            },
            est: {
                official: "Montenegro",
                common: "Montenegro"
            },
            fin: {
                official: "Montenegro",
                common: "Montenegro"
            },
            fra: {
                official: "Mont\xe9n\xe9gro",
                common: "Mont\xe9n\xe9gro"
            },
            hrv: {
                official: "Crna Gora",
                common: "Crna Gora"
            },
            hun: {
                official: "Montenegr\xf3",
                common: "Montenegr\xf3"
            },
            ita: {
                official: "Montenegro",
                common: "Montenegro"
            },
            jpn: {
                official: "\u30E2\u30F3\u30C6\u30CD\u30B0\u30ED",
                common: "\u30E2\u30F3\u30C6\u30CD\u30B0\u30ED"
            },
            kor: {
                official: "\uBAAC\uD14C\uB124\uADF8\uB85C",
                common: "\uBAAC\uD14C\uB124\uADF8\uB85C"
            },
            nld: {
                official: "Montenegro",
                common: "Montenegro"
            },
            per: {
                official: "\u0645\u0648\u0646\u062A\u0647\u200C\u0646\u06AF\u0631\u0648",
                common: "\u0645\u0648\u0646\u062A\u0647\u200C\u0646\u06AF\u0631\u0648"
            },
            pol: {
                official: "Czarnog\xf3ra",
                common: "Czarnog\xf3ra"
            },
            por: {
                official: "Montenegro",
                common: "Montenegro"
            },
            rus: {
                official: "\u0427\u0435\u0440\u043D\u043E\u0433\u043E\u0440\u0438\u044F",
                common: "\u0427\u0435\u0440\u043D\u043E\u0433\u043E\u0440\u0438\u044F"
            },
            slk: {
                official: "\u010Cierna Hora",
                common: "\u010Cierna Hora"
            },
            spa: {
                official: "Montenegro",
                common: "Montenegro"
            },
            srp: {
                official: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430",
                common: "\u0426\u0440\u043D\u0430 \u0413\u043E\u0440\u0430"
            },
            swe: {
                official: "Montenegro",
                common: "Montenegro"
            },
            tur: {
                official: "Karada\u011F",
                common: "Karada\u011F"
            },
            urd: {
                official: "\u0645\u0648\u0646\u0679\u06CC\u0646\u06CC\u06AF\u0631\u0648",
                common: "\u0645\u0648\u0646\u0679\u06CC\u0646\u06CC\u06AF\u0631\u0648"
            },
            zho: {
                official: "\u9ED1\u5C71",
                common: "\u9ED1\u5C71"
            }
        },
        latlng: [
            42.5,
            19.3
        ],
        landlocked: false,
        borders: [
            "ALB",
            "BIH",
            "HRV",
            "UNK",
            "SRB"
        ],
        area: 13812,
        demonyms: {
            eng: {
                f: "Montenegrin",
                m: "Montenegrin"
            },
            fra: {
                f: "Mont\xe9n\xe9grine",
                m: "Mont\xe9n\xe9grin"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/4THX1fM7WqANuPbB8",
            openStreetMaps: "https://www.openstreetmap.org/relation/53296"
        },
        population: 621718,
        gini: {
            2016: 38.5
        },
        fifa: "MNE",
        car: {
            signs: [
                "SCG"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/me.png",
            svg: "https://flagcdn.com/me.svg",
            alt: "The flag of Montenegro features a large red central rectangular area surrounded by a golden-yellow border. The coat of arms of Montenegro is centered in the red rectangle."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/me.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/me.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                42.43,
                19.27
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Eswatini",
            official: "Kingdom of Eswatini",
            nativeName: {
                eng: {
                    official: "Kingdom of Eswatini",
                    common: "Eswatini"
                },
                ssw: {
                    official: "Umbuso weSwatini",
                    common: "eSwatini"
                }
            }
        },
        tld: [
            ".sz"
        ],
        cca2: "SZ",
        ccn3: "748",
        cca3: "SWZ",
        cioc: "SWZ",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SZL: {
                name: "Swazi lilangeni",
                symbol: "L"
            },
            ZAR: {
                name: "South African rand",
                symbol: "R"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "68"
            ]
        },
        capital: [
            "Mbabane"
        ],
        altSpellings: [
            "SZ",
            "Swaziland",
            "weSwatini",
            "Swatini",
            "Ngwane",
            "Kingdom of Eswatini",
            "Umbuso weSwatini"
        ],
        region: "Africa",
        subregion: "Southern Africa",
        languages: {
            eng: "English",
            ssw: "Swazi"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u0625\u0633\u0648\u0627\u062A\u064A\u0646\u064A",
                common: "\u0625\u0633\u0648\u0627\u062A\u064A\u0646\u064A"
            },
            bre: {
                official: "Rouantelezh Eswatini",
                common: "Eswatini"
            },
            ces: {
                official: "Svazijsk\xe9 kr\xe1lovstv\xed",
                common: "Svazijsko"
            },
            cym: {
                official: "Kingdom of Eswatini",
                common: "Eswatini"
            },
            deu: {
                official: "K\xf6nigreich Eswatini",
                common: "Swasiland"
            },
            est: {
                official: "eSwatini Kuningriik",
                common: "Svaasimaa"
            },
            fin: {
                official: "Swazimaan kuningaskunta",
                common: "Swazimaa"
            },
            fra: {
                official: "Royaume d\u2019Eswatini",
                common: "Swaziland"
            },
            hrv: {
                official: "Kraljevina eSwatini",
                common: "Svazi"
            },
            hun: {
                official: "Szv\xe1zif\xf6ldi Kir\xe1lys\xe1g",
                common: "Szv\xe1zif\xf6ld"
            },
            ita: {
                official: "Regno di eSwatini",
                common: "Swaziland"
            },
            jpn: {
                official: "\u30B9\u30EF\u30B8\u30E9\u30F3\u30C9\u738B\u56FD",
                common: "\u30B9\u30EF\u30B8\u30E9\u30F3\u30C9"
            },
            kor: {
                official: "\uC5D0\uC2A4\uC640\uD2F0\uB2C8 \uC655\uAD6D",
                common: "\uC5D0\uC2A4\uC640\uD2F0\uB2C8"
            },
            nld: {
                official: "Koninkrijk eSwatini",
                common: "Swaziland"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0633\u0648\u0627\u0632\u06CC\u0644\u0646\u062F",
                common: "\u0627\u0633\u0648\u0627\u062A\u06CC\u0646\u06CC"
            },
            pol: {
                official: "Kr\xf3lestwo Suazi",
                common: "Suazi"
            },
            por: {
                official: "Reino de eSwatini",
                common: "Suazil\xe2ndia"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0421\u0432\u0430\u0437\u0438\u043B\u0435\u043D\u0434",
                common: "\u0421\u0432\u0430\u0437\u0438\u043B\u0435\u043D\u0434"
            },
            slk: {
                official: "Svazijsk\xe9 kr\xe1\u013Eovstvo",
                common: "Svazijsko"
            },
            spa: {
                official: "Reino de eSwatini",
                common: "Suazilandia"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0415\u0441\u0432\u0430\u0442\u0438\u043D\u0438",
                common: "\u0415\u0441\u0432\u0430\u0442\u0438\u043D\u0438"
            },
            swe: {
                official: "Konungariket Eswatini",
                common: "Swaziland"
            },
            tur: {
                official: "Esvatini Krall\u0131\u011F\u0131",
                common: "Esvatini"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0633\u0648\u0627\u0632\u06CC \u0644\u06CC\u0646\u0688",
                common: "\u0633\u0648\u0627\u0632\u06CC \u0644\u06CC\u0646\u0688"
            },
            zho: {
                official: "\u65AF\u5A01\u58EB\u5170\u738B\u56FD",
                common: "\u65AF\u5A01\u58EB\u5170"
            }
        },
        latlng: [
            -26.5,
            31.5
        ],
        landlocked: true,
        borders: [
            "MOZ",
            "ZAF"
        ],
        area: 17364,
        demonyms: {
            eng: {
                f: "Swazi",
                m: "Swazi"
            },
            fra: {
                f: "Swazie",
                m: "Swazie"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDFF",
        maps: {
            googleMaps: "https://goo.gl/maps/cUY79eqQihFSE8hV6",
            openStreetMaps: "https://www.openstreetmap.org/relation/88210"
        },
        population: 1160164,
        gini: {
            2016: 54.6
        },
        fifa: "SWZ",
        car: {
            signs: [
                "SD"
            ],
            side: "left"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sz.png",
            svg: "https://flagcdn.com/sz.svg",
            alt: "The flag of Eswatini is composed of three horizontal bands \u2014 a large central yellow-edged red band, and a light blue band above and beneath the red band. The red band is three times the height of the blue bands and bears a centered emblem made up of a large black and white Nguni shield covering two spears and a staff decorated with feather tassels, all placed horizontally."
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -26.32,
                31.13
            ]
        },
        postalCode: {
            format: "@###",
            regex: "^([A-Z]\\d{3})$"
        }
    },
    {
        name: {
            common: "Paraguay",
            official: "Republic of Paraguay",
            nativeName: {
                grn: {
                    official: "Tet\xe3 Paragu\xe1i",
                    common: "Paragu\xe1i"
                },
                spa: {
                    official: "Rep\xfablica de Paraguay",
                    common: "Paraguay"
                }
            }
        },
        tld: [
            ".py"
        ],
        cca2: "PY",
        ccn3: "600",
        cca3: "PRY",
        cioc: "PAR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            PYG: {
                name: "Paraguayan guaran\xed",
                symbol: "\u20B2"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "95"
            ]
        },
        capital: [
            "Asunci\xf3n"
        ],
        altSpellings: [
            "PY",
            "Republic of Paraguay",
            "Rep\xfablica del Paraguay",
            "Tet\xe3 Paragu\xe1i"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            grn: "Guaran\xed",
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0627\u0631\u0627\u063A\u0648\u0627\u064A",
                common: "\u0628\u0627\u0631\u0627\u063A\u0648\u0627\u064A"
            },
            bre: {
                official: "Republik Paraguay",
                common: "Paraguay"
            },
            ces: {
                official: "Paraguaysk\xe1 republika",
                common: "Paraguay"
            },
            cym: {
                official: "Republic of Paraguay",
                common: "Paraguay"
            },
            deu: {
                official: "Republik Paraguay",
                common: "Paraguay"
            },
            est: {
                official: "Paraguay Vabariik",
                common: "Paraguay"
            },
            fin: {
                official: "Paraguayn tasavalta",
                common: "Paraguay"
            },
            fra: {
                official: "R\xe9publique du Paraguay",
                common: "Paraguay"
            },
            hrv: {
                official: "Republika Paragvaj",
                common: "Paragvaj"
            },
            hun: {
                official: "Paraguayi K\xf6zt\xe1rsas\xe1g",
                common: "Paraguay"
            },
            ita: {
                official: "Repubblica del Paraguay",
                common: "Paraguay"
            },
            jpn: {
                official: "\u30D1\u30E9\u30B0\u30A2\u30A4\u5171\u548C\u56FD",
                common: "\u30D1\u30E9\u30B0\u30A2\u30A4"
            },
            kor: {
                official: "\uD30C\uB77C\uACFC\uC774 \uACF5\uD654\uAD6D",
                common: "\uD30C\uB77C\uACFC\uC774"
            },
            nld: {
                official: "Republiek Paraguay",
                common: "Paraguay"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u067E\u0627\u0631\u0627\u06AF\u0648\u0626\u0647",
                common: "\u067E\u0627\u0631\u0627\u06AF\u0648\u0626\u0647"
            },
            pol: {
                official: "Republika Paragwaju",
                common: "Paragwaj"
            },
            por: {
                official: "Rep\xfablica do Paraguai",
                common: "Paraguai"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u0440\u0430\u0433\u0432\u0430\u0439",
                common: "\u041F\u0430\u0440\u0430\u0433\u0432\u0430\u0439"
            },
            slk: {
                official: "Paraguajsk\xe1 republika",
                common: "Paraguaj"
            },
            spa: {
                official: "Rep\xfablica de Paraguay",
                common: "Paraguay"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u0440\u0430\u0433\u0432\u0430\u0458",
                common: "\u041F\u0430\u0440\u0430\u0433\u0432\u0430\u0458"
            },
            swe: {
                official: "Republiken Paraguay",
                common: "Paraguay"
            },
            tur: {
                official: "Paraguay Cumhuriyeti",
                common: "Paraguay"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u06CC\u0631\u0627\u06AF\u0648\u0626\u06D2",
                common: "\u067E\u06CC\u0631\u0627\u06AF\u0648\u0626\u06D2"
            },
            zho: {
                official: "\u5DF4\u62C9\u572D\u5171\u548C\u56FD",
                common: "\u5DF4\u62C9\u572D"
            }
        },
        latlng: [
            -23,
            -58
        ],
        landlocked: true,
        borders: [
            "ARG",
            "BOL",
            "BRA"
        ],
        area: 406752,
        demonyms: {
            eng: {
                f: "Paraguayan",
                m: "Paraguayan"
            },
            fra: {
                f: "Paraguayenne",
                m: "Paraguayen"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDFE",
        maps: {
            googleMaps: "https://goo.gl/maps/JtnqG73WJn1Gx6mz6",
            openStreetMaps: "https://www.openstreetmap.org/relation/287077"
        },
        population: 7132530,
        gini: {
            2019: 45.7
        },
        fifa: "PAR",
        car: {
            signs: [
                "PY"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/py.png",
            svg: "https://flagcdn.com/py.svg",
            alt: "The flag of Paraguay features three equal horizontal bands of red, white and blue, with an emblem centered in the white band. On the obverse side of the flag depicted, this emblem is the national coat of arms."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/py.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/py.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -25.28,
                -57.57
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "El Salvador",
            official: "Republic of El Salvador",
            nativeName: {
                spa: {
                    official: "Rep\xfablica de El Salvador",
                    common: "El Salvador"
                }
            }
        },
        tld: [
            ".sv"
        ],
        cca2: "SV",
        ccn3: "222",
        cca3: "SLV",
        cioc: "ESA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "03"
            ]
        },
        capital: [
            "San Salvador"
        ],
        altSpellings: [
            "SV",
            "Republic of El Salvador",
            "Rep\xfablica de El Salvador"
        ],
        region: "Americas",
        subregion: "Central America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0633\u0644\u0641\u0627\u062F\u0648\u0631",
                common: "\u0627\u0644\u0633\u0644\u0641\u0627\u062F\u0648\u0631"
            },
            bre: {
                official: "Republik El Salvador",
                common: "El Salvador"
            },
            ces: {
                official: "Salvadorsk\xe1 republika",
                common: "Salvador"
            },
            cym: {
                official: "Gweriniaeth El Salfador",
                common: "El Salfador"
            },
            deu: {
                official: "Republik El Salvador",
                common: "El Salvador"
            },
            est: {
                official: "El Salvadori Vabariik",
                common: "El Salvador"
            },
            fin: {
                official: "El Salvadorin tasavalta",
                common: "El Salvador"
            },
            fra: {
                official: "R\xe9publique du Salvador",
                common: "Salvador"
            },
            hrv: {
                official: "Republika El Salvador",
                common: "Salvador"
            },
            hun: {
                official: "Salvadori K\xf6zt\xe1rsas\xe1g",
                common: "Salvador"
            },
            ita: {
                official: "Repubblica di El Salvador",
                common: "El Salvador"
            },
            jpn: {
                official: "\u30A8\u30EB\u30B5\u30EB\u30D0\u30C9\u30EB\u5171\u548C\u56FD",
                common: "\u30A8\u30EB\u30B5\u30EB\u30D0\u30C9\u30EB"
            },
            kor: {
                official: "\uC5D8\uC0B4\uBC14\uB3C4\uB974 \uACF5\uD654\uAD6D",
                common: "\uC5D8\uC0B4\uBC14\uB3C4\uB974"
            },
            nld: {
                official: "Republiek El Salvador",
                common: "El Salvador"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0644\u0633\u0627\u0644\u0648\u0627\u062F\u0648\u0631",
                common: "\u0627\u0644\u0633\u0627\u0644\u0648\u0627\u062F\u0648\u0631"
            },
            pol: {
                official: "Republika Salwadoru",
                common: "Salwador"
            },
            por: {
                official: "Rep\xfablica de El Salvador",
                common: "El Salvador"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u042D\u043B\u044C-\u0421\u0430\u043B\u044C\u0432\u0430\u0434\u043E\u0440",
                common: "\u0421\u0430\u043B\u044C\u0432\u0430\u0434\u043E\u0440"
            },
            slk: {
                official: "Salv\xe1dorsk\xe1 republika",
                common: "Salv\xe1dor"
            },
            spa: {
                official: "Rep\xfablica de El Salvador",
                common: "El Salvador"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u043B \u0421\u0430\u043B\u0432\u0430\u0434\u043E\u0440",
                common: "\u0421\u0430\u043B\u0432\u0430\u0434\u043E\u0440"
            },
            swe: {
                official: "Republiken El Salvador",
                common: "El Salvador"
            },
            tur: {
                official: "El Salvador Cumhuriyeti",
                common: "El Salvador"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u06CC\u0644 \u0633\u06CC\u0644\u0648\u0627\u0688\u0648\u0631",
                common: "\u0627\u06CC\u0644 \u0633\u06CC\u0644\u0648\u0627\u0688\u0648\u0631"
            },
            zho: {
                official: "\u8428\u5C14\u74E6\u591A\u5171\u548C\u56FD",
                common: "\u8428\u5C14\u74E6\u591A"
            }
        },
        latlng: [
            13.83333333,
            -88.91666666
        ],
        landlocked: false,
        borders: [
            "GTM",
            "HND"
        ],
        area: 21041,
        demonyms: {
            eng: {
                f: "Salvadoran",
                m: "Salvadoran"
            },
            fra: {
                f: "Salvadorienne",
                m: "Salvadorien"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDFB",
        maps: {
            googleMaps: "https://goo.gl/maps/cZnCEi5sEMQtKKcB7",
            openStreetMaps: "https://www.openstreetmap.org/relation/1520612"
        },
        population: 6486201,
        gini: {
            2019: 38.8
        },
        fifa: "SLV",
        car: {
            signs: [
                "ES"
            ],
            side: "right"
        },
        timezones: [
            "UTC-06:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sv.png",
            svg: "https://flagcdn.com/sv.svg",
            alt: "The flag of El Salvador is composed of three equal horizontal bands of cobalt blue, white and cobalt blue, with the national coat of arms centered in the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sv.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sv.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                13.7,
                -89.2
            ]
        },
        postalCode: {
            format: "CP ####",
            regex: "^(?:CP)*(\\d{4})$"
        }
    },
    {
        name: {
            common: "Ukraine",
            official: "Ukraine",
            nativeName: {
                ukr: {
                    official: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430",
                    common: "\u0423\u043A\u0440\u0430\u0457\u043D\u0430"
                }
            }
        },
        tld: [
            ".ua",
            ".\u0443\u043A\u0440"
        ],
        cca2: "UA",
        ccn3: "804",
        cca3: "UKR",
        cioc: "UKR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            UAH: {
                name: "Ukrainian hryvnia",
                symbol: "\u20B4"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "80"
            ]
        },
        capital: [
            "Kyiv"
        ],
        altSpellings: [
            "UA",
            "Ukrayina"
        ],
        region: "Europe",
        subregion: "Eastern Europe",
        languages: {
            ukr: "Ukrainian"
        },
        translations: {
            ara: {
                official: "\u0623\u0648\u0643\u0631\u0627\u0646\u064A\u0627",
                common: "\u0623\u0648\u0643\u0631\u0627\u0646\u064A\u0627"
            },
            bre: {
                official: "Ukraina",
                common: "Ukraina"
            },
            ces: {
                official: "Ukrajina",
                common: "Ukrajina"
            },
            cym: {
                official: "Ukraine",
                common: "Ukraine"
            },
            deu: {
                official: "Ukraine",
                common: "Ukraine"
            },
            est: {
                official: "Ukraina",
                common: "Ukraina"
            },
            fin: {
                official: "Ukraina",
                common: "Ukraina"
            },
            fra: {
                official: "Ukraine",
                common: "Ukraine"
            },
            hrv: {
                official: "Ukrajina",
                common: "Ukrajina"
            },
            hun: {
                official: "Ukrajna",
                common: "Ukrajna"
            },
            ita: {
                official: "Ucraina",
                common: "Ucraina"
            },
            jpn: {
                official: "\u30A6\u30AF\u30E9\u30A4\u30CA",
                common: "\u30A6\u30AF\u30E9\u30A4\u30CA"
            },
            kor: {
                official: "\uC6B0\uD06C\uB77C\uC774\uB098",
                common: "\uC6B0\uD06C\uB77C\uC774\uB098"
            },
            nld: {
                official: "Oekra\xefne",
                common: "Oekra\xefne"
            },
            per: {
                official: "\u0627\u0648\u06A9\u0631\u0627\u06CC\u0646",
                common: "\u0627\u0648\u06A9\u0631\u0627\u06CC\u0646"
            },
            pol: {
                official: "Ukraina",
                common: "Ukraina"
            },
            por: {
                official: "Ucr\xe2nia",
                common: "Ucr\xe2nia"
            },
            rus: {
                official: "\u0423\u043A\u0440\u0430\u0438\u043D\u0430",
                common: "\u0423\u043A\u0440\u0430\u0438\u043D\u0430"
            },
            slk: {
                official: "Ukrajina",
                common: "Ukrajina"
            },
            spa: {
                official: "Ucrania",
                common: "Ucrania"
            },
            srp: {
                official: "\u0423\u043A\u0440\u0430\u0458\u0438\u043D\u0430",
                common: "\u0423\u043A\u0440\u0430\u0458\u0438\u043D\u0430"
            },
            swe: {
                official: "Ukraina",
                common: "Ukraina"
            },
            tur: {
                official: "Ukrayna",
                common: "Ukrayna"
            },
            urd: {
                official: "\u06CC\u0648\u06A9\u0631\u06CC\u0646",
                common: "\u06CC\u0648\u06A9\u0631\u06CC\u0646"
            },
            zho: {
                official: "\u4E4C\u514B\u5170",
                common: "\u4E4C\u514B\u5170"
            }
        },
        latlng: [
            49,
            32
        ],
        landlocked: false,
        borders: [
            "BLR",
            "HUN",
            "MDA",
            "POL",
            "ROU",
            "RUS",
            "SVK"
        ],
        area: 603500,
        demonyms: {
            eng: {
                f: "Ukrainian",
                m: "Ukrainian"
            },
            fra: {
                f: "Ukrainienne",
                m: "Ukrainien"
            }
        },
        flag: "\uD83C\uDDFA\uD83C\uDDE6",
        maps: {
            googleMaps: "https://goo.gl/maps/DvgJMiPJ7aozKFZv7",
            openStreetMaps: "https://www.openstreetmap.org/relation/60199"
        },
        population: 44134693,
        gini: {
            2019: 26.6
        },
        fifa: "UKR",
        car: {
            signs: [
                "UA"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ua.png",
            svg: "https://flagcdn.com/ua.svg",
            alt: "The flag of Ukraine is composed of two equal horizontal bands of blue and yellow."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ua.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ua.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                50.43,
                30.52
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Isle of Man",
            official: "Isle of Man",
            nativeName: {
                eng: {
                    official: "Isle of Man",
                    common: "Isle of Man"
                },
                glv: {
                    official: "Ellan Vannin or Mannin",
                    common: "Mannin"
                }
            }
        },
        tld: [
            ".im"
        ],
        cca2: "IM",
        ccn3: "833",
        cca3: "IMN",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            GBP: {
                name: "British pound",
                symbol: "\xa3"
            },
            IMP: {
                name: "Manx pound",
                symbol: "\xa3"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "4"
            ]
        },
        capital: [
            "Douglas"
        ],
        altSpellings: [
            "IM",
            "Ellan Vannin",
            "Mann",
            "Mannin"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            eng: "English",
            glv: "Manx"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u064A\u0631\u0629 \u0645\u0627\u0646",
                common: "\u062C\u0632\u064A\u0631\u0629 \u0645\u0627\u0646"
            },
            bre: {
                official: "Enez Vanav",
                common: "Enez Vanav"
            },
            ces: {
                official: "Ostrov Man",
                common: "Ostrov Man"
            },
            cym: {
                official: "Isle of Man",
                common: "Isle of Man"
            },
            deu: {
                official: "Isle of Man",
                common: "Insel Man"
            },
            est: {
                official: "Mani saar",
                common: "Mani saar"
            },
            fin: {
                official: "Mansaari",
                common: "Mansaari"
            },
            fra: {
                official: "Isle of Man",
                common: "\xcele de Man"
            },
            hrv: {
                official: "Mana ostrvo",
                common: "Otok Man"
            },
            hun: {
                official: "Man",
                common: "Man"
            },
            ita: {
                official: "Isola di Man",
                common: "Isola di Man"
            },
            jpn: {
                official: "\u30DE\u30F3\u5CF6",
                common: "\u30DE\u30F3\u5CF6"
            },
            kor: {
                official: "\uB9E8\uC12C",
                common: "\uB9E8\uC12C"
            },
            nld: {
                official: "Isle of Man",
                common: "Isle of Man"
            },
            per: {
                official: "\u062C\u0632\u06CC\u0631\u0647\u0654 \u0645\u064E\u0646",
                common: "\u062C\u0632\u06CC\u0631\u0647\u0654 \u0645\u064E\u0646"
            },
            pol: {
                official: "Wyspa Man",
                common: "Wyspa Man"
            },
            por: {
                official: "Isle of Man",
                common: "Ilha de Man"
            },
            rus: {
                official: "\u041E\u0441\u0442\u0440\u043E\u0432 \u041C\u044D\u043D",
                common: "\u041E\u0441\u0442\u0440\u043E\u0432 \u041C\u044D\u043D"
            },
            slk: {
                official: "Ostrov Man",
                common: "Man"
            },
            spa: {
                official: "Isla de Man",
                common: "Isla de Man"
            },
            srp: {
                official: "\u041E\u0441\u0442\u0440\u0432\u043E \u041C\u0435\u043D",
                common: "\u041E\u0441\u0442\u0440\u0432\u043E \u041C\u0435\u043D"
            },
            swe: {
                official: "Isle of Man",
                common: "Isle of Man"
            },
            tur: {
                official: "Man Adas\u0131",
                common: "Man Adas\u0131"
            },
            urd: {
                official: "\u0622\u0626\u0644 \u0622\u0641 \u0645\u06CC\u0646",
                common: "\u0622\u0626\u0644 \u0622\u0641 \u0645\u06CC\u0646"
            },
            zho: {
                official: "\u9A6C\u6069\u5C9B",
                common: "\u9A6C\u6069\u5C9B"
            }
        },
        latlng: [
            54.25,
            -4.5
        ],
        landlocked: false,
        area: 572,
        demonyms: {
            eng: {
                f: "Manx",
                m: "Manx"
            }
        },
        flag: "\uD83C\uDDEE\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/4DqVHDgVaFgnh8ZV8",
            openStreetMaps: "https://www.openstreetmap.org/relation/62269"
        },
        population: 85032,
        car: {
            signs: [
                "GBM"
            ],
            side: "left"
        },
        timezones: [
            "UTC+00:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/im.png",
            svg: "https://flagcdn.com/im.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/im.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/im.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                54.15,
                -4.48
            ]
        },
        postalCode: {
            format: "@# #@@|@## #@@|@@# #@@|@@## #@@|@#@ #@@|@@#@ #@@|GIR0AA",
            regex: "^(([A-Z]\\d{2}[A-Z]{2})|([A-Z]\\d{3}[A-Z]{2})|([A-Z]{2}\\d{2}[A-Z]{2})|([A-Z]{2}\\d{3}[A-Z]{2})|([A-Z]\\d[A-Z]\\d[A-Z]{2})|([A-Z]{2}\\d[A-Z]\\d[A-Z]{2})|(GIR0AA))$"
        }
    },
    {
        name: {
            common: "Namibia",
            official: "Republic of Namibia",
            nativeName: {
                afr: {
                    official: "Republiek van Namibi\xeb",
                    common: "Namibi\xeb"
                },
                deu: {
                    official: "Republik Namibia",
                    common: "Namibia"
                },
                eng: {
                    official: "Republic of Namibia",
                    common: "Namibia"
                },
                her: {
                    official: "Republic of Namibia",
                    common: "Namibia"
                },
                hgm: {
                    official: "Republic of Namibia",
                    common: "Namibia"
                },
                kwn: {
                    official: "Republic of Namibia",
                    common: "Namibia"
                },
                loz: {
                    official: "Republic of Namibia",
                    common: "Namibia"
                },
                ndo: {
                    official: "Republic of Namibia",
                    common: "Namibia"
                },
                tsn: {
                    official: "Lefatshe la Namibia",
                    common: "Namibia"
                }
            }
        },
        tld: [
            ".na"
        ],
        cca2: "NA",
        ccn3: "516",
        cca3: "NAM",
        cioc: "NAM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            NAD: {
                name: "Namibian dollar",
                symbol: "$"
            },
            ZAR: {
                name: "South African rand",
                symbol: "R"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "64"
            ]
        },
        capital: [
            "Windhoek"
        ],
        altSpellings: [
            "NA",
            "Namibi\xeb",
            "Republic of Namibia"
        ],
        region: "Africa",
        subregion: "Southern Africa",
        languages: {
            afr: "Afrikaans",
            deu: "German",
            eng: "English",
            her: "Herero",
            hgm: "Khoekhoe",
            kwn: "Kwangali",
            loz: "Lozi",
            ndo: "Ndonga",
            tsn: "Tswana"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0646\u0627\u0645\u064A\u0628\u064A\u0627",
                common: "\u0646\u0627\u0645\u064A\u0628\u064A\u0627"
            },
            bre: {
                official: "Republik Namibia",
                common: "Namibia"
            },
            ces: {
                official: "Namibijsk\xe1 republika",
                common: "Namibie"
            },
            cym: {
                official: "Republic of Namibia",
                common: "Namibia"
            },
            deu: {
                official: "Republik Namibia",
                common: "Namibia"
            },
            est: {
                official: "Namiibia Vabariik",
                common: "Namiibia"
            },
            fin: {
                official: "Namibian tasavalta",
                common: "Namibia"
            },
            fra: {
                official: "R\xe9publique de Namibie",
                common: "Namibie"
            },
            hrv: {
                official: "Republika Namibija",
                common: "Namibija"
            },
            hun: {
                official: "Nam\xedbiai K\xf6zt\xe1rsas\xe1g",
                common: "Nam\xedbia"
            },
            ita: {
                official: "Repubblica di Namibia",
                common: "Namibia"
            },
            jpn: {
                official: "\u30CA\u30DF\u30D3\u30A2\u5171\u548C\u56FD",
                common: "\u30CA\u30DF\u30D3\u30A2"
            },
            kor: {
                official: "\uB098\uBBF8\uBE44\uC544 \uACF5\uD654\uAD6D",
                common: "\uB098\uBBF8\uBE44\uC544"
            },
            nld: {
                official: "Republiek Namibi\xeb",
                common: "Namibi\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0646\u0627\u0645\u06CC\u0628\u06CC\u0627",
                common: "\u0646\u0627\u0645\u06CC\u0628\u06CC\u0627"
            },
            pol: {
                official: "Republika Namibii",
                common: "Namibia"
            },
            por: {
                official: "Rep\xfablica da Nam\xedbia",
                common: "Nam\xedbia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0430\u043C\u0438\u0431\u0438\u044F",
                common: "\u041D\u0430\u043C\u0438\u0431\u0438\u044F"
            },
            slk: {
                official: "Nam\xedbijsk\xe1 republika",
                common: "Nam\xedbia"
            },
            spa: {
                official: "Rep\xfablica de Namibia",
                common: "Namibia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0430\u043C\u0438\u0431\u0438\u0458\u0430",
                common: "\u041D\u0430\u043C\u0438\u0431\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Namibia",
                common: "Namibia"
            },
            tur: {
                official: "Namibya Cumhuriyeti",
                common: "Namibya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u0645\u06CC\u0628\u06CC\u0627",
                common: "\u0646\u0645\u06CC\u0628\u06CC\u0627"
            },
            zho: {
                official: "\u7EB3\u7C73\u6BD4\u4E9A\u5171\u548C\u56FD",
                common: "\u7EB3\u7C73\u6BD4\u4E9A"
            }
        },
        latlng: [
            -22,
            17
        ],
        landlocked: false,
        borders: [
            "AGO",
            "BWA",
            "ZAF",
            "ZMB"
        ],
        area: 825615,
        demonyms: {
            eng: {
                f: "Namibian",
                m: "Namibian"
            },
            fra: {
                f: "Namibienne",
                m: "Namibien"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDE6",
        maps: {
            googleMaps: "https://goo.gl/maps/oR1i8BFEYX3EY83WA",
            openStreetMaps: "https://www.openstreetmap.org/relation/195266"
        },
        population: 2540916,
        gini: {
            2015: 59.1
        },
        fifa: "NAM",
        car: {
            signs: [
                "NAM"
            ],
            side: "left"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/na.png",
            svg: "https://flagcdn.com/na.svg",
            alt: "The flag of Namibia features a white-edged red diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. Above and beneath this band are a blue and green triangle respectively. A gold sun with twelve triangular rays is situated on the hoist side of the upper triangle."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/na.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/na.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -22.57,
                17.08
            ]
        }
    },
    {
        name: {
            common: "United Arab Emirates",
            official: "United Arab Emirates",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629",
                    common: "\u062F\u0648\u0644\u0629 \u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629"
                }
            }
        },
        tld: [
            ".ae",
            "\u0627\u0645\u0627\u0631\u0627\u062A."
        ],
        cca2: "AE",
        ccn3: "784",
        cca3: "ARE",
        cioc: "UAE",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            AED: {
                name: "United Arab Emirates dirham",
                symbol: "\u062F.\u0625"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "71"
            ]
        },
        capital: [
            "Abu Dhabi"
        ],
        altSpellings: [
            "AE",
            "UAE",
            "Emirates"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629",
                common: "\u062F\u0648\u0644\u0629 \u0627\u0644\u0625\u0645\u0627\u0631\u0627\u062A \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0645\u062A\u062D\u062F\u0629"
            },
            bre: {
                official: "Emirelezhio\xf9 Arab Unanet",
                common: "Emirelezhio\xf9 Arab Unanet"
            },
            ces: {
                official: "Spojen\xe9 arabsk\xe9 emir\xe1ty",
                common: "Arabsk\xe9 emir\xe1ty"
            },
            cym: {
                official: "United Arab Emirates",
                common: "United Arab Emirates"
            },
            deu: {
                official: "Vereinigte Arabische Emirate",
                common: "Vereinigte Arabische Emirate"
            },
            est: {
                official: "Araabia \xdchendemiraadid",
                common: "Araabia \xdchendemiraadid"
            },
            fin: {
                official: "Yhdistyneet arabiemiirikunnat",
                common: "Arabiemiraatit"
            },
            fra: {
                official: "\xc9mirats arabes unis",
                common: "\xc9mirats arabes unis"
            },
            hrv: {
                official: "Ujedinjeni Arapski Emirati",
                common: "Arapski Emirati"
            },
            hun: {
                official: "Egyes\xfclt Arab Em\xedrs\xe9gek",
                common: "Egyes\xfclt Arab Em\xedrs\xe9gek"
            },
            ita: {
                official: "Emirati Arabi Uniti",
                common: "Emirati Arabi Uniti"
            },
            jpn: {
                official: "\u30A2\u30E9\u30D6\u9996\u9577\u56FD\u9023\u90A6",
                common: "\u30A2\u30E9\u30D6\u9996\u9577\u56FD\u9023\u90A6"
            },
            kor: {
                official: "\uC544\uB78D \uD1A0\uD6C4\uAD6D \uC5F0\uBC29",
                common: "\uC544\uB78D\uC5D0\uBBF8\uB9AC\uD2B8"
            },
            nld: {
                official: "Verenigde Arabische Emiraten",
                common: "Verenigde Arabische Emiraten"
            },
            per: {
                official: "\u0627\u0645\u0627\u0631\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0639\u0631\u0628\u06CC",
                common: "\u0627\u0645\u0627\u0631\u0627\u062A"
            },
            pol: {
                official: "Zjednoczone Emiraty Arabskie",
                common: "Emiraty Arabskie"
            },
            por: {
                official: "Emirados \xc1rabes Unidos",
                common: "Emirados \xc1rabes Unidos"
            },
            rus: {
                official: "\u041E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u044B\u0435 \u0410\u0440\u0430\u0431\u0441\u043A\u0438\u0435 \u042D\u043C\u0438\u0440\u0430\u0442\u044B",
                common: "\u041E\u0431\u044A\u0435\u0434\u0438\u043D\u0451\u043D\u043D\u044B\u0435 \u0410\u0440\u0430\u0431\u0441\u043A\u0438\u0435 \u042D\u043C\u0438\u0440\u0430\u0442\u044B"
            },
            slk: {
                official: "Spojen\xe9 arabsk\xe9 emir\xe1ty",
                common: "Arabsk\xe9 emir\xe1ty"
            },
            spa: {
                official: "Emiratos \xc1rabes Unidos",
                common: "Emiratos \xc1rabes Unidos"
            },
            srp: {
                official: "\u0423\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0438 \u0410\u0440\u0430\u043F\u0441\u043A\u0438 \u0415\u043C\u0438\u0440\u0430\u0442\u0438",
                common: "\u0423\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0438 \u0410\u0440\u0430\u043F\u0441\u043A\u0438 \u0415\u043C\u0438\u0440\u0430\u0442\u0438"
            },
            swe: {
                official: "F\xf6renade Arabemiraten",
                common: "F\xf6renade Arabemiraten"
            },
            tur: {
                official: "Birle\u015Fik Arap Emirlikleri",
                common: "Birle\u015Fik Arap Emirlikleri"
            },
            urd: {
                official: "\u0645\u062A\u062D\u062F\u06C1 \u0639\u0631\u0628 \u0627\u0645\u0627\u0631\u0627\u062A",
                common: "\u0645\u062A\u062D\u062F\u06C1 \u0639\u0631\u0628 \u0627\u0645\u0627\u0631\u0627\u062A"
            },
            zho: {
                official: "\u963F\u62C9\u4F2F\u8054\u5408\u914B\u957F\u56FD",
                common: "\u963F\u62C9\u4F2F\u8054\u5408\u914B\u957F\u56FD"
            }
        },
        latlng: [
            24,
            54
        ],
        landlocked: false,
        borders: [
            "OMN",
            "SAU"
        ],
        area: 83600,
        demonyms: {
            eng: {
                f: "Emirati",
                m: "Emirati"
            },
            fra: {
                f: "Emirienne",
                m: "Emirien"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/AZZTDA6GzVAnKMVd8",
            openStreetMaps: "https://www.openstreetmap.org/relation/307763"
        },
        population: 9890400,
        gini: {
            2018: 26
        },
        fifa: "UAE",
        car: {
            signs: [
                "UAE"
            ],
            side: "right"
        },
        timezones: [
            "UTC+04:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ae.png",
            svg: "https://flagcdn.com/ae.svg",
            alt: "The flag of United Arab Emirates features a red vertical band on its hoist side that takes up about one-fourth the width of the field and three equal horizontal bands of green, white and black adjoining the vertical band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ae.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ae.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                24.47,
                54.37
            ]
        }
    },
    {
        name: {
            common: "Bulgaria",
            official: "Republic of Bulgaria",
            nativeName: {
                bul: {
                    official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F",
                    common: "\u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F"
                }
            }
        },
        tld: [
            ".bg"
        ],
        cca2: "BG",
        ccn3: "100",
        cca3: "BGR",
        cioc: "BUL",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BGN: {
                name: "Bulgarian lev",
                symbol: "\u043B\u0432"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "59"
            ]
        },
        capital: [
            "Sofia"
        ],
        altSpellings: [
            "BG",
            "Republic of Bulgaria",
            "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u044A\u043B\u0433\u0430\u0440\u0438\u044F"
        ],
        region: "Europe",
        subregion: "Southeast Europe",
        languages: {
            bul: "Bulgarian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0644\u063A\u0627\u0631\u064A\u0627",
                common: "\u0628\u0644\u063A\u0627\u0631\u064A\u0627"
            },
            bre: {
                official: "Republik Bulgaria",
                common: "Bulgaria"
            },
            ces: {
                official: "Bulharsk\xe1 republika",
                common: "Bulharsko"
            },
            cym: {
                official: "Gweriniaeth Bwlgaria",
                common: "Bwlgaria"
            },
            deu: {
                official: "Republik Bulgarien",
                common: "Bulgarien"
            },
            est: {
                official: "Bulgaaria Vabariik",
                common: "Bulgaaria"
            },
            fin: {
                official: "Bulgarian tasavalta",
                common: "Bulgaria"
            },
            fra: {
                official: "R\xe9publique de Bulgarie",
                common: "Bulgarie"
            },
            hrv: {
                official: "Republika Bugarska",
                common: "Bugarska"
            },
            hun: {
                official: "Bolg\xe1r K\xf6zt\xe1rsas\xe1g",
                common: "Bulg\xe1ria"
            },
            ita: {
                official: "Repubblica di Bulgaria",
                common: "Bulgaria"
            },
            jpn: {
                official: "\u30D6\u30EB\u30AC\u30EA\u30A2\u5171\u548C\u56FD",
                common: "\u30D6\u30EB\u30AC\u30EA\u30A2"
            },
            kor: {
                official: "\uBD88\uAC00\uB9AC\uC544 \uACF5\uD654\uAD6D",
                common: "\uBD88\uAC00\uB9AC\uC544"
            },
            nld: {
                official: "Republiek Bulgarije",
                common: "Bulgarije"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0644\u063A\u0627\u0631\u0633\u062A\u0627\u0646",
                common: "\u0628\u0644\u063A\u0627\u0631\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Republika Bu\u0142garii",
                common: "Bu\u0142garia"
            },
            por: {
                official: "Rep\xfablica da Bulg\xe1ria",
                common: "Bulg\xe1ria"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u043E\u043B\u0433\u0430\u0440\u0438\u044F",
                common: "\u0411\u043E\u043B\u0433\u0430\u0440\u0438\u044F"
            },
            slk: {
                official: "Bulharsk\xe1 republika",
                common: "Bulharsko"
            },
            spa: {
                official: "Rep\xfablica de Bulgaria",
                common: "Bulgaria"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0443\u0433\u0430\u0440\u0441\u043A\u0430",
                common: "\u0411\u0443\u0433\u0430\u0440\u0441\u043A\u0430"
            },
            swe: {
                official: "Republiken Bulgarien",
                common: "Bulgarien"
            },
            tur: {
                official: "Bulgaristan Cumhuriyeti",
                common: "Bulgaristan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0644\u063A\u0627\u0631\u06CC\u06C1",
                common: "\u0628\u0644\u063A\u0627\u0631\u06CC\u06C1"
            },
            zho: {
                official: "\u4FDD\u52A0\u5229\u4E9A\u5171\u548C\u56FD",
                common: "\u4FDD\u52A0\u5229\u4E9A"
            }
        },
        latlng: [
            43,
            25
        ],
        landlocked: false,
        borders: [
            "GRC",
            "MKD",
            "ROU",
            "SRB",
            "TUR"
        ],
        area: 110879,
        demonyms: {
            eng: {
                f: "Bulgarian",
                m: "Bulgarian"
            },
            fra: {
                f: "Bulgare",
                m: "Bulgare"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/F5uAhDGWzc3BrHfm9",
            openStreetMaps: "https://www.openstreetmap.org/relation/186382"
        },
        population: 6927288,
        gini: {
            2018: 41.3
        },
        fifa: "BUL",
        car: {
            signs: [
                "BG"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bg.png",
            svg: "https://flagcdn.com/bg.svg",
            alt: "The flag of Bulgaria is composed of three equal horizontal bands of white, green and red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bg.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bg.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                42.68,
                23.32
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Greenland",
            official: "Greenland",
            nativeName: {
                kal: {
                    official: "Kalaallit Nunaat",
                    common: "Kalaallit Nunaat"
                }
            }
        },
        tld: [
            ".gl"
        ],
        cca2: "GL",
        ccn3: "304",
        cca3: "GRL",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            DKK: {
                name: "krone",
                symbol: "kr."
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "99"
            ]
        },
        capital: [
            "Nuuk"
        ],
        altSpellings: [
            "GL",
            "Gr\xf8nland"
        ],
        region: "Americas",
        subregion: "North America",
        languages: {
            kal: "Greenlandic"
        },
        translations: {
            ara: {
                official: "\u062C\u0631\u064A\u0646\u0644\u0627\u0646\u062F",
                common: "\u062C\u0631\u064A\u0646\u0644\u0627\u0646\u062F"
            },
            bre: {
                official: "Greunland",
                common: "Greunland"
            },
            ces: {
                official: "Gr\xf3nsko",
                common: "Gr\xf3nsko"
            },
            cym: {
                official: "Greenland",
                common: "Greenland"
            },
            deu: {
                official: "Gr\xf6nland",
                common: "Gr\xf6nland"
            },
            est: {
                official: "Gr\xf6\xf6nimaa",
                common: "Gr\xf6\xf6nimaa"
            },
            fin: {
                official: "Gro\xf6nlanti",
                common: "Gro\xf6nlanti"
            },
            fra: {
                official: "Groenland",
                common: "Groenland"
            },
            hrv: {
                official: "Grenland",
                common: "Grenland"
            },
            hun: {
                official: "Gr\xf6nland",
                common: "Gr\xf6nland"
            },
            ita: {
                official: "Groenlandia",
                common: "Groenlandia"
            },
            jpn: {
                official: "\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9",
                common: "\u30B0\u30EA\u30FC\u30F3\u30E9\u30F3\u30C9"
            },
            kor: {
                official: "\uADF8\uB9B0\uB780\uB4DC",
                common: "\uADF8\uB9B0\uB780\uB4DC"
            },
            nld: {
                official: "Groenland",
                common: "Groenland"
            },
            per: {
                official: "\u06AF\u0631\u0648\u0626\u0646\u0644\u0646\u062F",
                common: "\u06AF\u0631\u06CC\u0646\u0644\u0646\u062F"
            },
            pol: {
                official: "Grenlandia",
                common: "Grenlandia"
            },
            por: {
                official: "Groenl\xe2ndia",
                common: "Gronel\xe2ndia"
            },
            rus: {
                official: "\u0413\u0440\u0435\u043D\u043B\u0430\u043D\u0434\u0438\u044F",
                common: "\u0413\u0440\u0435\u043D\u043B\u0430\u043D\u0434\u0438\u044F"
            },
            slk: {
                official: "Gr\xf3nsko",
                common: "Gr\xf3nsko"
            },
            spa: {
                official: "Groenlandia",
                common: "Groenlandia"
            },
            srp: {
                official: "\u0413\u0440\u0435\u043D\u043B\u0430\u043D\u0434",
                common: "\u0413\u0440\u0435\u043D\u043B\u0430\u043D\u0434"
            },
            swe: {
                official: "Gr\xf6nland",
                common: "Gr\xf6nland"
            },
            tur: {
                official: "Gr\xf6nland",
                common: "Gr\xf6nland"
            },
            urd: {
                official: "\u06AF\u0631\u06CC\u0646 \u0644\u06CC\u0646\u0688",
                common: "\u06AF\u0631\u06CC\u0646 \u0644\u06CC\u0646\u0688"
            },
            zho: {
                official: "\u683C\u9675\u5170",
                common: "\u683C\u9675\u5170"
            }
        },
        latlng: [
            72,
            -40
        ],
        landlocked: false,
        area: 2166086,
        demonyms: {
            eng: {
                f: "Greenlandic",
                m: "Greenlandic"
            },
            fra: {
                f: "Groenlandaise",
                m: "Groenlandais"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDF1",
        maps: {
            googleMaps: "https://goo.gl/maps/j3289UPEQXt1ceSy8",
            openStreetMaps: "https://www.openstreetmap.org/relation/2184073"
        },
        population: 56367,
        car: {
            signs: [
                "DK"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00",
            "UTC-03:00",
            "UTC-01:00",
            "UTC+00:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gl.png",
            svg: "https://flagcdn.com/gl.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gl.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gl.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                64.18,
                -51.75
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Germany",
            official: "Federal Republic of Germany",
            nativeName: {
                deu: {
                    official: "Bundesrepublik Deutschland",
                    common: "Deutschland"
                }
            }
        },
        tld: [
            ".de"
        ],
        cca2: "DE",
        ccn3: "276",
        cca3: "DEU",
        cioc: "GER",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "9"
            ]
        },
        capital: [
            "Berlin"
        ],
        altSpellings: [
            "DE",
            "Federal Republic of Germany",
            "Bundesrepublik Deutschland"
        ],
        region: "Europe",
        subregion: "Western Europe",
        languages: {
            deu: "German"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0644\u0645\u0627\u0646\u064A\u0627 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                common: "\u0623\u0644\u0645\u0627\u0646\u064A\u0627"
            },
            bre: {
                official: "Republik Kevreadel Alamagn",
                common: "Alamagn"
            },
            ces: {
                official: "Spolkov\xe1 republika N\u011Bmecko",
                common: "N\u011Bmecko"
            },
            cym: {
                official: "Federal Republic of Germany",
                common: "Germany"
            },
            deu: {
                official: "Bundesrepublik Deutschland",
                common: "Deutschland"
            },
            est: {
                official: "Saksamaa Liitvabariik",
                common: "Saksamaa"
            },
            fin: {
                official: "Saksan liittotasavalta",
                common: "Saksa"
            },
            fra: {
                official: "R\xe9publique f\xe9d\xe9rale d'Allemagne",
                common: "Allemagne"
            },
            hrv: {
                official: "Njema\u010Dka Federativna Republika",
                common: "Njema\u010Dka"
            },
            hun: {
                official: "N\xe9met Sz\xf6vets\xe9gi K\xf6zt\xe1rsas\xe1g",
                common: "N\xe9metorsz\xe1g"
            },
            ita: {
                official: "Repubblica federale di Germania",
                common: "Germania"
            },
            jpn: {
                official: "\u30C9\u30A4\u30C4\u9023\u90A6\u5171\u548C\u56FD",
                common: "\u30C9\u30A4\u30C4"
            },
            kor: {
                official: "\uB3C5\uC77C \uC5F0\uBC29 \uACF5\uD654\uAD6D",
                common: "\uB3C5\uC77C"
            },
            nld: {
                official: "Bondsrepubliek Duitsland",
                common: "Duitsland"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u0644 \u0622\u0644\u0645\u0627\u0646",
                common: "\u0622\u0644\u0645\u0627\u0646"
            },
            pol: {
                official: "Republika Federalna Niemiec",
                common: "Niemcy"
            },
            por: {
                official: "Rep\xfablica Federal da Alemanha",
                common: "Alemanha"
            },
            rus: {
                official: "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0435\u0440\u043C\u0430\u043D\u0438\u044F",
                common: "\u0413\u0435\u0440\u043C\u0430\u043D\u0438\u044F"
            },
            slk: {
                official: "Nemeck\xe1 spolkov\xe1 republika",
                common: "Nemecko"
            },
            spa: {
                official: "Rep\xfablica Federal de Alemania",
                common: "Alemania"
            },
            srp: {
                official: "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0435\u043C\u0430\u0447\u043A\u0430",
                common: "\u041D\u0435\u043C\u0430\u0447\u043A\u0430"
            },
            swe: {
                official: "F\xf6rbundsrepubliken Tyskland",
                common: "Tyskland"
            },
            tur: {
                official: "Almanya Federal Cumhuriyeti",
                common: "Almanya"
            },
            urd: {
                official: "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0631\u0645\u0646\u06CC",
                common: "\u062C\u0631\u0645\u0646\u06CC"
            },
            zho: {
                official: "\u5FB7\u610F\u5FD7\u8054\u90A6\u5171\u548C\u56FD",
                common: "\u5FB7\u56FD"
            }
        },
        latlng: [
            51,
            9
        ],
        landlocked: false,
        borders: [
            "AUT",
            "BEL",
            "CZE",
            "DNK",
            "FRA",
            "LUX",
            "NLD",
            "POL",
            "CHE"
        ],
        area: 357114,
        demonyms: {
            eng: {
                f: "German",
                m: "German"
            },
            fra: {
                f: "Allemande",
                m: "Allemand"
            }
        },
        flag: "\uD83C\uDDE9\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/mD9FBMq1nvXUBrkv6",
            openStreetMaps: "https://www.openstreetmap.org/relation/51477"
        },
        population: 83240525,
        gini: {
            2016: 31.9
        },
        fifa: "GER",
        car: {
            signs: [
                "DY"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/de.png",
            svg: "https://flagcdn.com/de.svg",
            alt: "The flag of Germany is composed of three equal horizontal bands of black, red and gold."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/de.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/de.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                52.52,
                13.4
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Cambodia",
            official: "Kingdom of Cambodia",
            nativeName: {
                khm: {
                    official: "\u1796\u17D2\u179A\u17C7\u179A\u17B6\u1787\u17B6\u178E\u17B6\u1785\u1780\u17D2\u179A\u1780\u1798\u17D2\u1796\u17BB\u1787\u17B6",
                    common: "K\xe2mp\u016Dch\xe9a"
                }
            }
        },
        tld: [
            ".kh"
        ],
        cca2: "KH",
        ccn3: "116",
        cca3: "KHM",
        cioc: "CAM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            KHR: {
                name: "Cambodian riel",
                symbol: "\u17DB"
            },
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+8",
            suffixes: [
                "55"
            ]
        },
        capital: [
            "Phnom Penh"
        ],
        altSpellings: [
            "KH",
            "Kingdom of Cambodia"
        ],
        region: "Asia",
        subregion: "South-Eastern Asia",
        languages: {
            khm: "Khmer"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u0643\u0645\u0628\u0648\u062F\u064A\u0627",
                common: "\u0643\u0645\u0628\u0648\u062F\u064A\u0627"
            },
            bre: {
                official: "Rouantelezh Kambodja",
                common: "Kambodja"
            },
            ces: {
                official: "Kambod\u017Esk\xe9 kr\xe1lovstv\xed",
                common: "Kambod\u017Ea"
            },
            cym: {
                official: "Teyrnas Cambodia",
                common: "Cambodia"
            },
            deu: {
                official: "K\xf6nigreich Kambodscha",
                common: "Kambodscha"
            },
            est: {
                official: "Kambod\u017Ea Kuningriik",
                common: "Kambod\u017Ea"
            },
            fin: {
                official: "Kambod\u017Ean kuningaskunta",
                common: "Kambod\u017Ea"
            },
            fra: {
                official: "Royaume du Cambodge",
                common: "Cambodge"
            },
            hrv: {
                official: "Kraljevina Kambod\u017Ea",
                common: "Kambod\u017Ea"
            },
            hun: {
                official: "Kambodzsai Kir\xe1lys\xe1g",
                common: "Kambodzsa"
            },
            ita: {
                official: "Regno di Cambogia",
                common: "Cambogia"
            },
            jpn: {
                official: "\u30AB\u30F3\u30DC\u30B8\u30A2\u738B\u56FD",
                common: "\u30AB\u30F3\u30DC\u30B8\u30A2"
            },
            kor: {
                official: "\uCE84\uBCF4\uB514\uC544 \uC655\uAD6D",
                common: "\uCE84\uBCF4\uB514\uC544"
            },
            nld: {
                official: "Koninkrijk Cambodja",
                common: "Cambodja"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u06A9\u0627\u0645\u0628\u0648\u062C",
                common: "\u06A9\u0627\u0645\u0628\u0648\u062C"
            },
            pol: {
                official: "Kr\xf3lestwo Kambod\u017Cy",
                common: "Kambod\u017Ca"
            },
            por: {
                official: "Reino do Camboja",
                common: "Camboja"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u041A\u0430\u043C\u0431\u043E\u0434\u0436\u0430",
                common: "\u041A\u0430\u043C\u0431\u043E\u0434\u0436\u0430"
            },
            slk: {
                official: "Kambo\u01C6sk\xe9 kr\xe1\u013Eovstvo",
                common: "Kambo\u01C6a"
            },
            spa: {
                official: "Reino de Camboya",
                common: "Camboya"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u041A\u0430\u043C\u0431\u043E\u045F\u0430",
                common: "\u041A\u0430\u043C\u0431\u043E\u045F\u0430"
            },
            swe: {
                official: "Konungariket Kambodja",
                common: "Kambodja"
            },
            tur: {
                official: "Kambo\xe7ya Krall\u0131\u011F\u0131",
                common: "Kambo\xe7ya"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u06A9\u0645\u0628\u0648\u0688\u06CC\u0627",
                common: "\u06A9\u0645\u0628\u0648\u0688\u06CC\u0627"
            },
            zho: {
                official: "\u67EC\u57D4\u5BE8\u738B\u56FD",
                common: "\u67EC\u57D4\u5BE8"
            }
        },
        latlng: [
            13,
            105
        ],
        landlocked: false,
        borders: [
            "LAO",
            "THA",
            "VNM"
        ],
        area: 181035,
        demonyms: {
            eng: {
                f: "Cambodian",
                m: "Cambodian"
            },
            fra: {
                f: "Cambodgienne",
                m: "Cambodgien"
            }
        },
        flag: "\uD83C\uDDF0\uD83C\uDDED",
        maps: {
            googleMaps: "https://goo.gl/maps/nztQtFSrUXZymJaW8",
            openStreetMaps: "https://www.openstreetmap.org/relation/49898"
        },
        population: 16718971,
        fifa: "CAM",
        car: {
            signs: [
                "K"
            ],
            side: "right"
        },
        timezones: [
            "UTC+07:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/kh.png",
            svg: "https://flagcdn.com/kh.svg",
            alt: "The flag of Cambodia features three horizontal bands of blue, red and blue, with a white depiction of the temple complex, Angkor Wat centered in the red band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/kh.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/kh.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                11.55,
                104.92
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Iraq",
            official: "Republic of Iraq",
            nativeName: {
                ara: {
                    official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0627\u0642",
                    common: "\u0627\u0644\u0639\u0631\u0627\u0642"
                },
                arc: {
                    official: "\u0729\u0718\u073C\u071B\u0722\u0735\u0710 \u0710\u071D\u073C\u072A\u0732\u0729",
                    common: "\u0729\u0718\u073C\u071B\u0722\u0735\u0710"
                },
                ckb: {
                    official: "\u06A9\u06C6\u0645\u0627\u0631\u06CC \u0639\u06CE\u0631\u0627\u0642",
                    common: "\u06A9\u06C6\u0645\u0627\u0631\u06CC"
                }
            }
        },
        tld: [
            ".iq"
        ],
        cca2: "IQ",
        ccn3: "368",
        cca3: "IRQ",
        cioc: "IRQ",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            IQD: {
                name: "Iraqi dinar",
                symbol: "\u0639.\u062F"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "64"
            ]
        },
        capital: [
            "Baghdad"
        ],
        altSpellings: [
            "IQ",
            "Republic of Iraq",
            "Jumh\u016Briyyat al-\u2018Ir\u0101q"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic",
            arc: "Aramaic",
            ckb: "Sorani"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0627\u0642",
                common: "\u0627\u0644\u0639\u0631\u0627\u0642"
            },
            bre: {
                official: "Republik Irak",
                common: "Irak"
            },
            ces: {
                official: "Ir\xe1ck\xe1 republika",
                common: "Ir\xe1k"
            },
            cym: {
                official: "Republic of Iraq",
                common: "Iraq"
            },
            deu: {
                official: "Republik Irak",
                common: "Irak"
            },
            est: {
                official: "Iraagi Vabariik",
                common: "Iraak"
            },
            fin: {
                official: "Irakin tasavalta",
                common: "Irak"
            },
            fra: {
                official: "R\xe9publique d'Irak",
                common: "Irak"
            },
            hrv: {
                official: "Republika Irak",
                common: "Irak"
            },
            hun: {
                official: "Iraki K\xf6zt\xe1rsas\xe1g",
                common: "Irak"
            },
            ita: {
                official: "Repubblica dell'Iraq",
                common: "Iraq"
            },
            jpn: {
                official: "\u30A4\u30E9\u30AF\u5171\u548C\u56FD",
                common: "\u30A4\u30E9\u30AF"
            },
            kor: {
                official: "\uC774\uB77C\uD06C \uACF5\uD654\uAD6D",
                common: "\uC774\uB77C\uD06C"
            },
            nld: {
                official: "Republiek Irak",
                common: "Irak"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0639\u0631\u0627\u0642",
                common: "\u0639\u0631\u0627\u0642"
            },
            pol: {
                official: "Republika Iraku",
                common: "Irak"
            },
            por: {
                official: "Rep\xfablica do Iraque",
                common: "Iraque"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0440\u0430\u043A",
                common: "\u0418\u0440\u0430\u043A"
            },
            slk: {
                official: "Irack\xe1 republika",
                common: "Irak"
            },
            spa: {
                official: "Rep\xfablica de Irak",
                common: "Irak"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0440\u0430\u043A",
                common: "\u0418\u0440\u0430\u043A"
            },
            swe: {
                official: "Republiken Irak",
                common: "Irak"
            },
            tur: {
                official: "Irak Cumhuriyeti",
                common: "Irak"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0639\u0631\u0627\u0642",
                common: "\u0639\u0631\u0627\u0642"
            },
            zho: {
                official: "\u4F0A\u62C9\u514B\u5171\u548C\u56FD",
                common: "\u4F0A\u62C9\u514B"
            }
        },
        latlng: [
            33,
            44
        ],
        landlocked: false,
        borders: [
            "IRN",
            "JOR",
            "KWT",
            "SAU",
            "SYR",
            "TUR"
        ],
        area: 438317,
        demonyms: {
            eng: {
                f: "Iraqi",
                m: "Iraqi"
            },
            fra: {
                f: "Irakienne",
                m: "Irakien"
            }
        },
        flag: "\uD83C\uDDEE\uD83C\uDDF6",
        maps: {
            googleMaps: "https://goo.gl/maps/iL8Bmy1sUCW9fUk18",
            openStreetMaps: "https://www.openstreetmap.org/relation/304934"
        },
        population: 40222503,
        gini: {
            2012: 29.5
        },
        fifa: "IRQ",
        car: {
            signs: [
                "IRQ"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/iq.png",
            svg: "https://flagcdn.com/iq.svg",
            alt: "The flag of Iraq is composed of three equal horizontal bands of red, white and black. In the central white band are Arabic inscriptions in green."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/iq.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/iq.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                33.33,
                44.4
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "French Southern and Antarctic Lands",
            official: "Territory of the French Southern and Antarctic Lands",
            nativeName: {
                fra: {
                    official: "Territoire des Terres australes et antarctiques fran\xe7aises",
                    common: "Terres australes et antarctiques fran\xe7aises"
                }
            }
        },
        tld: [
            ".tf"
        ],
        cca2: "TF",
        ccn3: "260",
        cca3: "ATF",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "62"
            ]
        },
        capital: [
            "Port-aux-Fran\xe7ais"
        ],
        altSpellings: [
            "TF",
            "French Southern Territories"
        ],
        region: "Antarctic",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0645\u0642\u0627\u0637\u0639\u0627\u062A \u0648\u0623\u0642\u0627\u0644\u064A\u0645 \u0645\u0627 \u0648\u0631\u0627\u0621 \u0627\u0644\u0628\u062D\u0627\u0631 \u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629",
                common: "\u0623\u0631\u0627\u0636 \u0641\u0631\u0646\u0633\u064A\u0629 \u062C\u0646\u0648\u0628\u064A\u0629 \u0648\u0623\u0646\u062A\u0627\u0631\u062A\u064A\u0643\u064A\u0629"
            },
            bre: {
                official: "Tiriad Douaro\xf9 Aostral hag Antarktikel Fra\xf1s",
                common: "Douaro\xf9 Aostral hag Antarktikel Fra\xf1s"
            },
            ces: {
                official: "Teritorium Francouzsk\xe1 ji\u017En\xed a antarktick\xe1 \xfazem\xed",
                common: "Francouzsk\xe1 ji\u017En\xed a antarktick\xe1 \xfazem\xed"
            },
            cym: {
                official: "Territory of the French Southern and Antarctic Lands",
                common: "French Southern and Antarctic Lands"
            },
            deu: {
                official: "Gebiet der Franz\xf6sisch S\xfcd- und Antarktisgebiete",
                common: "Franz\xf6sische S\xfcd- und Antarktisgebiete"
            },
            est: {
                official: "Prantsuse L\xf5unaalad",
                common: "Prantsuse L\xf5unaalad"
            },
            fin: {
                official: "Ranskan etel\xe4iset ja antarktiset alueet",
                common: "Ranskan etel\xe4iset ja antarktiset alueet"
            },
            fra: {
                official: "Territoire des Terres australes et antarctiques fran\xe7aises",
                common: "Terres australes et antarctiques fran\xe7aises"
            },
            hrv: {
                official: "Teritoriju Francuski ju\u017Eni i antarkti\u010Dki teritoriji",
                common: "Francuski ju\u017Eni i antarkti\u010Dki teritoriji"
            },
            hun: {
                official: "Francia d\xe9li \xe9s antarktiszi ter\xfcletek",
                common: "Francia d\xe9li \xe9s antarktiszi ter\xfcletek"
            },
            ita: {
                official: "Territorio della australi e antartiche francesi Terre",
                common: "Territori Francesi del Sud"
            },
            jpn: {
                official: "\u30D5\u30E9\u30F3\u30B9\u9818\u5357\u65B9\xb7\u5357\u6975\u5730\u57DF\u306E\u9818\u571F",
                common: "\u30D5\u30E9\u30F3\u30B9\u9818\u5357\u65B9\u30FB\u5357\u6975\u5730\u57DF"
            },
            kor: {
                official: "\uD504\uB791\uC2A4\uB839 \uB0A8\uBD80\uC640 \uB0A8\uADF9 \uC9C0\uC5ED",
                common: "\uD504\uB791\uC2A4\uB839 \uB0A8\uBD80\uC640 \uB0A8\uADF9 \uC9C0\uC5ED"
            },
            nld: {
                official: "Grondgebied van de Franse Zuidelijke en Antarctische gebieden",
                common: "Franse Gebieden in de zuidelijke Indische Oceaan"
            },
            per: {
                official: "\u0633\u0631\u0632\u0645\u06CC\u0646\u200C\u0647\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC \u0648 \u062C\u0646\u0648\u0628\u06AF\u0627\u0646\u06CC \u0641\u0631\u0627\u0646\u0633\u0647",
                common: "\u0633\u0631\u0632\u0645\u06CC\u0646\u200C\u0647\u0627\u06CC \u062C\u0646\u0648\u0628\u06CC \u0648 \u062C\u0646\u0648\u0628\u06AF\u0627\u0646\u06CC \u0641\u0631\u0627\u0646\u0633\u0647"
            },
            pol: {
                official: "Francuskie Terytoria Po\u0142udniowe i Antarktyczne",
                common: "Francuskie Terytoria Po\u0142udniowe i Antarktyczne"
            },
            por: {
                official: "Territ\xf3rio do Sul e Ant\xe1rtica Francesa",
                common: "Terras Austrais e Ant\xe1rticas Francesas"
            },
            rus: {
                official: "\u0422\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0438\u0435 \u042E\u0436\u043D\u044B\u0435 \u0438 \u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0437\u0435\u043C\u043B\u0438",
                common: "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0438\u0435 \u042E\u0436\u043D\u044B\u0435 \u0438 \u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u0442\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u0438"
            },
            slk: {
                official: "Franc\xfazske ju\u017En\xe9 a antarktick\xe9 \xfazemia",
                common: "Franc\xfazske ju\u017Dn\xe9 a antarktick\xe9 \xfazemia"
            },
            spa: {
                official: "Territorio del Franc\xe9s Tierras australes y ant\xe1rticas",
                common: "Tierras Australes y Ant\xe1rticas Francesas"
            },
            srp: {
                official: "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0435 \u0458\u0443\u0436\u043D\u0435 \u0438 \u0430\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0447\u043A\u0435 \u0437\u0435\u043C\u0459\u0435",
                common: "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0435 \u0458\u0443\u0436\u043D\u0435 \u0438 \u0430\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u0447\u043A\u0435 \u0437\u0435\u043C\u0459\u0435"
            },
            swe: {
                official: "Franska syd- och Antarktisterritorierna",
                common: "Franska s\xf6dra territorierna"
            },
            tur: {
                official: "Frans\u0131z G\xfcney ve Antarktika Topraklar\u0131",
                common: "Frans\u0131z G\xfcney ve Antarktika Topraklar\u0131"
            },
            urd: {
                official: "\u0633\u0631\u0632\u0645\u06CC\u0646\u0650 \u062C\u0646\u0648\u0628\u06CC \u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC\u06C1 \u0648 \u0627\u0646\u0679\u0627\u0631\u06A9\u0679\u06CC\u06A9\u06C1",
                common: "\u0633\u0631\u0632\u0645\u06CC\u0646 \u062C\u0646\u0648\u0628\u06CC \u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC\u06C1 \u0648 \u0627\u0646\u0679\u0627\u0631\u06A9\u0679\u06CC\u06A9\u0627"
            },
            zho: {
                official: "\u6CD5\u56FD\u5357\u90E8\u548C\u5357\u6781\u571F\u5730",
                common: "\u6CD5\u56FD\u5357\u90E8\u548C\u5357\u6781\u571F\u5730"
            }
        },
        latlng: [
            -49.25,
            69.167
        ],
        landlocked: false,
        area: 7747,
        demonyms: {
            eng: {
                f: "French",
                m: "French"
            },
            fra: {
                f: "Fran\xe7aise",
                m: "Fran\xe7ais"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDEB",
        maps: {
            googleMaps: "https://goo.gl/maps/6ua6CX1m4w1xF2Em7",
            openStreetMaps: "https://www.openstreetmap.org/relation/2186658"
        },
        population: 400,
        car: {
            signs: [
                ""
            ],
            side: "right"
        },
        timezones: [
            "UTC+05:00"
        ],
        continents: [
            "Antarctica"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tf.png",
            svg: "https://flagcdn.com/tf.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/tf.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/tf.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                48.81,
                -1.4
            ]
        }
    },
    {
        name: {
            common: "Sweden",
            official: "Kingdom of Sweden",
            nativeName: {
                swe: {
                    official: "Konungariket Sverige",
                    common: "Sverige"
                }
            }
        },
        tld: [
            ".se"
        ],
        cca2: "SE",
        ccn3: "752",
        cca3: "SWE",
        cioc: "SWE",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SEK: {
                name: "Swedish krona",
                symbol: "kr"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "6"
            ]
        },
        capital: [
            "Stockholm"
        ],
        altSpellings: [
            "SE",
            "Kingdom of Sweden",
            "Konungariket Sverige"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            swe: "Swedish"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0633\u0648\u064A\u062F",
                common: "\u0627\u0644\u0633\u0648\u064A\u062F"
            },
            bre: {
                official: "Rouantelezh Sveden",
                common: "Sveden"
            },
            ces: {
                official: "\u0160v\xe9dsk\xe9 kr\xe1lovstv\xed",
                common: "\u0160v\xe9dsko"
            },
            cym: {
                official: "Kingdom of Sweden",
                common: "Sweden"
            },
            deu: {
                official: "K\xf6nigreich Schweden",
                common: "Schweden"
            },
            est: {
                official: "Rootsi Kuningriik",
                common: "Rootsi"
            },
            fin: {
                official: "Ruotsin kuningaskunta",
                common: "Ruotsi"
            },
            fra: {
                official: "Royaume de Su\xe8de",
                common: "Su\xe8de"
            },
            hrv: {
                official: "Kraljevina \u0160vedska",
                common: "\u0160vedska"
            },
            hun: {
                official: "Sv\xe9d Kir\xe1lys\xe1g",
                common: "Sv\xe9dorsz\xe1g"
            },
            ita: {
                official: "Regno di Svezia",
                common: "Svezia"
            },
            jpn: {
                official: "\u30B9\u30A6\u30A7\u30FC\u30C7\u30F3\u738B\u56FD",
                common: "\u30B9\u30A6\u30A7\u30FC\u30C7\u30F3"
            },
            kor: {
                official: "\uC2A4\uC6E8\uB374 \uC655\uAD6D",
                common: "\uC2A4\uC6E8\uB374"
            },
            nld: {
                official: "Koninkrijk Zweden",
                common: "Zweden"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0633\u0648\u0626\u062F",
                common: "\u0633\u0648\u0626\u062F"
            },
            pol: {
                official: "Kr\xf3lestwo Szwecji",
                common: "Szwecja"
            },
            por: {
                official: "Reino da Su\xe9cia",
                common: "Su\xe9cia"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0428\u0432\u0435\u0446\u0438\u044F",
                common: "\u0428\u0432\u0435\u0446\u0438\u044F"
            },
            slk: {
                official: "\u0160v\xe9dske kr\xe1\u013Eovstvo",
                common: "\u0160v\xe9dsko"
            },
            spa: {
                official: "Reino de Suecia",
                common: "Suecia"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0428\u0432\u0435\u0434\u0441\u043A\u0430",
                common: "\u0428\u0432\u0435\u0434\u0441\u043A\u0430"
            },
            swe: {
                official: "Konungariket Sverige",
                common: "Sverige"
            },
            tur: {
                official: "\u0130sve\xe7 Krall\u0131\u011F\u0131",
                common: "\u0130sve\xe7"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0633\u0648\u06CC\u0688\u0646",
                common: "\u0633\u0648\u06CC\u0688\u0646"
            },
            zho: {
                official: "\u745E\u5178\u738B\u56FD",
                common: "\u745E\u5178"
            }
        },
        latlng: [
            62,
            15
        ],
        landlocked: false,
        borders: [
            "FIN",
            "NOR"
        ],
        area: 450295,
        demonyms: {
            eng: {
                f: "Swedish",
                m: "Swedish"
            },
            fra: {
                f: "Su\xe9doise",
                m: "Su\xe9dois"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/iqygE491ADVgnBW39",
            openStreetMaps: "https://www.openstreetmap.org/relation/52822"
        },
        population: 10353442,
        gini: {
            2018: 30
        },
        fifa: "SWE",
        car: {
            signs: [
                "S"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/se.png",
            svg: "https://flagcdn.com/se.svg",
            alt: "The flag of Sweden has a blue field with a large golden-yellow cross that extend to the edges of the field. The vertical part of this cross is offset towards the hoist side."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/se.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/se.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                59.33,
                18.05
            ]
        },
        postalCode: {
            format: "SE-### ##",
            regex: "^(?:SE)*(\\d{5})$"
        }
    },
    {
        name: {
            common: "Cuba",
            official: "Republic of Cuba",
            nativeName: {
                spa: {
                    official: "Rep\xfablica de Cuba",
                    common: "Cuba"
                }
            }
        },
        tld: [
            ".cu"
        ],
        cca2: "CU",
        ccn3: "192",
        cca3: "CUB",
        cioc: "CUB",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            CUC: {
                name: "Cuban convertible peso",
                symbol: "$"
            },
            CUP: {
                name: "Cuban peso",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "3"
            ]
        },
        capital: [
            "Havana"
        ],
        altSpellings: [
            "CU",
            "Republic of Cuba",
            "Rep\xfablica de Cuba"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0628\u0627",
                common: "\u0643\u0648\u0628\u0627"
            },
            bre: {
                official: "Republik Kuba",
                common: "Kuba"
            },
            ces: {
                official: "Kub\xe1nsk\xe1 republika",
                common: "Kuba"
            },
            cym: {
                official: "Gweriniaeth Ciwba",
                common: "Ciwba"
            },
            deu: {
                official: "Republik Kuba",
                common: "Kuba"
            },
            est: {
                official: "Kuuba Vabariik",
                common: "Kuuba"
            },
            fin: {
                official: "Kuuban tasavalta",
                common: "Kuuba"
            },
            fra: {
                official: "R\xe9publique de Cuba",
                common: "Cuba"
            },
            hrv: {
                official: "Republika Kuba",
                common: "Kuba"
            },
            hun: {
                official: "Kubai K\xf6zt\xe1rsas\xe1g",
                common: "Kuba"
            },
            ita: {
                official: "Repubblica di Cuba",
                common: "Cuba"
            },
            jpn: {
                official: "\u30AD\u30E5\u30FC\u30D0\u5171\u548C\u56FD",
                common: "\u30AD\u30E5\u30FC\u30D0"
            },
            kor: {
                official: "\uCFE0\uBC14 \uACF5\uD654\uAD6D",
                common: "\uCFE0\uBC14"
            },
            nld: {
                official: "Republiek Cuba",
                common: "Cuba"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0648\u0628\u0627",
                common: "\u06A9\u0648\u0628\u0627"
            },
            pol: {
                official: "Republika Kuby",
                common: "Kuba"
            },
            por: {
                official: "Rep\xfablica de Cuba",
                common: "Cuba"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0443\u0431\u0430",
                common: "\u041A\u0443\u0431\u0430"
            },
            slk: {
                official: "Kub\xe1nska republika",
                common: "Kuba"
            },
            spa: {
                official: "Rep\xfablica de Cuba",
                common: "Cuba"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0443\u0431\u0430",
                common: "\u041A\u0443\u0431\u0430"
            },
            swe: {
                official: "Republiken Kuba",
                common: "Kuba"
            },
            tur: {
                official: "K\xfcba Cumhuriyeti",
                common: "K\xfcba"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u06CC\u0648\u0628\u0627",
                common: "\u06A9\u06CC\u0648\u0628\u0627"
            },
            zho: {
                official: "\u53E4\u5DF4\u5171\u548C\u56FD",
                common: "\u53E4\u5DF4"
            }
        },
        latlng: [
            21.5,
            -80
        ],
        landlocked: false,
        area: 109884,
        demonyms: {
            eng: {
                f: "Cuban",
                m: "Cuban"
            },
            fra: {
                f: "Cubaine",
                m: "Cubain"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDFA",
        maps: {
            googleMaps: "https://goo.gl/maps/1dDw1QfZspfMUTm99",
            openStreetMaps: "https://www.openstreetmap.org/relation/307833"
        },
        population: 11326616,
        fifa: "CUB",
        car: {
            signs: [
                "C"
            ],
            side: "right"
        },
        timezones: [
            "UTC-05:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cu.png",
            svg: "https://flagcdn.com/cu.svg",
            alt: "The flag of Cuba is composed of five equal horizontal bands of blue alternating with white and a red equilateral triangle superimposed on the hoist side of the field. The triangle has its base on the hoist end, spans about two-fifth the width of the field and bears a white five-pointed star at its center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cu.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cu.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                23.12,
                -82.35
            ]
        },
        postalCode: {
            format: "CP #####",
            regex: "^(?:CP)*(\\d{5})$"
        }
    },
    {
        name: {
            common: "Kyrgyzstan",
            official: "Kyrgyz Republic",
            nativeName: {
                kir: {
                    official: "\u041A\u044B\u0440\u0433\u044B\u0437 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430\u0441\u044B",
                    common: "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u0442\u0430\u043D"
                },
                rus: {
                    official: "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                    common: "\u041A\u0438\u0440\u0433\u0438\u0437\u0438\u044F"
                }
            }
        },
        tld: [
            ".kg"
        ],
        cca2: "KG",
        ccn3: "417",
        cca3: "KGZ",
        cioc: "KGZ",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            KGS: {
                name: "Kyrgyzstani som",
                symbol: "\u0441"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "96"
            ]
        },
        capital: [
            "Bishkek"
        ],
        altSpellings: [
            "KG",
            "\u041A\u0438\u0440\u0433\u0438\u0437\u0438\u044F",
            "Kyrgyz Republic",
            "\u041A\u044B\u0440\u0433\u044B\u0437 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430\u0441\u044B",
            "Kyrgyz Respublikasy"
        ],
        region: "Asia",
        subregion: "Central Asia",
        languages: {
            kir: "Kyrgyz",
            rus: "Russian"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0642\u064A\u0631\u063A\u064A\u0632\u064A\u0629",
                common: "\u0642\u064A\u0631\u063A\u064A\u0632\u0633\u062A\u0627\u0646"
            },
            bre: {
                official: "Republik Kirgiz",
                common: "Kirgizstan"
            },
            ces: {
                official: "Kyrgyzsk\xe1 republika",
                common: "Kyrgyzst\xe1n"
            },
            cym: {
                official: "Kyrgyz Republic",
                common: "Kyrgyzstan"
            },
            deu: {
                official: "Kirgisische Republik",
                common: "Kirgisistan"
            },
            est: {
                official: "Kirgiisi Vabariik",
                common: "K\xf5rg\xf5zstan"
            },
            fin: {
                official: "Kirgisian tasavalta",
                common: "Kirgisia"
            },
            fra: {
                official: "R\xe9publique kirghize",
                common: "Kirghizistan"
            },
            hrv: {
                official: "Kirgistanu",
                common: "Kirgistan"
            },
            hun: {
                official: "Kirgiz K\xf6zt\xe1rsas\xe1g",
                common: "Kirgiziszt\xe1n"
            },
            ita: {
                official: "Kirghizistan",
                common: "Kirghizistan"
            },
            jpn: {
                official: "\u30AD\u30EB\u30AE\u30B9\u5171\u548C\u56FD",
                common: "\u30AD\u30EB\u30AE\u30B9"
            },
            kor: {
                official: "\uD0A4\uB974\uAE30\uC2A4 \uACF5\uD654\uAD6D",
                common: "\uD0A4\uB974\uAE30\uC2A4\uC2A4\uD0C4"
            },
            nld: {
                official: "Kirgizische Republiek",
                common: "Kirgizi\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0642\u0650\u0631\u0642\u06CC\u0632\u0633\u062A\u0627\u0646",
                common: "\u0642\u0631\u0642\u06CC\u0632\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Republika Kirgiska",
                common: "Kirgistan"
            },
            por: {
                official: "Rep\xfablica do Quirguist\xe3o",
                common: "Quirguist\xe3o"
            },
            rus: {
                official: "\u041A\u044B\u0440\u0433\u044B\u0437\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041A\u0438\u0440\u0433\u0438\u0437\u0438\u044F"
            },
            slk: {
                official: "Kirgizsk\xe1 republika",
                common: "Kirgizsko"
            },
            spa: {
                official: "Rep\xfablica Kirguisa",
                common: "Kirguizist\xe1n"
            },
            srp: {
                official: "\u041A\u0438\u0440\u0433\u0438\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041A\u0438\u0440\u0433\u0438\u0437\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Kirgizistan",
                common: "Kirgizistan"
            },
            tur: {
                official: "K\u0131rg\u0131zistan Cumhuriyeti",
                common: "K\u0131rg\u0131zistan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0631\u063A\u06CC\u0632\u0633\u062A\u0627\u0646",
                common: "\u06A9\u0631\u063A\u06CC\u0632\u0633\u062A\u0627\u0646"
            },
            zho: {
                official: "\u5409\u5C14\u5409\u65AF\u65AF\u5766\u5171\u548C\u56FD",
                common: "\u5409\u5C14\u5409\u65AF\u65AF\u5766"
            }
        },
        latlng: [
            41,
            75
        ],
        landlocked: true,
        borders: [
            "CHN",
            "KAZ",
            "TJK",
            "UZB"
        ],
        area: 199951,
        demonyms: {
            eng: {
                f: "Kirghiz",
                m: "Kirghiz"
            },
            fra: {
                f: "Kirghize",
                m: "Kirghize"
            }
        },
        flag: "\uD83C\uDDF0\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/SKG8BSMMQVvxkRkB7",
            openStreetMaps: "https://www.openstreetmap.org/relation/178009"
        },
        population: 6591600,
        gini: {
            2019: 29.7
        },
        fifa: "KGZ",
        car: {
            signs: [
                "KS"
            ],
            side: "right"
        },
        timezones: [
            "UTC+06:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/kg.png",
            svg: "https://flagcdn.com/kg.svg",
            alt: "The flag of Kyrgyzstan features a yellow sun with forty rays at the center of a red field. At the center of the sun is a stylized depiction of a tunduk."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/kg.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/kg.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                42.87,
                74.6
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Russia",
            official: "Russian Federation",
            nativeName: {
                rus: {
                    official: "\u0420\u043E\u0441\u0441\u0438\u0439\u0441\u043A\u0430\u044F \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044F",
                    common: "\u0420\u043E\u0441\u0441\u0438\u044F"
                }
            }
        },
        tld: [
            ".ru",
            ".su",
            ".\u0440\u0444"
        ],
        cca2: "RU",
        ccn3: "643",
        cca3: "RUS",
        cioc: "RUS",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            RUB: {
                name: "Russian ruble",
                symbol: "\u20BD"
            }
        },
        idd: {
            root: "+7",
            suffixes: [
                "3",
                "4",
                "5",
                "8",
                "9"
            ]
        },
        capital: [
            "Moscow"
        ],
        altSpellings: [
            "RU",
            "Russian Federation",
            "\u0420\u043E\u0441\u0441\u0438\u0439\u0441\u043A\u0430\u044F \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044F"
        ],
        region: "Europe",
        subregion: "Eastern Europe",
        languages: {
            rus: "Russian"
        },
        translations: {
            ara: {
                official: "\u0631\u0648\u0633\u064A\u0627 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                common: "\u0631\u0648\u0633\u064A\u0627"
            },
            bre: {
                official: "Kevread Rusia",
                common: "Rusia"
            },
            ces: {
                official: "Rusk\xe1 federace",
                common: "Rusko"
            },
            cym: {
                official: "Russian Federation",
                common: "Russia"
            },
            deu: {
                official: "Russische F\xf6deration",
                common: "Russland"
            },
            est: {
                official: "Venemaa F\xf6deratsioon",
                common: "Venemaa"
            },
            fin: {
                official: "Ven\xe4j\xe4n federaatio",
                common: "Ven\xe4j\xe4"
            },
            fra: {
                official: "F\xe9d\xe9ration de Russie",
                common: "Russie"
            },
            hrv: {
                official: "Ruska Federacija",
                common: "Rusija"
            },
            hun: {
                official: "Oroszorsz\xe1gi F\xf6der\xe1ci\xf3",
                common: "Oroszorsz\xe1g"
            },
            ita: {
                official: "Federazione russa",
                common: "Russia"
            },
            jpn: {
                official: "\u30ED\u30B7\u30A2\u9023\u90A6",
                common: "\u30ED\u30B7\u30A2\u9023\u90A6"
            },
            kor: {
                official: "\uB7EC\uC2DC\uC544 \uC5F0\uBC29",
                common: "\uB7EC\uC2DC\uC544"
            },
            nld: {
                official: "Russische Federatie",
                common: "Rusland"
            },
            per: {
                official: "\u0641\u062F\u0631\u0627\u0633\u06CC\u0648\u0646 \u0631\u0648\u0633\u06CC\u0647",
                common: "\u0631\u0648\u0633\u06CC\u0647"
            },
            pol: {
                official: "Federacja Rosyjska",
                common: "Rosja"
            },
            por: {
                official: "Federa\xe7\xe3o Russa",
                common: "R\xfassia"
            },
            rus: {
                official: "\u0420\u043E\u0441\u0441\u0438\u0439\u0441\u043A\u0430\u044F \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u044F",
                common: "\u0420\u043E\u0441\u0441\u0438\u044F"
            },
            slk: {
                official: "Rusk\xe1 feder\xe1cia",
                common: "Rusko"
            },
            spa: {
                official: "Federaci\xf3n de Rusia",
                common: "Rusia"
            },
            srp: {
                official: "\u0420\u0443\u0441\u043A\u0430 \u0424\u0435\u0434\u0435\u0440\u0430\u0446\u0438\u0458\u0430",
                common: "\u0420\u0443\u0441\u0438\u0458\u0430"
            },
            swe: {
                official: "Ryska federationen",
                common: "Ryssland"
            },
            tur: {
                official: "Rusya Federasyonu",
                common: "Rusya"
            },
            urd: {
                official: "\u0631\u0648\u0633\u06CC \u0648\u0641\u0627\u0642",
                common: "\u0631\u0648\u0633"
            },
            zho: {
                official: "\u4FC4\u7F57\u65AF\u8054\u90A6",
                common: "\u4FC4\u7F57\u65AF"
            }
        },
        latlng: [
            60,
            100
        ],
        landlocked: false,
        borders: [
            "AZE",
            "BLR",
            "CHN",
            "EST",
            "FIN",
            "GEO",
            "KAZ",
            "PRK",
            "LVA",
            "LTU",
            "MNG",
            "NOR",
            "POL",
            "UKR"
        ],
        area: 17098242,
        demonyms: {
            eng: {
                f: "Russian",
                m: "Russian"
            },
            fra: {
                f: "Russe",
                m: "Russe"
            }
        },
        flag: "\uD83C\uDDF7\uD83C\uDDFA",
        maps: {
            googleMaps: "https://goo.gl/maps/4F4PpDhGJgVvLby57",
            openStreetMaps: "https://www.openstreetmap.org/relation/60189#map=3/65.15/105.29"
        },
        population: 144104080,
        gini: {
            2018: 37.5
        },
        fifa: "RUS",
        car: {
            signs: [
                "RUS"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00",
            "UTC+04:00",
            "UTC+06:00",
            "UTC+07:00",
            "UTC+08:00",
            "UTC+09:00",
            "UTC+10:00",
            "UTC+11:00",
            "UTC+12:00"
        ],
        continents: [
            "Europe",
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ru.png",
            svg: "https://flagcdn.com/ru.svg",
            alt: "The flag of Russia is composed of three equal horizontal bands of white, blue and red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ru.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ru.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                55.75,
                37.6
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Malaysia",
            official: "Malaysia",
            nativeName: {
                eng: {
                    official: "Malaysia",
                    common: "Malaysia"
                },
                msa: {
                    official: "\u0645\u0644\u064A\u0633\u064A\u0627",
                    common: "\u0645\u0644\u064A\u0633\u064A\u0627"
                }
            }
        },
        tld: [
            ".my"
        ],
        cca2: "MY",
        ccn3: "458",
        cca3: "MYS",
        cioc: "MAS",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MYR: {
                name: "Malaysian ringgit",
                symbol: "RM"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "0"
            ]
        },
        capital: [
            "Kuala Lumpur"
        ],
        altSpellings: [
            "MY"
        ],
        region: "Asia",
        subregion: "South-Eastern Asia",
        languages: {
            eng: "English",
            msa: "Malay"
        },
        translations: {
            ara: {
                official: "\u0645\u0627\u0644\u064A\u0632\u064A\u0627",
                common: "\u0645\u0627\u0644\u064A\u0632\u064A\u0627"
            },
            bre: {
                official: "Malaysia",
                common: "Malaysia"
            },
            ces: {
                official: "Malajsie",
                common: "Malajsie"
            },
            cym: {
                official: "Malaysia",
                common: "Malaysia"
            },
            deu: {
                official: "Malaysia",
                common: "Malaysia"
            },
            est: {
                official: "Malaisia",
                common: "Malaisia"
            },
            fin: {
                official: "Malesia",
                common: "Malesia"
            },
            fra: {
                official: "F\xe9d\xe9ration de Malaisie",
                common: "Malaisie"
            },
            hrv: {
                official: "Malezija",
                common: "Malezija"
            },
            hun: {
                official: "Malajzia",
                common: "Malajzia"
            },
            ita: {
                official: "Malaysia",
                common: "Malesia"
            },
            jpn: {
                official: "\u30DE\u30EC\u30FC\u30B7\u30A2",
                common: "\u30DE\u30EC\u30FC\u30B7\u30A2"
            },
            kor: {
                official: "\uB9D0\uB808\uC774\uC2DC\uC544",
                common: "\uB9D0\uB808\uC774\uC2DC\uC544"
            },
            nld: {
                official: "Maleisi\xeb",
                common: "Maleisi\xeb"
            },
            per: {
                official: "\u0641\u062F\u0631\u0627\u0633\u06CC\u0648\u0646 \u0645\u0627\u0644\u0632\u06CC",
                common: "\u0645\u0627\u0644\u0632\u06CC"
            },
            pol: {
                official: "Malezja",
                common: "Malezja"
            },
            por: {
                official: "Mal\xe1sia",
                common: "Mal\xe1sia"
            },
            rus: {
                official: "\u041C\u0430\u043B\u0430\u0439\u0437\u0438\u044F",
                common: "\u041C\u0430\u043B\u0430\u0439\u0437\u0438\u044F"
            },
            slk: {
                official: "Malajzia",
                common: "Malajzia"
            },
            spa: {
                official: "Malasia",
                common: "Malasia"
            },
            srp: {
                official: "\u041C\u0430\u043B\u0435\u0437\u0438\u0458\u0430",
                common: "\u041C\u0430\u043B\u0435\u0437\u0438\u0458\u0430"
            },
            swe: {
                official: "Malaysia",
                common: "Malaysia"
            },
            tur: {
                official: "Malezya",
                common: "Malezya"
            },
            urd: {
                official: "\u0645\u0644\u0627\u0626\u06CC\u0634\u06CC\u0627",
                common: "\u0645\u0644\u0627\u0626\u06CC\u0634\u06CC\u0627"
            },
            zho: {
                official: "\u9A6C\u6765\u897F\u4E9A",
                common: "\u9A6C\u6765\u897F\u4E9A"
            }
        },
        latlng: [
            2.5,
            112.5
        ],
        landlocked: false,
        borders: [
            "BRN",
            "IDN",
            "THA"
        ],
        area: 330803,
        demonyms: {
            eng: {
                f: "Malaysian",
                m: "Malaysian"
            },
            fra: {
                f: "Malaisienne",
                m: "Malaisien"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDFE",
        maps: {
            googleMaps: "https://goo.gl/maps/qrY1PNeUXGyXDcPy6",
            openStreetMaps: "https://www.openstreetmap.org/relation/2108121"
        },
        population: 32365998,
        gini: {
            2015: 41.1
        },
        fifa: "MAS",
        car: {
            signs: [
                "MAL"
            ],
            side: "left"
        },
        timezones: [
            "UTC+08:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/my.png",
            svg: "https://flagcdn.com/my.svg",
            alt: "The flag of Malaysia is composed of fourteen equal horizontal bands of red alternating with white. A blue rectangle, bearing a fly-side facing yellow crescent and a fourteen-pointed yellow star placed just outside the crescent opening, is superimposed in the canton."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/my.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/my.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                3.17,
                101.7
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "S\xe3o Tom\xe9 and Pr\xedncipe",
            official: "Democratic Republic of S\xe3o Tom\xe9 and Pr\xedncipe",
            nativeName: {
                por: {
                    official: "Rep\xfablica Democr\xe1tica do S\xe3o Tom\xe9 e Pr\xedncipe",
                    common: "S\xe3o Tom\xe9 e Pr\xedncipe"
                }
            }
        },
        tld: [
            ".st"
        ],
        cca2: "ST",
        ccn3: "678",
        cca3: "STP",
        cioc: "STP",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            STN: {
                name: "S\xe3o Tom\xe9 and Pr\xedncipe dobra",
                symbol: "Db"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "39"
            ]
        },
        capital: [
            "S\xe3o Tom\xe9"
        ],
        altSpellings: [
            "ST",
            "Democratic Republic of S\xe3o Tom\xe9 and Pr\xedncipe",
            "Sao Tome and Principe",
            "Rep\xfablica Democr\xe1tica de S\xe3o Tom\xe9 e Pr\xedncipe"
        ],
        region: "Africa",
        subregion: "Middle Africa",
        languages: {
            por: "Portuguese"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0627\u0648 \u062A\u0648\u0645\u064A \u0648\u0628\u0631\u064A\u0646\u0633\u064A\u0628 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629",
                common: "\u0633\u0627\u0648 \u062A\u0648\u0645\u064A \u0648\u0628\u0631\u064A\u0646\u0633\u064A\u0628"
            },
            bre: {
                official: "Republik Demokratel S\xe3o Tom\xe9 ha Pr\xedncipe",
                common: "S\xe3o Tom\xe9 ha Pr\xedncipe"
            },
            ces: {
                official: "Demokratick\xe1 republika Svat\xfd Tom\xe1\u0161 a Princ\u016Fv ostrov",
                common: "Svat\xfd Tom\xe1\u0161 a Princ\u016Fv ostrov"
            },
            cym: {
                official: "Democratic Republic of S\xe3o Tom\xe9 and Pr\xedncipe",
                common: "S\xe3o Tom\xe9 and Pr\xedncipe"
            },
            deu: {
                official: "Demokratische Republik S\xe3o Tom\xe9 und Pr\xedncipe",
                common: "S\xe3o Tom\xe9 und Pr\xedncipe"
            },
            est: {
                official: "S\xe3o Tom\xe9 ja Pr\xedncipe Demokraatlik Vabariik",
                common: "S\xe3o Tom\xe9 ja Pr\xedncipe"
            },
            fin: {
                official: "S\xe3o Tom\xe9 ja Pr\xedncipen demokraattinen tasavalta",
                common: "S\xe3o T\xe9me ja Pr\xedncipe"
            },
            fra: {
                official: "R\xe9publique d\xe9mocratique de S\xe3o Tom\xe9 et Pr\xedncipe",
                common: "S\xe3o Tom\xe9 et Pr\xedncipe"
            },
            hrv: {
                official: "Demokratska Republika S\xe3o Tome i Principe",
                common: "Sveti Toma i Princip"
            },
            hun: {
                official: "S\xe3o Tom\xe9 \xe9s Pr\xedncipe Demokratikus K\xf6zt\xe1rsas\xe1g",
                common: "S\xe3o Tom\xe9 \xe9s Pr\xedncipe"
            },
            ita: {
                official: "Repubblica democratica di S\xe3o Tom\xe9 e Pr\xedncipe",
                common: "S\xe3o Tom\xe9 e Pr\xedncipe"
            },
            jpn: {
                official: "\u30B5\u30F3\u30C8\u30E1\xb7\u30D7\u30EA\u30F3\u30B7\u30DA\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u30B5\u30F3\u30C8\u30E1\u30FB\u30D7\u30EA\u30F3\u30B7\u30DA"
            },
            kor: {
                official: "\uC0C1\uD22C\uBA54 \uD504\uB9B0\uC2DC\uD398 \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                common: "\uC0C1\uD22C\uBA54 \uD504\uB9B0\uC2DC\uD398"
            },
            nld: {
                official: "Democratische Republiek Sao Tom\xe9 en Principe",
                common: "Sao Tom\xe9 en Principe"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u0633\u0627\u0626\u0648\u062A\u0648\u0645\u0647 \u0648 \u067E\u0631\u0646\u0633\u06CC\u067E",
                common: "\u0633\u0627\u0626\u0648\u062A\u0648\u0645\u0647 \u0648 \u067E\u0631\u0646\u0633\u06CC\u067E"
            },
            pol: {
                official: "Demokratyczna Republika Wysp \u015Awi\u0119tego Tomasza i Ksi\u0105\u017C\u0119cej",
                common: "Wyspy \u015Awi\u0119tego Tomasza i Ksi\u0105\u017C\u0119ca"
            },
            por: {
                official: "Rep\xfablica Democr\xe1tica de S\xe3o Tom\xe9 e Pr\xedncipe",
                common: "S\xe3o Tom\xe9 e Pr\xedncipe"
            },
            rus: {
                official: "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0430\u043D-\u0422\u043E\u043C\u0435 \u0438 \u041F\u0440\u0438\u043D\u0441\u0438\u043F\u0438",
                common: "\u0421\u0430\u043D-\u0422\u043E\u043C\u0435 \u0438 \u041F\u0440\u0438\u043D\u0441\u0438\u043F\u0438"
            },
            slk: {
                official: "Demokratick\xe1 republika Sv\xe4t\xe9ho Tom\xe1\u0161a A princovho ostrova",
                common: "Sv\xe4t\xfd Tom\xe1\u0161 a Princov ostrov"
            },
            spa: {
                official: "Rep\xfablica Democr\xe1tica de Santo Tom\xe9 y Pr\xedncipe",
                common: "Santo Tom\xe9 y Pr\xedncipe"
            },
            srp: {
                official: "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0430\u043E \u0422\u043E\u043C\u0435 \u0438 \u041F\u0440\u0438\u043D\u0441\u0438\u043F\u0435",
                common: "\u0421\u0430\u043E \u0422\u043E\u043C\u0435 \u0438 \u041F\u0440\u0438\u043D\u0441\u0438\u043F\u0435"
            },
            swe: {
                official: "Demokratiska republiken S\xe3o Tom\xe9 och Pr\xedncipe",
                common: "S\xe3o Tom\xe9 och Pr\xedncipe"
            },
            tur: {
                official: "S\xe3o Tom\xe9 ve Pr\xedncipe Demokratik Cumhuriyeti",
                common: "S\xe3o Tom\xe9 ve Pr\xedncipe"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0627\u0624 \u0679\u0648\u0645\u06D2 \u0648 \u067E\u0631\u0646\u0633\u067E\u06D2",
                common: "\u0633\u0627\u0624 \u0679\u0648\u0645\u06D2 \u0648 \u067E\u0631\u0646\u0633\u067E\u06D2"
            },
            zho: {
                official: "\u5723\u591A\u7F8E\u548C\u666E\u6797\u897F\u6BD4\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u5723\u591A\u7F8E\u548C\u666E\u6797\u897F\u6BD4"
            }
        },
        latlng: [
            1,
            7
        ],
        landlocked: false,
        area: 964,
        demonyms: {
            eng: {
                f: "Sao Tomean",
                m: "Sao Tomean"
            },
            fra: {
                f: "Santom\xe9enne",
                m: "Santom\xe9en"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/9EUppm13RtPX9oF46",
            openStreetMaps: "https://www.openstreetmap.org/relation/535880"
        },
        population: 219161,
        gini: {
            2017: 56.3
        },
        fifa: "STP",
        car: {
            signs: [
                "STP"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/st.png",
            svg: "https://flagcdn.com/st.svg",
            alt: "The flag of South Sudan is composed of three equal horizontal bands of black, red with white top and bottom edges, and green. A blue equilateral triangle which spans about two-fifth the width of the field is superimposed on the hoist side with its base on the hoist end of the field. At the center of this triangle is a five-pointed yellow star."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/st.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/st.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                0.34,
                6.73
            ]
        }
    },
    {
        name: {
            common: "Cyprus",
            official: "Republic of Cyprus",
            nativeName: {
                ell: {
                    official: "\u0394\u03B7\u03BC\u03BF\u03BA\u03C1\u03B1\u03C4\u03AF\u03B1 \u03C4\u03B7\u03C2 \u039A\u03CD\u03C0\u03C1\u03BF\u03C2",
                    common: "\u039A\u03CD\u03C0\u03C1\u03BF\u03C2"
                },
                tur: {
                    official: "K\u0131br\u0131s Cumhuriyeti",
                    common: "K\u0131br\u0131s"
                }
            }
        },
        tld: [
            ".cy"
        ],
        cca2: "CY",
        ccn3: "196",
        cca3: "CYP",
        cioc: "CYP",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "57"
            ]
        },
        capital: [
            "Nicosia"
        ],
        altSpellings: [
            "CY",
            "K\xfdpros",
            "K\u0131br\u0131s",
            "Republic of Cyprus",
            "\u039A\u03C5\u03C0\u03C1\u03B9\u03B1\u03BA\u03AE \u0394\u03B7\u03BC\u03BF\u03BA\u03C1\u03B1\u03C4\u03AF\u03B1",
            "K\u0131br\u0131s Cumhuriyeti"
        ],
        region: "Europe",
        subregion: "Southern Europe",
        languages: {
            ell: "Greek",
            tur: "Turkish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0642\u0628\u0631\u0635",
                common: "\u0642\u0628\u0631\u0635"
            },
            bre: {
                official: "Republik Kiprenez",
                common: "Kiprenez"
            },
            ces: {
                official: "Kypersk\xe1 republika",
                common: "Kypr"
            },
            cym: {
                official: "Gweriniaeth Cyprus",
                common: "Cyprus"
            },
            deu: {
                official: "Republik Zypern",
                common: "Zypern"
            },
            est: {
                official: "K\xfcprose Vabariik",
                common: "K\xfcpros"
            },
            fin: {
                official: "Kyproksen tasavalta",
                common: "Kypros"
            },
            fra: {
                official: "R\xe9publique de Chypre",
                common: "Chypre"
            },
            hrv: {
                official: "Republika Cipar",
                common: "Cipar"
            },
            hun: {
                official: "Ciprusi K\xf6zt\xe1rsas\xe1g",
                common: "Ciprus"
            },
            ita: {
                official: "Repubblica di Cipro",
                common: "Cipro"
            },
            jpn: {
                official: "\u30AD\u30D7\u30ED\u30B9\u5171\u548C\u56FD",
                common: "\u30AD\u30D7\u30ED\u30B9"
            },
            kor: {
                official: "\uD0A4\uD504\uB85C\uC2A4 \uACF5\uD654\uAD6D",
                common: "\uD0A4\uD504\uB85C\uC2A4"
            },
            nld: {
                official: "Republiek Cyprus",
                common: "Cyprus"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0642\u0628\u0631\u0633",
                common: "\u0642\u0650\u0628\u0631\u0650\u0633"
            },
            pol: {
                official: "Republika Cypryjska",
                common: "Cypr"
            },
            por: {
                official: "Rep\xfablica de Chipre",
                common: "Chipre"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0438\u043F\u0440",
                common: "\u041A\u0438\u043F\u0440"
            },
            slk: {
                official: "Cypersk\xe1 republika",
                common: "Cyprus"
            },
            spa: {
                official: "Rep\xfablica de Chipre",
                common: "Chipre"
            },
            srp: {
                official: "\u041A\u0438\u043F\u0430\u0440\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041A\u0438\u043F\u0430\u0440"
            },
            swe: {
                official: "Republiken Cypern",
                common: "Cypern"
            },
            tur: {
                official: "K\u0131br\u0131s Cumhuriyeti",
                common: "K\u0131br\u0131s"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0642\u0628\u0631\u0635",
                common: "\u0642\u0628\u0631\u0635"
            },
            zho: {
                official: "\u585E\u6D66\u8DEF\u65AF\u5171\u548C\u56FD",
                common: "\u585E\u6D66\u8DEF\u65AF"
            }
        },
        latlng: [
            35,
            33
        ],
        landlocked: false,
        area: 9251,
        demonyms: {
            eng: {
                f: "Cypriot",
                m: "Cypriot"
            },
            fra: {
                f: "Chypriote",
                m: "Chypriote"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDFE",
        maps: {
            googleMaps: "https://goo.gl/maps/77hPBRdLid8yD5Bm7",
            openStreetMaps: "https://www.openstreetmap.org/relation/307787"
        },
        population: 1207361,
        gini: {
            2018: 32.7
        },
        fifa: "CYP",
        car: {
            signs: [
                "CY"
            ],
            side: "left"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cy.png",
            svg: "https://flagcdn.com/cy.svg",
            alt: "The flag of Cyprus has a white field, at the center of which is a copper-colored silhouette of the Island of Cyprus above two green olive branches crossed at the stem."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cy.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cy.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                35.17,
                33.37
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Canada",
            official: "Canada",
            nativeName: {
                eng: {
                    official: "Canada",
                    common: "Canada"
                },
                fra: {
                    official: "Canada",
                    common: "Canada"
                }
            }
        },
        tld: [
            ".ca"
        ],
        cca2: "CA",
        ccn3: "124",
        cca3: "CAN",
        cioc: "CAN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            CAD: {
                name: "Canadian dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                ""
            ]
        },
        capital: [
            "Ottawa"
        ],
        altSpellings: [
            "CA"
        ],
        region: "Americas",
        subregion: "North America",
        languages: {
            eng: "English",
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0643\u0646\u062F\u0627",
                common: "\u0643\u0646\u062F\u0627"
            },
            bre: {
                official: "Kanada",
                common: "Kanada"
            },
            ces: {
                official: "Kanada",
                common: "Kanada"
            },
            cym: {
                official: "Canada",
                common: "Canada"
            },
            deu: {
                official: "Kanada",
                common: "Kanada"
            },
            est: {
                official: "Kanada",
                common: "Kanada"
            },
            fin: {
                official: "Kanada",
                common: "Kanada"
            },
            fra: {
                official: "Canada",
                common: "Canada"
            },
            hrv: {
                official: "Kanada",
                common: "Kanada"
            },
            hun: {
                official: "Kanada",
                common: "Kanada"
            },
            ita: {
                official: "Canada",
                common: "Canada"
            },
            jpn: {
                official: "\u30AB\u30CA\u30C0",
                common: "\u30AB\u30CA\u30C0"
            },
            kor: {
                official: "\uCE90\uB098\uB2E4",
                common: "\uCE90\uB098\uB2E4"
            },
            nld: {
                official: "Canada",
                common: "Canada"
            },
            per: {
                official: "\u06A9\u0627\u0646\u0627\u062F\u0627",
                common: "\u06A9\u0627\u0646\u0627\u062F\u0627"
            },
            pol: {
                official: "Kanada",
                common: "Kanada"
            },
            por: {
                official: "Canad\xe1",
                common: "Canad\xe1"
            },
            rus: {
                official: "\u041A\u0430\u043D\u0430\u0434\u0430",
                common: "\u041A\u0430\u043D\u0430\u0434\u0430"
            },
            slk: {
                official: "Kanada",
                common: "Kanada"
            },
            spa: {
                official: "Canad\xe1",
                common: "Canad\xe1"
            },
            srp: {
                official: "\u041A\u0430\u043D\u0430\u0434\u0430",
                common: "\u041A\u0430\u043D\u0430\u0434\u0430"
            },
            swe: {
                official: "Kanada",
                common: "Kanada"
            },
            tur: {
                official: "Kanada",
                common: "Kanada"
            },
            urd: {
                official: "\u06A9\u06CC\u0646\u06CC\u0688\u0627",
                common: "\u06A9\u06CC\u0646\u06CC\u0688\u0627"
            },
            zho: {
                official: "\u52A0\u62FF\u5927",
                common: "\u52A0\u62FF\u5927"
            }
        },
        latlng: [
            60,
            -95
        ],
        landlocked: false,
        borders: [
            "USA"
        ],
        area: 9984670,
        demonyms: {
            eng: {
                f: "Canadian",
                m: "Canadian"
            },
            fra: {
                f: "Canadienne",
                m: "Canadien"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDE6",
        maps: {
            googleMaps: "https://goo.gl/maps/jmEVLugreeqiZXxbA",
            openStreetMaps: "https://www.openstreetmap.org/relation/1428125"
        },
        population: 38005238,
        gini: {
            2017: 33.3
        },
        fifa: "CAN",
        car: {
            signs: [
                "CDN"
            ],
            side: "right"
        },
        timezones: [
            "UTC-08:00",
            "UTC-07:00",
            "UTC-06:00",
            "UTC-05:00",
            "UTC-04:00",
            "UTC-03:30"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ca.png",
            svg: "https://flagcdn.com/ca.svg",
            alt: "The flag of Canada is composed of a red vertical band on the hoist and fly sides and a central white square that is twice the width of the vertical bands. A large eleven-pointed red maple leaf is centered in the white square."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ca.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ca.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                45.42,
                -75.7
            ]
        },
        postalCode: {
            format: "@#@ #@#",
            regex: "^([ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJKLMNPRSTVWXYZ]) ?(\\d[ABCEGHJKLMNPRSTVWXYZ]\\d)$"
        }
    },
    {
        name: {
            common: "Malawi",
            official: "Republic of Malawi",
            nativeName: {
                eng: {
                    official: "Republic of Malawi",
                    common: "Malawi"
                },
                nya: {
                    official: "Chalo cha Malawi, Dziko la Mala\u0175i",
                    common: "Mala\u0175i"
                }
            }
        },
        tld: [
            ".mw"
        ],
        cca2: "MW",
        ccn3: "454",
        cca3: "MWI",
        cioc: "MAW",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MWK: {
                name: "Malawian kwacha",
                symbol: "MK"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "65"
            ]
        },
        capital: [
            "Lilongwe"
        ],
        altSpellings: [
            "MW",
            "Republic of Malawi"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            eng: "English",
            nya: "Chewa"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0627\u0644\u0627\u0648\u064A",
                common: "\u0645\u0627\u0644\u0627\u0648\u064A"
            },
            bre: {
                official: "Republik Malawi",
                common: "Malawi"
            },
            ces: {
                official: "Malawisk\xe1 republika",
                common: "Malawi"
            },
            cym: {
                official: "Republic of Malawi",
                common: "Malawi"
            },
            deu: {
                official: "Republik Malawi",
                common: "Malawi"
            },
            est: {
                official: "Malawi Vabariik",
                common: "Malawi"
            },
            fin: {
                official: "Malawin tasavalta",
                common: "Malawi"
            },
            fra: {
                official: "R\xe9publique du Malawi",
                common: "Malawi"
            },
            hrv: {
                official: "Republika Malavi",
                common: "Malavi"
            },
            hun: {
                official: "Malawi K\xf6zt\xe1rsas\xe1g",
                common: "Malawi"
            },
            ita: {
                official: "Repubblica del Malawi",
                common: "Malawi"
            },
            jpn: {
                official: "\u30DE\u30E9\u30A6\u30A4\u5171\u548C\u56FD",
                common: "\u30DE\u30E9\u30A6\u30A4"
            },
            kor: {
                official: "\uB9D0\uB77C\uC704 \uACF5\uD654\uAD6D",
                common: "\uB9D0\uB77C\uC704"
            },
            nld: {
                official: "Republiek Malawi",
                common: "Malawi"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0627\u0644\u0627\u0648\u06CC",
                common: "\u0645\u0627\u0644\u0627\u0648\u06CC"
            },
            pol: {
                official: "Republika Malawi",
                common: "Malawi"
            },
            por: {
                official: "Rep\xfablica do Malawi",
                common: "Malawi"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u0430\u0432\u0438",
                common: "\u041C\u0430\u043B\u0430\u0432\u0438"
            },
            slk: {
                official: "Malawijsk\xe1 republika",
                common: "Malawi"
            },
            spa: {
                official: "Rep\xfablica de Malawi",
                common: "Malawi"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u0430\u0432\u0438",
                common: "\u041C\u0430\u043B\u0430\u0432\u0438"
            },
            swe: {
                official: "Republiken Malawi",
                common: "Malawi"
            },
            tur: {
                official: "Malavi Cumhuriyeti",
                common: "Malavi"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0644\u0627\u0648\u06CC",
                common: "\u0645\u0644\u0627\u0648\u06CC"
            },
            zho: {
                official: "\u9A6C\u62C9\u7EF4\u5171\u548C\u56FD",
                common: "\u9A6C\u62C9\u7EF4"
            }
        },
        latlng: [
            -13.5,
            34
        ],
        landlocked: true,
        borders: [
            "MOZ",
            "TZA",
            "ZMB"
        ],
        area: 118484,
        demonyms: {
            eng: {
                f: "Malawian",
                m: "Malawian"
            },
            fra: {
                f: "Malawienne",
                m: "Malawien"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDFC",
        maps: {
            googleMaps: "https://goo.gl/maps/mc6z83pW9m98X2Ef6",
            openStreetMaps: "https://www.openstreetmap.org/relation/195290"
        },
        population: 19129955,
        gini: {
            2016: 44.7
        },
        fifa: "MWI",
        car: {
            signs: [
                "MW"
            ],
            side: "left"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mw.png",
            svg: "https://flagcdn.com/mw.svg",
            alt: "The flag of Malawi is composed of three equal horizontal bands of black, red and green. The top half of a red sun with thirty-one visible rays is centered in the black band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mw.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mw.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -13.97,
                33.78
            ]
        }
    },
    {
        name: {
            common: "Saudi Arabia",
            official: "Kingdom of Saudi Arabia",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
                    common: "\u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629"
                }
            }
        },
        tld: [
            ".sa",
            ".\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629"
        ],
        cca2: "SA",
        ccn3: "682",
        cca3: "SAU",
        cioc: "KSA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SAR: {
                name: "Saudi riyal",
                symbol: "\u0631.\u0633"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "66"
            ]
        },
        capital: [
            "Riyadh"
        ],
        altSpellings: [
            "Saudi",
            "SA",
            "Kingdom of Saudi Arabia",
            "Al-Mamlakah al-\u2018Arabiyyah as-Su\u2018\u016Bdiyyah"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
                common: "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629"
            },
            bre: {
                official: "Rouantelezh Arabia Saoudat",
                common: "Arabia Saoudat"
            },
            ces: {
                official: "Sa\xfadskoarabsk\xe9 kr\xe1lovstv\xed",
                common: "Sa\xfadsk\xe1 Ar\xe1bie"
            },
            cym: {
                official: "Kingdom of Saudi Arabia",
                common: "Saudi Arabia"
            },
            deu: {
                official: "K\xf6nigreich Saudi-Arabien",
                common: "Saudi-Arabien"
            },
            est: {
                official: "Saudi Araabia Kuningriik",
                common: "Saudi Araabia"
            },
            fin: {
                official: "Saudi-Arabian kuningaskunta",
                common: "Saudi-Arabia"
            },
            fra: {
                official: "Royaume d'Arabie Saoudite",
                common: "Arabie Saoudite"
            },
            hrv: {
                official: "Kraljevina Saudijska Arabija",
                common: "Saudijska Arabija"
            },
            hun: {
                official: "Sza\xfad-Ar\xe1bia",
                common: "Sza\xfad-Ar\xe1bia"
            },
            ita: {
                official: "Arabia Saudita",
                common: "Arabia Saudita"
            },
            jpn: {
                official: "\u30B5\u30A6\u30B8\u30A2\u30E9\u30D3\u30A2\u738B\u56FD",
                common: "\u30B5\u30A6\u30B8\u30A2\u30E9\u30D3\u30A2"
            },
            kor: {
                official: "\uC0AC\uC6B0\uB514\uC544\uB77C\uBE44\uC544 \uC655\uAD6D",
                common: "\uC0AC\uC6B0\uB514\uC544\uB77C\uBE44\uC544"
            },
            nld: {
                official: "Koninkrijk van Saoedi-Arabi\xeb",
                common: "Saoedi-Arabi\xeb"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0639\u0631\u0628\u06CC \u0633\u064E\u0639\u0648\u062F\u06CC",
                common: "\u0639\u0631\u0628\u0633\u062A\u0627\u0646 \u0633\u0639\u0648\u062F\u06CC"
            },
            pol: {
                official: "Kr\xf3lestwo Arabii Saudyjskiej",
                common: "Arabia Saudyjska"
            },
            por: {
                official: "Reino da Ar\xe1bia Saudita",
                common: "Ar\xe1bia Saudita"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0421\u0430\u0443\u0434\u043E\u0432\u0441\u043A\u0430\u044F \u0410\u0440\u0430\u0432\u0438\u044F",
                common: "\u0421\u0430\u0443\u0434\u043E\u0432\u0441\u043A\u0430\u044F \u0410\u0440\u0430\u0432\u0438\u044F"
            },
            slk: {
                official: "Saudskoarabsk\xe9 kr\xe1\u013Eovstvo",
                common: "Saudsk\xe1 Ar\xe1bia"
            },
            spa: {
                official: "Reino de Arabia Saudita",
                common: "Arabia Saud\xed"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0421\u0430\u0443\u0434\u0438\u0458\u0441\u043A\u0430 \u0410\u0440\u0430\u0431\u0438\u0458\u0430",
                common: "\u0421\u0430\u0443\u0434\u0438\u0458\u0441\u043A\u0430 \u0410\u0440\u0430\u0431\u0438\u0458\u0430"
            },
            swe: {
                official: "Kungad\xf6met Saudiarabien",
                common: "Saudiarabien"
            },
            tur: {
                official: "Suudi Arabistan Krall\u0131\u011F\u0131",
                common: "Suudi Arabistan"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0633\u0639\u0648\u062F\u06CC \u0639\u0631\u0628",
                common: "\u0633\u0639\u0648\u062F\u06CC \u0639\u0631\u0628"
            },
            zho: {
                official: "\u6C99\u7279\u963F\u62C9\u4F2F\u738B\u56FD",
                common: "\u6C99\u7279\u963F\u62C9\u4F2F"
            }
        },
        latlng: [
            25,
            45
        ],
        landlocked: false,
        borders: [
            "IRQ",
            "JOR",
            "KWT",
            "OMN",
            "QAT",
            "ARE",
            "YEM"
        ],
        area: 2149690,
        demonyms: {
            eng: {
                f: "Saudi Arabian",
                m: "Saudi Arabian"
            },
            fra: {
                f: "Saoudienne",
                m: "Saoudien"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDE6",
        maps: {
            googleMaps: "https://goo.gl/maps/5PSjvdJ1AyaLFRrG9",
            openStreetMaps: "https://www.openstreetmap.org/relation/307584"
        },
        population: 34813867,
        fifa: "KSA",
        car: {
            signs: [
                "SA"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sa.png",
            svg: "https://flagcdn.com/sa.svg",
            alt: "The flag of Saudi Arabia has a green field, at the center of which is an Arabic inscription \u2014 the Shahada \u2014 in white above a white horizontal sabre with its tip pointed to the hoist side of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sa.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sa.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                24.65,
                46.7
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Bosnia and Herzegovina",
            official: "Bosnia and Herzegovina",
            nativeName: {
                bos: {
                    official: "Bosna i Hercegovina",
                    common: "Bosna i Hercegovina"
                },
                hrv: {
                    official: "Bosna i Hercegovina",
                    common: "Bosna i Hercegovina"
                },
                srp: {
                    official: "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430",
                    common: "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430"
                }
            }
        },
        tld: [
            ".ba"
        ],
        cca2: "BA",
        ccn3: "070",
        cca3: "BIH",
        cioc: "BIH",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BAM: {
                name: "Bosnia and Herzegovina convertible mark",
                symbol: "KM"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "87"
            ]
        },
        capital: [
            "Sarajevo"
        ],
        altSpellings: [
            "BA",
            "Bosnia-Herzegovina",
            "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430"
        ],
        region: "Europe",
        subregion: "Southeast Europe",
        languages: {
            bos: "Bosnian",
            hrv: "Croatian",
            srp: "Serbian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0628\u0648\u0633\u0646\u0629 \u0648\u0627\u0644\u0647\u0631\u0633\u0643",
                common: "\u0627\u0644\u0628\u0648\u0633\u0646\u0629 \u0648\u0627\u0644\u0647\u0631\u0633\u0643"
            },
            bre: {
                official: "Bosnia-ha-Herzegovina",
                common: "Bosnia-ha-Herzegovina"
            },
            ces: {
                official: "Bosna a Hercegovina",
                common: "Bosna a Hercegovina"
            },
            cym: {
                official: "Bosnia a Hercegovina",
                common: "Bosnia a Hercegovina"
            },
            deu: {
                official: "Bosnien und Herzegowina",
                common: "Bosnien und Herzegowina"
            },
            est: {
                official: "Bosnia ja Hertsegoviina",
                common: "Bosnia ja Hertsegoviina"
            },
            fin: {
                official: "Bosnia ja Hertsegovina",
                common: "Bosnia ja Hertsegovina"
            },
            fra: {
                official: "Bosnie-et-Herz\xe9govine",
                common: "Bosnie-Herz\xe9govine"
            },
            hrv: {
                official: "Bosna i Hercegovina",
                common: "Bosna i Hercegovina"
            },
            hun: {
                official: "Bosznia-Hercegovina",
                common: "Bosznia-Hercegovina"
            },
            ita: {
                official: "Bosnia-Erzegovina",
                common: "Bosnia ed Erzegovina"
            },
            jpn: {
                official: "\u30DC\u30B9\u30CB\u30A2\xb7\u30D8\u30EB\u30C4\u30A7\u30B4\u30D3\u30CA",
                common: "\u30DC\u30B9\u30CB\u30A2\u30FB\u30D8\u30EB\u30C4\u30A7\u30B4\u30D3\u30CA"
            },
            kor: {
                official: "\uBCF4\uC2A4\uB2C8\uC544 \uD5E4\uB974\uCCB4\uACE0\uBE44\uB098",
                common: "\uBCF4\uC2A4\uB2C8\uC544 \uD5E4\uB974\uCCB4\uACE0\uBE44\uB098"
            },
            nld: {
                official: "Bosni\xeb-Herzegovina",
                common: "Bosni\xeb en Herzegovina"
            },
            per: {
                official: "\u0628\u0648\u0633\u0646\u06CC \u0648 \u0647\u0631\u0632\u06AF\u0648\u06CC\u0646",
                common: "\u0628\u0648\u0633\u0646\u06CC \u0648 \u0647\u0631\u0632\u06AF\u0648\u06CC\u0646"
            },
            pol: {
                official: "Bo\u015Bnia i Hercegowina",
                common: "Bo\u015Bnia i Hercegowina"
            },
            por: {
                official: "B\xf3snia e Herzegovina",
                common: "B\xf3snia e Herzegovina"
            },
            rus: {
                official: "\u0411\u043E\u0441\u043D\u0438\u044F \u0438 \u0413\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430",
                common: "\u0411\u043E\u0441\u043D\u0438\u044F \u0438 \u0413\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430"
            },
            slk: {
                official: "Republika Bosny a Hercegoviny",
                common: "Bosna a Hercegovina"
            },
            spa: {
                official: "Bosnia y Herzegovina",
                common: "Bosnia y Herzegovina"
            },
            srp: {
                official: "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430",
                common: "\u0411\u043E\u0441\u043D\u0430 \u0438 \u0425\u0435\u0440\u0446\u0435\u0433\u043E\u0432\u0438\u043D\u0430"
            },
            swe: {
                official: "Bosnien och Hercegovina",
                common: "Bosnien och Hercegovina"
            },
            tur: {
                official: "Bosna ve Hersek",
                common: "Bosna-Hersek"
            },
            urd: {
                official: "\u0628\u0648\u0633\u0646\u06CC\u0627 \u0648 \u06C1\u0631\u0632\u06CC\u06AF\u0648\u0648\u06CC\u0646\u0627",
                common: "\u0628\u0648\u0633\u0646\u06CC\u0627 \u0648 \u06C1\u0631\u0632\u06CC\u06AF\u0648\u0648\u06CC\u0646\u0627"
            },
            zho: {
                official: "\u6CE2\u65AF\u5C3C\u4E9A\u548C\u9ED1\u585E\u54E5\u7EF4\u90A3",
                common: "\u6CE2\u65AF\u5C3C\u4E9A\u548C\u9ED1\u585E\u54E5\u7EF4\u90A3"
            }
        },
        latlng: [
            44,
            18
        ],
        landlocked: false,
        borders: [
            "HRV",
            "MNE",
            "SRB"
        ],
        area: 51209,
        demonyms: {
            eng: {
                f: "Bosnian, Herzegovinian",
                m: "Bosnian, Herzegovinian"
            },
            fra: {
                f: "Bosnienne",
                m: "Bosnien"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDE6",
        maps: {
            googleMaps: "https://www.google.com/maps/place/Bosnia+and+Herzegovina",
            openStreetMaps: "https://www.openstreetmap.org/relation/2528142"
        },
        population: 3280815,
        gini: {
            2011: 33
        },
        fifa: "BIH",
        car: {
            signs: [
                "BIH"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ba.png",
            svg: "https://flagcdn.com/ba.svg",
            alt: "The flag of Bosnia and Herzegovina has a blue field, at the center of which is a large yellow hoist-side facing right-angled triangle that is based on the top edge and spans the height of the field. Adjacent to the hypotenuse of this triangle are nine adjoining five-pointed white stars with the top and bottom stars cut in half by the edges of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ba.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ba.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                43.87,
                18.42
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Ethiopia",
            official: "Federal Democratic Republic of Ethiopia",
            nativeName: {
                amh: {
                    official: "\u12E8\u12A2\u1275\u12EE\u1335\u12EB \u134C\u12F4\u122B\u120B\u12CA \u12F2\u121E\u12AD\u122B\u1232\u12EB\u12CA \u122A\u1350\u1265\u120A\u12AD",
                    common: "\u12A2\u1275\u12EE\u1335\u12EB"
                }
            }
        },
        tld: [
            ".et"
        ],
        cca2: "ET",
        ccn3: "231",
        cca3: "ETH",
        cioc: "ETH",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            ETB: {
                name: "Ethiopian birr",
                symbol: "Br"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "51"
            ]
        },
        capital: [
            "Addis Ababa"
        ],
        altSpellings: [
            "ET",
            "\u02BE\u012Aty\u014D\u1E57\u1E57y\u0101",
            "Federal Democratic Republic of Ethiopia",
            "\u12E8\u12A2\u1275\u12EE\u1335\u12EB \u134C\u12F4\u122B\u120B\u12CA \u12F2\u121E\u12AD\u122B\u1232\u12EB\u12CA \u122A\u1350\u1265\u120A\u12AD"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            amh: "Amharic"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0625\u062B\u064A\u0648\u0628\u064A\u0627 \u0627\u0644\u0641\u062F\u0631\u0627\u0644\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0648\u0642\u0631\u0627\u0637\u064A\u0629",
                common: "\u0625\u062B\u064A\u0648\u0628\u064A\u0627"
            },
            bre: {
                official: "Republik Demokratel Kevredadel Etiopia",
                common: "Etiopia"
            },
            ces: {
                official: "Etiopsk\xe1 federativn\xed demokratick\xe1 republika",
                common: "Etiopie"
            },
            cym: {
                official: "Gweriniaeth Ddemocrataidd Ffederal Ethiopia",
                common: "Ethiopia"
            },
            deu: {
                official: "Demokratische Bundesrepublik \xc4thiopien",
                common: "\xc4thiopien"
            },
            est: {
                official: "Etioopia Demokraatlik Liitvabariik",
                common: "Etioopia"
            },
            fin: {
                official: "Etiopian demokraattinen liittotasavalta",
                common: "Etiopia"
            },
            fra: {
                official: "R\xe9publique f\xe9d\xe9rale d\xe9mocratique d'\xc9thiopie",
                common: "\xc9thiopie"
            },
            hrv: {
                official: "Savezna Demokratska Republika Etiopija",
                common: "Etiopija"
            },
            hun: {
                official: "Eti\xf3p Sz\xf6vets\xe9gi Demokratikus K\xf6zt\xe1rsas\xe1g",
                common: "Eti\xf3pia"
            },
            ita: {
                official: "Repubblica federale democratica di Etiopia",
                common: "Etiopia"
            },
            jpn: {
                official: "\u30A8\u30C1\u30AA\u30D4\u30A2\u9023\u90A6\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u30A8\u30C1\u30AA\u30D4\u30A2"
            },
            kor: {
                official: "\uC5D0\uD2F0\uC624\uD53C\uC544 \uC5F0\uBC29 \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                common: "\uC5D0\uD2F0\uC624\uD53C\uC544"
            },
            nld: {
                official: "Federale Democratische Republiek Ethiopi\xeb",
                common: "Ethiopi\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u0644 \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u0627\u062A\u06CC\u0648\u067E\u06CC",
                common: "\u0627\u0650\u062A\u06CC\u0648\u067E\u06CC"
            },
            pol: {
                official: "Federalna Demokratyczna Republika Etiopii",
                common: "Etiopia"
            },
            por: {
                official: "Rep\xfablica Federal Democr\xe1tica da Eti\xf3pia",
                common: "Eti\xf3pia"
            },
            rus: {
                official: "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u042D\u0444\u0438\u043E\u043F\u0438\u044F",
                common: "\u042D\u0444\u0438\u043E\u043F\u0438\u044F"
            },
            slk: {
                official: "Eti\xf3pska federat\xedvna demokratick\xe1 republika",
                common: "Eti\xf3pia"
            },
            spa: {
                official: "Rep\xfablica Democr\xe1tica Federal de Etiop\xeda",
                common: "Etiop\xeda"
            },
            srp: {
                official: "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u0442\u0438\u043E\u043F\u0438\u0458\u0430",
                common: "\u0415\u0442\u0438\u043E\u043F\u0438\u0458\u0430"
            },
            swe: {
                official: "Demokratiska f\xf6rbundsrepubliken Etiopien",
                common: "Etiopien"
            },
            tur: {
                official: "Etiyopya Federal Demokratik Cumhuriyeti",
                common: "Etiyopya"
            },
            urd: {
                official: "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u06CC\u062A\u06BE\u0648\u067E\u06CC\u0627",
                common: "\u0627\u06CC\u062A\u06BE\u0648\u067E\u06CC\u0627"
            },
            zho: {
                official: "\u57C3\u585E\u4FC4\u6BD4\u4E9A\u8054\u90A6\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u57C3\u585E\u4FC4\u6BD4\u4E9A"
            }
        },
        latlng: [
            8,
            38
        ],
        landlocked: true,
        borders: [
            "DJI",
            "ERI",
            "KEN",
            "SOM",
            "SSD",
            "SDN"
        ],
        area: 1104300,
        demonyms: {
            eng: {
                f: "Ethiopian",
                m: "Ethiopian"
            },
            fra: {
                f: "\xc9thiopienne",
                m: "\xc9thiopien"
            }
        },
        flag: "\uD83C\uDDEA\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/2Q4hQWCbhuZLj3fG6",
            openStreetMaps: "https://www.openstreetmap.org/relation/192800"
        },
        population: 114963583,
        gini: {
            2015: 35
        },
        fifa: "ETH",
        car: {
            signs: [
                "ETH"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/et.png",
            svg: "https://flagcdn.com/et.svg",
            alt: "The flag of Ethiopia is composed of three equal horizontal bands of green, yellow and red, with the national emblem superimposed at the center of the field. The national emblem comprises a light blue circle bearing a golden-yellow pentagram with single yellow rays emanating from the angles between the points of the pentagram."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/et.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/et.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                9.03,
                38.7
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Spain",
            official: "Kingdom of Spain",
            nativeName: {
                spa: {
                    official: "Reino de Espa\xf1a",
                    common: "Espa\xf1a"
                }
            }
        },
        tld: [
            ".es"
        ],
        cca2: "ES",
        ccn3: "724",
        cca3: "ESP",
        cioc: "ESP",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "4"
            ]
        },
        capital: [
            "Madrid"
        ],
        altSpellings: [
            "ES",
            "Kingdom of Spain",
            "Reino de Espa\xf1a"
        ],
        region: "Europe",
        subregion: "Southern Europe",
        languages: {
            spa: "Spanish",
            cat: "Catalan",
            eus: "Basque",
            glc: "Galician"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u0625\u0633\u0628\u0627\u0646\u064A\u0627",
                common: "\u0625\u0633\u0628\u0627\u0646\u064A\u0627"
            },
            bre: {
                official: "Rouantelezh Spagn",
                common: "Spagn"
            },
            ces: {
                official: "\u0160pan\u011Blsk\xe9 kr\xe1lovstv\xed",
                common: "\u0160pan\u011Blsko"
            },
            cym: {
                official: "Kingdom of Spain",
                common: "Spain"
            },
            deu: {
                official: "K\xf6nigreich Spanien",
                common: "Spanien"
            },
            est: {
                official: "Hispaania Kuningriik",
                common: "Hispaania"
            },
            fin: {
                official: "Espanjan kuningaskunta",
                common: "Espanja"
            },
            fra: {
                official: "Royaume d'Espagne",
                common: "Espagne"
            },
            hrv: {
                official: "Kraljevina \u0160panjolska",
                common: "\u0160panjolska"
            },
            hun: {
                official: "Spanyol Kir\xe1lys\xe1g",
                common: "Spanyolorsz\xe1g"
            },
            ita: {
                official: "Regno di Spagna",
                common: "Spagna"
            },
            jpn: {
                official: "\u30B9\u30DA\u30A4\u30F3\u738B\u56FD",
                common: "\u30B9\u30DA\u30A4\u30F3"
            },
            kor: {
                official: "\uC5D0\uC2A4\uD30C\uB0D0 \uC655\uAD6D",
                common: "\uC2A4\uD398\uC778"
            },
            nld: {
                official: "Koninkrijk Spanje",
                common: "Spanje"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0627\u0633\u067E\u0627\u0646\u06CC\u0627",
                common: "\u0627\u0633\u067E\u0627\u0646\u06CC\u0627"
            },
            pol: {
                official: "Kr\xf3lestwo Hiszpanii ",
                common: "Hiszpania"
            },
            por: {
                official: "Reino de Espanha",
                common: "Espanha"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0418\u0441\u043F\u0430\u043D\u0438\u044F",
                common: "\u0418\u0441\u043F\u0430\u043D\u0438\u044F"
            },
            slk: {
                official: "\u0160panielske kr\xe1\u013Eovstvo",
                common: "\u0160panielsko"
            },
            spa: {
                official: "Reino de Espa\xf1a",
                common: "Espa\xf1a"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0428\u043F\u0430\u043D\u0438\u0458\u0430",
                common: "\u0428\u043F\u0430\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Konungariket Spanien",
                common: "Spanien"
            },
            tur: {
                official: "\u0130spanya Krall\u0131\u011F\u0131",
                common: "\u0130spanya"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u06C1\u0633\u067E\u0627\u0646\u06CC\u06C1",
                common: "\u06C1\u0633\u067E\u0627\u0646\u06CC\u06C1"
            },
            zho: {
                official: "\u897F\u73ED\u7259\u738B\u56FD",
                common: "\u897F\u73ED\u7259"
            }
        },
        latlng: [
            40,
            -4
        ],
        landlocked: false,
        borders: [
            "AND",
            "FRA",
            "GIB",
            "PRT",
            "MAR"
        ],
        area: 505992,
        demonyms: {
            eng: {
                f: "Spanish",
                m: "Spanish"
            },
            fra: {
                f: "Espagnole",
                m: "Espagnol"
            }
        },
        flag: "\uD83C\uDDEA\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/138JaXW8EZzRVitY9",
            openStreetMaps: "https://www.openstreetmap.org/relation/1311341"
        },
        population: 47351567,
        gini: {
            2018: 34.7
        },
        fifa: "ESP",
        car: {
            signs: [
                "E"
            ],
            side: "right"
        },
        timezones: [
            "UTC",
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/es.png",
            svg: "https://flagcdn.com/es.svg",
            alt: "The flag of Spain is composed of three horizontal bands of red, yellow and red, with the yellow band twice the height of the red bands. In the yellow band is the national coat of arms offset slightly towards the hoist side of center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/es.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/es.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                40.4,
                -3.68
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Slovenia",
            official: "Republic of Slovenia",
            nativeName: {
                slv: {
                    official: "Republika Slovenija",
                    common: "Slovenija"
                }
            }
        },
        tld: [
            ".si"
        ],
        cca2: "SI",
        ccn3: "705",
        cca3: "SVN",
        cioc: "SLO",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "86"
            ]
        },
        capital: [
            "Ljubljana"
        ],
        altSpellings: [
            "SI",
            "Republic of Slovenia",
            "Republika Slovenija"
        ],
        region: "Europe",
        subregion: "Central Europe",
        languages: {
            slv: "Slovene"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0644\u0648\u0641\u064A\u0646\u064A\u0627",
                common: "\u0633\u0644\u0648\u0641\u064A\u0646\u064A\u0627"
            },
            bre: {
                official: "Republik Slovenia",
                common: "Slovenia"
            },
            ces: {
                official: "Slovinsk\xe1 republika",
                common: "Slovinsko"
            },
            cym: {
                official: "Republic of Slovenia",
                common: "Slovenia"
            },
            deu: {
                official: "Republik Slowenien",
                common: "Slowenien"
            },
            est: {
                official: "Sloveenia Vabariik",
                common: "Sloveenia"
            },
            fin: {
                official: "Slovenian tasavalta",
                common: "Slovenia"
            },
            fra: {
                official: "R\xe9publique de Slov\xe9nie",
                common: "Slov\xe9nie"
            },
            hrv: {
                official: "Republika Slovenija",
                common: "Slovenija"
            },
            hun: {
                official: "Szlov\xe9n K\xf6zt\xe1rsas\xe1g",
                common: "Szlov\xe9nia"
            },
            ita: {
                official: "Repubblica di Slovenia",
                common: "Slovenia"
            },
            jpn: {
                official: "\u30B9\u30ED\u30D9\u30CB\u30A2\u5171\u548C\u56FD",
                common: "\u30B9\u30ED\u30D9\u30CB\u30A2"
            },
            kor: {
                official: "\uC2AC\uB85C\uBCA0\uB2C8\uC544 \uACF5\uD654\uAD6D",
                common: "\uC2AC\uB85C\uBCA0\uB2C8\uC544"
            },
            nld: {
                official: "Republiek Sloveni\xeb",
                common: "Sloveni\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0648\u0648\u0646\u06CC",
                common: "\u0627\u0633\u0644\u0648\u0648\u0646\u06CC"
            },
            pol: {
                official: "Republika S\u0142owenii",
                common: "S\u0142owenia"
            },
            por: {
                official: "Rep\xfablica da Eslov\xe9nia",
                common: "Eslov\xe9nia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u043B\u043E\u0432\u0435\u043D\u0438\u044F",
                common: "\u0421\u043B\u043E\u0432\u0435\u043D\u0438\u044F"
            },
            slk: {
                official: "Slovinsk\xe1 republika",
                common: "Slovinsko"
            },
            spa: {
                official: "Rep\xfablica de Eslovenia",
                common: "Eslovenia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u043B\u043E\u0432\u0435\u043D\u0438\u0458\u0430",
                common: "\u0421\u043B\u043E\u0432\u0435\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Slovenien",
                common: "Slovenien"
            },
            tur: {
                official: "Slovenya Cumhuriyeti",
                common: "Slovenya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0644\u0648\u0648\u06CC\u0646\u06CC\u0627",
                common: "\u0633\u0644\u0648\u0648\u06CC\u0646\u06CC\u0627"
            },
            zho: {
                official: "\u65AF\u6D1B\u6587\u5C3C\u4E9A\u5171\u548C\u56FD",
                common: "\u65AF\u6D1B\u6587\u5C3C\u4E9A"
            }
        },
        latlng: [
            46.11666666,
            14.81666666
        ],
        landlocked: false,
        borders: [
            "AUT",
            "HRV",
            "ITA",
            "HUN"
        ],
        area: 20273,
        demonyms: {
            eng: {
                f: "Slovene",
                m: "Slovene"
            },
            fra: {
                f: "Slov\xe8ne",
                m: "Slov\xe8ne"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDEE",
        maps: {
            googleMaps: "https://goo.gl/maps/7zgFmswcCJh5L5D49",
            openStreetMaps: "https://www.openstreetmap.org/relation/218657"
        },
        population: 2100126,
        gini: {
            2018: 24.6
        },
        fifa: "SVN",
        car: {
            signs: [
                "SLO"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/si.png",
            svg: "https://flagcdn.com/si.svg",
            alt: "The flag of Slovenia is composed of three equal horizontal bands of white, blue and red. The national coat of arms is situated in the upper hoist side of the field centered on the boundary between the white and blue bands."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/si.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/si.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                46.05,
                14.52
            ]
        },
        postalCode: {
            format: "SI- ####",
            regex: "^(?:SI)*(\\d{4})$"
        }
    },
    {
        name: {
            common: "Oman",
            official: "Sultanate of Oman",
            nativeName: {
                ara: {
                    official: "\u0633\u0644\u0637\u0646\u0629 \u0639\u0645\u0627\u0646",
                    common: "\u0639\u0645\u0627\u0646"
                }
            }
        },
        tld: [
            ".om"
        ],
        cca2: "OM",
        ccn3: "512",
        cca3: "OMN",
        cioc: "OMA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            OMR: {
                name: "Omani rial",
                symbol: "\u0631.\u0639."
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "68"
            ]
        },
        capital: [
            "Muscat"
        ],
        altSpellings: [
            "OM",
            "Sultanate of Oman",
            "Sal\u1E6Danat \u02BBUm\u0101n"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u0633\u0644\u0637\u0646\u0629 \u0639\u0645\u0627\u0646",
                common: "\u0639\u0645\u0627\u0646"
            },
            bre: {
                official: "Sultanelezh Oman",
                common: "Oman"
            },
            ces: {
                official: "Sultan\xe1t Om\xe1n",
                common: "Om\xe1n"
            },
            cym: {
                official: "Sultanate of Oman",
                common: "Oman"
            },
            deu: {
                official: "Sultanat Oman",
                common: "Oman"
            },
            est: {
                official: "Omaani Sultaniriik",
                common: "Omaan"
            },
            fin: {
                official: "Omanin sulttaanikunta",
                common: "Oman"
            },
            fra: {
                official: "Sultanat d'Oman",
                common: "Oman"
            },
            hrv: {
                official: "Sultanat Oman",
                common: "Oman"
            },
            hun: {
                official: "Om\xe1ni Szultan\xe1tus",
                common: "Om\xe1n"
            },
            ita: {
                official: "Sultanato dell'Oman",
                common: "oman"
            },
            jpn: {
                official: "\u30AA\u30DE\u30FC\u30F3\xb7\u30B9\u30EB\u30BF\u30F3\u56FD",
                common: "\u30AA\u30DE\u30FC\u30F3"
            },
            kor: {
                official: "\uC624\uB9CC \uC220\uD0C4\uAD6D",
                common: "\uC624\uB9CC"
            },
            nld: {
                official: "Sultanaat van Oman",
                common: "Oman"
            },
            per: {
                official: "\u0633\u0644\u0637\u0627\u0646\u200C\u0646\u0634\u06CC\u0646 \u0639\u064F\u0645\u0627\u0646",
                common: "\u0639\u0645\u0627\u0646"
            },
            pol: {
                official: "Su\u0142tanat Omanu",
                common: "Oman"
            },
            por: {
                official: "Sultanato de Om\xe3",
                common: "Om\xe3"
            },
            rus: {
                official: "\u0421\u0443\u043B\u0442\u0430\u043D\u0430\u0442 \u041E\u043C\u0430\u043D",
                common: "\u041E\u043C\u0430\u043D"
            },
            slk: {
                official: "Om\xe1nsky sultan\xe1t",
                common: "Om\xe1n"
            },
            spa: {
                official: "Sultanato de Om\xe1n",
                common: "Om\xe1n"
            },
            srp: {
                official: "\u0421\u0443\u043B\u0442\u0430\u043D\u0430\u0442 \u041E\u043C\u0430\u043D",
                common: "\u041E\u043C\u0430\u043D"
            },
            swe: {
                official: "Sultanatet Oman",
                common: "Oman"
            },
            tur: {
                official: "Umman Sultanl\u0131\u011F\u0131",
                common: "Umman"
            },
            urd: {
                official: "\u0633\u0644\u0637\u0646\u062A \u0639\u0645\u0627\u0646",
                common: "\u0639\u0645\u0627\u0646"
            },
            zho: {
                official: "\u963F\u66FC\u82CF\u4E39\u56FD",
                common: "\u963F\u66FC"
            }
        },
        latlng: [
            21,
            57
        ],
        landlocked: false,
        borders: [
            "SAU",
            "ARE",
            "YEM"
        ],
        area: 309500,
        demonyms: {
            eng: {
                f: "Omani",
                m: "Omani"
            },
            fra: {
                f: "Omanaise",
                m: "Omanais"
            }
        },
        flag: "\uD83C\uDDF4\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/L2BoXoAwDDwWecnw5",
            openStreetMaps: "https://www.openstreetmap.org/relation/305138"
        },
        population: 5106622,
        fifa: "OMA",
        car: {
            signs: [
                "OM"
            ],
            side: "right"
        },
        timezones: [
            "UTC+04:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/om.png",
            svg: "https://flagcdn.com/om.svg",
            alt: "The flag of Oman features a red vertical band on the hoist side that takes up about one-fourth the width of the field, and three equal horizontal bands of white, red and green adjoining the vertical band. At the top of the vertical band is the white emblem of Oman."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/om.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/om.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                23.62,
                58.58
            ]
        },
        postalCode: {
            format: "###",
            regex: "^(\\d{3})$"
        }
    },
    {
        name: {
            common: "Saint Pierre and Miquelon",
            official: "Saint Pierre and Miquelon",
            nativeName: {
                fra: {
                    official: "Collectivit\xe9 territoriale de Saint-Pierre-et-Miquelon",
                    common: "Saint-Pierre-et-Miquelon"
                }
            }
        },
        tld: [
            ".pm"
        ],
        cca2: "PM",
        ccn3: "666",
        cca3: "SPM",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "08"
            ]
        },
        capital: [
            "Saint-Pierre"
        ],
        altSpellings: [
            "PM",
            "Collectivit\xe9 territoriale de Saint-Pierre-et-Miquelon"
        ],
        region: "Americas",
        subregion: "North America",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0633\u0627\u0646 \u0628\u064A\u064A\u0631 \u0648\u0645\u064A\u0643\u0644\u0648\u0646",
                common: "\u0633\u0627\u0646 \u0628\u064A\u064A\u0631 \u0648\u0645\u064A\u0643\u0644\u0648\u0646"
            },
            bre: {
                official: "Sant-P\xear-ha-Mikelon",
                common: "Sant-P\xear-ha-Mikelon"
            },
            ces: {
                official: "Saint-Pierre a Miquelon",
                common: "Saint-Pierre a Miquelon"
            },
            cym: {
                official: "Saint Pierre and Miquelon",
                common: "Saint Pierre and Miquelon"
            },
            deu: {
                official: "St. Pierre und Miquelon",
                common: "St. Pierre und Miquelon"
            },
            est: {
                official: "Saint-Pierre\u2019i ja Miqueloni territoriaal\xfchendus",
                common: "Saint-Pierre ja Miquelon"
            },
            fin: {
                official: "Saint-Pierre ja Miquelon",
                common: "Saint-Pierre ja Miquelon"
            },
            fra: {
                official: "Saint-Pierre-et-Miquelon",
                common: "Saint-Pierre-et-Miquelon"
            },
            hrv: {
                official: "Saint Pierre i Miquelon",
                common: "Sveti Petar i Mikelon"
            },
            hun: {
                official: "Saint-Pierre \xe9s Miquelon",
                common: "Saint-Pierre \xe9s Miquelon"
            },
            ita: {
                official: "Saint Pierre e Miquelon",
                common: "Saint-Pierre e Miquelon"
            },
            jpn: {
                official: "\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u5CF6\xb7\u30DF\u30AF\u30ED\u30F3\u5CF6",
                common: "\u30B5\u30F3\u30D4\u30A8\u30FC\u30EB\u5CF6\u30FB\u30DF\u30AF\u30ED\u30F3\u5CF6"
            },
            kor: {
                official: "\uC0DD\uD53C\uC5D0\uB974 \uBBF8\uD074\uB871",
                common: "\uC0DD\uD53C\uC5D0\uB974 \uBBF8\uD074\uB871"
            },
            nld: {
                official: "Saint-Pierre en Miquelon",
                common: "Saint Pierre en Miquelon"
            },
            per: {
                official: "\u0633\u0646-\u067E\u06CC\u0631-\u0627-\u0645\u06CC\u06A9\u0644\u0648\u0646",
                common: "\u0633\u0646-\u067E\u06CC\u0650\u0631 \u0648 \u0645\u06CC\u06A9\u0644\u064F\u0646"
            },
            pol: {
                official: "Saint-Pierre i Miquelon",
                common: "Saint-Pierre i Miquelon"
            },
            por: {
                official: "Saint Pierre e Miquelon",
                common: "Saint-Pierre e Miquelon"
            },
            rus: {
                official: "\u0421\u0435\u043D-\u041F\u044C\u0435\u0440 \u0438 \u041C\u0438\u043A\u0435\u043B\u043E\u043D",
                common: "\u0421\u0435\u043D-\u041F\u044C\u0435\u0440 \u0438 \u041C\u0438\u043A\u0435\u043B\u043E\u043D"
            },
            slk: {
                official: "Ostrovy Saint Pierre a Miquelon",
                common: "Saint Pierre a Miquelon"
            },
            spa: {
                official: "San Pedro y Miquel\xf3n",
                common: "San Pedro y Miquel\xf3n"
            },
            srp: {
                official: "\u0421\u0435\u043D \u041F\u0458\u0435\u0440 \u0438 \u041C\u0438\u043A\u0435\u043B\u043E\u043D",
                common: "\u0421\u0435\u043D \u041F\u0458\u0435\u0440 \u0438 \u041C\u0438\u043A\u0435\u043B\u043E\u043D"
            },
            swe: {
                official: "Saint-Pierre och Miquelon",
                common: "Saint-Pierre och Miquelon"
            },
            tur: {
                official: "Saint Pierre ve Miquelon",
                common: "Saint Pierre ve Miquelon"
            },
            urd: {
                official: "\u0633\u06CC\u0646\u0679 \u067E\u06CC\u0626\u0631 \u0648 \u0645\u06CC\u06A9\u06CC\u0644\u0648\u0646",
                common: "\u0633\u06CC\u0646\u0679 \u067E\u06CC\u0626\u0631 \u0648 \u0645\u06CC\u06A9\u06CC\u0644\u0648\u0646"
            },
            zho: {
                official: "\u5723\u76AE\u57C3\u5C14\u548C\u5BC6\u514B\u9686",
                common: "\u5723\u76AE\u57C3\u5C14\u548C\u5BC6\u514B\u9686"
            }
        },
        latlng: [
            46.83333333,
            -56.33333333
        ],
        landlocked: false,
        area: 242,
        demonyms: {
            eng: {
                f: "Saint-Pierrais, Miquelonnais",
                m: "Saint-Pierrais, Miquelonnais"
            },
            fra: {
                f: "Saint-Pierraise, Miquelonaise",
                m: "Saint-Pierrais, Miquelonais"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/bUM8Yc8pA8ghyhmt6",
            openStreetMaps: "https://www.openstreetmap.org/relation/3406826"
        },
        population: 6069,
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC-03:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/pm.png",
            svg: "https://flagcdn.com/pm.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                46.77,
                -56.18
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(97500)$"
        }
    },
    {
        name: {
            common: "Macau",
            official: "Macao Special Administrative Region of the People's Republic of China",
            nativeName: {
                por: {
                    official: "Regi\xe3o Administrativa Especial de Macau da Rep\xfablica Popular da China",
                    common: "Macau"
                },
                zho: {
                    official: "\u4E2D\u534E\u4EBA\u6C11\u5171\u548C\u56FD\u6FB3\u95E8\u7279\u522B\u884C\u653F\u533A",
                    common: "\u6FB3\u95E8"
                }
            }
        },
        tld: [
            ".mo"
        ],
        cca2: "MO",
        ccn3: "446",
        cca3: "MAC",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            MOP: {
                name: "Macanese pataca",
                symbol: "P"
            }
        },
        idd: {
            root: "+8",
            suffixes: [
                "53"
            ]
        },
        altSpellings: [
            "MO",
            "\u6FB3\u95E8",
            "Macao",
            "Macao Special Administrative Region of the People's Republic of China",
            "\u4E2D\u83EF\u4EBA\u6C11\u5171\u548C\u570B\u6FB3\u9580\u7279\u5225\u884C\u653F\u5340",
            "Regi\xe3o Administrativa Especial de Macau da Rep\xfablica Popular da China"
        ],
        region: "Asia",
        subregion: "Eastern Asia",
        languages: {
            por: "Portuguese",
            zho: "Chinese"
        },
        translations: {
            ara: {
                official: "\u0645\u0646\u0637\u0642\u0629 \u0645\u0627\u0643\u0627\u0648 \u0627\u0644\u0625\u062F\u0627\u0631\u064A\u0629 \u0627\u0644\u062A\u0627\u0628\u0639\u0629 \u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u064A\u0646 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                common: "\u0645\u0627\u0643\u0627\u0648"
            },
            bre: {
                official: "Rannvro velestradurel arbennik Makao eus Republik pobl Sina",
                common: "Makao"
            },
            ces: {
                official: "Zvl\xe1\u0161tn\xed spr\xe1vn\xed oblast \u010C\xednsk\xe9 lidov\xe9 republiky Macao",
                common: "Macao"
            },
            cym: {
                official: "Macao Special Administrative Region of the People's Republic of China",
                common: "Macau"
            },
            deu: {
                official: "Sonderverwaltungsregion Macau der Volksrepublik China",
                common: "Macao"
            },
            est: {
                official: "Macau erihalduspiirkond",
                common: "Macau"
            },
            fin: {
                official: "Macaon Kiinan kansantasavallan erityishallintoalue",
                common: "Macao"
            },
            fra: {
                official: "R\xe9gion administrative sp\xe9ciale de Macao de la R\xe9publique populaire de Chine",
                common: "Macao"
            },
            hrv: {
                official: "Makao Posebnog upravnog podru\u010DjaNarodne Republike Kine",
                common: "Makao"
            },
            hun: {
                official: "Maka\xf3",
                common: "Maka\xf3"
            },
            ita: {
                official: "Macao Regione amministrativa speciale della Repubblica Popolare Cinese",
                common: "Macao"
            },
            jpn: {
                official: "\u4E2D\u83EF\u4EBA\u6C11\u5171\u548C\u56FD\u30DE\u30AB\u30AA\u7279\u5225\u884C\u653F\u533A",
                common: "\u30DE\u30AB\u30AA"
            },
            kor: {
                official: "\uC911\uD654\uC778\uBBFC\uACF5\uD654\uAD6D \uB9C8\uCE74\uC624 \uD2B9\uBCC4\uD589\uC815\uAD6C",
                common: "\uB9C8\uCE74\uC624"
            },
            nld: {
                official: "Speciale Administratieve Regio Macau van de Volksrepubliek China",
                common: "Macao"
            },
            per: {
                official: "\u0645\u0627\u06A9\u0627\u0626\u0648",
                common: "\u0645\u0627\u06A9\u0627\u0626\u0648"
            },
            pol: {
                official: "Specjalny Region Administracyjny Chi\u0144skiej Republiki Ludowej Makau",
                common: "Makau"
            },
            por: {
                official: "Macau Regi\xe3o Administrativa Especial da Rep\xfablica Popular da China",
                common: "Macau"
            },
            rus: {
                official: "\u0421\u043F\u0435\u0446\u0438\u0430\u043B\u044C\u043D\u044B\u0439 \u0430\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043D\u044B\u0439 \u0440\u0430\u0439\u043E\u043D \u041C\u0430\u043A\u0430\u043E \u041A\u0438\u0442\u0430\u0439\u0441\u043A\u043E\u0439 \u041D\u0430\u0440\u043E\u0434\u043D\u043E\u0439 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0438 \u041A\u0438\u0442\u0430\u0439",
                common: "\u041C\u0430\u043A\u0430\u043E"
            },
            slk: {
                official: "Macao, \u0160peci\xe0lna administrat\xedvna oblas\u0166",
                common: "Macao"
            },
            spa: {
                official: "Macao, Regi\xf3n Administrativa Especial de la Rep\xfablica Popular China",
                common: "Macao"
            },
            srp: {
                official: "\u041C\u0430\u043A\u0430\u043E \u0441\u043F\u0435\u0446\u0438\u0458\u0430\u043B\u043D\u0430 \u0430\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043D\u0430 \u043E\u0431\u043B\u0430\u0441\u0442 \u041D\u0430\u0440\u043E\u0434\u043D\u0435 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0435 \u041A\u0438\u043D\u0435",
                common: "\u041C\u0430\u043A\u0430\u043E"
            },
            swe: {
                official: "Macao",
                common: "Macao"
            },
            tur: {
                official: "\xc7in Halk Cumhuriyeti Makao \xd6zel \u0130dari B\xf6lgesi",
                common: "Makao"
            },
            urd: {
                official: "\u0645\u06A9\u0627\u0624 \u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u06CC\u0646 \u06A9\u0627 \u062E\u0635\u0648\u0635\u06CC \u0627\u0646\u062A\u0638\u0627\u0645\u06CC \u0639\u0644\u0627\u0642\u06C1",
                common: "\u0645\u06A9\u0627\u0624"
            }
        },
        latlng: [
            22.16666666,
            113.55
        ],
        landlocked: false,
        borders: [
            "CHN"
        ],
        area: 30,
        demonyms: {
            eng: {
                f: "Macanese",
                m: "Macanese"
            },
            fra: {
                f: "Macanaise",
                m: "Macanais"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/whymRdk3dZFfAAs4A",
            openStreetMaps: "https://www.openstreetmap.org/relation/1867188"
        },
        population: 649342,
        fifa: "MAC",
        car: {
            signs: [
                "MO"
            ],
            side: "left"
        },
        timezones: [
            "UTC+08:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mo.png",
            svg: "https://flagcdn.com/mo.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mo.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mo.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {}
    },
    {
        name: {
            common: "San Marino",
            official: "Republic of San Marino",
            nativeName: {
                ita: {
                    official: "Repubblica di San Marino",
                    common: "San Marino"
                }
            }
        },
        tld: [
            ".sm"
        ],
        cca2: "SM",
        ccn3: "674",
        cca3: "SMR",
        cioc: "SMR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "78"
            ]
        },
        capital: [
            "City of San Marino"
        ],
        altSpellings: [
            "SM",
            "Republic of San Marino",
            "Repubblica di San Marino"
        ],
        region: "Europe",
        subregion: "Southern Europe",
        languages: {
            ita: "Italian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0627\u0646 \u0645\u0627\u0631\u064A\u0646\u0648",
                common: "\u0633\u0627\u0646 \u0645\u0627\u0631\u064A\u0646\u0648"
            },
            bre: {
                official: "Republik San Marino",
                common: "San Marino"
            },
            ces: {
                official: "Republika San Marino",
                common: "San Marino"
            },
            cym: {
                official: "Republic of San Marino",
                common: "San Marino"
            },
            deu: {
                official: "Republik San Marino",
                common: "San Marino"
            },
            est: {
                official: "San Marino Vabariik",
                common: "San Marino"
            },
            fin: {
                official: "San Marinon seesteinen tasavalta",
                common: "San Marino"
            },
            fra: {
                official: "R\xe9publique de Saint-Marin",
                common: "Saint-Marin"
            },
            hrv: {
                official: "Ve\u0107ina Serene Republika San Marino",
                common: "San Marino"
            },
            hun: {
                official: "San Marino K\xf6zt\xe1rsas\xe1g",
                common: "San Marino"
            },
            ita: {
                official: "Serenissima Repubblica di San Marino",
                common: "San Marino"
            },
            jpn: {
                official: "\u30B5\u30F3\u30DE\u30EA\u30CE\u306E\u307B\u3068\u3093\u3069\u30BB\u30EA\u30FC\u30CC\u5171\u548C\u56FD",
                common: "\u30B5\u30F3\u30DE\u30EA\u30CE"
            },
            kor: {
                official: "\uC0B0\uB9C8\uB9AC\uB178 \uACF5\uD654\uAD6D",
                common: "\uC0B0\uB9C8\uB9AC\uB178"
            },
            nld: {
                official: "Meest Serene Republiek San Marino",
                common: "San Marino"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0627\u0646 \u0645\u0627\u0631\u06CC\u0646\u0648",
                common: "\u0633\u0627\u0646 \u0645\u0627\u0631\u06CC\u0646\u0648"
            },
            pol: {
                official: "Republika San Marino",
                common: "San Marino"
            },
            por: {
                official: "Seren\xedssima Rep\xfablica de San Marino",
                common: "San Marino"
            },
            rus: {
                official: "\u0411\u043E\u043B\u044C\u0448\u0438\u043D\u0441\u0442\u0432\u043E Serene \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0430\u043D-\u041C\u0430\u0440\u0438\u043D\u043E",
                common: "\u0421\u0430\u043D-\u041C\u0430\u0440\u0438\u043D\u043E"
            },
            slk: {
                official: "Sanmar\xednska republika",
                common: "San Mar\xedno"
            },
            spa: {
                official: "Seren\xedsima Rep\xfablica de San Marino",
                common: "San Marino"
            },
            srp: {
                official: "\u041D\u0430\u0458\u0443\u0437\u0432\u0438\u0448\u0435\u043D\u0438\u0458\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0430\u043D \u041C\u0430\u0440\u0438\u043D\u043E",
                common: "\u0421\u0430\u043D \u041C\u0430\u0440\u0438\u043D\u043E"
            },
            swe: {
                official: "Republiken San Marino",
                common: "San Marino"
            },
            tur: {
                official: "San Marino Cumhuriyeti",
                common: "San Marino"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0627\u0646 \u0645\u0627\u0631\u06CC\u0646\u0648",
                common: "\u0633\u0627\u0646 \u0645\u0627\u0631\u06CC\u0646\u0648"
            },
            zho: {
                official: "\u5723\u9A6C\u529B\u8BFA\u5171\u548C\u56FD",
                common: "\u5723\u9A6C\u529B\u8BFA"
            }
        },
        latlng: [
            43.76666666,
            12.41666666
        ],
        landlocked: true,
        borders: [
            "ITA"
        ],
        area: 61,
        demonyms: {
            eng: {
                f: "Sammarinese",
                m: "Sammarinese"
            },
            fra: {
                f: "Saint-Marinaise",
                m: "Saint-Marinais"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/rxCVJjm8dVY93RPY8",
            openStreetMaps: "https://www.openstreetmap.org/relation/54624"
        },
        population: 33938,
        fifa: "SMR",
        car: {
            signs: [
                "RSM"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sm.png",
            svg: "https://flagcdn.com/sm.svg",
            alt: "The flag of San Marino is composed of two equal horizontal bands of white and light blue, with the national coat of arms superimposed in the center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sm.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sm.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                43.94,
                12.45
            ]
        },
        postalCode: {
            format: "4789#",
            regex: "^(4789\\d)$"
        }
    },
    {
        name: {
            common: "Lesotho",
            official: "Kingdom of Lesotho",
            nativeName: {
                eng: {
                    official: "Kingdom of Lesotho",
                    common: "Lesotho"
                },
                sot: {
                    official: "Kingdom of Lesotho",
                    common: "Lesotho"
                }
            }
        },
        tld: [
            ".ls"
        ],
        cca2: "LS",
        ccn3: "426",
        cca3: "LSO",
        cioc: "LES",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            LSL: {
                name: "Lesotho loti",
                symbol: "L"
            },
            ZAR: {
                name: "South African rand",
                symbol: "R"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "66"
            ]
        },
        capital: [
            "Maseru"
        ],
        altSpellings: [
            "LS",
            "Kingdom of Lesotho",
            "Muso oa Lesotho"
        ],
        region: "Africa",
        subregion: "Southern Africa",
        languages: {
            eng: "English",
            sot: "Sotho"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u0644\u064A\u0633\u0648\u062A\u0648",
                common: "\u0644\u064A\u0633\u0648\u062A\u0648"
            },
            bre: {
                official: "Rouantelezh Lesotho",
                common: "Lesotho"
            },
            ces: {
                official: "Lesothsk\xe9 kr\xe1lovstv\xed",
                common: "Lesotho"
            },
            cym: {
                official: "Kingdom of Lesotho",
                common: "Lesotho"
            },
            deu: {
                official: "K\xf6nigreich Lesotho",
                common: "Lesotho"
            },
            est: {
                official: "Lesotho Kuningriik",
                common: "Lesotho"
            },
            fin: {
                official: "Lesothon kuningaskunta",
                common: "Lesotho"
            },
            fra: {
                official: "Royaume du Lesotho",
                common: "Lesotho"
            },
            hrv: {
                official: "Kraljevina Lesoto",
                common: "Lesoto"
            },
            hun: {
                official: "Lesoth\xf3i Kir\xe1lys\xe1g",
                common: "Lesotho"
            },
            ita: {
                official: "Regno del Lesotho",
                common: "Lesotho"
            },
            jpn: {
                official: "\u30EC\u30BD\u30C8\u738B\u56FD",
                common: "\u30EC\u30BD\u30C8"
            },
            kor: {
                official: "\uB808\uC18C\uD1A0 \uC655\uAD6D",
                common: "\uB808\uC18C\uD1A0"
            },
            nld: {
                official: "Koninkrijk Lesotho",
                common: "Lesotho"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0644\u0633\u0648\u062A\u0648",
                common: "\u0644\u0633\u0648\u062A\u0648"
            },
            pol: {
                official: "Kr\xf3lestwo Lesotho",
                common: "Lesotho"
            },
            por: {
                official: "Reino do Lesoto",
                common: "Lesoto"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u041B\u0435\u0441\u043E\u0442\u043E",
                common: "\u041B\u0435\u0441\u043E\u0442\u043E"
            },
            slk: {
                official: "Lesothsk\xe9 kr\xe1\u013Eovstvo",
                common: "Lesotho"
            },
            spa: {
                official: "Reino de Lesotho",
                common: "Lesotho"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u041B\u0435\u0441\u043E\u0442\u043E",
                common: "\u041B\u0435\u0441\u043E\u0442\u043E"
            },
            swe: {
                official: "Konungariket Lesotho",
                common: "Lesotho"
            },
            tur: {
                official: "Lesotho Krall\u0131\u011F\u0131",
                common: "Lesotho"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0644\u06CC\u0633\u0648\u062A\u06BE\u0648",
                common: "\u0644\u06CC\u0633\u0648\u062A\u06BE\u0648"
            },
            zho: {
                official: "\u83B1\u7D22\u6258\u738B\u56FD",
                common: "\u83B1\u7D22\u6258"
            }
        },
        latlng: [
            -29.5,
            28.5
        ],
        landlocked: true,
        borders: [
            "ZAF"
        ],
        area: 30355,
        demonyms: {
            eng: {
                f: "Mosotho",
                m: "Mosotho"
            },
            fra: {
                f: "L\xe9sothienne",
                m: "L\xe9sothien"
            }
        },
        flag: "\uD83C\uDDF1\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/H8gJi5mL4Cmd1SF28",
            openStreetMaps: "https://www.openstreetmap.org/relation/2093234"
        },
        population: 2142252,
        gini: {
            2017: 44.9
        },
        fifa: "LES",
        car: {
            signs: [
                "LS"
            ],
            side: "left"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ls.png",
            svg: "https://flagcdn.com/ls.svg",
            alt: "The flag of Lesotho is composed of three horizontal bands of blue, white and green in the ratio of 3:4:3. A black mokorotlo \u2014 a Basotho hat \u2014 is centered in the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ls.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ls.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -29.32,
                27.48
            ]
        },
        postalCode: {
            format: "###",
            regex: "^(\\d{3})$"
        }
    },
    {
        name: {
            common: "Marshall Islands",
            official: "Republic of the Marshall Islands",
            nativeName: {
                eng: {
                    official: "Republic of the Marshall Islands",
                    common: "Marshall Islands"
                },
                mah: {
                    official: "Republic of the Marshall Islands",
                    common: "M\u0327aje\u013C"
                }
            }
        },
        tld: [
            ".mh"
        ],
        cca2: "MH",
        ccn3: "584",
        cca3: "MHL",
        cioc: "MHL",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "92"
            ]
        },
        capital: [
            "Majuro"
        ],
        altSpellings: [
            "MH",
            "Republic of the Marshall Islands",
            "Aolep\u0101n Aor\u014Dkin M\u0327aje\u013C"
        ],
        region: "Oceania",
        subregion: "Micronesia",
        languages: {
            eng: "English",
            mah: "Marshallese"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u0632\u0631 \u0645\u0627\u0631\u0634\u0627\u0644",
                common: "\u062C\u0632\u0631 \u0645\u0627\u0631\u0634\u0627\u0644"
            },
            bre: {
                official: "Republik Inizi Marshall",
                common: "Inizi Marshall"
            },
            ces: {
                official: "Republika Marshallovy ostrovy",
                common: "Marshallovy ostrovy"
            },
            cym: {
                official: "Republic of the Marshall Islands",
                common: "Marshall Islands"
            },
            deu: {
                official: "Republik Marshallinseln",
                common: "Marshallinseln"
            },
            est: {
                official: "Marshalli Saarte Vabariik",
                common: "Marshalli Saared"
            },
            fin: {
                official: "Marshallinsaarten tasavalta",
                common: "Marshallinsaaret"
            },
            fra: {
                official: "R\xe9publique des \xceles Marshall",
                common: "\xceles Marshall"
            },
            hrv: {
                official: "Republika Mar\u0161alovi Otoci",
                common: "Mar\u0161alovi Otoci"
            },
            hun: {
                official: "Marshall-szigetek",
                common: "Marshall-szigetek"
            },
            ita: {
                official: "Repubblica delle Isole Marshall",
                common: "Isole Marshall"
            },
            jpn: {
                official: "\u30DE\u30FC\u30B7\u30E3\u30EB\u8AF8\u5CF6\u5171\u548C\u56FD",
                common: "\u30DE\u30FC\u30B7\u30E3\u30EB\u8AF8\u5CF6"
            },
            kor: {
                official: "\uB9C8\uC15C \uC81C\uB3C4 \uACF5\uD654\uAD6D",
                common: "\uB9C8\uC15C \uC81C\uB3C4"
            },
            nld: {
                official: "Republiek van de Marshall-eilanden",
                common: "Marshalleilanden"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062C\u0632\u0627\u06CC\u0631 \u0645\u0627\u0631\u0634\u0627\u0644",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u0645\u0627\u0631\u0634\u0627\u0644"
            },
            pol: {
                official: "Republika Wysp Marshalla",
                common: "Wyspy Marshalla"
            },
            por: {
                official: "Rep\xfablica das Ilhas Marshall",
                common: "Ilhas Marshall"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0440\u0448\u0430\u043B\u043B\u043E\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u041C\u0430\u0440\u0448\u0430\u043B\u043B\u043E\u0432\u044B \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Republika Marshallov\xfdch ostrovov",
                common: "Marshallove ostrovy"
            },
            spa: {
                official: "Rep\xfablica de las Islas Marshall",
                common: "Islas Marshall"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0440\u0448\u0430\u043B\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                common: "\u041C\u0430\u0440\u0448\u0430\u043B\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "Republiken Marshall\xf6arna",
                common: "Marshall\xf6arna"
            },
            tur: {
                official: "Marshall Adalar\u0131 Cumhuriyeti",
                common: "Marshall Adalar\u0131"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0632\u0627\u0626\u0631 \u0645\u0627\u0631\u0634\u0644",
                common: "\u062C\u0632\u0627\u0626\u0631 \u0645\u0627\u0631\u0634\u0644"
            },
            zho: {
                official: "\u9A6C\u7ECD\u5C14\u7FA4\u5C9B\u5171\u548C\u56FD",
                common: "\u9A6C\u7ECD\u5C14\u7FA4\u5C9B"
            }
        },
        latlng: [
            9,
            168
        ],
        landlocked: false,
        area: 181,
        demonyms: {
            eng: {
                f: "Marshallese",
                m: "Marshallese"
            },
            fra: {
                f: "Marshallaise",
                m: "Marshallais"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDED",
        maps: {
            googleMaps: "https://goo.gl/maps/A4xLi1XvcX88gi3W8",
            openStreetMaps: "https://www.openstreetmap.org/relation/571771"
        },
        population: 59194,
        car: {
            signs: [
                "MH"
            ],
            side: "right"
        },
        timezones: [
            "UTC+12:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mh.png",
            svg: "https://flagcdn.com/mh.svg",
            alt: "The flag of Marshall Islands has a blue field with two broadening adjacent diagonal bands of orange and white that extend from the lower hoist-side corner to the upper fly-side corner of the field. A large white star with twenty-four rays \u2014 four large rays at the cardinal points and twenty smaller rays \u2014 is situated in the upper hoist-side corner above the diagonal bands."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mh.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mh.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                7.1,
                171.38
            ]
        }
    },
    {
        name: {
            common: "Sint Maarten",
            official: "Sint Maarten",
            nativeName: {
                eng: {
                    official: "Sint Maarten",
                    common: "Sint Maarten"
                },
                fra: {
                    official: "Saint-Martin",
                    common: "Saint-Martin"
                },
                nld: {
                    official: "Sint Maarten",
                    common: "Sint Maarten"
                }
            }
        },
        tld: [
            ".sx"
        ],
        cca2: "SX",
        ccn3: "534",
        cca3: "SXM",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            ANG: {
                name: "Netherlands Antillean guilder",
                symbol: "\u0192"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "721"
            ]
        },
        capital: [
            "Philipsburg"
        ],
        altSpellings: [
            "SX",
            "Sint Maarten (Dutch part)"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English",
            fra: "French",
            nld: "Dutch"
        },
        translations: {
            ara: {
                official: "\u0633\u064A\u0646\u062A \u0645\u0627\u0631\u062A\u0646",
                common: "\u0633\u064A\u0646\u062A \u0645\u0627\u0631\u062A\u0646"
            },
            bre: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            ces: {
                official: "Svat\xfd Martin",
                common: "Svat\xfd Martin (Nizozemsko)"
            },
            cym: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            deu: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            est: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            fin: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            fra: {
                official: "Sint Maarten",
                common: "Saint-Martin"
            },
            hrv: {
                official: "Sveti Martin",
                common: "Sveti Martin"
            },
            hun: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            ita: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            jpn: {
                official: "\u30B7\u30F3\u30C8\u30DE\u30FC\u30EB\u30C6\u30F3\u5CF6",
                common: "\u30B7\u30F3\u30C8\u30FB\u30DE\u30FC\u30EB\u30C6\u30F3"
            },
            kor: {
                official: "\uC2E0\uD2B8\uB9C8\uB974\uD134",
                common: "\uC2E0\uD2B8\uB9C8\uB974\uD134"
            },
            nld: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            per: {
                official: "\u0633\u0646 \u0645\u0627\u0631\u062A\u0646",
                common: "\u0633\u0646 \u0645\u0627\u0631\u062A\u0646"
            },
            pol: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            por: {
                official: "Sint Maarten",
                common: "S\xe3o Martinho"
            },
            rus: {
                official: "\u0421\u0438\u043D\u0442-\u041C\u0430\u0430\u0440\u0442\u0435\u043D",
                common: "\u0421\u0438\u043D\u0442-\u041C\u0430\u0440\u0442\u0435\u043D"
            },
            slk: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            spa: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            srp: {
                official: "\u0421\u0432\u0435\u0442\u0438 \u041C\u0430\u0440\u0442\u0438\u043D",
                common: "\u0421\u0432\u0435\u0442\u0438 \u041C\u0430\u0440\u0442\u0438\u043D"
            },
            swe: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            tur: {
                official: "Sint Maarten",
                common: "Sint Maarten"
            },
            urd: {
                official: "\u0633\u0646\u0679 \u0645\u0627\u0631\u0679\u0646",
                common: "\u0633\u0646\u0679 \u0645\u0627\u0631\u0679\u0646"
            },
            zho: {
                official: "\u5723\u9A6C\u4E01\u5C9B",
                common: "\u5723\u9A6C\u4E01\u5C9B"
            }
        },
        latlng: [
            18.033333,
            -63.05
        ],
        landlocked: false,
        borders: [
            "MAF"
        ],
        area: 34,
        demonyms: {
            eng: {
                f: "St. Maartener",
                m: "St. Maartener"
            },
            fra: {
                f: "Saint-Martinoise",
                m: "Saint-Martinois"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDFD",
        maps: {
            googleMaps: "https://goo.gl/maps/DjvcESy1a1oGEZuNA",
            openStreetMaps: "https://www.openstreetmap.org/relation/1231790"
        },
        population: 40812,
        car: {
            signs: [
                "SX"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sx.png",
            svg: "https://flagcdn.com/sx.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                18.02,
                -63.03
            ]
        }
    },
    {
        name: {
            common: "Iceland",
            official: "Iceland",
            nativeName: {
                isl: {
                    official: "\xcdsland",
                    common: "\xcdsland"
                }
            }
        },
        tld: [
            ".is"
        ],
        cca2: "IS",
        ccn3: "352",
        cca3: "ISL",
        cioc: "ISL",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            ISK: {
                name: "Icelandic kr\xf3na",
                symbol: "kr"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "54"
            ]
        },
        capital: [
            "Reykjavik"
        ],
        altSpellings: [
            "IS",
            "Island",
            "Republic of Iceland",
            "L\xfd\xf0veldi\xf0 \xcdsland"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            isl: "Icelandic"
        },
        translations: {
            ara: {
                official: "\u0622\u064A\u0633\u0644\u0646\u062F\u0627",
                common: "\u0622\u064A\u0633\u0644\u0646\u062F\u0627"
            },
            bre: {
                official: "Island",
                common: "Island"
            },
            ces: {
                official: "Island",
                common: "Island"
            },
            cym: {
                official: "Iceland",
                common: "Iceland"
            },
            deu: {
                official: "Island",
                common: "Island"
            },
            est: {
                official: "Islandi Vabariik",
                common: "Island"
            },
            fin: {
                official: "Islanti",
                common: "Islanti"
            },
            fra: {
                official: "R\xe9publique d'Islande",
                common: "Islande"
            },
            hrv: {
                official: "Island",
                common: "Island"
            },
            hun: {
                official: "Izland",
                common: "Izland"
            },
            ita: {
                official: "Islanda",
                common: "Islanda"
            },
            jpn: {
                official: "\u30A2\u30A4\u30B9\u30E9\u30F3\u30C9",
                common: "\u30A2\u30A4\u30B9\u30E9\u30F3\u30C9"
            },
            kor: {
                official: "\uC544\uC774\uC2AC\uB780\uB4DC \uACF5\uD654\uAD6D",
                common: "\uC544\uC774\uC2AC\uB780\uB4DC"
            },
            nld: {
                official: "IJsland",
                common: "IJsland"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u06CC\u0633\u0644\u0646\u062F",
                common: "\u0627\u06CC\u0633\u0644\u0646\u062F"
            },
            pol: {
                official: "Republika Islandii",
                common: "Islandia"
            },
            por: {
                official: "Isl\xe2ndia",
                common: "Isl\xe2ndia"
            },
            rus: {
                official: "\u0418\u0441\u043B\u0430\u043D\u0434\u0438\u044F",
                common: "\u0418\u0441\u043B\u0430\u043D\u0434\u0438\u044F"
            },
            slk: {
                official: "Islandsk\xe1 republika",
                common: "Island"
            },
            spa: {
                official: "Islandia",
                common: "Islandia"
            },
            srp: {
                official: "\u0418\u0441\u043B\u0430\u043D\u0434",
                common: "\u0418\u0441\u043B\u0430\u043D\u0434"
            },
            swe: {
                official: "Island",
                common: "Island"
            },
            tur: {
                official: "\u0130zlanda",
                common: "\u0130zlanda"
            },
            urd: {
                official: "\u0622\u0626\u0633 \u0644\u06CC\u0646\u0688",
                common: "\u0622\u0626\u0633 \u0644\u06CC\u0646\u0688"
            },
            zho: {
                official: "\u51B0\u5C9B",
                common: "\u51B0\u5C9B"
            }
        },
        latlng: [
            65,
            -18
        ],
        landlocked: false,
        area: 103000,
        demonyms: {
            eng: {
                f: "Icelander",
                m: "Icelander"
            },
            fra: {
                f: "Islandaise",
                m: "Islandais"
            }
        },
        flag: "\uD83C\uDDEE\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/WxFWSQuc3oamNxoE6",
            openStreetMaps: "https://www.openstreetmap.org/relation/299133"
        },
        population: 366425,
        gini: {
            2017: 26.1
        },
        fifa: "ISL",
        car: {
            signs: [
                "IS"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/is.png",
            svg: "https://flagcdn.com/is.svg",
            alt: "The flag of Iceland has a blue field with a large white-edged red cross that extends to the edges of the field. The vertical part of this cross is offset towards the hoist side."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/is.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/is.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                64.15,
                -21.95
            ]
        },
        postalCode: {
            format: "###",
            regex: "^(\\d{3})$"
        }
    },
    {
        name: {
            common: "Luxembourg",
            official: "Grand Duchy of Luxembourg",
            nativeName: {
                deu: {
                    official: "Gro\xdfherzogtum Luxemburg",
                    common: "Luxemburg"
                },
                fra: {
                    official: "Grand-Duch\xe9 de Luxembourg",
                    common: "Luxembourg"
                },
                ltz: {
                    official: "Groussherzogtum L\xebtzebuerg",
                    common: "L\xebtzebuerg"
                }
            }
        },
        tld: [
            ".lu"
        ],
        cca2: "LU",
        ccn3: "442",
        cca3: "LUX",
        cioc: "LUX",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "52"
            ]
        },
        capital: [
            "Luxembourg"
        ],
        altSpellings: [
            "LU",
            "Grand Duchy of Luxembourg",
            "Grand-Duch\xe9 de Luxembourg",
            "Gro\xdfherzogtum Luxemburg",
            "Groussherzogtum L\xebtzebuerg"
        ],
        region: "Europe",
        subregion: "Western Europe",
        languages: {
            deu: "German",
            fra: "French",
            ltz: "Luxembourgish"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0642\u064A\u0629 \u0644\u0648\u0643\u0633\u0645\u0628\u0648\u0631\u063A",
                common: "\u0644\u0648\u0643\u0633\u0645\u0628\u0648\u0631\u063A"
            },
            bre: {
                official: "Dugelezh Veur Luksembourg",
                common: "Luksembourg"
            },
            ces: {
                official: "Lucembursk\xe9 velkov\xe9vodstv\xed",
                common: "Lucembursko"
            },
            cym: {
                official: "Grand Duchy of Luxembourg",
                common: "Luxembourg"
            },
            deu: {
                official: "Gro\xdfherzogtum Luxemburg,",
                common: "Luxemburg"
            },
            est: {
                official: "Luksemburgi Suurhertsogiriik",
                common: "Luksemburg"
            },
            fin: {
                official: "Luxemburgin suurherttuakunta",
                common: "Luxemburg"
            },
            fra: {
                official: "Grand-Duch\xe9 de Luxembourg",
                common: "Luxembourg"
            },
            hrv: {
                official: "Veliko Vojvodstvo Luksemburg",
                common: "Luksemburg"
            },
            hun: {
                official: "Luxemburgi Nagyhercegs\xe9g",
                common: "Luxemburg"
            },
            ita: {
                official: "Granducato di Lussemburgo",
                common: "Lussemburgo"
            },
            jpn: {
                official: "\u30EB\u30AF\u30BB\u30F3\u30D6\u30EB\u30AF\u5927\u516C\u56FD",
                common: "\u30EB\u30AF\u30BB\u30F3\u30D6\u30EB\u30AF"
            },
            kor: {
                official: "\uB8E9\uC148\uBD80\uB974\uD06C \uB300\uACF5\uAD6D",
                common: "\uB8E9\uC148\uBD80\uB974\uD06C"
            },
            nld: {
                official: "Groothertogdom Luxemburg",
                common: "Luxemburg"
            },
            per: {
                official: "\u062F\u0648\u06A9\u200C\u0646\u0634\u06CC\u0646 \u0644\u0648\u06A9\u0632\u0627\u0645\u0628\u0648\u0631\u06AF",
                common: "\u0644\u0648\u06A9\u0632\u0627\u0645\u0628\u0648\u0631\u06AF"
            },
            pol: {
                official: "Wielkie Ksi\u0119stwo Luksemburga",
                common: "Luksemburg"
            },
            por: {
                official: "Gr\xe3o-Ducado do Luxemburgo",
                common: "Luxemburgo"
            },
            rus: {
                official: "\u0412\u0435\u043B\u0438\u043A\u043E\u0435 \u0413\u0435\u0440\u0446\u043E\u0433\u0441\u0442\u0432\u043E \u041B\u044E\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433",
                common: "\u041B\u044E\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433"
            },
            slk: {
                official: "Luxembursk\xe9 ve\u013Ekovojvodstvo",
                common: "Luxembursko"
            },
            spa: {
                official: "Gran Ducado de Luxemburgo",
                common: "Luxemburgo"
            },
            srp: {
                official: "\u0412\u0435\u043B\u0438\u043A\u043E \u0412\u043E\u0458\u0432\u043E\u0434\u0441\u0442\u0432\u043E \u041B\u0443\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433",
                common: "\u041B\u0443\u043A\u0441\u0435\u043C\u0431\u0443\u0440\u0433"
            },
            swe: {
                official: "Storhertigd\xf6met Luxemburg",
                common: "Luxemburg"
            },
            tur: {
                official: "L\xfcksemburg B\xfcy\xfck D\xfckal\u0131\u011F\u0131",
                common: "L\xfcksemburg"
            },
            urd: {
                official: "\u062F\u0648\u0642\u06CC\u06C1 \u06A9\u0628\u06CC\u0631\u0644\u06A9\u0633\u0645\u0628\u0631\u06AF",
                common: "\u0644\u06A9\u0633\u0645\u0628\u0631\u06AF"
            },
            zho: {
                official: "\u5362\u68EE\u5821\u5927\u516C\u56FD",
                common: "\u5362\u68EE\u5821"
            }
        },
        latlng: [
            49.75,
            6.16666666
        ],
        landlocked: true,
        borders: [
            "BEL",
            "FRA",
            "DEU"
        ],
        area: 2586,
        demonyms: {
            eng: {
                f: "Luxembourger",
                m: "Luxembourger"
            },
            fra: {
                f: "Luxembourgeoise",
                m: "Luxembourgeois"
            }
        },
        flag: "\uD83C\uDDF1\uD83C\uDDFA",
        maps: {
            googleMaps: "https://goo.gl/maps/L6b2AgndgHprt2Ko9",
            openStreetMaps: "https://www.openstreetmap.org/relation/2171347#map=10/49.8167/6.1335"
        },
        population: 632275,
        gini: {
            2018: 35.4
        },
        fifa: "LUX",
        car: {
            signs: [
                "L"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/lu.png",
            svg: "https://flagcdn.com/lu.svg",
            alt: "The flag of Luxembourg is composed of three equal horizontal bands of red, white and light blue."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/lu.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/lu.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                49.6,
                6.12
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Argentina",
            official: "Argentine Republic",
            nativeName: {
                grn: {
                    official: "Argentine Republic",
                    common: "Argentina"
                },
                spa: {
                    official: "Rep\xfablica Argentina",
                    common: "Argentina"
                }
            }
        },
        tld: [
            ".ar"
        ],
        cca2: "AR",
        ccn3: "032",
        cca3: "ARG",
        cioc: "ARG",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            ARS: {
                name: "Argentine peso",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "4"
            ]
        },
        capital: [
            "Buenos Aires"
        ],
        altSpellings: [
            "AR",
            "Argentine Republic",
            "Rep\xfablica Argentina"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            grn: "Guaran\xed",
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0623\u0631\u062C\u0646\u062A\u064A\u0646",
                common: "\u0627\u0644\u0623\u0631\u062C\u0646\u062A\u064A\u0646"
            },
            bre: {
                official: "Republik Arc'hantina",
                common: "Arc'hantina"
            },
            ces: {
                official: "Argentinsk\xe1 republika",
                common: "Argentina"
            },
            cym: {
                official: "Gweriniaeth yr Ariannin",
                common: "Ariannin"
            },
            deu: {
                official: "Argentinische Republik",
                common: "Argentinien"
            },
            est: {
                official: "Argentina Vabariik",
                common: "Argentina"
            },
            fin: {
                official: "Argentiinan tasavalta",
                common: "Argentiina"
            },
            fra: {
                official: "R\xe9publique argentine",
                common: "Argentine"
            },
            hrv: {
                official: "Argentinski Republika",
                common: "Argentina"
            },
            hun: {
                official: "Argentin K\xf6zt\xe1rsas\xe1g",
                common: "Argent\xedna"
            },
            ita: {
                official: "Repubblica Argentina",
                common: "Argentina"
            },
            jpn: {
                official: "\u30A2\u30EB\u30BC\u30F3\u30C1\u30F3\u5171\u548C\u56FD",
                common: "\u30A2\u30EB\u30BC\u30F3\u30C1\u30F3"
            },
            kor: {
                official: "\uC544\uB974\uD5E8\uD2F0\uB098 \uACF5\uD654\uAD6D",
                common: "\uC544\uB974\uD5E8\uD2F0\uB098"
            },
            nld: {
                official: "Argentijnse Republiek",
                common: "Argentini\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0631\u0698\u0627\u0646\u062A\u06CC\u0646",
                common: "\u0622\u0631\u0698\u0627\u0646\u062A\u06CC\u0646"
            },
            pol: {
                official: "Republika Argenty\u0144ska",
                common: "Argentyna"
            },
            por: {
                official: "Rep\xfablica Argentina",
                common: "Argentina"
            },
            rus: {
                official: "\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\u0430"
            },
            slk: {
                official: "Argent\xednska republika",
                common: "Argent\xedna"
            },
            spa: {
                official: "Rep\xfablica Argentina",
                common: "Argentina"
            },
            srp: {
                official: "\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0410\u0440\u0433\u0435\u043D\u0442\u0438\u043D\u0430"
            },
            swe: {
                official: "Republiken Argentina",
                common: "Argentina"
            },
            tur: {
                official: "Arjantin Cumhuriyeti",
                common: "Arjantin"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0631\u062C\u0646\u0679\u0627\u0626\u0646",
                common: "\u0627\u0631\u062C\u0646\u0679\u0627\u0626\u0646"
            },
            zho: {
                official: "\u963F\u6839\u5EF7\u5171\u548C\u56FD",
                common: "\u963F\u6839\u5EF7"
            }
        },
        latlng: [
            -34,
            -64
        ],
        landlocked: false,
        borders: [
            "BOL",
            "BRA",
            "CHL",
            "PRY",
            "URY"
        ],
        area: 2780400,
        demonyms: {
            eng: {
                f: "Argentine",
                m: "Argentine"
            },
            fra: {
                f: "Argentine",
                m: "Argentin"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/Z9DXNxhf2o93kvyc6",
            openStreetMaps: "https://www.openstreetmap.org/relation/286393"
        },
        population: 45376763,
        gini: {
            2019: 42.9
        },
        fifa: "ARG",
        car: {
            signs: [
                "RA"
            ],
            side: "right"
        },
        timezones: [
            "UTC-03:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ar.png",
            svg: "https://flagcdn.com/ar.svg",
            alt: "The flag of Argentina features three equal horizontal bands of light blue, white and light blue. A brown-edged golden sun is centered in the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ar.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ar.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -34.58,
                -58.67
            ]
        },
        postalCode: {
            format: "@####@@@",
            regex: "^([A-Z]\\d{4}[A-Z]{3})$"
        }
    },
    {
        name: {
            common: "Turks and Caicos Islands",
            official: "Turks and Caicos Islands",
            nativeName: {
                eng: {
                    official: "Turks and Caicos Islands",
                    common: "Turks and Caicos Islands"
                }
            }
        },
        tld: [
            ".tc"
        ],
        cca2: "TC",
        ccn3: "796",
        cca3: "TCA",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "649"
            ]
        },
        capital: [
            "Cockburn Town"
        ],
        altSpellings: [
            "TC"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u062A\u0648\u0631\u0643\u0633 \u0648\u0643\u0627\u064A\u0643\u0648\u0633",
                common: "\u062C\u0632\u0631 \u062A\u0648\u0631\u0643\u0633 \u0648\u0643\u0627\u064A\u0643\u0648\u0633"
            },
            bre: {
                official: "Inizi Turks ha Caicos",
                common: "Inizi Turks ha Caicos"
            },
            ces: {
                official: "Turks a Caicos",
                common: "Turks a Caicos"
            },
            cym: {
                official: "Turks and Caicos Islands",
                common: "Turks and Caicos Islands"
            },
            deu: {
                official: "Turks und Caicos Inseln",
                common: "Turks-und Caicosinseln"
            },
            est: {
                official: "Turksi ja Caicose saared",
                common: "Turks ja Caicos"
            },
            fin: {
                official: "Turks-ja Caicossaaret",
                common: "Turks-ja Caicossaaret"
            },
            fra: {
                official: "\xceles Turques et Ca\xefques",
                common: "\xceles Turques-et-Ca\xefques"
            },
            hrv: {
                official: "Otoci Turks i Caicos",
                common: "Otoci Turks i Caicos"
            },
            hun: {
                official: "Turks- \xe9s Caicos-szigetek",
                common: "Turks- \xe9s Caicos-szigetek"
            },
            ita: {
                official: "Turks e Caicos",
                common: "Isole Turks e Caicos"
            },
            jpn: {
                official: "\u30BF\u30FC\u30AF\u30B9\xb7\u30AB\u30A4\u30B3\u30B9\u8AF8\u5CF6",
                common: "\u30BF\u30FC\u30AF\u30B9\u30FB\u30AB\u30A4\u30B3\u30B9\u8AF8\u5CF6"
            },
            kor: {
                official: "\uD130\uD06C\uC2A4 \uCF00\uC774\uCEE4\uC2A4 \uC81C\uB3C4",
                common: "\uD130\uD06C\uC2A4 \uCF00\uC774\uCEE4\uC2A4 \uC81C\uB3C4"
            },
            nld: {
                official: "Turks-en Caicoseilanden",
                common: "Turks-en Caicoseilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u062A\u0648\u0631\u06A9\u0633 \u0648 \u06A9\u0627\u06CC\u06A9\u0648\u0633",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u062A\u0648\u0631\u06A9\u0633 \u0648 \u06A9\u0627\u06CC\u06A9\u0648\u0633"
            },
            pol: {
                official: "Turks i Caicos",
                common: "Turks i Caicos"
            },
            por: {
                official: "Ilhas Turks e Caicos",
                common: "Ilhas Turks e Caicos"
            },
            rus: {
                official: "\u0422\u0435\u0440\u043A\u0441 \u0438 \u041A\u0430\u0439\u043A\u043E\u0441 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u0422\u0435\u0440\u043A\u0441 \u0438 \u041A\u0430\u0439\u043A\u043E\u0441"
            },
            slk: {
                official: "Ostrovy Turks a Caicos",
                common: "Turks a Caicos"
            },
            spa: {
                official: "Islas Turcas y Caicos",
                common: "Islas Turks y Caicos"
            },
            srp: {
                official: "\u041E\u0441\u0442\u0440\u0432\u0430 \u0422\u0435\u0440\u043A\u0441 \u0438 \u041A\u0435\u0458\u043A\u043E\u0441",
                common: "\u0422\u0435\u0440\u043A\u0441 \u0438 \u041A\u0435\u0458\u043A\u043E\u0441"
            },
            swe: {
                official: "Turks- och Caicos\xf6arna",
                common: "Turks- och Caicos\xf6arna"
            },
            tur: {
                official: "Turks ve Caicos Adalar\u0131",
                common: "Turks ve Caicos Adalar\u0131"
            },
            urd: {
                official: "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06CC\u06A9\u0633 \u0648 \u062A\u0631\u06A9\u06CC\u06C1",
                common: "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06CC\u06A9\u0633 \u0648 \u062A\u0631\u06A9\u06CC\u06C1"
            },
            zho: {
                official: "\u7279\u514B\u65AF\u548C\u51EF\u79D1\u65AF\u7FA4\u5C9B",
                common: "\u7279\u514B\u65AF\u548C\u51EF\u79D1\u65AF\u7FA4\u5C9B"
            }
        },
        latlng: [
            21.75,
            -71.58333333
        ],
        landlocked: false,
        area: 948,
        demonyms: {
            eng: {
                f: "Turks and Caicos Islander",
                m: "Turks and Caicos Islander"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDE8",
        maps: {
            googleMaps: "https://goo.gl/maps/R8VUDQfwZiFtvmyn8",
            openStreetMaps: "https://www.openstreetmap.org/relation/547479"
        },
        population: 38718,
        fifa: "TCA",
        car: {
            signs: [
                "GB"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tc.png",
            svg: "https://flagcdn.com/tc.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                21.46,
                -71.14
            ]
        },
        postalCode: {
            format: "TKCA 1ZZ",
            regex: "^(TKCA 1ZZ)$"
        }
    },
    {
        name: {
            common: "Nauru",
            official: "Republic of Nauru",
            nativeName: {
                eng: {
                    official: "Republic of Nauru",
                    common: "Nauru"
                },
                nau: {
                    official: "Republic of Nauru",
                    common: "Nauru"
                }
            }
        },
        tld: [
            ".nr"
        ],
        cca2: "NR",
        ccn3: "520",
        cca3: "NRU",
        cioc: "NRU",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            AUD: {
                name: "Australian dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "74"
            ]
        },
        capital: [
            "Yaren"
        ],
        altSpellings: [
            "NR",
            "Naoero",
            "Pleasant Island",
            "Republic of Nauru",
            "Ripublik Naoero"
        ],
        region: "Oceania",
        subregion: "Micronesia",
        languages: {
            eng: "English",
            nau: "Nauru"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0646\u0627\u0648\u0631\u0648",
                common: "\u0646\u0627\u0648\u0631\u0648"
            },
            bre: {
                official: "Republik Nauru",
                common: "Nauru"
            },
            ces: {
                official: "Republika Nauru",
                common: "Nauru"
            },
            cym: {
                official: "Republic of Nauru",
                common: "Nauru"
            },
            deu: {
                official: "Republik Nauru",
                common: "Nauru"
            },
            est: {
                official: "Nauru Vabariik",
                common: "Nauru"
            },
            fin: {
                official: "Naurun tasavalta",
                common: "Nauru"
            },
            fra: {
                official: "R\xe9publique de Nauru",
                common: "Nauru"
            },
            hrv: {
                official: "Republika Nauru",
                common: "Nauru"
            },
            hun: {
                official: "Naurui K\xf6zt\xe1rsas\xe1g",
                common: "Nauru"
            },
            ita: {
                official: "Repubblica di Nauru",
                common: "Nauru"
            },
            jpn: {
                official: "\u30CA\u30A6\u30EB\u5171\u548C\u56FD",
                common: "\u30CA\u30A6\u30EB"
            },
            kor: {
                official: "\uB098\uC6B0\uB8E8 \uACF5\uD654\uAD6D",
                common: "\uB098\uC6B0\uB8E8"
            },
            nld: {
                official: "Republiek Nauru",
                common: "Nauru"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0646\u0627\u0626\u0648\u0631\u0648",
                common: "\u0646\u0627\u0626\u0648\u0631\u0648"
            },
            pol: {
                official: "Republika Nauru",
                common: "Nauru"
            },
            por: {
                official: "Rep\xfablica de Nauru",
                common: "Nauru"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0430\u0443\u0440\u0443",
                common: "\u041D\u0430\u0443\u0440\u0443"
            },
            slk: {
                official: "Naursk\xe1 republika",
                common: "Nauru"
            },
            spa: {
                official: "Rep\xfablica de Nauru",
                common: "Nauru"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0430\u0443\u0440\u0443",
                common: "\u041D\u0430\u0443\u0440\u0443"
            },
            swe: {
                official: "Republiken Nauru",
                common: "Nauru"
            },
            tur: {
                official: "Nauru Cumhuriyeti",
                common: "Nauru"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u0627\u0648\u0631\u0648",
                common: "\u0646\u0627\u0648\u0631\u0648"
            },
            zho: {
                official: "\u7459\u9C81\u5171\u548C\u56FD",
                common: "\u7459\u9C81"
            }
        },
        latlng: [
            -0.53333333,
            166.91666666
        ],
        landlocked: false,
        area: 21,
        demonyms: {
            eng: {
                f: "Nauruan",
                m: "Nauruan"
            },
            fra: {
                f: "Nauruane",
                m: "Nauruan"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/kyAGw6XEJgjSMsTK7",
            openStreetMaps: "https://www.openstreetmap.org/relation/571804"
        },
        population: 10834,
        gini: {
            2012: 34.8
        },
        car: {
            signs: [
                "NAU"
            ],
            side: "left"
        },
        timezones: [
            "UTC+12:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/nr.png",
            svg: "https://flagcdn.com/nr.svg",
            alt: "The flag of Nauru has a dark blue field with a thin yellow horizontal band across the center and a large white twelve-pointed star beneath the horizontal band on the hoist side of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/nr.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/nr.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -0.55,
                166.92
            ]
        }
    },
    {
        name: {
            common: "Cocos (Keeling) Islands",
            official: "Territory of the Cocos (Keeling) Islands",
            nativeName: {
                eng: {
                    official: "Territory of the Cocos (Keeling) Islands",
                    common: "Cocos (Keeling) Islands"
                }
            }
        },
        tld: [
            ".cc"
        ],
        cca2: "CC",
        ccn3: "166",
        cca3: "CCK",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            AUD: {
                name: "Australian dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "1"
            ]
        },
        capital: [
            "West Island"
        ],
        altSpellings: [
            "CC",
            "Keeling Islands",
            "Cocos Islands"
        ],
        region: "Oceania",
        subregion: "Australia and New Zealand",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0625\u0642\u0644\u064A\u0645 \u062C\u0632\u0631 \u0643\u0648\u0643\u0648\u0633",
                common: "\u062C\u0632\u0631 \u0643\u0648\u0643\u0648\u0633"
            },
            bre: {
                official: "Tiriad Inizi Cocos (Keeling)",
                common: "Inizi Cocos (Keeling)"
            },
            ces: {
                official: "Kokosov\xe9 ostrovy",
                common: "Kokosov\xe9 ostrovy"
            },
            cym: {
                official: "Tiriogaeth yr Ynysoedd Cocos (Keeling)",
                common: "Ynysoedd Cocos"
            },
            deu: {
                official: "Gebiet der Kokos- (Keeling-) Inseln",
                common: "Kokosinseln"
            },
            est: {
                official: "Kookossaarte ala",
                common: "Kookossaared"
            },
            fin: {
                official: "Kookossaaret",
                common: "Kookossaaret"
            },
            fra: {
                official: "Territoire des \xeeles Cocos (Keeling)",
                common: "\xceles Cocos"
            },
            hrv: {
                official: "Teritoriju Kokosovi (Keeling) Islands",
                common: "Kokosovi Otoci"
            },
            hun: {
                official: "K\xf3kusz-szigetek",
                common: "K\xf3kusz-szigetek"
            },
            ita: {
                official: "Territorio della (Keeling) Isole Cocos",
                common: "Isole Cocos e Keeling"
            },
            jpn: {
                official: "\u30B3\u30B3\u30B9\u8AF8\u5CF6\u306E\u9818\u571F",
                common: "\u30B3\u30B3\u30B9\uFF08\u30AD\u30FC\u30EA\u30F3\u30B0\uFF09\u8AF8\u5CF6"
            },
            kor: {
                official: "\uCF54\uCF54\uC2A4 \uC81C\uB3C4",
                common: "\uCF54\uCF54\uC2A4 \uC81C\uB3C4"
            },
            nld: {
                official: "Grondgebied van de Eilanden Cocos (Keeling )",
                common: "Cocoseilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u06A9\u0648\u0633",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u06A9\u0648\u0633"
            },
            pol: {
                official: "Wyspy Kokosowe",
                common: "Wyspy Kokosowe"
            },
            por: {
                official: "Territ\xf3rio dos Cocos (Keeling)",
                common: "Ilhas Cocos (Keeling)"
            },
            rus: {
                official: "\u0422\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u041A\u043E\u043A\u043E\u0441\u043E\u0432\u044B\u0435 (\u041A\u0438\u043B\u0438\u043D\u0433) \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u041A\u043E\u043A\u043E\u0441\u043E\u0432\u044B\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Kokosov\xe9 ostrovy",
                common: "Kokosov\xe9 ostrovy"
            },
            spa: {
                official: "Territorio de los (Keeling) Islas Cocos",
                common: "Islas Cocos o Islas Keeling"
            },
            srp: {
                official: "\u041A\u043E\u043A\u043E\u0441\u043E\u0432\u0430 (\u041A\u0438\u043B\u0438\u043D\u0433) \u041E\u0441\u0442\u0440\u0432\u0430",
                common: "\u041A\u043E\u043A\u043E\u0441\u043E\u0432\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "Kokos\xf6arna",
                common: "Kokos\xf6arna"
            },
            tur: {
                official: "Cocos (Keeling) Adalar\u0131",
                common: "Cocos (Keeling) Adalar\u0131"
            },
            urd: {
                official: "\u062C\u0632\u0627\u0626\u0631 (\u06A9\u06CC\u0644\u0646\u06AF) \u06A9\u0648\u06A9\u0648\u0633",
                common: "\u062C\u0632\u0627\u0626\u0631 \u06A9\u0648\u06A9\u0648\u0633"
            },
            zho: {
                official: "\u79D1\u79D1\u65AF",
                common: "\u79D1\u79D1\u65AF"
            }
        },
        latlng: [
            12.1642,
            96.871
        ],
        landlocked: false,
        area: 14,
        demonyms: {
            eng: {
                f: "Cocos Islander",
                m: "Cocos Islander"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDE8",
        maps: {
            googleMaps: "https://goo.gl/maps/3eCdKVpVfMcZyKcK6",
            openStreetMaps: "https://www.openstreetmap.org/relation/82636"
        },
        population: 544,
        car: {
            signs: [
                "AUS"
            ],
            side: "left"
        },
        timezones: [
            "UTC+06:30"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cc.png",
            svg: "https://flagcdn.com/cc.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -12.17,
                96.83
            ]
        }
    },
    {
        name: {
            common: "Western Sahara",
            official: "Sahrawi Arab Democratic Republic",
            nativeName: {
                ber: {
                    official: "Sahrawi Arab Democratic Republic",
                    common: "Western Sahara"
                },
                mey: {
                    official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0635\u062D\u0631\u0627\u0648\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629",
                    common: "\u0627\u0644\u0635\u062D\u0631\u0627\u0621 \u0627\u0644\u063A\u0631\u0628\u064A\u0629"
                },
                spa: {
                    official: "Rep\xfablica \xc1rabe Saharaui Democr\xe1tica",
                    common: "Sahara Occidental"
                }
            }
        },
        tld: [
            ".eh"
        ],
        cca2: "EH",
        ccn3: "732",
        cca3: "ESH",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            DZD: {
                name: "Algerian dinar",
                symbol: "\u062F\u062C"
            },
            MAD: {
                name: "Moroccan dirham",
                symbol: "DH"
            },
            MRU: {
                name: "Mauritanian ouguiya",
                symbol: "UM"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "125288",
                "125289"
            ]
        },
        capital: [
            "El Aai\xfan"
        ],
        altSpellings: [
            "EH",
            "Tane\u1E93roft Tutrimt"
        ],
        region: "Africa",
        subregion: "Northern Africa",
        languages: {
            ber: "Berber",
            mey: "Hassaniya",
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0639\u0631\u0628\u064A\u0629 \u0627\u0644\u0635\u062D\u0631\u0627\u0648\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629",
                common: "\u0627\u0644\u0635\u062D\u0631\u0627\u0621 \u0627\u0644\u063A\u0631\u0628\u064A\u0629"
            },
            bre: {
                official: "Republik Arab Saharaoui Demokratel",
                common: "Sahara ar C'horn\xf4g"
            },
            ces: {
                official: "Z\xe1padn\xed Sahara",
                common: "Z\xe1padn\xed Sahara"
            },
            cym: {
                official: "Sahrawi Arab Democratic Republic",
                common: "Western Sahara"
            },
            deu: {
                official: "Demokratische Arabische Republik Sahara",
                common: "Westsahara"
            },
            est: {
                official: "L\xe4\xe4ne-Sahara",
                common: "L\xe4\xe4ne-Sahara"
            },
            fin: {
                official: "L\xe4nsi-Sahara",
                common: "L\xe4nsi-Sahara"
            },
            fra: {
                official: "R\xe9publique arabe sahraouie d\xe9mocratique",
                common: "Sahara Occidental"
            },
            hrv: {
                official: "Sahrawi Arab Demokratska Republika",
                common: "Zapadna Sahara"
            },
            hun: {
                official: "Nyugat-Szahara",
                common: "Nyugat-Szahara"
            },
            ita: {
                official: "Repubblica Araba Saharawi Democratica",
                common: "Sahara Occidentale"
            },
            jpn: {
                official: "\u30B5\u30CF\u30E9\u30A2\u30E9\u30D6\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u897F\u30B5\u30CF\u30E9"
            },
            kor: {
                official: "\uC0AC\uD558\uB77C \uC544\uB78D \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                common: "\uC11C\uC0AC\uD558\uB77C"
            },
            nld: {
                official: "Sahrawi Arabische Democratische Republiek",
                common: "Westelijke Sahara"
            },
            per: {
                official: "\u0635\u062D\u0631\u0627\u06CC \u063A\u0631\u0628\u06CC",
                common: "\u0635\u062D\u0631\u0627\u06CC \u063A\u0631\u0628\u06CC"
            },
            pol: {
                official: "Saharyjska Arabska Republika Demokratyczna",
                common: "Sahara Zachodnia"
            },
            por: {
                official: "Rep\xfablica \xc1rabe Saharaui Democr\xe1tica",
                common: "Saara Ocidental"
            },
            rus: {
                official: "Sahrawi \u0410\u0440\u0430\u0431\u0441\u043A\u0430\u044F \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0417\u0430\u043F\u0430\u0434\u043D\u0430\u044F \u0421\u0430\u0445\u0430\u0440\u0430"
            },
            slk: {
                official: "Z\xe1padn\xe1 Sahara",
                common: "Z\xe1padn\xe1 Sahara"
            },
            spa: {
                official: "Rep\xfablica \xc1rabe Saharaui Democr\xe1tica",
                common: "Sahara Occidental"
            },
            srp: {
                official: "\u0421\u0430\u0445\u0430\u0440\u0441\u043A\u0430 \u0410\u0440\u0430\u043F\u0441\u043A\u0430 \u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0421\u0430\u0445\u0430\u0440\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430"
            },
            swe: {
                official: "V\xe4stsahara",
                common: "V\xe4stsahara"
            },
            tur: {
                official: "Sahra Demokratik Arap Cumhuriyeti",
                common: "Sahra Demokratik Arap Cumhuriyeti"
            },
            urd: {
                official: "\u0635\u062D\u0631\u0627\u0648\u06CC \u0639\u0631\u0628 \u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1",
                common: "\u0645\u063A\u0631\u0628\u06CC \u0635\u062D\u0627\u0631\u0627"
            },
            zho: {
                official: "\u963F\u62C9\u4F2F\u6492\u54C8\u62C9\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u897F\u6492\u54C8\u62C9"
            }
        },
        latlng: [
            24.5,
            -13
        ],
        landlocked: false,
        borders: [
            "DZA",
            "MRT",
            "MAR"
        ],
        area: 266000,
        demonyms: {
            eng: {
                f: "Sahrawi",
                m: "Sahrawi"
            }
        },
        flag: "\uD83C\uDDEA\uD83C\uDDED",
        maps: {
            googleMaps: "https://goo.gl/maps/7nU3mB69vP6zQp7A8",
            openStreetMaps: "https://www.openstreetmap.org/relation/5441968"
        },
        population: 510713,
        car: {
            signs: [
                ""
            ],
            side: "right"
        },
        timezones: [
            "UTC+00:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/eh.png",
            svg: "https://flagcdn.com/eh.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -13.28,
                27.14
            ]
        }
    },
    {
        name: {
            common: "Dominica",
            official: "Commonwealth of Dominica",
            nativeName: {
                eng: {
                    official: "Commonwealth of Dominica",
                    common: "Dominica"
                }
            }
        },
        tld: [
            ".dm"
        ],
        cca2: "DM",
        ccn3: "212",
        cca3: "DMA",
        cioc: "DMA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XCD: {
                name: "Eastern Caribbean dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "767"
            ]
        },
        capital: [
            "Roseau"
        ],
        altSpellings: [
            "DM",
            "Dominique",
            "Wai\u2018tu kubuli",
            "Commonwealth of Dominica"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0643\u0648\u0645\u0648\u0646\u0648\u0644\u062B \u062F\u0648\u0645\u064A\u0646\u064A\u0643\u0627",
                common: "\u062F\u0648\u0645\u064A\u0646\u064A\u0643\u0627"
            },
            bre: {
                official: "Kenglad Dominika",
                common: "Dominika"
            },
            ces: {
                official: "Dominik\xe1nsk\xe9 spole\u010Denstv\xed",
                common: "Dominika"
            },
            cym: {
                official: "Cymanwlad Dominica",
                common: "Dominica"
            },
            deu: {
                official: "Commonwealth von Dominica",
                common: "Dominica"
            },
            est: {
                official: "Dominica \xdchendus",
                common: "Dominica"
            },
            fin: {
                official: "Dominican liittovaltio",
                common: "Dominica"
            },
            fra: {
                official: "Commonwealth de la Dominique",
                common: "Dominique"
            },
            hrv: {
                official: "Zajednica Dominika",
                common: "Dominika"
            },
            hun: {
                official: "Dominikai K\xf6z\xf6ss\xe9g",
                common: "Dominikai K\xf6z\xf6ss\xe9g"
            },
            ita: {
                official: "Commonwealth di Dominica",
                common: "Dominica"
            },
            jpn: {
                official: "\u30C9\u30DF\u30CB\u30AB\u56FD",
                common: "\u30C9\u30DF\u30CB\u30AB\u56FD"
            },
            kor: {
                official: "\uB3C4\uBBF8\uB2C8\uCE74 \uACF5\uD654\uAD6D",
                common: "\uB3C4\uBBF8\uB2C8\uCE74 \uACF5\uD654\uAD6D"
            },
            nld: {
                official: "Gemenebest Dominica",
                common: "Dominica"
            },
            per: {
                official: "\u0642\u0644\u0645\u0631\u0648 \u0647\u0645\u0633\u0648\u062F \u062F\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0627",
                common: "\u062F\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0627"
            },
            pol: {
                official: "Wsp\xf3lnota Dominiki",
                common: "Dominika"
            },
            por: {
                official: "Comunidade da Dominica",
                common: "Dominica"
            },
            rus: {
                official: "\u0421\u043E\u0434\u0440\u0443\u0436\u0435\u0441\u0442\u0432\u043E \u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0438",
                common: "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430"
            },
            slk: {
                official: "Dominick\xe9 spolo\u010Denstvo",
                common: "Dominika"
            },
            spa: {
                official: "Mancomunidad de Dominica",
                common: "Dominica"
            },
            srp: {
                official: "\u041A\u043E\u043C\u043E\u043D\u0432\u0435\u043B\u0442 \u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430",
                common: "\u0414\u043E\u043C\u0438\u043D\u0438\u043A\u0430"
            },
            swe: {
                official: "Samv\xe4ldet Dominica",
                common: "Dominica"
            },
            tur: {
                official: "Dominika Toplulu\u011Fu",
                common: "Dominika"
            },
            urd: {
                official: "\u062F\u0648\u0644\u062A\u0650 \u0645\u0634\u062A\u0631\u06A9\u06C1 \u0688\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0627",
                common: "\u0688\u0648\u0645\u06CC\u0646\u06CC\u06A9\u0627"
            },
            zho: {
                official: "\u591A\u7C73\u5C3C\u52A0\u5171\u548C\u56FD",
                common: "\u591A\u7C73\u5C3C\u52A0"
            }
        },
        latlng: [
            15.41666666,
            -61.33333333
        ],
        landlocked: false,
        area: 751,
        demonyms: {
            eng: {
                f: "Dominican",
                m: "Dominican"
            },
            fra: {
                f: "Dominiquaise",
                m: "Dominiquais"
            }
        },
        flag: "\uD83C\uDDE9\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/HSKdHYpFC8oHHuyV7",
            openStreetMaps: "https://www.openstreetmap.org/relation/307823"
        },
        population: 71991,
        fifa: "DMA",
        car: {
            signs: [
                "WD"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/dm.png",
            svg: "https://flagcdn.com/dm.svg",
            alt: "The flag of Dominica has a green field with a large centered tricolor cross. The vertical and horizontal parts of the cross each comprise three bands of yellow, black and white. A red circle, bearing a hoist-side facing purple Sisserou parrot standing on a twig and encircled by ten five-pointed yellow-edged green stars, is superimposed at the center of the cross."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/dm.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/dm.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                15.3,
                -61.4
            ]
        }
    },
    {
        name: {
            common: "Costa Rica",
            official: "Republic of Costa Rica",
            nativeName: {
                spa: {
                    official: "Rep\xfablica de Costa Rica",
                    common: "Costa Rica"
                }
            }
        },
        tld: [
            ".cr"
        ],
        cca2: "CR",
        ccn3: "188",
        cca3: "CRI",
        cioc: "CRC",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            CRC: {
                name: "Costa Rican col\xf3n",
                symbol: "\u20A1"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "06"
            ]
        },
        capital: [
            "San Jos\xe9"
        ],
        altSpellings: [
            "CR",
            "Republic of Costa Rica",
            "Rep\xfablica de Costa Rica"
        ],
        region: "Americas",
        subregion: "Central America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0633\u062A\u0627\u0631\u064A\u0643\u0627",
                common: "\u0643\u0648\u0633\u062A\u0627\u0631\u064A\u0643\u0627"
            },
            bre: {
                official: "Republik Costa Rica",
                common: "Costa Rica"
            },
            ces: {
                official: "Kostarick\xe1 republika",
                common: "Kostarika"
            },
            cym: {
                official: "Gweriniaeth Costa Rica",
                common: "Costa Rica"
            },
            deu: {
                official: "Republik Costa Rica",
                common: "Costa Rica"
            },
            est: {
                official: "Costa Rica Vabariik",
                common: "Costa Rica"
            },
            fin: {
                official: "Costa Rican tasavalta",
                common: "Costa Rica"
            },
            fra: {
                official: "R\xe9publique du Costa Rica",
                common: "Costa Rica"
            },
            hrv: {
                official: "Republika Kostarika",
                common: "Kostarika"
            },
            hun: {
                official: "Costa Rica-i K\xf6zt\xe1rsas\xe1g",
                common: "Costa Rica"
            },
            ita: {
                official: "Repubblica di Costa Rica",
                common: "Costa Rica"
            },
            jpn: {
                official: "\u30B3\u30B9\u30BF\u30EA\u30AB\u5171\u548C\u56FD",
                common: "\u30B3\u30B9\u30BF\u30EA\u30AB"
            },
            kor: {
                official: "\uCF54\uC2A4\uD0C0\uB9AC\uCE74 \uACF5\uD654\uAD6D",
                common: "\uCF54\uC2A4\uD0C0\uB9AC\uCE74"
            },
            nld: {
                official: "Republiek Costa Rica",
                common: "Costa Rica"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0627\u0633\u062A\u0627\u0631\u06CC\u06A9\u0627",
                common: "\u06A9\u0627\u0633\u062A\u0627\u0631\u06CC\u06A9\u0627"
            },
            pol: {
                official: "Republika Kostaryki",
                common: "Kostaryka"
            },
            por: {
                official: "Rep\xfablica da Costa Rica",
                common: "Costa Rica"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u0442\u0430-\u0420\u0438\u043A\u0430",
                common: "\u041A\u043E\u0441\u0442\u0430-\u0420\u0438\u043A\u0430"
            },
            slk: {
                official: "Kostarick\xe1 republika",
                common: "Kostarika"
            },
            spa: {
                official: "Rep\xfablica de Costa Rica",
                common: "Costa Rica"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u0442\u0430\u0440\u0438\u043A\u0430",
                common: "\u041A\u043E\u0441\u0442\u0430\u0440\u0438\u043A\u0430"
            },
            swe: {
                official: "Republiken Costa Rica",
                common: "Costa Rica"
            },
            tur: {
                official: "Kosta Rika Cumhuriyeti",
                common: "Kosta Rika"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u0633\u0679\u0627\u0631\u06CC\u06A9\u0627",
                common: "\u06A9\u0648\u0633\u0679\u0627\u0631\u06CC\u06A9\u0627"
            },
            zho: {
                official: "\u54E5\u65AF\u8FBE\u9ECE\u52A0\u5171\u548C\u56FD",
                common: "\u54E5\u65AF\u8FBE\u9ECE\u52A0"
            }
        },
        latlng: [
            10,
            -84
        ],
        landlocked: false,
        borders: [
            "NIC",
            "PAN"
        ],
        area: 51100,
        demonyms: {
            eng: {
                f: "Costa Rican",
                m: "Costa Rican"
            },
            fra: {
                f: "Costaricaine",
                m: "Costaricain"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/RFiwytjvNrpfKN7k6",
            openStreetMaps: "https://www.openstreetmap.org/relation/287667"
        },
        population: 5094114,
        gini: {
            2019: 48.2
        },
        fifa: "CRC",
        car: {
            signs: [
                "CR"
            ],
            side: "right"
        },
        timezones: [
            "UTC-06:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cr.png",
            svg: "https://flagcdn.com/cr.svg",
            alt: "The flag of Costa Rica is composed of five horizontal bands of blue, white, red, white and blue. The central red band is twice the height of the other four bands."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cr.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cr.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                9.93,
                -84.09
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Australia",
            official: "Commonwealth of Australia",
            nativeName: {
                eng: {
                    official: "Commonwealth of Australia",
                    common: "Australia"
                }
            }
        },
        tld: [
            ".au"
        ],
        cca2: "AU",
        ccn3: "036",
        cca3: "AUS",
        cioc: "AUS",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            AUD: {
                name: "Australian dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "1"
            ]
        },
        capital: [
            "Canberra"
        ],
        altSpellings: [
            "AU"
        ],
        region: "Oceania",
        subregion: "Australia and New Zealand",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0643\u0648\u0645\u0648\u0646\u0648\u0644\u062B \u0623\u0633\u062A\u0631\u0627\u0644\u064A\u0627",
                common: "\u0623\u0633\u062A\u0631\u0627\u0644\u064A\u0627"
            },
            bre: {
                official: "Kenglad Aostralia",
                common: "Aostralia"
            },
            ces: {
                official: "Australsk\xe9 spole\u010Denstv\xed",
                common: "Austr\xe1lie"
            },
            cym: {
                official: "Cymanwlad Awstralia",
                common: "Awstralia"
            },
            deu: {
                official: "Commonwealth Australien",
                common: "Australien"
            },
            est: {
                official: "Austraalia \xdchendus",
                common: "Austraalia"
            },
            fin: {
                official: "Australian liittovaltio",
                common: "Australia"
            },
            fra: {
                official: "Australie",
                common: "Australie"
            },
            hrv: {
                official: "Commonwealth of Australia",
                common: "Australija"
            },
            hun: {
                official: "Ausztr\xe1l \xc1llamsz\xf6vets\xe9g",
                common: "Ausztr\xe1lia"
            },
            ita: {
                official: "Commonwealth dell'Australia",
                common: "Australia"
            },
            jpn: {
                official: "\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2\u9023\u90A6",
                common: "\u30AA\u30FC\u30B9\u30C8\u30E9\u30EA\u30A2"
            },
            kor: {
                official: "\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544 \uC5F0\uBC29",
                common: "\uD638\uC8FC"
            },
            nld: {
                official: "Gemenebest van Australi\xeb",
                common: "Australi\xeb"
            },
            per: {
                official: "\u0642\u0644\u0645\u0631\u0648 \u0647\u0645\u0633\u0648\u062F \u0627\u0633\u062A\u0631\u0627\u0644\u06CC\u0627",
                common: "\u0627\u0633\u062A\u0631\u0627\u0644\u06CC\u0627"
            },
            pol: {
                official: "Zwi\u0105zek Australijski",
                common: "Australia"
            },
            por: {
                official: "Comunidade da Austr\xe1lia",
                common: "Austr\xe1lia"
            },
            rus: {
                official: "\u0421\u043E\u0434\u0440\u0443\u0436\u0435\u0441\u0442\u0432\u043E \u0410\u0432\u0441\u0442\u0440\u0430\u043B\u0438\u0438",
                common: "\u0410\u0432\u0441\u0442\u0440\u0430\u043B\u0438\u044F"
            },
            slk: {
                official: "Austr\xe1lsky zv\xe4z",
                common: "Austr\xe1lia"
            },
            spa: {
                official: "Mancomunidad de Australia",
                common: "Australia"
            },
            srp: {
                official: "\u041A\u043E\u043C\u043E\u043D\u0432\u0435\u043B\u0442 \u0410\u0443\u0441\u0442\u0440\u0430\u043B\u0438\u0458\u0430",
                common: "\u0410\u0443\u0441\u0442\u0440\u0430\u043B\u0438\u0458\u0430"
            },
            swe: {
                official: "Australiska statsf\xf6rbundet",
                common: "Australien"
            },
            tur: {
                official: "Avustralya Federal Devleti",
                common: "Avustralya"
            },
            urd: {
                official: "\u062F\u0648\u0644\u062A\u0650 \u0645\u0634\u062A\u0631\u06A9\u06C1 \u0622\u0633\u0679\u0631\u06CC\u0644\u06CC\u0627",
                common: "\u0622\u0633\u0679\u0631\u06CC\u0644\u06CC\u0627"
            },
            zho: {
                official: "\u6FB3\u5927\u5229\u4E9A\u8054\u90A6",
                common: "\u6FB3\u5927\u5229\u4E9A"
            }
        },
        latlng: [
            -27,
            133
        ],
        landlocked: false,
        area: 7692024,
        demonyms: {
            eng: {
                f: "Australian",
                m: "Australian"
            },
            fra: {
                f: "Australienne",
                m: "Australien"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDFA",
        maps: {
            googleMaps: "https://goo.gl/maps/DcjaDa7UbhnZTndH6",
            openStreetMaps: "https://www.openstreetmap.org/relation/80500"
        },
        population: 25687041,
        gini: {
            2014: 34.4
        },
        fifa: "AUS",
        car: {
            signs: [
                "AUS"
            ],
            side: "left"
        },
        timezones: [
            "UTC+05:00",
            "UTC+06:30",
            "UTC+07:00",
            "UTC+08:00",
            "UTC+09:30",
            "UTC+10:00",
            "UTC+10:30",
            "UTC+11:30"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/au.png",
            svg: "https://flagcdn.com/au.svg",
            alt: "The flag of Australia has a dark blue field. It features the flag of the United Kingdom \u2014 the Union Jack \u2014 in the canton, beneath which is a large white seven-pointed star. A representation of the Southern Cross constellation, made up of one small five-pointed and four larger seven-pointed white stars, is situated on the fly side of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/au.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/au.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -35.27,
                149.13
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Thailand",
            official: "Kingdom of Thailand",
            nativeName: {
                tha: {
                    official: "\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E44\u0E17\u0E22",
                    common: "\u0E1B\u0E23\u0E30\u0E40\u0E17\u0E28\u0E44\u0E17\u0E22"
                }
            }
        },
        tld: [
            ".th",
            ".\u0E44\u0E17\u0E22"
        ],
        cca2: "TH",
        ccn3: "764",
        cca3: "THA",
        cioc: "THA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            THB: {
                name: "Thai baht",
                symbol: "\u0E3F"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "6"
            ]
        },
        capital: [
            "Bangkok"
        ],
        altSpellings: [
            "TH",
            "Prathet",
            "Thai",
            "Kingdom of Thailand",
            "\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E44\u0E17\u0E22",
            "Ratcha Anachak Thai"
        ],
        region: "Asia",
        subregion: "South-Eastern Asia",
        languages: {
            tha: "Thai"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u062A\u0627\u064A\u0644\u0646\u062F",
                common: "\u062A\u0627\u064A\u0644\u0646\u062F"
            },
            bre: {
                official: "Rouantelezh Thailand",
                common: "Thailand"
            },
            ces: {
                official: "Thajsk\xe9 kr\xe1lovstv\xed",
                common: "Thajsko"
            },
            cym: {
                official: "Kingdom of Thailand",
                common: "Thailand"
            },
            deu: {
                official: "K\xf6nigreich Thailand",
                common: "Thailand"
            },
            est: {
                official: "Tai Kuningriik",
                common: "Tai"
            },
            fin: {
                official: "Thaimaan kuningaskunta",
                common: "Thaimaa"
            },
            fra: {
                official: "Royaume de Tha\xeflande",
                common: "Tha\xeflande"
            },
            hrv: {
                official: "Kraljevina Tajland",
                common: "Tajland"
            },
            hun: {
                official: "Thaif\xf6ldi Kir\xe1lys\xe1g",
                common: "Thaif\xf6ld"
            },
            ita: {
                official: "Regno di Thailandia",
                common: "Tailandia"
            },
            jpn: {
                official: "\u30BF\u30A4\u738B\u56FD",
                common: "\u30BF\u30A4"
            },
            kor: {
                official: "\uD0C0\uC774 \uC655\uAD6D",
                common: "\uD0DC\uAD6D"
            },
            nld: {
                official: "Koninkrijk Thailand",
                common: "Thailand"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u062A\u0627\u06CC\u0644\u0646\u062F",
                common: "\u062A\u0627\u06CC\u0644\u0646\u062F"
            },
            pol: {
                official: "Kr\xf3lestwo Tajlandii",
                common: "Tajlandia"
            },
            por: {
                official: "Reino da Tail\xe2ndia",
                common: "Tail\xe2ndia"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0422\u0430\u0438\u043B\u0430\u043D\u0434",
                common: "\u0422\u0430\u0438\u043B\u0430\u043D\u0434"
            },
            slk: {
                official: "Thajsk\xe9 kr\xe1\u013Eovstvo",
                common: "Thajsko"
            },
            spa: {
                official: "Reino de Tailandia",
                common: "Tailandia"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0422\u0430\u0458\u043B\u0430\u043D\u0434",
                common: "\u0422\u0430\u0458\u043B\u0430\u043D\u0434"
            },
            swe: {
                official: "Konungariket Thailand",
                common: "Thailand"
            },
            tur: {
                official: "Tayland Krall\u0131\u011F\u0131",
                common: "Tayland"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u062A\u06BE\u0627\u0626\u06CC \u0644\u06CC\u0646\u0688",
                common: "\u062A\u06BE\u0627\u0626\u06CC \u0644\u06CC\u0646\u0688"
            },
            zho: {
                official: "\u6CF0\u738B\u56FD",
                common: "\u6CF0\u56FD"
            }
        },
        latlng: [
            15,
            100
        ],
        landlocked: false,
        borders: [
            "MMR",
            "KHM",
            "LAO",
            "MYS"
        ],
        area: 513120,
        demonyms: {
            eng: {
                f: "Thai",
                m: "Thai"
            },
            fra: {
                f: "Tha\xeflandaise",
                m: "Tha\xeflandais"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDED",
        maps: {
            googleMaps: "https://goo.gl/maps/qeU6uqsfW4nCCwzw9",
            openStreetMaps: "https://www.openstreetmap.org/relation/2067731"
        },
        population: 69799978,
        gini: {
            2019: 34.9
        },
        fifa: "THA",
        car: {
            signs: [
                "T"
            ],
            side: "left"
        },
        timezones: [
            "UTC+07:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/th.png",
            svg: "https://flagcdn.com/th.svg",
            alt: "The flag of Thailand is composed of five horizontal bands of red, white, blue, white and red, with the central blue band twice the height of the other four bands."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/th.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/th.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                13.75,
                100.52
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Haiti",
            official: "Republic of Haiti",
            nativeName: {
                fra: {
                    official: "R\xe9publique d'Ha\xefti",
                    common: "Ha\xefti"
                },
                hat: {
                    official: "Repiblik Ayiti",
                    common: "Ayiti"
                }
            }
        },
        tld: [
            ".ht"
        ],
        cca2: "HT",
        ccn3: "332",
        cca3: "HTI",
        cioc: "HAI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            HTG: {
                name: "Haitian gourde",
                symbol: "G"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "09"
            ]
        },
        capital: [
            "Port-au-Prince"
        ],
        altSpellings: [
            "HT",
            "Republic of Haiti",
            "R\xe9publique d'Ha\xefti",
            "Repiblik Ayiti"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            fra: "French",
            hat: "Haitian Creole"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0647\u0627\u064A\u062A\u064A",
                common: "\u0647\u0627\u064A\u062A\u064A"
            },
            bre: {
                official: "Republik Haiti",
                common: "Haiti"
            },
            ces: {
                official: "Republika Haiti",
                common: "Haiti"
            },
            cym: {
                official: "Republic of Haiti",
                common: "Haiti"
            },
            deu: {
                official: "Republik Haiti",
                common: "Haiti"
            },
            est: {
                official: "Haiti Vabariik",
                common: "Haiti"
            },
            fin: {
                official: "Haitin tasavalta",
                common: "Haiti"
            },
            fra: {
                official: "R\xe9publique d'Ha\xefti",
                common: "Ha\xefti"
            },
            hrv: {
                official: "Republika Haiti",
                common: "Haiti"
            },
            hun: {
                official: "Haiti K\xf6zt\xe1rsas\xe1g",
                common: "Haiti"
            },
            ita: {
                official: "Repubblica di Haiti",
                common: "Haiti"
            },
            jpn: {
                official: "\u30CF\u30A4\u30C1\u5171\u548C\u56FD",
                common: "\u30CF\u30A4\u30C1"
            },
            kor: {
                official: "\uC544\uC774\uD2F0 \uACF5\uD654\uAD6D",
                common: "\uC544\uC774\uD2F0"
            },
            nld: {
                official: "Republiek Ha\xefti",
                common: "Ha\xefti"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0647\u0627\u0626\u06CC\u062A\u06CC",
                common: "\u0647\u0627\u0626\u06CC\u062A\u06CC"
            },
            pol: {
                official: "Republika Haiti",
                common: "Haiti"
            },
            por: {
                official: "Rep\xfablica do Haiti",
                common: "Haiti"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u0438\u0442\u0438",
                common: "\u0413\u0430\u0438\u0442\u0438"
            },
            slk: {
                official: "Haitsk\xe1 republika",
                common: "Haiti"
            },
            spa: {
                official: "Rep\xfablica de Hait\xed",
                common: "Hait\xed"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0425\u0430\u0438\u0442\u0438",
                common: "\u0425\u0430\u0438\u0442\u0438"
            },
            swe: {
                official: "Republiken Haiti",
                common: "Haiti"
            },
            tur: {
                official: "Haiti Cumhuriyeti",
                common: "Haiti"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06C1\u06CC\u0679\u06CC",
                common: "\u06C1\u06CC\u0679\u06CC"
            },
            zho: {
                official: "\u6D77\u5730\u5171\u548C\u56FD",
                common: "\u6D77\u5730"
            }
        },
        latlng: [
            19,
            -72.41666666
        ],
        landlocked: false,
        borders: [
            "DOM"
        ],
        area: 27750,
        demonyms: {
            eng: {
                f: "Haitian",
                m: "Haitian"
            },
            fra: {
                f: "Ha\xeftienne",
                m: "Ha\xeftien"
            }
        },
        flag: "\uD83C\uDDED\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/9o13xtjuUdqFnHbn9",
            openStreetMaps: "https://www.openstreetmap.org/relation/307829"
        },
        population: 11402533,
        gini: {
            2012: 41.1
        },
        fifa: "HAI",
        car: {
            signs: [
                "RH"
            ],
            side: "right"
        },
        timezones: [
            "UTC-05:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ht.png",
            svg: "https://flagcdn.com/ht.svg",
            alt: "The flag of Haiti is composed of two equal horizontal bands of blue and red. A white square bearing the national coat of arms is superimposed at the center of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ht.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ht.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                18.53,
                -72.33
            ]
        },
        postalCode: {
            format: "HT####",
            regex: "^(?:HT)*(\\d{4})$"
        }
    },
    {
        name: {
            common: "Tuvalu",
            official: "Tuvalu",
            nativeName: {
                eng: {
                    official: "Tuvalu",
                    common: "Tuvalu"
                },
                tvl: {
                    official: "Tuvalu",
                    common: "Tuvalu"
                }
            }
        },
        tld: [
            ".tv"
        ],
        cca2: "TV",
        ccn3: "798",
        cca3: "TUV",
        cioc: "TUV",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            AUD: {
                name: "Australian dollar",
                symbol: "$"
            },
            TVD: {
                name: "Tuvaluan dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "88"
            ]
        },
        capital: [
            "Funafuti"
        ],
        altSpellings: [
            "TV"
        ],
        region: "Oceania",
        subregion: "Polynesia",
        languages: {
            eng: "English",
            tvl: "Tuvaluan"
        },
        translations: {
            ara: {
                official: "\u062A\u0648\u0641\u0627\u0644\u0648",
                common: "\u062A\u0648\u0641\u0627\u0644\u0648"
            },
            bre: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            ces: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            cym: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            deu: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            est: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            fin: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            fra: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            hrv: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            hun: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            ita: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            jpn: {
                official: "\u30C4\u30D0\u30EB",
                common: "\u30C4\u30D0\u30EB"
            },
            kor: {
                official: "\uD22C\uBC1C\uB8E8",
                common: "\uD22C\uBC1C\uB8E8"
            },
            nld: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            per: {
                official: "\u062A\u0648\u0648\u0627\u0644\u0648",
                common: "\u062A\u0648\u0648\u0627\u0644\u0648"
            },
            pol: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            por: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            rus: {
                official: "\u0422\u0443\u0432\u0430\u043B\u0443",
                common: "\u0422\u0443\u0432\u0430\u043B\u0443"
            },
            slk: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            spa: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            srp: {
                official: "\u0422\u0443\u0432\u0430\u043B\u0443",
                common: "\u0422\u0443\u0432\u0430\u043B\u0443"
            },
            swe: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            tur: {
                official: "Tuvalu",
                common: "Tuvalu"
            },
            urd: {
                official: "\u062A\u0648\u0648\u0627\u0644\u0648",
                common: "\u062A\u0648\u0648\u0627\u0644\u0648"
            },
            zho: {
                official: "\u56FE\u74E6\u5362",
                common: "\u56FE\u74E6\u5362"
            }
        },
        latlng: [
            -8,
            178
        ],
        landlocked: false,
        area: 26,
        demonyms: {
            eng: {
                f: "Tuvaluan",
                m: "Tuvaluan"
            },
            fra: {
                f: "Tuvaluane",
                m: "Tuvaluan"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDFB",
        maps: {
            googleMaps: "https://goo.gl/maps/LbuUxtkgm1dfN1Pn6",
            openStreetMaps: "https://www.openstreetmap.org/relation/2177266"
        },
        population: 11792,
        gini: {
            2010: 39.1
        },
        car: {
            signs: [
                "TUV"
            ],
            side: "left"
        },
        timezones: [
            "UTC+12:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tv.png",
            svg: "https://flagcdn.com/tv.svg",
            alt: "The flag of Tuvalu has a light blue field with the flag of the United Kingdom \u2014 the Union Jack \u2014 in the canton. A representation of the country's nine Islands using nine five-pointed yellow stars is situated in the fly half of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/tv.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/tv.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -8.52,
                179.22
            ]
        }
    },
    {
        name: {
            common: "Honduras",
            official: "Republic of Honduras",
            nativeName: {
                spa: {
                    official: "Rep\xfablica de Honduras",
                    common: "Honduras"
                }
            }
        },
        tld: [
            ".hn"
        ],
        cca2: "HN",
        ccn3: "340",
        cca3: "HND",
        cioc: "HON",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            HNL: {
                name: "Honduran lempira",
                symbol: "L"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "04"
            ]
        },
        capital: [
            "Tegucigalpa"
        ],
        altSpellings: [
            "HN",
            "Republic of Honduras",
            "Rep\xfablica de Honduras"
        ],
        region: "Americas",
        subregion: "Central America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0647\u0646\u062F\u0648\u0631\u0627\u0633",
                common: "\u0647\u0646\u062F\u0648\u0631\u0627\u0633"
            },
            bre: {
                official: "Republik Honduras",
                common: "Honduras"
            },
            ces: {
                official: "Hondurask\xe1 republika",
                common: "Honduras"
            },
            cym: {
                official: "Republic of Honduras",
                common: "Honduras"
            },
            deu: {
                official: "Republik Honduras",
                common: "Honduras"
            },
            est: {
                official: "Hondurase Vabariik",
                common: "Honduras"
            },
            fin: {
                official: "Hondurasin tasavalta",
                common: "Honduras"
            },
            fra: {
                official: "R\xe9publique du Honduras",
                common: "Honduras"
            },
            hrv: {
                official: "Republika Honduras",
                common: "Honduras"
            },
            hun: {
                official: "Hondurasi K\xf6zt\xe1rsas\xe1g",
                common: "Honduras"
            },
            ita: {
                official: "Repubblica di Honduras",
                common: "Honduras"
            },
            jpn: {
                official: "\u30DB\u30F3\u30B8\u30E5\u30E9\u30B9\u5171\u548C\u56FD",
                common: "\u30DB\u30F3\u30B8\u30E5\u30E9\u30B9"
            },
            kor: {
                official: "\uC628\uB450\uB77C\uC2A4 \uACF5\uD654\uAD6D",
                common: "\uC628\uB450\uB77C\uC2A4"
            },
            nld: {
                official: "Republiek Honduras",
                common: "Honduras"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0647\u0646\u062F\u0648\u0631\u0627\u0633",
                common: "\u0647\u064F\u0646\u062F\u0648\u0631\u0627\u0633"
            },
            pol: {
                official: "Republika Hondurasu",
                common: "Honduras"
            },
            por: {
                official: "Rep\xfablica de Honduras",
                common: "Honduras"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u043E\u043D\u0434\u0443\u0440\u0430\u0441",
                common: "\u0413\u043E\u043D\u0434\u0443\u0440\u0430\u0441"
            },
            slk: {
                official: "Hondurask\xe1 republika",
                common: "Honduras"
            },
            spa: {
                official: "Rep\xfablica de Honduras",
                common: "Honduras"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0425\u043E\u043D\u0434\u0443\u0440\u0430\u0441",
                common: "\u0425\u043E\u043D\u0434\u0443\u0440\u0430\u0441"
            },
            swe: {
                official: "Republiken Honduras",
                common: "Honduras"
            },
            tur: {
                official: "Honduras Cumhuriyeti",
                common: "Honduras"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06C1\u0648\u0646\u0688\u0648\u0631\u0627\u0633",
                common: "\u06C1\u0648\u0646\u0688\u0648\u0631\u0627\u0633"
            },
            zho: {
                official: "\u6D2A\u90FD\u62C9\u65AF\u5171\u548C\u56FD",
                common: "\u6D2A\u90FD\u62C9\u65AF"
            }
        },
        latlng: [
            15,
            -86.5
        ],
        landlocked: false,
        borders: [
            "GTM",
            "SLV",
            "NIC"
        ],
        area: 112492,
        demonyms: {
            eng: {
                f: "Honduran",
                m: "Honduran"
            },
            fra: {
                f: "Hondurienne",
                m: "Hondurien"
            }
        },
        flag: "\uD83C\uDDED\uD83C\uDDF3",
        maps: {
            googleMaps: "https://goo.gl/maps/BbeJK8Sk2VkMHbdF8",
            openStreetMaps: "https://www.openstreetmap.org/relation/287670"
        },
        population: 9904608,
        gini: {
            2019: 48.2
        },
        fifa: "HON",
        car: {
            signs: [
                "HN"
            ],
            side: "right"
        },
        timezones: [
            "UTC-06:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/hn.png",
            svg: "https://flagcdn.com/hn.svg",
            alt: "The flag of Honduras is composed of three equal horizontal bands of turquoise, white and turquoise, with five small five-pointed turquoise stars arranged in a quincuncial pattern at the center of the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/hn.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/hn.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                14.1,
                -87.22
            ]
        },
        postalCode: {
            format: "@@####",
            regex: "^([A-Z]{2}\\d{4})$"
        }
    },
    {
        name: {
            common: "Equatorial Guinea",
            official: "Republic of Equatorial Guinea",
            nativeName: {
                fra: {
                    official: "R\xe9publique de la Guin\xe9e \xc9quatoriale",
                    common: "Guin\xe9e \xe9quatoriale"
                },
                por: {
                    official: "Rep\xfablica da Guin\xe9 Equatorial",
                    common: "Guin\xe9 Equatorial"
                },
                spa: {
                    official: "Rep\xfablica de Guinea Ecuatorial",
                    common: "Guinea Ecuatorial"
                }
            }
        },
        tld: [
            ".gq"
        ],
        cca2: "GQ",
        ccn3: "226",
        cca3: "GNQ",
        cioc: "GEQ",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XAF: {
                name: "Central African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "40"
            ]
        },
        capital: [
            "Malabo"
        ],
        altSpellings: [
            "GQ",
            "Republic of Equatorial Guinea",
            "Rep\xfablica de Guinea Ecuatorial",
            "R\xe9publique de Guin\xe9e \xe9quatoriale",
            "Rep\xfablica da Guin\xe9 Equatorial"
        ],
        region: "Africa",
        subregion: "Middle Africa",
        languages: {
            fra: "French",
            por: "Portuguese",
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u064A\u0646\u064A\u0627 \u0627\u0644\u0627\u0633\u062A\u0648\u0627\u0626\u064A\u0629",
                common: "\u063A\u064A\u0646\u064A\u0627 \u0627\u0644\u0627\u0633\u062A\u0648\u0627\u0626\u064A\u0629"
            },
            bre: {
                official: "Republik Ginea ar C'heheder",
                common: "Ginea ar C'heheder"
            },
            ces: {
                official: "Republika Rovn\xedkov\xe1 Guinea",
                common: "Rovn\xedkov\xe1 Guinea"
            },
            cym: {
                official: "Gweriniaeth Gini Gyhydeddol",
                common: "Gini Gyhydeddol"
            },
            deu: {
                official: "Republik \xc4quatorialguinea",
                common: "\xc4quatorialguinea"
            },
            est: {
                official: "Ekvatoriaal-Guinea Vabariik",
                common: "Ekvatoriaal-Guinea"
            },
            fin: {
                official: "P\xe4iv\xe4ntasaajan Guinean tasavalta",
                common: "P\xe4iv\xe4ntasaajan Guinea"
            },
            fra: {
                official: "R\xe9publique de Guin\xe9e \xe9quatoriale",
                common: "Guin\xe9e \xe9quatoriale"
            },
            hrv: {
                official: "Republika Ekvatorska Gvineja",
                common: "Ekvatorijalna Gvineja"
            },
            hun: {
                official: "Egyenl\xedt\u0151i-Guinea-i K\xf6zt\xe1rsas\xe1g",
                common: "Egyenl\xedt\u0151i-Guinea"
            },
            ita: {
                official: "Repubblica della Guinea Equatoriale",
                common: "Guinea Equatoriale"
            },
            jpn: {
                official: "\u8D64\u9053\u30AE\u30CB\u30A2\u5171\u548C\u56FD",
                common: "\u8D64\u9053\u30AE\u30CB\u30A2"
            },
            kor: {
                official: "\uC801\uB3C4 \uAE30\uB2C8 \uACF5\uD654\uAD6D",
                common: "\uC801\uB3C4 \uAE30\uB2C8"
            },
            nld: {
                official: "Republiek Equatoriaal-Guinea",
                common: "Equatoriaal-Guinea"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06AF\u06CC\u0646\u0647 \u0627\u0633\u062A\u0648\u0627\u06CC\u06CC",
                common: "\u06AF\u06CC\u0646\u0647 \u0627\u0633\u062A\u0648\u0627\u06CC\u06CC"
            },
            pol: {
                official: "Republika Gwinei R\xf3wnikowej",
                common: "Gwinea R\xf3wnikowa"
            },
            por: {
                official: "Rep\xfablica da Guin\xe9 Equatorial",
                common: "Guin\xe9 Equatorial"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u042D\u043A\u0432\u0430\u0442\u043E\u0440\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u0413\u0432\u0438\u043D\u0435\u044F",
                common: "\u042D\u043A\u0432\u0430\u0442\u043E\u0440\u0438\u0430\u043B\u044C\u043D\u0430\u044F \u0413\u0432\u0438\u043D\u0435\u044F"
            },
            slk: {
                official: "Republika rovn\xedkovej Guiney",
                common: "Rovn\xedkov\xe1 Guinea"
            },
            spa: {
                official: "Rep\xfablica de Guinea Ecuatorial",
                common: "Guinea Ecuatorial"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u043A\u0432\u0430\u0442\u043E\u0440\u0438\u0458\u0430\u043B\u043D\u0430 \u0413\u0432\u0438\u043D\u0435\u0458\u0430",
                common: "\u0415\u043A\u0432\u0430\u0442\u043E\u0440\u0438\u0458\u0430\u043B\u043D\u0430 \u0413\u0432\u0438\u043D\u0435\u0458\u0430"
            },
            swe: {
                official: "Republiken Ekvatorialguinea",
                common: "Ekvatorialguinea"
            },
            tur: {
                official: "Ekvator Ginesi Cumhuriyeti",
                common: "Ekvator Ginesi"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0633\u062A\u0648\u0627\u0626\u06CC \u06AF\u0646\u06CC",
                common: "\u0627\u0633\u062A\u0648\u0627\u0626\u06CC \u06AF\u0646\u06CC"
            },
            zho: {
                official: "\u8D64\u9053\u51E0\u5185\u4E9A\u5171\u548C\u56FD",
                common: "\u8D64\u9053\u51E0\u5185\u4E9A"
            }
        },
        latlng: [
            2,
            10
        ],
        landlocked: false,
        borders: [
            "CMR",
            "GAB"
        ],
        area: 28051,
        demonyms: {
            eng: {
                f: "Equatorial Guinean",
                m: "Equatorial Guinean"
            },
            fra: {
                f: "\xc9quato-guin\xe9enne",
                m: "\xc9quato-guin\xe9en"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDF6",
        maps: {
            googleMaps: "https://goo.gl/maps/ucWfFd8aW1FbGMva9",
            openStreetMaps: "https://www.openstreetmap.org/relation/192791"
        },
        population: 1402985,
        fifa: "EQG",
        car: {
            signs: [
                "GQ"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gq.png",
            svg: "https://flagcdn.com/gq.svg",
            alt: "The flag of Equatorial Guinea is composed of three equal horizontal bands of green, white and red with the national coat of arms centered in the white band and an isosceles triangle superimposed on the hoist side of the field. The triangle is light blue, has its base on the hoist end and spans about one-fifth the width of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gq.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gq.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                3.75,
                8.78
            ]
        }
    },
    {
        name: {
            common: "Saint Lucia",
            official: "Saint Lucia",
            nativeName: {
                eng: {
                    official: "Saint Lucia",
                    common: "Saint Lucia"
                }
            }
        },
        tld: [
            ".lc"
        ],
        cca2: "LC",
        ccn3: "662",
        cca3: "LCA",
        cioc: "LCA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XCD: {
                name: "Eastern Caribbean dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "758"
            ]
        },
        capital: [
            "Castries"
        ],
        altSpellings: [
            "LC"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0633\u0627\u0646\u062A \u0644\u0648\u0633\u064A\u0627",
                common: "\u0633\u0627\u0646\u062A \u0644\u0648\u0633\u064A\u0627"
            },
            bre: {
                official: "Santez-Lusia",
                common: "Santez-Lusia"
            },
            ces: {
                official: "Svat\xe1 Lucie",
                common: "Svat\xe1 Lucie"
            },
            cym: {
                official: "Saint Lucia",
                common: "Saint Lucia"
            },
            deu: {
                official: "St. Lucia",
                common: "St. Lucia"
            },
            est: {
                official: "Saint Lucia",
                common: "Saint Lucia"
            },
            fin: {
                official: "Saint Lucia",
                common: "Saint Lucia"
            },
            fra: {
                official: "Sainte-Lucie",
                common: "Sainte-Lucie"
            },
            hrv: {
                official: "Sveta Lucija",
                common: "Sveta Lucija"
            },
            hun: {
                official: "Saint Lucia",
                common: "Saint Lucia"
            },
            ita: {
                official: "Santa Lucia",
                common: "Santa Lucia"
            },
            jpn: {
                official: "\u30BB\u30F3\u30C8\u30EB\u30B7\u30A2",
                common: "\u30BB\u30F3\u30C8\u30EB\u30B7\u30A2"
            },
            kor: {
                official: "\uC138\uC778\uD2B8\uB8E8\uC2DC\uC544",
                common: "\uC138\uC778\uD2B8\uB8E8\uC2DC\uC544"
            },
            nld: {
                official: "Saint Lucia",
                common: "Saint Lucia"
            },
            per: {
                official: "\u0633\u0646\u062A \u0644\u0648\u0633\u06CC\u0627",
                common: "\u0633\u0646\u062A \u0644\u0648\u0633\u06CC\u0627"
            },
            pol: {
                official: "Saint Lucia",
                common: "Saint Lucia"
            },
            por: {
                official: "Santa L\xfacia",
                common: "Santa L\xfacia"
            },
            rus: {
                official: "\u0421\u0435\u043D\u0442-\u041B\u044E\u0441\u0438\u044F",
                common: "\u0421\u0435\u043D\u0442-\u041B\u044E\u0441\u0438\u044F"
            },
            slk: {
                official: "Sv\xe4t\xe1 Lucia",
                common: "Sv\xe4t\xe1 Lucia"
            },
            spa: {
                official: "Santa Luc\xeda",
                common: "Santa Luc\xeda"
            },
            srp: {
                official: "\u0421\u0432\u0435\u0442\u0430 \u041B\u0443\u0446\u0438\u0458\u0430",
                common: "\u0421\u0432\u0435\u0442\u0430 \u041B\u0443\u0446\u0438\u0458\u0430"
            },
            swe: {
                official: "Saint Lucia",
                common: "Saint Lucia"
            },
            tur: {
                official: "Saint Lucia",
                common: "Saint Lucia"
            },
            urd: {
                official: "\u0633\u06CC\u0646\u0679 \u0644\u0648\u0633\u06CC\u0627",
                common: "\u0633\u06CC\u0646\u0679 \u0644\u0648\u0633\u06CC\u0627"
            },
            zho: {
                official: "\u5723\u5362\u897F\u4E9A",
                common: "\u5723\u5362\u897F\u4E9A"
            }
        },
        latlng: [
            13.88333333,
            -60.96666666
        ],
        landlocked: false,
        area: 616,
        demonyms: {
            eng: {
                f: "Saint Lucian",
                m: "Saint Lucian"
            },
            fra: {
                f: "Saint-Lucienne",
                m: "Saint-Lucien"
            }
        },
        flag: "\uD83C\uDDF1\uD83C\uDDE8",
        maps: {
            googleMaps: "https://goo.gl/maps/4HhJ2jkPdSL9BPRcA",
            openStreetMaps: "https://www.openstreetmap.org/relation/550728"
        },
        population: 183629,
        gini: {
            2016: 51.2
        },
        fifa: "LCA",
        car: {
            signs: [
                "WL"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/lc.png",
            svg: "https://flagcdn.com/lc.svg",
            alt: "The flag of Saint Lucia has a light blue field, at the center of which are two triangles which share a common base \u2014 a small golden-yellow isosceles triangle superimposed on a large white-edged black isosceles triangle."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/lc.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/lc.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                14,
                -61
            ]
        }
    },
    {
        name: {
            common: "French Polynesia",
            official: "French Polynesia",
            nativeName: {
                fra: {
                    official: "Polyn\xe9sie fran\xe7aise",
                    common: "Polyn\xe9sie fran\xe7aise"
                }
            }
        },
        tld: [
            ".pf"
        ],
        cca2: "PF",
        ccn3: "258",
        cca3: "PYF",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            XPF: {
                name: "CFP franc",
                symbol: "\u20A3"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "89"
            ]
        },
        capital: [
            "Papeet\u0113"
        ],
        altSpellings: [
            "PF",
            "Polyn\xe9sie fran\xe7aise",
            "French Polynesia",
            "P\u014Dr\u012Bnetia Far\u0101ni"
        ],
        region: "Oceania",
        subregion: "Polynesia",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0628\u0648\u0644\u064A\u0646\u0632\u064A\u0627 \u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629",
                common: "\u0628\u0648\u0644\u064A\u0646\u0632\u064A\u0627 \u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629"
            },
            bre: {
                official: "Polinezia C'hall",
                common: "Polinezia C'hall"
            },
            ces: {
                official: "Francouzsk\xe1 Polyn\xe9sie",
                common: "Francouzsk\xe1 Polyn\xe9sie"
            },
            cym: {
                official: "French Polynesia",
                common: "French Polynesia"
            },
            deu: {
                official: "Franz\xf6sisch-Polynesien",
                common: "Franz\xf6sisch-Polynesien"
            },
            est: {
                official: "Prantsuse Pol\xfcneesia",
                common: "Prantsuse Pol\xfcneesia"
            },
            fin: {
                official: "Ranskan Polynesia",
                common: "Ranskan Polynesia"
            },
            fra: {
                official: "Polyn\xe9sie fran\xe7aise",
                common: "Polyn\xe9sie fran\xe7aise"
            },
            hrv: {
                official: "Francuska Polinezija",
                common: "Francuska Polinezija"
            },
            hun: {
                official: "Francia Polin\xe9zia",
                common: "Francia Polin\xe9zia"
            },
            ita: {
                official: "Polinesia Francese",
                common: "Polinesia Francese"
            },
            jpn: {
                official: "\u30D5\u30E9\u30F3\u30B9\u9818\u30DD\u30EA\u30CD\u30B7\u30A2",
                common: "\u30D5\u30E9\u30F3\u30B9\u9818\u30DD\u30EA\u30CD\u30B7\u30A2"
            },
            kor: {
                official: "\uD504\uB791\uC2A4\uB839 \uD3F4\uB9AC\uB124\uC2DC\uC544",
                common: "\uD504\uB791\uC2A4\uB839 \uD3F4\uB9AC\uB124\uC2DC\uC544"
            },
            nld: {
                official: "Frans-Polynesi\xeb",
                common: "Frans-Polynesi\xeb"
            },
            per: {
                official: "\u067E\u064F\u0644\u06CC\u200C\u0646\u0650\u0632\u06CC \u0641\u0631\u0627\u0646\u0633\u0647",
                common: "\u067E\u064F\u0644\u06CC\u200C\u0646\u0650\u0632\u06CC \u0641\u0631\u0627\u0646\u0633\u0647"
            },
            pol: {
                official: "Polinezja Francuska",
                common: "Polinezja Francuska"
            },
            por: {
                official: "Polin\xe9sia Francesa",
                common: "Polin\xe9sia Francesa"
            },
            rus: {
                official: "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F \u041F\u043E\u043B\u0438\u043D\u0435\u0437\u0438\u044F",
                common: "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F \u041F\u043E\u043B\u0438\u043D\u0435\u0437\u0438\u044F"
            },
            slk: {
                official: "Franc\xfazska Polyn\xe9zia",
                common: "Franc\xfazska Polyn\xe9zia"
            },
            spa: {
                official: "Polinesia franc\xe9s",
                common: "Polinesia Francesa"
            },
            srp: {
                official: "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430 \u041F\u043E\u043B\u0438\u043D\u0435\u0437\u0438\u0458\u0430",
                common: "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430 \u041F\u043E\u043B\u0438\u043D\u0435\u0437\u0438\u0458\u0430"
            },
            swe: {
                official: "Franska Polynesien",
                common: "Franska Polynesien"
            },
            tur: {
                official: "Frans\u0131z Polinezyas\u0131",
                common: "Frans\u0131z Polinezyas\u0131"
            },
            urd: {
                official: "\u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC \u067E\u0648\u0644\u06CC\u0646\u06CC\u0634\u06CC\u0627",
                common: "\u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC \u067E\u0648\u0644\u06CC\u0646\u06CC\u0634\u06CC\u0627"
            },
            zho: {
                official: "\u6CD5\u5C5E\u6CE2\u5229\u5C3C\u897F\u4E9A",
                common: "\u6CD5\u5C5E\u6CE2\u5229\u5C3C\u897F\u4E9A"
            }
        },
        latlng: [
            17.6797,
            149.4068
        ],
        landlocked: false,
        area: 4167,
        demonyms: {
            eng: {
                f: "French Polynesian",
                m: "French Polynesian"
            },
            fra: {
                f: "Polyn\xe9sienne",
                m: "Polyn\xe9sien"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDEB",
        maps: {
            googleMaps: "https://goo.gl/maps/xgg6BQTRyeQg4e1m6",
            openStreetMaps: "https://www.openstreetmap.org/relation/3412620"
        },
        population: 280904,
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC-10:00",
            "UTC-09:30",
            "UTC-09:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/pf.png",
            svg: "https://flagcdn.com/pf.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/pf.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/pf.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -17.53,
                -149.56
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^((97|98)7\\d{2})$"
        }
    },
    {
        name: {
            common: "Belarus",
            official: "Republic of Belarus",
            nativeName: {
                bel: {
                    official: "\u0420\u044D\u0441\u043F\u0443\u0431\u043B\u0456\u043A\u0430 \u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C",
                    common: "\u0411\u0435\u043B\u0430\u0440\u0443\u0301\u0441\u044C"
                },
                rus: {
                    official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C",
                    common: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C"
                }
            }
        },
        tld: [
            ".by"
        ],
        cca2: "BY",
        ccn3: "112",
        cca3: "BLR",
        cioc: "BLR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BYN: {
                name: "Belarusian ruble",
                symbol: "Br"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "75"
            ]
        },
        capital: [
            "Minsk"
        ],
        altSpellings: [
            "BY",
            "Bielaru\u015B",
            "Republic of Belarus",
            "\u0411\u0435\u043B\u043E\u0440\u0443\u0441\u0441\u0438\u044F",
            "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043B\u043E\u0440\u0443\u0441\u0441\u0438\u044F"
        ],
        region: "Europe",
        subregion: "Eastern Europe",
        languages: {
            bel: "Belarusian",
            rus: "Russian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u064A\u0644\u0627\u0631\u0648\u0633\u064A\u0627",
                common: "\u0628\u064A\u0644\u0627\u0631\u0648\u0633\u064A\u0627"
            },
            bre: {
                official: "Republik Belarus",
                common: "Belarus"
            },
            ces: {
                official: "B\u011Blorusk\xe1 republika",
                common: "B\u011Blorusko"
            },
            cym: {
                official: "Gweriniaeth Belarws",
                common: "Belarws"
            },
            deu: {
                official: "Republik Belarus",
                common: "Wei\xdfrussland"
            },
            est: {
                official: "Valgevene Vabariik",
                common: "Valgevene"
            },
            fin: {
                official: "Valko-Ven\xe4j\xe4n tasavalta",
                common: "Valko-Ven\xe4j\xe4"
            },
            fra: {
                official: "R\xe9publique de Bi\xe9lorussie",
                common: "Bi\xe9lorussie"
            },
            hrv: {
                official: "Republika Bjelorusija",
                common: "Bjelorusija"
            },
            hun: {
                official: "Feh\xe9rorosz K\xf6zt\xe1rsas\xe1g",
                common: "Feh\xe9roroszorsz\xe1g"
            },
            ita: {
                official: "Repubblica di Belarus",
                common: "Bielorussia"
            },
            jpn: {
                official: "\u30D9\u30E9\u30EB\u30FC\u30B7\u5171\u548C\u56FD",
                common: "\u30D9\u30E9\u30EB\u30FC\u30B7"
            },
            kor: {
                official: "\uBCA8\uB77C\uB8E8\uC2A4 \uACF5\uD654\uAD6D",
                common: "\uBCA8\uB77C\uB8E8\uC2A4"
            },
            nld: {
                official: "Republiek Belarus",
                common: "Wit-Rusland"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0644\u0627\u0631\u0648\u0633",
                common: "\u0628\u0644\u0627\u0631\u0648\u0633"
            },
            pol: {
                official: "Republika Bia\u0142orusi",
                common: "Bia\u0142oru\u015B"
            },
            por: {
                official: "Rep\xfablica da Bielorr\xfassia",
                common: "Bielor\xfassia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C",
                common: "\u0411\u0435\u043B\u0430\u0440\u0443\u0441\u044C"
            },
            slk: {
                official: "Bielorusk\xe1 republika",
                common: "Bielorusko"
            },
            spa: {
                official: "Rep\xfablica de Belar\xfas",
                common: "Bielorrusia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0435\u043B\u043E\u0440\u0443\u0441\u0438\u0458\u0430",
                common: "\u0411\u0435\u043B\u043E\u0440\u0443\u0441\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Vitryssland",
                common: "Belarus"
            },
            tur: {
                official: "Belarus Cumhuriyeti",
                common: "Belarus"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u06CC\u0644\u0627\u0631\u0648\u0633",
                common: "\u0628\u06CC\u0644\u0627\u0631\u0648\u0633"
            },
            zho: {
                official: "\u767D\u4FC4\u7F57\u65AF\u5171\u548C\u56FD",
                common: "\u767D\u4FC4\u7F57\u65AF"
            }
        },
        latlng: [
            53,
            28
        ],
        landlocked: true,
        borders: [
            "LVA",
            "LTU",
            "POL",
            "RUS",
            "UKR"
        ],
        area: 207600,
        demonyms: {
            eng: {
                f: "Belarusian",
                m: "Belarusian"
            },
            fra: {
                f: "Bi\xe9lorusse",
                m: "Bi\xe9lorusse"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDFE",
        maps: {
            googleMaps: "https://goo.gl/maps/PJUDU3EBPSszCQcu6",
            openStreetMaps: "https://www.openstreetmap.org/relation/59065"
        },
        population: 9398861,
        gini: {
            2019: 25.3
        },
        fifa: "BLR",
        car: {
            signs: [
                "BY"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/by.png",
            svg: "https://flagcdn.com/by.svg",
            alt: "The flag of Belarus features a vertical band, with a white and red ornamental pattern, spanning about one-fifth the width of the field on the hoist side. Adjoining the vertical band are two horizontal bands of red and green, with the red band twice the height of the green band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/by.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/by.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                53.9,
                27.57
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Latvia",
            official: "Republic of Latvia",
            nativeName: {
                lav: {
                    official: "Latvijas Republikas",
                    common: "Latvija"
                }
            }
        },
        tld: [
            ".lv"
        ],
        cca2: "LV",
        ccn3: "428",
        cca3: "LVA",
        cioc: "LAT",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "71"
            ]
        },
        capital: [
            "Riga"
        ],
        altSpellings: [
            "LV",
            "Republic of Latvia",
            "Latvijas Republika"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            lav: "Latvian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0644\u0627\u062A\u0641\u064A\u0627",
                common: "\u0644\u0627\u062A\u0641\u064A\u0627"
            },
            bre: {
                official: "Republik Latvia",
                common: "Latvia"
            },
            ces: {
                official: "Loty\u0161sk\xe1 republika",
                common: "Loty\u0161sko"
            },
            cym: {
                official: "Republic of Latvia",
                common: "Latvia"
            },
            deu: {
                official: "Republik Lettland",
                common: "Lettland"
            },
            est: {
                official: "L\xe4ti Vabariik",
                common: "L\xe4ti"
            },
            fin: {
                official: "Latvian tasavalta",
                common: "Latvia"
            },
            fra: {
                official: "R\xe9publique de Lettonie",
                common: "Lettonie"
            },
            hrv: {
                official: "Republika Latvija",
                common: "Latvija"
            },
            hun: {
                official: "Lett K\xf6zt\xe1rsas\xe1g",
                common: "Lettorsz\xe1g"
            },
            ita: {
                official: "Repubblica di Lettonia",
                common: "Lettonia"
            },
            jpn: {
                official: "\u30E9\u30C8\u30D3\u30A2\u5171\u548C\u56FD",
                common: "\u30E9\u30C8\u30D3\u30A2"
            },
            kor: {
                official: "\uB77C\uD2B8\uBE44\uC544 \uACF5\uD654\uAD6D",
                common: "\uB77C\uD2B8\uBE44\uC544"
            },
            nld: {
                official: "Republiek Letland",
                common: "Letland"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0644\u062A\u0648\u0646\u06CC",
                common: "\u0644\u062A\u0648\u0646\u06CC"
            },
            pol: {
                official: "Republika \u0141otewska",
                common: "\u0141otwa"
            },
            por: {
                official: "Rep\xfablica da Let\xf3nia",
                common: "Let\xf3nia"
            },
            rus: {
                official: "\u041B\u0430\u0442\u0432\u0438\u0439\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041B\u0430\u0442\u0432\u0438\u044F"
            },
            slk: {
                official: "Loty\u0161sk\xe1 republika",
                common: "Loty\u0161sko"
            },
            spa: {
                official: "Rep\xfablica de Letonia",
                common: "Letonia"
            },
            srp: {
                official: "\u041B\u0435\u0442\u043E\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041B\u0435\u0442\u043E\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Lettland",
                common: "Lettland"
            },
            tur: {
                official: "Letonya Cumhuriyeti",
                common: "Letonya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0644\u0679\u0648\u06CC\u0627",
                common: "\u0644\u0679\u0648\u06CC\u0627"
            },
            zho: {
                official: "\u62C9\u8131\u7EF4\u4E9A\u5171\u548C\u56FD",
                common: "\u62C9\u8131\u7EF4\u4E9A"
            }
        },
        latlng: [
            57,
            25
        ],
        landlocked: false,
        borders: [
            "BLR",
            "EST",
            "LTU",
            "RUS"
        ],
        area: 64559,
        demonyms: {
            eng: {
                f: "Latvian",
                m: "Latvian"
            },
            fra: {
                f: "Lettone",
                m: "Letton"
            }
        },
        flag: "\uD83C\uDDF1\uD83C\uDDFB",
        maps: {
            googleMaps: "https://goo.gl/maps/iQpUkH7ghq31ZtXe9",
            openStreetMaps: "https://www.openstreetmap.org/relation/72594"
        },
        population: 1901548,
        gini: {
            2018: 35.1
        },
        fifa: "LVA",
        car: {
            signs: [
                "LV"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/lv.png",
            svg: "https://flagcdn.com/lv.svg",
            alt: "The flag of Latvia has a carmine-red field with a thin white horizontal band across the middle of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/lv.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/lv.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                56.95,
                24.1
            ]
        },
        postalCode: {
            format: "LV-####",
            regex: "^(?:LV)*(\\d{4})$"
        }
    },
    {
        name: {
            common: "Palau",
            official: "Republic of Palau",
            nativeName: {
                eng: {
                    official: "Republic of Palau",
                    common: "Palau"
                },
                pau: {
                    official: "Beluu er a Belau",
                    common: "Belau"
                }
            }
        },
        tld: [
            ".pw"
        ],
        cca2: "PW",
        ccn3: "585",
        cca3: "PLW",
        cioc: "PLW",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "80"
            ]
        },
        capital: [
            "Ngerulmud"
        ],
        altSpellings: [
            "PW",
            "Republic of Palau",
            "Beluu er a Belau"
        ],
        region: "Oceania",
        subregion: "Micronesia",
        languages: {
            eng: "English",
            pau: "Palauan"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0627\u0644\u0627\u0648",
                common: "\u0628\u0627\u0644\u0627\u0648"
            },
            bre: {
                official: "Republik Palau",
                common: "Palau"
            },
            ces: {
                official: "Republika Palau",
                common: "Palau"
            },
            cym: {
                official: "Republic of Palau",
                common: "Palau"
            },
            deu: {
                official: "Republik Palau",
                common: "Palau"
            },
            est: {
                official: "Belau Vabariik",
                common: "Belau"
            },
            fin: {
                official: "Palaun tasavalta",
                common: "Palau"
            },
            fra: {
                official: "R\xe9publique des Palaos (Palau)",
                common: "Palaos (Palau)"
            },
            hrv: {
                official: "Republika Palau",
                common: "Palau"
            },
            hun: {
                official: "Palaui K\xf6zt\xe1rsas\xe1g",
                common: "Palau"
            },
            ita: {
                official: "Repubblica di Palau",
                common: "Palau"
            },
            jpn: {
                official: "\u30D1\u30E9\u30AA\u5171\u548C\u56FD",
                common: "\u30D1\u30E9\u30AA"
            },
            kor: {
                official: "\uD314\uB77C\uC6B0 \uACF5\uD654\uAD6D",
                common: "\uD314\uB77C\uC6B0"
            },
            nld: {
                official: "Republiek van Palau",
                common: "Palau"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u067E\u0627\u0644\u0627\u0626\u0648",
                common: "\u067E\u0627\u0644\u0627\u0626\u0648"
            },
            pol: {
                official: "Republika Palau",
                common: "Palau"
            },
            por: {
                official: "Rep\xfablica de Palau",
                common: "Palau"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043B\u0430\u0443",
                common: "\u041F\u0430\u043B\u0430\u0443"
            },
            slk: {
                official: "Palausk\xe1 republika",
                common: "Palau"
            },
            spa: {
                official: "Rep\xfablica de Palau",
                common: "Palau"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043B\u0430\u0443",
                common: "\u041F\u0430\u043B\u0430\u0443"
            },
            swe: {
                official: "Republiken Palau",
                common: "Palau"
            },
            tur: {
                official: "Palau Cumhuriyeti",
                common: "Palau"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0644\u0627\u0624",
                common: "\u067E\u0644\u0627\u0624"
            },
            zho: {
                official: "\u5E15\u52B3\u5171\u548C\u56FD",
                common: "\u5E15\u52B3"
            }
        },
        latlng: [
            7.5,
            134.5
        ],
        landlocked: false,
        area: 459,
        demonyms: {
            eng: {
                f: "Palauan",
                m: "Palauan"
            },
            fra: {
                f: "Paluane",
                m: "Paluan"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDFC",
        maps: {
            googleMaps: "https://goo.gl/maps/MVasQBbUkQP7qQDR9",
            openStreetMaps: "https://www.openstreetmap.org/relation/571805"
        },
        population: 18092,
        car: {
            signs: [
                "PAL"
            ],
            side: "right"
        },
        timezones: [
            "UTC+09:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/pw.png",
            svg: "https://flagcdn.com/pw.svg",
            alt: "The flag of Palau has a light blue field with a large golden-yellow circle that is offset slightly towards the hoist side of center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/pw.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/pw.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                7.5,
                134.62
            ]
        },
        postalCode: {
            format: "96940",
            regex: "^(96940)$"
        }
    },
    {
        name: {
            common: "Guadeloupe",
            official: "Guadeloupe",
            nativeName: {
                fra: {
                    official: "Guadeloupe",
                    common: "Guadeloupe"
                }
            }
        },
        tld: [
            ".gp"
        ],
        cca2: "GP",
        ccn3: "312",
        cca3: "GLP",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "90"
            ]
        },
        capital: [
            "Basse-Terre"
        ],
        altSpellings: [
            "GP",
            "Gwadloup"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u063A\u0648\u0627\u062F\u0644\u0648\u0628",
                common: "\u063A\u0648\u0627\u062F\u0644\u0648\u0628"
            },
            bre: {
                official: "Gwadeloup",
                common: "Gwadeloup"
            },
            ces: {
                official: "Guadeloupe",
                common: "Guadeloupe"
            },
            cym: {
                official: "Guadeloupe",
                common: "Guadeloupe"
            },
            deu: {
                official: "Guadeloupe",
                common: "Guadeloupe"
            },
            est: {
                official: "Guadeloupe\u2019i ja s\xf5ltkondade departemang",
                common: "Guadeloupe"
            },
            fin: {
                official: "Guadeloupen departmentti",
                common: "Guadeloupe"
            },
            fra: {
                official: "Guadeloupe",
                common: "Guadeloupe"
            },
            hrv: {
                official: "Gvadalupa",
                common: "Gvadalupa"
            },
            hun: {
                official: "Guadeloupe",
                common: "Guadeloupe"
            },
            ita: {
                official: "Guadeloupe",
                common: "Guadeloupa"
            },
            jpn: {
                official: "\u30B0\u30A2\u30C9\u30EB\u30FC\u30D7\u5CF6",
                common: "\u30B0\u30A2\u30C9\u30EB\u30FC\u30D7"
            },
            kor: {
                official: "\uACFC\uB4E4\uB8E8\uD504",
                common: "\uACFC\uB4E4\uB8E8\uD504"
            },
            nld: {
                official: "Guadeloupe",
                common: "Guadeloupe"
            },
            per: {
                official: "\u06AF\u0648\u0627\u062F\u0644\u0648\u067E",
                common: "\u06AF\u0648\u0627\u062F\u0644\u0648\u067E"
            },
            pol: {
                official: "Gwadelupa",
                common: "Gwadelupa"
            },
            por: {
                official: "Guadalupe",
                common: "Guadalupe"
            },
            rus: {
                official: "\u0413\u0432\u0430\u0434\u0435\u043B\u0443\u043F\u0430",
                common: "\u0413\u0432\u0430\u0434\u0435\u043B\u0443\u043F\u0430"
            },
            slk: {
                official: "Guadeloupe",
                common: "Guadeloupe"
            },
            spa: {
                official: "Guadalupe",
                common: "Guadalupe"
            },
            srp: {
                official: "\u0413\u0432\u0430\u0434\u0435\u043B\u0443\u043F",
                common: "\u0413\u0432\u0430\u0434\u0435\u043B\u0443\u043F"
            },
            swe: {
                official: "Guadeloupe",
                common: "Guadeloupe"
            },
            tur: {
                official: "Guadeloupe",
                common: "Guadeloupe"
            },
            urd: {
                official: "\u06AF\u0648\u0627\u0688\u06CC\u0644\u0648\u067E",
                common: "\u06AF\u0648\u0627\u0688\u06CC\u0644\u0648\u067E"
            },
            zho: {
                official: "\u74DC\u5FB7\u7F57\u666E\u5C9B",
                common: "\u74DC\u5FB7\u7F57\u666E\u5C9B"
            }
        },
        latlng: [
            16.25,
            -61.583333
        ],
        landlocked: false,
        area: 1628,
        demonyms: {
            eng: {
                f: "Guadeloupian",
                m: "Guadeloupian"
            },
            fra: {
                f: "Guadeloup\xe9enne",
                m: "Guadeloup\xe9en"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDF5",
        maps: {
            googleMaps: "https://goo.gl/maps/Dy9R2EufJtoWm8UN9",
            openStreetMaps: "https://www.openstreetmap.org/relation/7109289"
        },
        population: 400132,
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gp.png",
            svg: "https://flagcdn.com/gp.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gp.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gp.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                16.03,
                -61.73
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^((97|98)\\d{3})$"
        }
    },
    {
        name: {
            common: "Philippines",
            official: "Republic of the Philippines",
            nativeName: {
                eng: {
                    official: "Republic of the Philippines",
                    common: "Philippines"
                },
                fil: {
                    official: "Republic of the Philippines",
                    common: "Pilipinas"
                }
            }
        },
        tld: [
            ".ph"
        ],
        cca2: "PH",
        ccn3: "608",
        cca3: "PHL",
        cioc: "PHI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            PHP: {
                name: "Philippine peso",
                symbol: "\u20B1"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "3"
            ]
        },
        capital: [
            "Manila"
        ],
        altSpellings: [
            "PH",
            "Republic of the Philippines",
            "Rep\xfablika ng Pilipinas"
        ],
        region: "Asia",
        subregion: "South-Eastern Asia",
        languages: {
            eng: "English",
            fil: "Filipino"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0641\u0644\u0628\u064A\u0646",
                common: "\u0627\u0644\u0641\u0644\u0628\u064A\u0646"
            },
            bre: {
                official: "Republik Filipinez",
                common: "Filipinez"
            },
            ces: {
                official: "Filip\xednsk\xe1 republika",
                common: "Filip\xedny"
            },
            cym: {
                official: "Republic of the Philippines",
                common: "Philippines"
            },
            deu: {
                official: "Republik der Philippinen",
                common: "Philippinen"
            },
            est: {
                official: "Filipiini Vabariik",
                common: "Filipiinid"
            },
            fin: {
                official: "Filippiinien tasavalta",
                common: "Filippiinit"
            },
            fra: {
                official: "R\xe9publique des Philippines",
                common: "Philippines"
            },
            hrv: {
                official: "Republika Filipini",
                common: "Filipini"
            },
            hun: {
                official: "F\xfcl\xf6p-szigeteki K\xf6zt\xe1rsas\xe1g",
                common: "F\xfcl\xf6p-szigetek"
            },
            ita: {
                official: "Repubblica delle Filippine",
                common: "Filippine"
            },
            jpn: {
                official: "\u30D5\u30A3\u30EA\u30D4\u30F3\u5171\u548C\u56FD",
                common: "\u30D5\u30A3\u30EA\u30D4\u30F3"
            },
            kor: {
                official: "\uD544\uB9AC\uD540 \uACF5\uD654\uAD6D",
                common: "\uD544\uB9AC\uD540"
            },
            nld: {
                official: "Republiek der Filipijnen",
                common: "Filipijnen"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u06CC\u0644\u06CC\u067E\u06CC\u0646",
                common: "\u0641\u06CC\u0644\u06CC\u067E\u06CC\u0646"
            },
            pol: {
                official: "Republika Filipin",
                common: "Filipiny"
            },
            por: {
                official: "Rep\xfablica das Filipinas",
                common: "Filipinas"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0424\u0438\u043B\u0438\u043F\u043F\u0438\u043D\u044B",
                common: "\u0424\u0438\u043B\u0438\u043F\u043F\u0438\u043D\u044B"
            },
            slk: {
                official: "Filip\xednska republika",
                common: "Filip\xedny"
            },
            spa: {
                official: "Rep\xfablica de las Filipinas",
                common: "Filipinas"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0424\u0438\u043B\u0438\u043F\u0438\u043D\u0438",
                common: "\u0424\u0438\u043B\u0438\u043F\u0438\u043D\u0438"
            },
            swe: {
                official: "Republiken Filippinerna",
                common: "Filippinerna"
            },
            tur: {
                official: "Filipinler Cumhuriyeti",
                common: "Filipinler"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0641\u0644\u067E\u0627\u0626\u0646",
                common: "\u0641\u0644\u067E\u0627\u0626\u0646"
            },
            zho: {
                official: "\u83F2\u5F8B\u5BBE\u5171\u548C\u56FD",
                common: "\u83F2\u5F8B\u5BBE"
            }
        },
        latlng: [
            13,
            122
        ],
        landlocked: false,
        area: 342353,
        demonyms: {
            eng: {
                f: "Filipino",
                m: "Filipino"
            },
            fra: {
                f: "Philippine",
                m: "Philippin"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDED",
        maps: {
            googleMaps: "https://goo.gl/maps/k8T2fb5VMUfsWFX6A",
            openStreetMaps: "https://www.openstreetmap.org/relation/443174"
        },
        population: 109581085,
        gini: {
            2018: 42.3
        },
        fifa: "PHI",
        car: {
            signs: [
                "RP"
            ],
            side: "right"
        },
        timezones: [
            "UTC+08:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ph.png",
            svg: "https://flagcdn.com/ph.svg",
            alt: "The flag of Philippines is composed of two equal horizontal bands of blue and red, with a white equilateral triangle superimposed on the hoist side of the field. This triangle has its base on the hoist end, spans about two-fifth the width of the field and bears a central golden-yellow sun with eight rays and a five-pointed golden-yellow star at each vertex."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ph.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ph.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                14.6,
                120.97
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Gibraltar",
            official: "Gibraltar",
            nativeName: {
                eng: {
                    official: "Gibraltar",
                    common: "Gibraltar"
                }
            }
        },
        tld: [
            ".gi"
        ],
        cca2: "GI",
        ccn3: "292",
        cca3: "GIB",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            GIP: {
                name: "Gibraltar pound",
                symbol: "\xa3"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "50"
            ]
        },
        capital: [
            "Gibraltar"
        ],
        altSpellings: [
            "GI"
        ],
        region: "Europe",
        subregion: "Southern Europe",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0628\u0644 \u0637\u0627\u0631\u0642",
                common: "\u062C\u0628\u0644 \u0637\u0627\u0631\u0642"
            },
            bre: {
                official: "Jibraltar",
                common: "Jibraltar"
            },
            ces: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            cym: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            deu: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            est: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            fin: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            fra: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            hrv: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            hun: {
                official: "Gibralt\xe1r",
                common: "Gibralt\xe1r"
            },
            ita: {
                official: "Gibilterra",
                common: "Gibilterra"
            },
            jpn: {
                official: "\u30B8\u30D6\u30E9\u30EB\u30BF\u30EB",
                common: "\u30B8\u30D6\u30E9\u30EB\u30BF\u30EB"
            },
            kor: {
                official: "\uC9C0\uBE0C\uB864\uD130",
                common: "\uC9C0\uBE0C\uB864\uD130"
            },
            nld: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            per: {
                official: "\u062C\u0628\u0644 \u0637\u0627\u0631\u0642",
                common: "\u062C\u0628\u0644 \u0637\u0627\u0631\u0642"
            },
            pol: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            por: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            rus: {
                official: "\u0413\u0438\u0431\u0440\u0430\u043B\u0442\u0430\u0440",
                common: "\u0413\u0438\u0431\u0440\u0430\u043B\u0442\u0430\u0440"
            },
            slk: {
                official: "Gibralt\xe1r",
                common: "Gibralt\xe1r"
            },
            spa: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            srp: {
                official: "\u0413\u0438\u0431\u0440\u0430\u043B\u0442\u0430\u0440",
                common: "\u0413\u0438\u0431\u0440\u0430\u043B\u0442\u0430\u0440"
            },
            swe: {
                official: "Gibraltar",
                common: "Gibraltar"
            },
            tur: {
                official: "Cebelitar\u0131k",
                common: "Cebelitar\u0131k"
            },
            urd: {
                official: "\u062C\u0628\u0644 \u0627\u0644\u0637\u0627\u0631\u0642",
                common: "\u062C\u0628\u0644 \u0627\u0644\u0637\u0627\u0631\u0642"
            },
            zho: {
                official: "\u76F4\u5E03\u7F57\u9640",
                common: "\u76F4\u5E03\u7F57\u9640"
            }
        },
        latlng: [
            36.13333333,
            -5.35
        ],
        landlocked: false,
        borders: [
            "ESP"
        ],
        area: 6,
        demonyms: {
            eng: {
                f: "Gibraltar",
                m: "Gibraltar"
            },
            fra: {
                f: "Gibraltarienne",
                m: "Gibraltarien"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDEE",
        maps: {
            googleMaps: "https://goo.gl/maps/CEoHAs1t6byCBhHFA",
            openStreetMaps: "https://www.openstreetmap.org/relation/1278736"
        },
        population: 33691,
        fifa: "GIB",
        car: {
            signs: [
                "GBZ"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gi.png",
            svg: "https://flagcdn.com/gi.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gi.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gi.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                36.13,
                -5.35
            ]
        }
    },
    {
        name: {
            common: "Denmark",
            official: "Kingdom of Denmark",
            nativeName: {
                dan: {
                    official: "Kongeriget Danmark",
                    common: "Danmark"
                }
            }
        },
        tld: [
            ".dk"
        ],
        cca2: "DK",
        ccn3: "208",
        cca3: "DNK",
        cioc: "DEN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            DKK: {
                name: "Danish krone",
                symbol: "kr"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "5"
            ]
        },
        capital: [
            "Copenhagen"
        ],
        altSpellings: [
            "DK",
            "Danmark",
            "Kingdom of Denmark",
            "Kongeriget Danmark"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            dan: "Danish"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u062F\u0646\u0645\u0627\u0631\u0643",
                common: "\u0627\u0644\u062F\u0646\u0645\u0627\u0631\u0643"
            },
            bre: {
                official: "Rouantelezh Danmark",
                common: "Danmark"
            },
            ces: {
                official: "D\xe1nsk\xe9 kr\xe1lovstv\xed",
                common: "D\xe1nsko"
            },
            cym: {
                official: "Teyrnas Denmarc",
                common: "Denmarc"
            },
            deu: {
                official: "K\xf6nigreich D\xe4nemark",
                common: "D\xe4nemark"
            },
            est: {
                official: "Taani Kuningriik",
                common: "Taani"
            },
            fin: {
                official: "Tanskan kuningaskunta",
                common: "Tanska"
            },
            fra: {
                official: "Royaume du Danemark",
                common: "Danemark"
            },
            hrv: {
                official: "Kraljevina Danska",
                common: "Danska"
            },
            hun: {
                official: "D\xe1n Kir\xe1lys\xe1g",
                common: "D\xe1nia"
            },
            ita: {
                official: "Regno di Danimarca",
                common: "Danimarca"
            },
            jpn: {
                official: "\u30C7\u30F3\u30DE\u30FC\u30AF\u738B\u56FD",
                common: "\u30C7\u30F3\u30DE\u30FC\u30AF"
            },
            kor: {
                official: "\uB374\uB9C8\uD06C \uC655\uAD6D",
                common: "\uB374\uB9C8\uD06C"
            },
            nld: {
                official: "Koninkrijk Denemarken",
                common: "Denemarken"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u062F\u0627\u0646\u0645\u0627\u0631\u06A9",
                common: "\u062F\u0627\u0646\u0645\u0627\u0631\u06A9"
            },
            pol: {
                official: "Kr\xf3lestwo Danii",
                common: "Dania"
            },
            por: {
                official: "Reino da Dinamarca",
                common: "Dinamarca"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0414\u0430\u043D\u0438\u044F",
                common: "\u0414\u0430\u043D\u0438\u044F"
            },
            slk: {
                official: "D\xe1nske kr\xe1\u013Eovstvo",
                common: "D\xe1nsko"
            },
            spa: {
                official: "Reino de Dinamarca",
                common: "Dinamarca"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0414\u0430\u043D\u0441\u043A\u0430",
                common: "\u0414\u0430\u043D\u0441\u043A\u0430"
            },
            swe: {
                official: "Konungariket Danmark",
                common: "Danmark"
            },
            tur: {
                official: "Danimarka Krall\u0131\u011F\u0131",
                common: "Danimarka"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0688\u0646\u0645\u0627\u0631\u06A9",
                common: "\u0688\u0646\u0645\u0627\u0631\u06A9"
            },
            zho: {
                official: "\u4E39\u9EA6\u738B\u56FD",
                common: "\u4E39\u9EA6"
            }
        },
        latlng: [
            56,
            10
        ],
        landlocked: false,
        borders: [
            "DEU"
        ],
        area: 43094,
        demonyms: {
            eng: {
                f: "Danish",
                m: "Danish"
            },
            fra: {
                f: "Danoise",
                m: "Danois"
            }
        },
        flag: "\uD83C\uDDE9\uD83C\uDDF0",
        maps: {
            googleMaps: "https://goo.gl/maps/UddGPN7hAyrtpFiT6",
            openStreetMaps: "https://www.openstreetmap.org/relation/50046"
        },
        population: 5831404,
        gini: {
            2018: 28.2
        },
        fifa: "DEN",
        car: {
            signs: [
                "DK"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00",
            "UTC-03:00",
            "UTC-01:00",
            "UTC",
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/dk.png",
            svg: "https://flagcdn.com/dk.svg",
            alt: "The flag of Denmark has a red field with a large white cross that extend to the edges of the field. The vertical part of this cross is offset towards the hoist side."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/dk.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/dk.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                55.67,
                12.58
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Cameroon",
            official: "Republic of Cameroon",
            nativeName: {
                eng: {
                    official: "Republic of Cameroon",
                    common: "Cameroon"
                },
                fra: {
                    official: "R\xe9publique du Cameroun",
                    common: "Cameroun"
                }
            }
        },
        tld: [
            ".cm"
        ],
        cca2: "CM",
        ccn3: "120",
        cca3: "CMR",
        cioc: "CMR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XAF: {
                name: "Central African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "37"
            ]
        },
        capital: [
            "Yaound\xe9"
        ],
        altSpellings: [
            "CM",
            "Republic of Cameroon",
            "R\xe9publique du Cameroun"
        ],
        region: "Africa",
        subregion: "Middle Africa",
        languages: {
            eng: "English",
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0643\u0627\u0645\u064A\u0631\u0648\u0646",
                common: "\u0627\u0644\u0643\u0627\u0645\u064A\u0631\u0648\u0646"
            },
            bre: {
                official: "Republik Kameroun",
                common: "Kameroun"
            },
            ces: {
                official: "Kamerunsk\xe1 republika",
                common: "Kamerun"
            },
            cym: {
                official: "Gweriniaeth Camer\u0175n",
                common: "Camer\u0175n"
            },
            deu: {
                official: "Republik Kamerun",
                common: "Kamerun"
            },
            est: {
                official: "Kameruni Vabariik",
                common: "Kamerun"
            },
            fin: {
                official: "Kamerunin tasavalta",
                common: "Kamerun"
            },
            fra: {
                official: "R\xe9publique du Cameroun",
                common: "Cameroun"
            },
            hrv: {
                official: "Republika Kamerun",
                common: "Kamerun"
            },
            hun: {
                official: "Kameruni K\xf6zt\xe1rsas\xe1g",
                common: "Kamerun"
            },
            ita: {
                official: "Repubblica del Camerun",
                common: "Camerun"
            },
            jpn: {
                official: "\u30AB\u30E1\u30EB\u30FC\u30F3\u5171\u548C\u56FD",
                common: "\u30AB\u30E1\u30EB\u30FC\u30F3"
            },
            kor: {
                official: "\uCE74\uBA54\uB8EC \uACF5\uD654\uAD6D",
                common: "\uCE74\uBA54\uB8EC"
            },
            nld: {
                official: "Republiek Kameroen",
                common: "Kameroen"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0627\u0645\u0650\u0631\u0648\u0646",
                common: "\u06A9\u0627\u0645\u0650\u0631\u0648\u0646"
            },
            pol: {
                official: "Republika Kamerunu",
                common: "Kamerun"
            },
            por: {
                official: "Rep\xfablica dos Camar\xf5es",
                common: "Camar\xf5es"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u043C\u0435\u0440\u0443\u043D",
                common: "\u041A\u0430\u043C\u0435\u0440\u0443\u043D"
            },
            slk: {
                official: "Kamerunsk\xe1 republika",
                common: "Kamerun"
            },
            spa: {
                official: "Rep\xfablica de Camer\xfan",
                common: "Camer\xfan"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u043C\u0435\u0440\u0443\u043D",
                common: "\u041A\u0430\u043C\u0435\u0440\u0443\u043D"
            },
            swe: {
                official: "Republiken Kamerun",
                common: "Kamerun"
            },
            tur: {
                official: "Kamerun Cumhuriyeti",
                common: "Kamerun"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u06CC\u0645\u0631\u0648\u0646",
                common: "\u06A9\u06CC\u0645\u0631\u0648\u0646"
            },
            zho: {
                official: "\u5580\u9EA6\u9686\u5171\u548C\u56FD",
                common: "\u5580\u9EA6\u9686"
            }
        },
        latlng: [
            6,
            12
        ],
        landlocked: false,
        borders: [
            "CAF",
            "TCD",
            "COG",
            "GNQ",
            "GAB",
            "NGA"
        ],
        area: 475442,
        demonyms: {
            eng: {
                f: "Cameroonian",
                m: "Cameroonian"
            },
            fra: {
                f: "Camerounaise",
                m: "Camerounais"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/JqiipHgFboG3rBJh9",
            openStreetMaps: "https://www.openstreetmap.org/relation/192830"
        },
        population: 26545864,
        gini: {
            2014: 46.6
        },
        fifa: "CMR",
        car: {
            signs: [
                "CAM"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cm.png",
            svg: "https://flagcdn.com/cm.svg",
            alt: "The flag of Cameroon is composed of three equal vertical bands of green, red and yellow, with a yellow five-pointed star in the center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cm.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cm.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                3.85,
                11.5
            ]
        }
    },
    {
        name: {
            common: "Guinea",
            official: "Republic of Guinea",
            nativeName: {
                fra: {
                    official: "R\xe9publique de Guin\xe9e",
                    common: "Guin\xe9e"
                }
            }
        },
        tld: [
            ".gn"
        ],
        cca2: "GN",
        ccn3: "324",
        cca3: "GIN",
        cioc: "GUI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            GNF: {
                name: "Guinean franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "24"
            ]
        },
        capital: [
            "Conakry"
        ],
        altSpellings: [
            "GN",
            "Republic of Guinea",
            "R\xe9publique de Guin\xe9e"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u064A\u0646\u064A\u0627",
                common: "\u063A\u064A\u0646\u064A\u0627"
            },
            bre: {
                official: "Republik Ginea",
                common: "Ginea"
            },
            ces: {
                official: "Guinejsk\xe1 republika",
                common: "Guinea"
            },
            cym: {
                official: "Republic of Guinea",
                common: "Guinea"
            },
            deu: {
                official: "Republik Guinea",
                common: "Guinea"
            },
            est: {
                official: "Guinea Vabariik",
                common: "Guinea"
            },
            fin: {
                official: "Guinean tasavalta",
                common: "Guinea"
            },
            fra: {
                official: "R\xe9publique de Guin\xe9e",
                common: "Guin\xe9e"
            },
            hrv: {
                official: "Republika Gvineja",
                common: "Gvineja"
            },
            hun: {
                official: "Guineai K\xf6zt\xe1rsas\xe1g",
                common: "Guinea"
            },
            ita: {
                official: "Repubblica di Guinea",
                common: "Guinea"
            },
            jpn: {
                official: "\u30AE\u30CB\u30A2\u5171\u548C\u56FD",
                common: "\u30AE\u30CB\u30A2"
            },
            kor: {
                official: "\uAE30\uB2C8 \uACF5\uD654\uAD6D",
                common: "\uAE30\uB2C8"
            },
            nld: {
                official: "Republiek Guinee",
                common: "Guinee"
            },
            per: {
                official: "\u0645\u0645\u0644\u06A9\u062A \u0645\u0633\u062A\u0642\u0644 \u067E\u0627\u067E\u0648\u0622 \u06AF\u06CC\u0646\u0647 \u0646\u0648",
                common: "\u067E\u0627\u067E\u0648\u0622 \u06AF\u06CC\u0646\u0647 \u0646\u0648"
            },
            pol: {
                official: "Republika Gwinei",
                common: "Gwinea"
            },
            por: {
                official: "Rep\xfablica da Guin\xe9",
                common: "Guin\xe9"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0438\u043D\u0435\u044F",
                common: "\u0413\u0432\u0438\u043D\u0435\u044F"
            },
            slk: {
                official: "Guinejsk\xe1 republika",
                common: "Guinea"
            },
            spa: {
                official: "Rep\xfablica de Guinea",
                common: "Guinea"
            },
            srp: {
                official: "\u041A\u043E\u043E\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0430\u0458\u0430\u043D\u0430",
                common: "\u0413\u0432\u0430\u0458\u0430\u043D\u0430"
            },
            swe: {
                official: "Republiken Guinea",
                common: "Guinea"
            },
            tur: {
                official: "Gine Cumhuriyeti",
                common: "Gine"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u0646\u06CC",
                common: "\u06AF\u0646\u06CC"
            },
            zho: {
                official: "\u51E0\u5185\u4E9A\u5171\u548C\u56FD",
                common: "\u51E0\u5185\u4E9A"
            }
        },
        latlng: [
            11,
            -10
        ],
        landlocked: false,
        borders: [
            "CIV",
            "GNB",
            "LBR",
            "MLI",
            "SEN",
            "SLE"
        ],
        area: 245857,
        demonyms: {
            eng: {
                f: "Guinean",
                m: "Guinean"
            },
            fra: {
                f: "Guin\xe9enne",
                m: "Guin\xe9en"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDF3",
        maps: {
            googleMaps: "https://goo.gl/maps/8J5oM5sA4Ayr1ZYGA",
            openStreetMaps: "https://www.openstreetmap.org/relation/192778"
        },
        population: 13132792,
        gini: {
            2012: 33.7
        },
        fifa: "GUI",
        car: {
            signs: [
                "RG"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gn.png",
            svg: "https://flagcdn.com/gn.svg",
            alt: "The flag of Guinea is composed of three equal vertical bands of red, yellow and green."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gn.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gn.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                9.5,
                -13.7
            ]
        }
    },
    {
        name: {
            common: "Bahrain",
            official: "Kingdom of Bahrain",
            nativeName: {
                ara: {
                    official: "\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0628\u062D\u0631\u064A\u0646",
                    common: "\u200F\u0627\u0644\u0628\u062D\u0631\u064A\u0646"
                }
            }
        },
        tld: [
            ".bh"
        ],
        cca2: "BH",
        ccn3: "048",
        cca3: "BHR",
        cioc: "BHR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BHD: {
                name: "Bahraini dinar",
                symbol: ".\u062F.\u0628"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "73"
            ]
        },
        capital: [
            "Manama"
        ],
        altSpellings: [
            "BH",
            "Kingdom of Bahrain",
            "Mamlakat al-Ba\u1E25rayn"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0628\u062D\u0631\u064A\u0646",
                common: "\u200F\u0627\u0644\u0628\u062D\u0631\u064A\u0646"
            },
            bre: {
                official: "Rouantelezh Bahrein",
                common: "Bahrein"
            },
            ces: {
                official: "Kr\xe1lovstv\xed Bahrajn",
                common: "Bahrajn"
            },
            cym: {
                official: "Teyrnas Bahrein",
                common: "Bahrain"
            },
            deu: {
                official: "K\xf6nigreich Bahrain",
                common: "Bahrain"
            },
            est: {
                official: "Bahreini Kuningriik",
                common: "Bahrein"
            },
            fin: {
                official: "Bahrainin kuningaskunta",
                common: "Bahrain"
            },
            fra: {
                official: "Royaume de Bahre\xefn",
                common: "Bahre\xefn"
            },
            hrv: {
                official: "Kraljevina Bahrein",
                common: "Bahrein"
            },
            hun: {
                official: "Bahreini Kir\xe1lys\xe1g",
                common: "Bahrein"
            },
            ita: {
                official: "Regno del Bahrain",
                common: "Bahrein"
            },
            jpn: {
                official: "\u30D0\u30FC\u30EC\u30FC\u30F3\u738B\u56FD",
                common: "\u30D0\u30FC\u30EC\u30FC\u30F3"
            },
            kor: {
                official: "\uBC14\uB808\uC778 \uC655\uAD6D",
                common: "\uBC14\uB808\uC778"
            },
            nld: {
                official: "Koninkrijk Bahrein",
                common: "Bahrein"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0628\u062D\u0631\u06CC\u0646",
                common: "\u0628\u062D\u0631\u06CC\u0646"
            },
            pol: {
                official: "Kr\xf3lestwo Bahrajnu",
                common: "Bahrajn"
            },
            por: {
                official: "Reino do Bahrein",
                common: "Bahrein"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0411\u0430\u0445\u0440\u0435\u0439\u043D",
                common: "\u0411\u0430\u0445\u0440\u0435\u0439\u043D"
            },
            slk: {
                official: "Bahrajnsk\xe9 kr\xe1\u013Eovstvo",
                common: "Bahrajn"
            },
            spa: {
                official: "Reino de Bahrein",
                common: "Bahrein"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0411\u0430\u0445\u0440\u0435\u0438\u043D",
                common: "\u0411\u0430\u0445\u0440\u0435\u0438\u043D"
            },
            swe: {
                official: "Konungariket Bahrain",
                common: "Bahrain"
            },
            tur: {
                official: "Bahreyn Krall\u0131\u011F\u0131",
                common: "Bahreyn"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0628\u062D\u0631\u06CC\u0646",
                common: "\u0628\u062D\u0631\u06CC\u0646"
            },
            zho: {
                official: "\u5DF4\u6797\u738B\u56FD",
                common: "\u5DF4\u6797"
            }
        },
        latlng: [
            26,
            50.55
        ],
        landlocked: false,
        area: 765,
        demonyms: {
            eng: {
                f: "Bahraini",
                m: "Bahraini"
            },
            fra: {
                f: "Bahre\xefnienne",
                m: "Bahre\xefnien"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDED",
        maps: {
            googleMaps: "https://goo.gl/maps/5Zue99Zc6vFBHxzJ7",
            openStreetMaps: "https://www.openstreetmap.org/relation/378734"
        },
        population: 1701583,
        fifa: "BHR",
        car: {
            signs: [
                "BRN"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bh.png",
            svg: "https://flagcdn.com/bh.svg",
            alt: "The flag of Bahrain has a red field. On the hoist side, it features a white vertical band that spans about one-third the width of the field and is separated from the rest of the field by five adjoining fly-side pointing white isosceles triangles that serve as a serrated line."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bh.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bh.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                26.23,
                50.57
            ]
        },
        postalCode: {
            format: "####|###",
            regex: "^(\\d{3}\\d?)$"
        }
    },
    {
        name: {
            common: "Suriname",
            official: "Republic of Suriname",
            nativeName: {
                nld: {
                    official: "Republiek Suriname",
                    common: "Suriname"
                }
            }
        },
        tld: [
            ".sr"
        ],
        cca2: "SR",
        ccn3: "740",
        cca3: "SUR",
        cioc: "SUR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SRD: {
                name: "Surinamese dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "97"
            ]
        },
        capital: [
            "Paramaribo"
        ],
        altSpellings: [
            "SR",
            "Sarnam",
            "Sranangron",
            "Republic of Suriname",
            "Republiek Suriname"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            nld: "Dutch"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0648\u0631\u064A\u0646\u0627\u0645",
                common: "\u0633\u0648\u0631\u064A\u0646\u0627\u0645"
            },
            bre: {
                official: "Republik Surinam",
                common: "Surinam"
            },
            ces: {
                official: "Republika Surinam",
                common: "Surinam"
            },
            cym: {
                official: "Republic of Suriname",
                common: "Suriname"
            },
            deu: {
                official: "Republik Suriname",
                common: "Suriname"
            },
            est: {
                official: "Suriname Vabariik",
                common: "Suriname"
            },
            fin: {
                official: "Surinamen tasavalta",
                common: "Suriname"
            },
            fra: {
                official: "R\xe9publique du Suriname",
                common: "Surinam"
            },
            hrv: {
                official: "Republika Surinam",
                common: "Surinam"
            },
            hun: {
                official: "Suriname K\xf6zt\xe1rsas\xe1g",
                common: "Suriname"
            },
            ita: {
                official: "Repubblica del Suriname",
                common: "Suriname"
            },
            jpn: {
                official: "\u30B9\u30EA\u30CA\u30E0\u5171\u548C\u56FD",
                common: "\u30B9\u30EA\u30CA\u30E0"
            },
            kor: {
                official: "\uC218\uB9AC\uB0A8 \uACF5\uD654\uAD6D",
                common: "\uC218\uB9AC\uB0A8"
            },
            nld: {
                official: "Republiek Suriname",
                common: "Suriname"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0648\u0631\u06CC\u0646\u0627\u0645",
                common: "\u0633\u0648\u0631\u06CC\u0646\u0627\u0645"
            },
            pol: {
                official: "Republika Surinamu",
                common: "Surinam"
            },
            por: {
                official: "Rep\xfablica do Suriname",
                common: "Suriname"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0443\u0440\u0438\u043D\u0430\u043C",
                common: "\u0421\u0443\u0440\u0438\u043D\u0430\u043C"
            },
            slk: {
                official: "Surinamsk\xe1 republika",
                common: "Surinam"
            },
            spa: {
                official: "Rep\xfablica de Suriname",
                common: "Surinam"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0443\u0440\u0438\u043D\u0430\u043C",
                common: "\u0421\u0443\u0440\u0438\u043D\u0430\u043C"
            },
            swe: {
                official: "Republiken Surinam",
                common: "Surinam"
            },
            tur: {
                official: "Surinam Cumhuriyeti",
                common: "Surinam"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0631\u06CC\u0646\u0627\u0645",
                common: "\u0633\u0631\u06CC\u0646\u0627\u0645"
            },
            zho: {
                official: "\u82CF\u91CC\u5357\u5171\u548C\u56FD",
                common: "\u82CF\u91CC\u5357"
            }
        },
        latlng: [
            4,
            -56
        ],
        landlocked: false,
        borders: [
            "BRA",
            "GUF",
            "GUY"
        ],
        area: 163820,
        demonyms: {
            eng: {
                f: "Surinamer",
                m: "Surinamer"
            },
            fra: {
                f: "Surinamaise",
                m: "Surinamais"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/iy7TuQLSi4qgoBoG7",
            openStreetMaps: "https://www.openstreetmap.org/relation/287082"
        },
        population: 586634,
        gini: {
            1999: 57.9
        },
        fifa: "SUR",
        car: {
            signs: [
                "SME"
            ],
            side: "left"
        },
        timezones: [
            "UTC-03:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sr.png",
            svg: "https://flagcdn.com/sr.svg",
            alt: "The flag of Suriname is composed of five horizontal bands of green, white, red, white and green in the ratio of 2:1:4:1:2. A large five-pointed yellow star is centered in the red band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sr.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sr.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                5.83,
                -55.17
            ]
        }
    },
    {
        name: {
            common: "DR Congo",
            official: "Democratic Republic of the Congo",
            nativeName: {
                fra: {
                    official: "R\xe9publique d\xe9mocratique du Congo",
                    common: "RD Congo"
                },
                kon: {
                    official: "Repubilika ya Kongo Demokratiki",
                    common: "Repubilika ya Kongo Demokratiki"
                },
                lin: {
                    official: "Republiki ya Kong\xf3 Demokratiki",
                    common: "Republiki ya Kong\xf3 Demokratiki"
                },
                lua: {
                    official: "Ditunga dia Kongu wa Mungalaata",
                    common: "Ditunga dia Kongu wa Mungalaata"
                },
                swa: {
                    official: "Jamhuri ya Kidemokrasia ya Kongo",
                    common: "Jamhuri ya Kidemokrasia ya Kongo"
                }
            }
        },
        tld: [
            ".cd"
        ],
        cca2: "CD",
        ccn3: "180",
        cca3: "COD",
        cioc: "COD",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            CDF: {
                name: "Congolese franc",
                symbol: "FC"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "43"
            ]
        },
        capital: [
            "Kinshasa"
        ],
        altSpellings: [
            "CD",
            "DR Congo",
            "Congo-Kinshasa",
            "Congo, the Democratic Republic of the",
            "DRC"
        ],
        region: "Africa",
        subregion: "Middle Africa",
        languages: {
            fra: "French",
            kon: "Kikongo",
            lin: "Lingala",
            lua: "Tshiluba",
            swa: "Swahili"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0643\u0648\u0646\u063A\u0648 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629",
                common: "\u0627\u0644\u0643\u0648\u0646\u063A\u0648"
            },
            bre: {
                official: "Republik Demokratel Kongo",
                common: "Kongo-Kinshasa"
            },
            ces: {
                official: "Demokratick\xe1 republika Kongo",
                common: "DR Kongo"
            },
            cym: {
                official: "Gweriniaeth Ddemocrataidd Congo",
                common: "Gweriniaeth Ddemocrataidd Congo"
            },
            deu: {
                official: "Demokratische Republik Kongo",
                common: "Kongo (Dem. Rep.)"
            },
            est: {
                official: "Kongo Demokraatlik Vabariik",
                common: "Kongo DV"
            },
            fin: {
                official: "Kongon demokraattinen tasavalta",
                common: "Kongon demokraattinen tasavalta"
            },
            fra: {
                official: "R\xe9publique d\xe9mocratique du Congo",
                common: "Congo (R\xe9p. d\xe9m.)"
            },
            hrv: {
                official: "Demokratska Republika Kongo",
                common: "Kongo, Demokratska Republika"
            },
            hun: {
                official: "Kong\xf3i Demokratikus K\xf6zt\xe1rsas\xe1g",
                common: "Kong\xf3i Demokratikus K\xf6zt\xe1rsas\xe1g"
            },
            ita: {
                official: "Repubblica Democratica del Congo",
                common: "Congo (Rep. Dem.)"
            },
            jpn: {
                official: "\u30B3\u30F3\u30B4\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u30B3\u30F3\u30B4\u6C11\u4E3B\u5171\u548C\u56FD"
            },
            kor: {
                official: "\uCF69\uACE0 \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                common: "\uCF69\uACE0 \uBBFC\uC8FC \uACF5\uD654\uAD6D"
            },
            nld: {
                official: "Democratische Republiek Congo",
                common: "Congo (DRC)"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u06A9\u0646\u06AF\u0648",
                common: "\u06A9\u0646\u06AF\u0648 \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9"
            },
            pol: {
                official: "Demokratyczna Republika Konga",
                common: "Demokratyczna Republika Konga"
            },
            por: {
                official: "Rep\xfablica Democr\xe1tica do Congo",
                common: "Rep\xfablica Democr\xe1tica do Congo"
            },
            rus: {
                official: "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E",
                common: "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E"
            },
            slk: {
                official: "Kon\u017Esk\xe1 demokratick\xe1 republika",
                common: "Kongo"
            },
            spa: {
                official: "Rep\xfablica Democr\xe1tica del Congo",
                common: "Congo (Rep. Dem.)"
            },
            srp: {
                official: "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E",
                common: "\u0414\u0420 \u041A\u043E\u043D\u0433\u043E"
            },
            swe: {
                official: "Demokratiska republiken Kongo",
                common: "Kongo-Kinshasa"
            },
            tur: {
                official: "Kongo Demokratik Cumhuriyeti",
                common: "Kongo Demokratik Cumhuriyeti"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0627\u0646\u06AF\u0648",
                common: "\u06A9\u0627\u0646\u06AF\u0648"
            },
            zho: {
                official: "\u521A\u679C\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u6C11\u4E3B\u521A\u679C"
            }
        },
        latlng: [
            0,
            25
        ],
        landlocked: false,
        borders: [
            "AGO",
            "BDI",
            "CAF",
            "COG",
            "RWA",
            "SSD",
            "TZA",
            "UGA",
            "ZMB"
        ],
        area: 2344858,
        demonyms: {
            eng: {
                f: "Congolese",
                m: "Congolese"
            },
            fra: {
                f: "Congolaise",
                m: "Congolais"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDE9",
        maps: {
            googleMaps: "https://goo.gl/maps/KfhNVn6VqdZXWu8n9",
            openStreetMaps: "https://www.openstreetmap.org/relation/192795"
        },
        population: 108407721,
        gini: {
            2012: 42.1
        },
        fifa: "COD",
        car: {
            signs: [
                "CGO"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00",
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cd.png",
            svg: "https://flagcdn.com/cd.svg",
            alt: "The flag of the Democratic Republic of the Congo has a sky-blue field with a yellow-edged red diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. A large five-pointed yellow star is situated above the diagonal band on the upper hoist side of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cd.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cd.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -4.32,
                15.3
            ]
        }
    },
    {
        name: {
            common: "Somalia",
            official: "Federal Republic of Somalia",
            nativeName: {
                ara: {
                    official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u0648\u0645\u0627\u0644\u200E\u200E",
                    common: "\u0627\u0644\u0635\u0648\u0645\u0627\u0644\u200E\u200E"
                },
                som: {
                    official: "Jamhuuriyadda Federaalka Soomaaliya",
                    common: "Soomaaliya"
                }
            }
        },
        tld: [
            ".so"
        ],
        cca2: "SO",
        ccn3: "706",
        cca3: "SOM",
        cioc: "SOM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SOS: {
                name: "Somali shilling",
                symbol: "Sh"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "52"
            ]
        },
        capital: [
            "Mogadishu"
        ],
        altSpellings: [
            "SO",
            "a\u1E63-\u1E62\u016Bm\u0101l",
            "Federal Republic of Somalia",
            "Jamhuuriyadda Federaalka Soomaaliya",
            "Jumh\u016Briyyat a\u1E63-\u1E62\u016Bm\u0101l al-Fider\u0101liyya"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            ara: "Arabic",
            som: "Somali"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u0648\u0645\u0627\u0644 \u0627\u0644\u0641\u064A\u062F\u0631\u0627\u0644\u064A\u0629",
                common: "\u0627\u0644\u0635\u0648\u0645\u0627\u0644"
            },
            bre: {
                official: "Republik Kevreadel Somalia",
                common: "Somalia"
            },
            ces: {
                official: "Som\xe1lsk\xe1 demokratick\xe1 republika",
                common: "Som\xe1lsko"
            },
            cym: {
                official: "Federal Republic of Somalia",
                common: "Somalia"
            },
            deu: {
                official: "Bundesrepublik Somalia",
                common: "Somalia"
            },
            est: {
                official: "Somaalia Liitvabariik",
                common: "Somaalia"
            },
            fin: {
                official: "Somalian liittotasavalta",
                common: "Somalia"
            },
            fra: {
                official: "R\xe9publique f\xe9d\xe9rale de Somalie",
                common: "Somalie"
            },
            hrv: {
                official: "Savezna Republika Somaliji",
                common: "Somalija"
            },
            hun: {
                official: "Szom\xe1li Sz\xf6vets\xe9gi K\xf6zt\xe1rsas\xe1g",
                common: "Szom\xe1lia"
            },
            ita: {
                official: "Repubblica federale di Somalia",
                common: "Somalia"
            },
            jpn: {
                official: "\u30BD\u30DE\u30EA\u30A2\u9023\u90A6\u5171\u548C\u56FD",
                common: "\u30BD\u30DE\u30EA\u30A2"
            },
            kor: {
                official: " \uC18C\uB9D0\uB9AC\uC544 \uC5F0\uBC29 \uACF5\uD654\uAD6D",
                common: "\uC18C\uB9D0\uB9AC\uC544"
            },
            nld: {
                official: "Federale Republiek Somali\xeb",
                common: "Somali\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u0644 \u0633\u0648\u0645\u0627\u0644\u06CC",
                common: "\u0633\u0648\u0645\u0627\u0644\u06CC"
            },
            pol: {
                official: "Federalna Republika Somalii",
                common: "Somalia"
            },
            por: {
                official: "Rep\xfablica Federal da Som\xe1lia",
                common: "Som\xe1lia"
            },
            rus: {
                official: "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u043E\u043C\u0430\u043B\u0438",
                common: "\u0421\u043E\u043C\u0430\u043B\u0438"
            },
            slk: {
                official: "Som\xe1lska federat\xedvna republika",
                common: "Som\xe1lsko"
            },
            spa: {
                official: "Rep\xfablica Federal de Somalia",
                common: "Somalia"
            },
            srp: {
                official: "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u043E\u043C\u0430\u043B\u0438\u0458\u0430",
                common: "\u0421\u043E\u043C\u0430\u043B\u0438\u0458\u0430"
            },
            swe: {
                official: "F\xf6rbundsrepubliken Somalia",
                common: "Somalia"
            },
            tur: {
                official: "Somali Federal Cumhuriyeti",
                common: "Somali"
            },
            urd: {
                official: "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0635\u0648\u0645\u0627\u0644\u06CC\u06C1",
                common: "\u0635\u0648\u0645\u0627\u0644\u06CC\u06C1"
            },
            zho: {
                official: "\u7D22\u9A6C\u91CC\u5171\u548C\u56FD",
                common: "\u7D22\u9A6C\u91CC"
            }
        },
        latlng: [
            10,
            49
        ],
        landlocked: false,
        borders: [
            "DJI",
            "ETH",
            "KEN"
        ],
        area: 637657,
        demonyms: {
            eng: {
                f: "Somali",
                m: "Somali"
            },
            fra: {
                f: "Somalienne",
                m: "Somalien"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/8of8q7D1a8p7R6Fc9",
            openStreetMaps: "https://www.openstreetmap.org/relation/192799"
        },
        population: 15893219,
        gini: {
            2017: 36.8
        },
        fifa: "SOM",
        car: {
            signs: [
                "SO"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/so.png",
            svg: "https://flagcdn.com/so.svg",
            alt: "The flag of Somalia features a large five-pointed white star centered on a light blue field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/so.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/so.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                2.07,
                45.33
            ]
        },
        postalCode: {
            format: "@@  #####",
            regex: "^([A-Z]{2}\\d{5})$"
        }
    },
    {
        name: {
            common: "Czechia",
            official: "Czech Republic",
            nativeName: {
                ces: {
                    official: "\u010Cesk\xe1 republika",
                    common: "\u010Cesko"
                },
                slk: {
                    official: "\u010Cesk\xe1 republika",
                    common: "\u010Cesko"
                }
            }
        },
        tld: [
            ".cz"
        ],
        cca2: "CZ",
        ccn3: "203",
        cca3: "CZE",
        cioc: "CZE",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            CZK: {
                name: "Czech koruna",
                symbol: "K\u010D"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "20"
            ]
        },
        capital: [
            "Prague"
        ],
        altSpellings: [
            "CZ",
            "\u010Cesk\xe1 republika",
            "\u010Cesko"
        ],
        region: "Europe",
        subregion: "Central Europe",
        languages: {
            ces: "Czech",
            slk: "Slovak"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u062A\u0634\u064A\u0643",
                common: "\u0627\u0644\u062A\u0634\u064A\u0643"
            },
            bre: {
                official: "Republik Tchek",
                common: "Tchekia"
            },
            ces: {
                official: "\u010Cesk\xe1 republika",
                common: "\u010Cesko"
            },
            cym: {
                official: "Y Weriniaeth Tsiec",
                common: "Y Weriniaeth Tsiec"
            },
            deu: {
                official: "Tschechische Republik",
                common: "Tschechien"
            },
            est: {
                official: "T\u0161ehhi Vabariik",
                common: "T\u0161ehhi"
            },
            fin: {
                official: "T\u0161ekin tasavalta",
                common: "T\u0161ekki"
            },
            fra: {
                official: "R\xe9publique tch\xe8que",
                common: "Tch\xe9quie"
            },
            hrv: {
                official: "\u010Ce\u0161ka",
                common: "\u010Ce\u0161ka"
            },
            hun: {
                official: "Cseh K\xf6zt\xe1rsas\xe1g",
                common: "Csehorsz\xe1g"
            },
            ita: {
                official: "Repubblica Ceca",
                common: "Cechia"
            },
            jpn: {
                official: "\u30C1\u30A7\u30B3\u5171\u548C\u56FD",
                common: "\u30C1\u30A7\u30B3"
            },
            kor: {
                official: "\uCCB4\uCF54",
                common: "\uCCB4\uCF54"
            },
            nld: {
                official: "Tsjechische Republiek",
                common: "Tsjechi\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0686\u06A9",
                common: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0686\u06A9"
            },
            pol: {
                official: "Republika Czeska",
                common: "Czechy"
            },
            por: {
                official: "Rep\xfablica Checa",
                common: "Ch\xe9quia"
            },
            rus: {
                official: "\u0427\u0435\u0448\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0427\u0435\u0445\u0438\u044F"
            },
            slk: {
                official: "\u010Cesk\xe1 republika",
                common: "\u010Cesko"
            },
            spa: {
                official: "Rep\xfablica Checa",
                common: "Chequia"
            },
            srp: {
                official: "\u0427\u0435\u0448\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0427\u0435\u0448\u043A\u0430"
            },
            swe: {
                official: "Republiken Tjeckien",
                common: "Tjeckien"
            },
            tur: {
                official: "\xc7ek Cumhuriyeti",
                common: "\xc7ekya"
            },
            urd: {
                official: "\u0686\u064A\u06A9 \u062C\u0645\u06C1\u0648\u0631\u064A\u06C1",
                common: "\u0686\u064A\u06A9"
            },
            zho: {
                official: "\u6377\u514B\u5171\u548C\u56FD",
                common: "\u6377\u514B"
            }
        },
        latlng: [
            49.75,
            15.5
        ],
        landlocked: true,
        borders: [
            "AUT",
            "DEU",
            "POL",
            "SVK"
        ],
        area: 78865,
        demonyms: {
            eng: {
                f: "Czech",
                m: "Czech"
            },
            fra: {
                f: "Tch\xe8que",
                m: "Tch\xe8que"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDFF",
        maps: {
            googleMaps: "https://goo.gl/maps/47dmgeXMZyhDHyQW8",
            openStreetMaps: "https://www.openstreetmap.org/relation/51684"
        },
        population: 10698896,
        gini: {
            2018: 25
        },
        fifa: "CZE",
        car: {
            signs: [
                "CZ"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cz.png",
            svg: "https://flagcdn.com/cz.svg",
            alt: "The flag of Czechia is composed of two equal horizontal bands of white and red, with a blue isosceles triangle superimposed on the hoist side of the field. The triangle has its base on the hoist end and spans about two-fifth the width of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cz.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cz.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                50.08,
                14.47
            ]
        },
        postalCode: {
            format: "### ##",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "New Caledonia",
            official: "New Caledonia",
            nativeName: {
                fra: {
                    official: "Nouvelle-Cal\xe9donie",
                    common: "Nouvelle-Cal\xe9donie"
                }
            }
        },
        tld: [
            ".nc"
        ],
        cca2: "NC",
        ccn3: "540",
        cca3: "NCL",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            XPF: {
                name: "CFP franc",
                symbol: "\u20A3"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "87"
            ]
        },
        capital: [
            "Noum\xe9a"
        ],
        altSpellings: [
            "NC"
        ],
        region: "Oceania",
        subregion: "Melanesia",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0643\u0627\u0644\u064A\u062F\u0648\u0646\u064A\u0627 \u0627\u0644\u062C\u062F\u064A\u062F\u0629",
                common: "\u0643\u0627\u0644\u064A\u062F\u0648\u0646\u064A\u0627 \u0627\u0644\u062C\u062F\u064A\u062F\u0629"
            },
            bre: {
                official: "Kaledonia-Nevez",
                common: "Kaledonia-Nevez"
            },
            ces: {
                official: "Nov\xe1 Kaledonie",
                common: "Nov\xe1 Kaledonie"
            },
            cym: {
                official: "New Caledonia",
                common: "New Caledonia"
            },
            deu: {
                official: "Neukaledonien",
                common: "Neukaledonien"
            },
            est: {
                official: "Uus-Kaledoonia",
                common: "Uus-Kaledoonia"
            },
            fin: {
                official: "Uusi-Kaledonia",
                common: "Uusi-Kaledonia"
            },
            fra: {
                official: "Nouvelle-Cal\xe9donie",
                common: "Nouvelle-Cal\xe9donie"
            },
            hrv: {
                official: "Nova Kaledonija",
                common: "Nova Kaledonija"
            },
            hun: {
                official: "\xdaj-Kaled\xf3nia",
                common: "\xdaj-Kaled\xf3nia"
            },
            ita: {
                official: "Nuova Caledonia",
                common: "Nuova Caledonia"
            },
            jpn: {
                official: "\u30CB\u30E5\u30FC\u30AB\u30EC\u30C9\u30CB\u30A2",
                common: "\u30CB\u30E5\u30FC\u30AB\u30EC\u30C9\u30CB\u30A2"
            },
            kor: {
                official: "\uB204\uBCA8\uCE7C\uB808\uB3C4\uB2C8",
                common: "\uB204\uBCA8\uCE7C\uB808\uB3C4\uB2C8"
            },
            nld: {
                official: "nieuw -Caledoni\xeb",
                common: "Nieuw-Caledoni\xeb"
            },
            per: {
                official: "\u06A9\u0627\u0644\u062F\u0648\u0646\u06CC\u0627\u06CC \u062C\u062F\u06CC\u062F",
                common: "\u06A9\u0627\u0644\u062F\u0648\u0646\u06CC\u0627\u06CC \u062C\u062F\u06CC\u062F"
            },
            pol: {
                official: "Nowa Kaledonia",
                common: "Nowa Kaledonia"
            },
            por: {
                official: "New Caledonia",
                common: "Nova Caled\xf3nia"
            },
            rus: {
                official: "\u041D\u043E\u0432\u0430\u044F \u041A\u0430\u043B\u0435\u0434\u043E\u043D\u0438\u044F",
                common: "\u041D\u043E\u0432\u0430\u044F \u041A\u0430\u043B\u0435\u0434\u043E\u043D\u0438\u044F"
            },
            slk: {
                official: "Nov\xe1 Kaled\xf3nia",
                common: "Nov\xe1 Kaled\xf3nia"
            },
            spa: {
                official: "nueva Caledonia",
                common: "Nueva Caledonia"
            },
            srp: {
                official: "\u041D\u043E\u0432\u0430 \u041A\u0430\u043B\u0435\u0434\u043E\u043D\u0438\u0458\u0430",
                common: "\u041D\u043E\u0432\u0430 \u041A\u0430\u043B\u0435\u0434\u043E\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Nya Kaledonien",
                common: "Nya Kaledonien"
            },
            tur: {
                official: "Yeni Kaledonya",
                common: "Yeni Kaledonya"
            },
            urd: {
                official: "\u0646\u06CC\u0648 \u06A9\u06CC\u0644\u06CC\u0688\u0648\u0646\u06CC\u0627",
                common: "\u0646\u06CC\u0648 \u06A9\u06CC\u0644\u06CC\u0688\u0648\u0646\u06CC\u0627"
            },
            zho: {
                official: "\u65B0\u5580\u91CC\u591A\u5C3C\u4E9A",
                common: "\u65B0\u5580\u91CC\u591A\u5C3C\u4E9A"
            }
        },
        latlng: [
            -21.5,
            165.5
        ],
        landlocked: false,
        area: 18575,
        demonyms: {
            eng: {
                f: "New Caledonian",
                m: "New Caledonian"
            },
            fra: {
                f: "N\xe9o-Cal\xe9donienne",
                m: "N\xe9o-Cal\xe9donien"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDE8",
        maps: {
            googleMaps: "https://goo.gl/maps/cBhtCeMdob4U7FRU9",
            openStreetMaps: "https://www.openstreetmap.org/relation/3407643"
        },
        population: 271960,
        fifa: "NCL",
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC+11:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/nc.png",
            svg: "https://flagcdn.com/nc.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/nc.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/nc.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -22.27,
                166.45
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Vanuatu",
            official: "Republic of Vanuatu",
            nativeName: {
                bis: {
                    official: "Ripablik blong Vanuatu",
                    common: "Vanuatu"
                },
                eng: {
                    official: "Republic of Vanuatu",
                    common: "Vanuatu"
                },
                fra: {
                    official: "R\xe9publique de Vanuatu",
                    common: "Vanuatu"
                }
            }
        },
        tld: [
            ".vu"
        ],
        cca2: "VU",
        ccn3: "548",
        cca3: "VUT",
        cioc: "VAN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            VUV: {
                name: "Vanuatu vatu",
                symbol: "Vt"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "78"
            ]
        },
        capital: [
            "Port Vila"
        ],
        altSpellings: [
            "VU",
            "Republic of Vanuatu",
            "Ripablik blong Vanuatu",
            "R\xe9publique de Vanuatu"
        ],
        region: "Oceania",
        subregion: "Melanesia",
        languages: {
            bis: "Bislama",
            eng: "English",
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0641\u0627\u0646\u0648\u0627\u062A\u0648",
                common: "\u0641\u0627\u0646\u0648\u0627\u062A\u0648"
            },
            bre: {
                official: "Republik Vanuatu",
                common: "Vanuatu"
            },
            ces: {
                official: "Republika Vanuatu",
                common: "Vanuatu"
            },
            cym: {
                official: "Republic of Vanuatu",
                common: "Vanuatu"
            },
            deu: {
                official: "Vanuatu",
                common: "Vanuatu"
            },
            est: {
                official: "Vanuatu Vabariik",
                common: "Vanuatu"
            },
            fin: {
                official: "Vanuatun tasavalta",
                common: "Vanuatu"
            },
            fra: {
                official: "R\xe9publique de Vanuatu",
                common: "Vanuatu"
            },
            hrv: {
                official: "Republika Vanuatu",
                common: "Vanuatu"
            },
            hun: {
                official: "Vanuatui K\xf6zt\xe1rsas\xe1g",
                common: "Vanuatu"
            },
            ita: {
                official: "Repubblica di Vanuatu",
                common: "Vanuatu"
            },
            jpn: {
                official: "\u30D0\u30CC\u30A2\u30C4\u5171\u548C\u56FD",
                common: "\u30D0\u30CC\u30A2\u30C4"
            },
            kor: {
                official: "\uBC14\uB204\uC544\uD22C \uACF5\uD654\uAD6D",
                common: "\uBC14\uB204\uC544\uD22C"
            },
            nld: {
                official: "Republiek Vanuatu",
                common: "Vanuatu"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0648\u0627\u0646\u0648\u0627\u062A\u0648",
                common: "\u0648\u0627\u0646\u0648\u0627\u062A\u0648"
            },
            pol: {
                official: "Republika Vanuatu",
                common: "Vanuatu"
            },
            por: {
                official: "Rep\xfablica de Vanuatu",
                common: "Vanuatu"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u0430\u043D\u0443\u0430\u0442\u0443",
                common: "\u0412\u0430\u043D\u0443\u0430\u0442\u0443"
            },
            slk: {
                official: "Vanuatsk\xe1 republika",
                common: "Vanuatu"
            },
            spa: {
                official: "Rep\xfablica de Vanuatu",
                common: "Vanuatu"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u0430\u043D\u0443\u0430\u0442\u0443",
                common: "\u0412\u0430\u043D\u0443\u0430\u0442\u0443"
            },
            swe: {
                official: "Republiken Vanuatu",
                common: "Vanuatu"
            },
            tur: {
                official: "Vanuatu Cumhuriyeti",
                common: "Vanuatu"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0648\u0627\u0646\u0648\u0627\u062A\u0648",
                common: "\u0648\u0627\u0646\u0648\u0627\u062A\u0648"
            },
            zho: {
                official: "\u74E6\u52AA\u963F\u56FE\u5171\u548C\u56FD",
                common: "\u74E6\u52AA\u963F\u56FE"
            }
        },
        latlng: [
            -16,
            167
        ],
        landlocked: false,
        area: 12189,
        demonyms: {
            eng: {
                f: "Ni-Vanuatu",
                m: "Ni-Vanuatu"
            },
            fra: {
                f: "Vanuatuane",
                m: "Vanuatuan"
            }
        },
        flag: "\uD83C\uDDFB\uD83C\uDDFA",
        maps: {
            googleMaps: "https://goo.gl/maps/hwAjehcT7VfvP5zJ8",
            openStreetMaps: "https://www.openstreetmap.org/relation/2177246"
        },
        population: 307150,
        gini: {
            2010: 37.6
        },
        fifa: "VAN",
        car: {
            signs: [
                "VU"
            ],
            side: "right"
        },
        timezones: [
            "UTC+11:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/vu.png",
            svg: "https://flagcdn.com/vu.svg",
            alt: "The flag of Vanuatu is composed of two equal horizontal bands of red and green, with a black isosceles triangle superimposed on the hoist side of the field. This triangle has its base on the hoist end, spans about two-fifth the width of the field and is enclosed on its sides by the arms of a thin black-edged yellow horizontally oriented Y-shaped band which extends along the boundary of the red and green bands to the fly end of the field. A yellow boar's tusk encircling two yellow crossed namele leaves is centered in the triangle."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/vu.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/vu.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -17.73,
                168.32
            ]
        }
    },
    {
        name: {
            common: "Saint Helena, Ascension and Tristan da Cunha",
            official: "Saint Helena, Ascension and Tristan da Cunha",
            nativeName: {
                eng: {
                    official: "Saint Helena, Ascension and Tristan da Cunha",
                    common: "Saint Helena, Ascension and Tristan da Cunha"
                }
            }
        },
        tld: [
            ".sh",
            ".ac"
        ],
        cca2: "SH",
        ccn3: "654",
        cca3: "SHN",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            GBP: {
                name: "Pound sterling",
                symbol: "\xa3"
            },
            SHP: {
                name: "Saint Helena pound",
                symbol: "\xa3"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "90",
                "47"
            ]
        },
        capital: [
            "Jamestown"
        ],
        altSpellings: [
            "Saint Helena",
            "St. Helena, Ascension and Tristan da Cunha"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0633\u0627\u0646\u062A \u0647\u064A\u0644\u064A\u0646\u0627 \u0648\u0623\u0633\u064A\u0646\u0634\u064A\u0646 \u0648\u062A\u0631\u064A\u0633\u062A\u0627\u0646 \u062F\u0627 \u0643\u0648\u0646\u0627",
                common: "\u0633\u0627\u0646\u062A \u0647\u064A\u0644\u064A\u0646\u0627 \u0648\u0623\u0633\u064A\u0646\u0634\u064A\u0646 \u0648\u062A\u0631\u064A\u0633\u062A\u0627\u0646 \u062F\u0627 \u0643\u0648\u0646\u0627"
            },
            bre: {
                official: "Saint Helena, Ascension ha Tristan da Cunha",
                common: "Saint Helena, Ascension ha Tristan da Cunha"
            },
            ces: {
                official: "Svat\xe1 Helena, Ascension a Tristan da Cunha",
                common: "Svat\xe1 Helena, Ascension a Tristan da Cunha"
            },
            cym: {
                official: "Saint Helena, Ascension and Tristan da Cunha",
                common: "Saint Helena, Ascension and Tristan da Cunha"
            },
            deu: {
                official: "Sankt Helena, Ascension und Tristan da Cunha",
                common: "St. Helena, Ascension und Tristan da Cunha"
            },
            est: {
                official: "Saint Helena, Ascension ja Tristan da Cunha",
                common: "Saint Helena, Ascension ja Tristan da Cunha"
            },
            fin: {
                official: "Saint Helena, Ascension ja Tristan da Cunha",
                common: "Saint Helena, Ascension ja Tristan da Cunha"
            },
            fra: {
                official: "Sainte-H\xe9l\xe8ne, Ascension et Tristan da Cunha",
                common: "Sainte-H\xe9l\xe8ne, Ascension et Tristan da Cunha"
            },
            hrv: {
                official: "Sveta Helena",
                common: "Sveta Helena"
            },
            hun: {
                official: "Szent Ilona",
                common: "Szent Ilona-sziget"
            },
            ita: {
                official: "Sant'Elena, Ascensione e Tristan da Cunha",
                common: "Sant'Elena, Ascensione e Tristan da Cunha"
            },
            jpn: {
                official: "\u30BB\u30F3\u30C8\u30D8\u30EC\u30CA\u30FB\u30A2\u30BB\u30F3\u30B7\u30E7\u30F3\u304A\u3088\u3073\u30C8\u30EA\u30B9\u30BF\u30F3\u30C0\u30AF\u30FC\u30CB\u30E3",
                common: "\u30BB\u30F3\u30C8\u30D8\u30EC\u30CA\u30FB\u30A2\u30BB\u30F3\u30B7\u30E7\u30F3\u304A\u3088\u3073\u30C8\u30EA\u30B9\u30BF\u30F3\u30C0\u30AF\u30FC\u30CB\u30E3"
            },
            kor: {
                official: "\uC138\uC778\uD2B8\uD5EC\uB808\uB098",
                common: "\uC138\uC778\uD2B8\uD5EC\uB808\uB098"
            },
            nld: {
                official: "Sint-Helena, Ascension en Tristan da Cunha",
                common: "Sint-Helena, Ascension en Tristan da Cunha"
            },
            per: {
                official: "\u0633\u0646\u062A \u0647\u0644\u0646",
                common: "\u0633\u0646\u062A \u0647\u0644\u0646"
            },
            pol: {
                official: "Wyspa \u015Awi\u0119tej Heleny, Wyspa Wniebowst\u0105pienia i Tristan da Cunha",
                common: "Wyspa \u015Awi\u0119tej Heleny, Wyspa Wniebowst\u0105pienia i Tristan da Cunha"
            },
            por: {
                official: "Santa Helena, Ascens\xe3o e Trist\xe3o da Cunha",
                common: "Santa Helena, Ascens\xe3o e Trist\xe3o da Cunha"
            },
            rus: {
                official: "\u041E\u0441\u0442\u0440\u043E\u0432\u0430 \u0421\u0432\u044F\u0442\u043E\u0439 \u0415\u043B\u0435\u043D\u044B, \u0412\u043E\u0437\u043D\u0435\u0441\u0435\u043D\u0438\u044F \u0438 \u0422\u0440\u0438\u0441\u0442\u0430\u043D-\u0434\u0430-\u041A\u0443\u043D\u044C\u044F",
                common: "\u041E\u0441\u0442\u0440\u043E\u0432\u0430 \u0421\u0432\u044F\u0442\u043E\u0439 \u0415\u043B\u0435\u043D\u044B, \u0412\u043E\u0437\u043D\u0435\u0441\u0435\u043D\u0438\u044F \u0438 \u0422\u0440\u0438\u0441\u0442\u0430\u043D-\u0434\u0430-\u041A\u0443\u043D\u044C\u044F"
            },
            slk: {
                official: "Sv\xe4t\xe1 Helena (z\xe1morsk\xe9 \xfazemie)",
                common: "Sv\xe4t\xe1 Helena (z\xe1morsk\xe9 \xfazemie)"
            },
            spa: {
                official: "Santa Elena, Ascensi\xf3n y Trist\xe1n de Acu\xf1a",
                common: "Santa Elena, Ascensi\xf3n y Trist\xe1n de Acu\xf1a"
            },
            srp: {
                official: "\u0421\u0432\u0435\u0442\u0430 \u0408\u0435\u043B\u0435\u043D\u0430, \u0410\u0441\u0435\u043D\u0441\u0438\u043E\u043D \u0438 \u0422\u0440\u0438\u0441\u0442\u0430\u043D \u0434\u0430 \u041A\u0443\u045A\u0430",
                common: "\u0421\u0432\u0435\u0442\u0430 \u0408\u0435\u043B\u0435\u043D\u0430"
            },
            swe: {
                official: "Sankta Helena",
                common: "Sankta Helena"
            },
            tur: {
                official: "Saint Helena",
                common: "Saint Helena"
            },
            urd: {
                official: "\u0633\u06CC\u0646\u0679 \u06C1\u0644\u06CC\u0646\u0627\u060C \u0627\u0633\u06CC\u0646\u0634\u0646 \u0648 \u062A\u0631\u0633\u0679\u0627\u0646 \u062F\u0627 \u06A9\u0648\u0646\u06CC\u0627",
                common: "\u0633\u06CC\u0646\u0679 \u06C1\u0644\u06CC\u0646\u0627\u060C \u0627\u0633\u06CC\u0646\u0634\u0646 \u0648 \u062A\u0631\u0633\u0679\u0627\u0646 \u062F\u0627 \u06A9\u0648\u0646\u06CC\u0627"
            },
            zho: {
                official: "\u5723\u8D6B\u52D2\u62FF\u3001\u963F\u68EE\u677E\u548C\u7279\u91CC\u65AF\u5766-\u8FBE\u5E93\u5C3C\u4E9A",
                common: "\u5723\u8D6B\u52D2\u62FF\u3001\u963F\u68EE\u677E\u548C\u7279\u91CC\u65AF\u5766-\u8FBE\u5E93\u5C3C\u4E9A"
            }
        },
        latlng: [
            -15.95,
            -5.72
        ],
        landlocked: false,
        area: 394,
        demonyms: {
            eng: {
                f: "Saint Helenian",
                m: "Saint Helenian"
            },
            fra: {
                f: "Sainte-H\xe9l\xe9noise",
                m: "Sainte-H\xe9l\xe8nois"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDED",
        maps: {
            googleMaps: "https://goo.gl/maps/iv4VxnPzHkjLCJuc6",
            openStreetMaps: "https://www.openstreetmap.org/relation/4868269#map=13/-15.9657/-5.7120"
        },
        population: 53192,
        car: {
            signs: [
                "GB"
            ],
            side: "left"
        },
        timezones: [
            "UTC+00:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sh.png",
            svg: "https://flagcdn.com/sh.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -15.93,
                -5.72
            ]
        },
        postalCode: {
            format: "STHL 1ZZ",
            regex: "^(STHL1ZZ)$"
        }
    },
    {
        name: {
            common: "Togo",
            official: "Togolese Republic",
            nativeName: {
                fra: {
                    official: "R\xe9publique togolaise",
                    common: "Togo"
                }
            }
        },
        tld: [
            ".tg"
        ],
        cca2: "TG",
        ccn3: "768",
        cca3: "TGO",
        cioc: "TOG",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XOF: {
                name: "West African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "28"
            ]
        },
        capital: [
            "Lom\xe9"
        ],
        altSpellings: [
            "TG",
            "Togolese",
            "Togolese Republic",
            "R\xe9publique Togolaise"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0648\u063A\u0648",
                common: "\u062A\u0648\u063A\u0648"
            },
            bre: {
                official: "Republik Togoat",
                common: "Togo"
            },
            ces: {
                official: "Republika Togo",
                common: "Togo"
            },
            cym: {
                official: "Togolese Republic",
                common: "Togo"
            },
            deu: {
                official: "Republik Togo",
                common: "Togo"
            },
            est: {
                official: "Togo Vabariik",
                common: "Togo"
            },
            fin: {
                official: "Togon tasavalta",
                common: "Togo"
            },
            fra: {
                official: "R\xe9publique togolaise",
                common: "Togo"
            },
            hrv: {
                official: "Togolese Republika",
                common: "Togo"
            },
            hun: {
                official: "Tog\xf3i K\xf6zt\xe1rsas\xe1g",
                common: "Togo"
            },
            ita: {
                official: "Repubblica del Togo",
                common: "Togo"
            },
            jpn: {
                official: "\u30C8\u30FC\u30B4\u5171\u548C\u56FD",
                common: "\u30C8\u30FC\u30B4"
            },
            kor: {
                official: "\uD1A0\uACE0 \uACF5\uD654\uAD6D",
                common: "\uD1A0\uACE0"
            },
            nld: {
                official: "Republiek Togo",
                common: "Togo"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0648\u06AF\u0648",
                common: "\u062A\u0648\u06AF\u0648"
            },
            pol: {
                official: "Republika Togijska",
                common: "Togo"
            },
            por: {
                official: "Rep\xfablica do Togo",
                common: "Togo"
            },
            rus: {
                official: "\u0422\u043E\u0433\u043E \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0422\u043E\u0433\u043E"
            },
            slk: {
                official: "Togsk\xe1 republika",
                common: "Togo"
            },
            spa: {
                official: "Rep\xfablica de Togo",
                common: "Togo"
            },
            srp: {
                official: "\u0422\u043E\u0433\u043E\u043B\u0435\u0448\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0422\u043E\u0433\u043E"
            },
            swe: {
                official: "Republiken Togo",
                common: "Togo"
            },
            tur: {
                official: "Togo Cumhuriyeti",
                common: "Togo"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0679\u0648\u06AF\u0648",
                common: "\u0679\u0648\u06AF\u0648"
            },
            zho: {
                official: "\u591A\u54E5\u5171\u548C\u56FD",
                common: "\u591A\u54E5"
            }
        },
        latlng: [
            8,
            1.16666666
        ],
        landlocked: false,
        borders: [
            "BEN",
            "BFA",
            "GHA"
        ],
        area: 56785,
        demonyms: {
            eng: {
                f: "Togolese",
                m: "Togolese"
            },
            fra: {
                f: "Togolaise",
                m: "Togolais"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/jzAa9feXuXPrKVb89",
            openStreetMaps: "https://www.openstreetmap.org/relation/192782"
        },
        population: 8278737,
        gini: {
            2015: 43.1
        },
        fifa: "TOG",
        car: {
            signs: [
                "TG"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tg.png",
            svg: "https://flagcdn.com/tg.svg",
            alt: "The flag of Togo is composed of five equal horizontal bands of green alternating with yellow. A red square bearing a five-pointed white star is superimposed in the canton."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/tg.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/tg.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                6.14,
                1.21
            ]
        }
    },
    {
        name: {
            common: "British Virgin Islands",
            official: "Virgin Islands",
            nativeName: {
                eng: {
                    official: "Virgin Islands",
                    common: "British Virgin Islands"
                }
            }
        },
        tld: [
            ".vg"
        ],
        cca2: "VG",
        ccn3: "092",
        cca3: "VGB",
        cioc: "IVB",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "284"
            ]
        },
        capital: [
            "Road Town"
        ],
        altSpellings: [
            "VG",
            "Virgin Islands, British"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u0627\u0644\u0639\u0630\u0631\u0627\u0621 \u0627\u0644\u0628\u0631\u064A\u0637\u0627\u0646\u064A\u0629",
                common: "\u062C\u0632\u0631 \u0627\u0644\u0639\u0630\u0631\u0627\u0621"
            },
            bre: {
                official: "Inizi Gwerc'h Breizhveurat",
                common: "Inizi Gwerc'h Breizhveurat"
            },
            ces: {
                official: "Britsk\xe9 Panensk\xe9 ostrovy",
                common: "Britsk\xe9 Panensk\xe9 ostrovy"
            },
            cym: {
                official: "Virgin Islands",
                common: "British Virgin Islands"
            },
            deu: {
                official: "Jungferninseln",
                common: "Britische Jungferninseln"
            },
            est: {
                official: "Neitsisaared",
                common: "Briti Neitsisaared"
            },
            fin: {
                official: "Brittil\xe4iset Neitsytsaaret",
                common: "Neitsytsaaret"
            },
            fra: {
                official: "\xeeles Vierges",
                common: "\xceles Vierges britanniques"
            },
            hrv: {
                official: "Djevi\u010Danski Otoci",
                common: "Britanski Djevi\u010Danski Otoci"
            },
            hun: {
                official: "Brit Virgin-szigetek",
                common: "Brit Virgin-szigetek"
            },
            ita: {
                official: "Isole Vergini",
                common: "Isole Vergini Britanniche"
            },
            jpn: {
                official: "\u30D0\u30FC\u30B8\u30F3\u8AF8\u5CF6",
                common: "\u30A4\u30AE\u30EA\u30B9\u9818\u30F4\u30A1\u30FC\u30B8\u30F3\u8AF8\u5CF6"
            },
            kor: {
                official: "\uC601\uAD6D\uB839 \uBC84\uC9C4\uC544\uC77C\uB79C\uB4DC",
                common: "\uC601\uAD6D\uB839 \uBC84\uC9C4\uC544\uC77C\uB79C\uB4DC"
            },
            nld: {
                official: "Maagdeneilanden",
                common: "Britse Maagdeneilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u0648\u06CC\u0631\u062C\u06CC\u0646 \u0628\u0631\u06CC\u062A\u0627\u0646\u06CC\u0627",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u0648\u06CC\u0631\u062C\u06CC\u0646 \u0628\u0631\u06CC\u062A\u0627\u0646\u06CC\u0627"
            },
            pol: {
                official: "Brytyjskie Wyspy Dziewicze",
                common: "Brytyjskie Wyspy Dziewicze"
            },
            por: {
                official: "Ilhas Virgens",
                common: "Ilhas Virgens"
            },
            rus: {
                official: "\u0412\u0438\u0440\u0433\u0438\u043D\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0438\u0435 \u0412\u0438\u0440\u0433\u0438\u043D\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Panensk\xe9 ostrovy",
                common: "Panensk\xe9 ostrovy"
            },
            spa: {
                official: "Islas V\xedrgenes",
                common: "Islas V\xedrgenes del Reino Unido"
            },
            srp: {
                official: "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430 \u0414\u0435\u0432\u0438\u0447\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                common: "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430 \u0414\u0435\u0432\u0438\u0447\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "Brittiska Jungfru\xf6arna",
                common: "Brittiska Jungfru\xf6arna"
            },
            tur: {
                official: "Virjin Adalar\u0131",
                common: "Virjin Adalar\u0131"
            },
            urd: {
                official: "\u0628\u0631\u0637\u0627\u0646\u0648\u06CC \u062C\u0632\u0627\u0626\u0631 \u0648\u0631\u062C\u0646",
                common: "\u0628\u0631\u0637\u0627\u0646\u0648\u06CC \u062C\u0632\u0627\u0626\u0631 \u0648\u0631\u062C\u0646"
            },
            zho: {
                official: "\u82F1\u5C5E\u7EF4\u5C14\u4EAC\u7FA4\u5C9B",
                common: "\u82F1\u5C5E\u7EF4\u5C14\u4EAC\u7FA4\u5C9B"
            }
        },
        latlng: [
            18.431383,
            -64.62305
        ],
        landlocked: false,
        area: 151,
        demonyms: {
            eng: {
                f: "Virgin Islander",
                m: "Virgin Islander"
            }
        },
        flag: "\uD83C\uDDFB\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/49C9cSesNVAR9DQk8",
            openStreetMaps: "https://www.openstreetmap.org/relation/285454"
        },
        population: 30237,
        fifa: "VGB",
        car: {
            signs: [
                "BVI"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/vg.png",
            svg: "https://flagcdn.com/vg.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/vg.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/vg.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                18.42,
                -64.62
            ]
        }
    },
    {
        name: {
            common: "Kenya",
            official: "Republic of Kenya",
            nativeName: {
                eng: {
                    official: "Republic of Kenya",
                    common: "Kenya"
                },
                swa: {
                    official: "Republic of Kenya",
                    common: "Kenya"
                }
            }
        },
        tld: [
            ".ke"
        ],
        cca2: "KE",
        ccn3: "404",
        cca3: "KEN",
        cioc: "KEN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            KES: {
                name: "Kenyan shilling",
                symbol: "Sh"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "54"
            ]
        },
        capital: [
            "Nairobi"
        ],
        altSpellings: [
            "KE",
            "Republic of Kenya",
            "Jamhuri ya Kenya"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            eng: "English",
            swa: "Swahili"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u064A\u0646\u064A\u0627",
                common: "\u0643\u064A\u0646\u064A\u0627"
            },
            bre: {
                official: "Republik Kenya",
                common: "Kenya"
            },
            ces: {
                official: "Ke\u0148sk\xe1 republika",
                common: "Ke\u0148a"
            },
            cym: {
                official: "Republic of Kenya",
                common: "Kenya"
            },
            deu: {
                official: "Republik Kenia",
                common: "Kenia"
            },
            est: {
                official: "Keenia Vabariik",
                common: "Keenia"
            },
            fin: {
                official: "Kenian tasavalta",
                common: "Kenia"
            },
            fra: {
                official: "R\xe9publique du Kenya",
                common: "Kenya"
            },
            hrv: {
                official: "Republika Kenija",
                common: "Kenija"
            },
            hun: {
                official: "Kenyai K\xf6zt\xe1rsas\xe1g",
                common: "Kenya"
            },
            ita: {
                official: "Repubblica del Kenya",
                common: "Kenya"
            },
            jpn: {
                official: "\u30B1\u30CB\u30A2\u5171\u548C\u56FD",
                common: "\u30B1\u30CB\u30A2"
            },
            kor: {
                official: "\uCF00\uB0D0 \uACF5\uD654\uAD6D",
                common: "\uCF00\uB0D0"
            },
            nld: {
                official: "Republiek Kenia",
                common: "Kenia"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0646\u06CC\u0627",
                common: "\u06A9\u0646\u06CC\u0627"
            },
            pol: {
                official: "Republika Kenii",
                common: "Kenia"
            },
            por: {
                official: "Rep\xfablica do Qu\xe9nia",
                common: "Qu\xe9nia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0435\u043D\u0438\u044F",
                common: "\u041A\u0435\u043D\u0438\u044F"
            },
            slk: {
                official: "Kensk\xe1 republika",
                common: "Ke\u0148a"
            },
            spa: {
                official: "Rep\xfablica de Kenya",
                common: "Kenia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0435\u043D\u0438\u0458\u0430",
                common: "\u041A\u0435\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Kenya",
                common: "Kenya"
            },
            tur: {
                official: "Kenya Cumhuriyeti",
                common: "Kenya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u06CC\u0646\u06CC\u0627",
                common: "\u06A9\u06CC\u0646\u06CC\u0627"
            },
            zho: {
                official: "\u80AF\u5C3C\u4E9A\u5171\u548C\u56FD",
                common: "\u80AF\u5C3C\u4E9A"
            }
        },
        latlng: [
            1,
            38
        ],
        landlocked: false,
        borders: [
            "ETH",
            "SOM",
            "SSD",
            "TZA",
            "UGA"
        ],
        area: 580367,
        demonyms: {
            eng: {
                f: "Kenyan",
                m: "Kenyan"
            },
            fra: {
                f: "K\xe9nyane",
                m: "K\xe9nyan"
            }
        },
        flag: "\uD83C\uDDF0\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/Ni9M7wcCxf8bJHLX8",
            openStreetMaps: "https://www.openstreetmap.org/relation/192798"
        },
        population: 53771300,
        gini: {
            2015: 40.8
        },
        fifa: "KEN",
        car: {
            signs: [
                "EAK"
            ],
            side: "left"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ke.png",
            svg: "https://flagcdn.com/ke.svg",
            alt: "The flag of Kenya is composed of three equal horizontal bands of black, red with white top and bottom edges, and green. An emblem comprising a red, black and white Maasai shield covering two crossed white spears is superimposed at the center of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ke.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ke.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -1.28,
                36.82
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Niue",
            official: "Niue",
            nativeName: {
                eng: {
                    official: "Niue",
                    common: "Niue"
                },
                niu: {
                    official: "Niu\u0113",
                    common: "Niu\u0113"
                }
            }
        },
        tld: [
            ".nu"
        ],
        cca2: "NU",
        ccn3: "570",
        cca3: "NIU",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            NZD: {
                name: "New Zealand dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "83"
            ]
        },
        capital: [
            "Alofi"
        ],
        altSpellings: [
            "NU"
        ],
        region: "Oceania",
        subregion: "Polynesia",
        languages: {
            eng: "English",
            niu: "Niuean"
        },
        translations: {
            ara: {
                official: "\u0646\u064A\u064A\u0648\u064A",
                common: "\u0646\u064A\u064A\u0648\u064A"
            },
            bre: {
                official: "Niue",
                common: "Niue"
            },
            ces: {
                official: "Niue",
                common: "Niue"
            },
            cym: {
                official: "Niue",
                common: "Niue"
            },
            deu: {
                official: "Niue",
                common: "Niue"
            },
            est: {
                official: "Niue",
                common: "Niue"
            },
            fin: {
                official: "Niue",
                common: "Niue"
            },
            fra: {
                official: "Niue",
                common: "Niue"
            },
            hrv: {
                official: "Niue",
                common: "Niue"
            },
            hun: {
                official: "Niue",
                common: "Niue"
            },
            ita: {
                official: "Niue",
                common: "Niue"
            },
            jpn: {
                official: "\u30CB\u30A6\u30A8",
                common: "\u30CB\u30A6\u30A8"
            },
            kor: {
                official: "\uB2C8\uC6B0\uC5D0",
                common: "\uB2C8\uC6B0\uC5D0"
            },
            nld: {
                official: "Niue",
                common: "Niue"
            },
            per: {
                official: "\u0646\u06CC\u0648\u0648\u06CC",
                common: "\u0646\u06CC\u0648\u0648\u06CC"
            },
            pol: {
                official: "Niue",
                common: "Niue"
            },
            por: {
                official: "Niue",
                common: "Niue"
            },
            rus: {
                official: "\u041D\u0438\u0443\u044D",
                common: "\u041D\u0438\u0443\u044D"
            },
            slk: {
                official: "Niue",
                common: "Niue"
            },
            spa: {
                official: "Niue",
                common: "Niue"
            },
            srp: {
                official: "\u041D\u0438\u0458\u0443\u0435",
                common: "\u041D\u0438\u0458\u0443\u0435"
            },
            swe: {
                official: "Niue",
                common: "Niue"
            },
            tur: {
                official: "Niue",
                common: "Niue"
            },
            urd: {
                official: "\u0646\u06CC\u0648\u0648\u06D2",
                common: "\u0646\u06CC\u0648\u0648\u06D2"
            },
            zho: {
                official: "\u7EBD\u57C3",
                common: "\u7EBD\u57C3"
            }
        },
        latlng: [
            -19.03333333,
            -169.86666666
        ],
        landlocked: false,
        area: 260,
        demonyms: {
            eng: {
                f: "Niuean",
                m: "Niuean"
            },
            fra: {
                f: "Niu\xe9enne",
                m: "Niu\xe9en"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDFA",
        maps: {
            googleMaps: "https://goo.gl/maps/xFgdzs3E55Rk1y8P9",
            openStreetMaps: "https://www.openstreetmap.org/relation/1558556"
        },
        population: 1470,
        car: {
            signs: [
                "NZ"
            ],
            side: "left"
        },
        timezones: [
            "UTC-11:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/nu.png",
            svg: "https://flagcdn.com/nu.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -19.02,
                -169.92
            ]
        }
    },
    {
        name: {
            common: "Heard Island and McDonald Islands",
            official: "Heard Island and McDonald Islands",
            nativeName: {
                eng: {
                    official: "Heard Island and McDonald Islands",
                    common: "Heard Island and McDonald Islands"
                }
            }
        },
        tld: [
            ".hm",
            ".aq"
        ],
        cca2: "HM",
        ccn3: "334",
        cca3: "HMD",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        idd: {},
        altSpellings: [
            "HM",
            "Heard Island and McDonald Islands"
        ],
        region: "Antarctic",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u064A\u0631\u0629 \u0647\u064A\u0631\u062F \u0648\u062C\u0632\u0631 \u0645\u0627\u0643\u062F\u0648\u0646\u0627\u0644\u062F",
                common: "\u062C\u0632\u064A\u0631\u0629 \u0647\u064A\u0631\u062F \u0648\u062C\u0632\u0631 \u0645\u0627\u0643\u062F\u0648\u0646\u0627\u0644\u062F"
            },
            bre: {
                official: "Enez Heard hag Inizi McDonald",
                common: "Inizi Heard ha McDonald"
            },
            ces: {
                official: "Heard\u016Fv ostrov a McDonaldovy ostrovy",
                common: "Heard\u016Fv ostrov a McDonaldovy ostrovy"
            },
            cym: {
                official: "Heard Island and McDonald Islands",
                common: "Heard Island and McDonald Islands"
            },
            deu: {
                official: "Heard und McDonaldinseln",
                common: "Heard und die McDonaldinseln"
            },
            est: {
                official: "Heardi ja McDonaldi saarte ala",
                common: "Heard ja McDonald"
            },
            fin: {
                official: "Heard ja McDonaldinsaaret",
                common: "Heard ja McDonaldinsaaret"
            },
            fra: {
                official: "Des \xeeles Heard et McDonald",
                common: "\xceles Heard-et-MacDonald"
            },
            hrv: {
                official: "Otok Heard i oto\u010Dje McDonald",
                common: "Otok Heard i oto\u010Dje McDonald"
            },
            hun: {
                official: "Heard-sziget \xe9s McDonald-szigetek",
                common: "Heard-sziget \xe9s McDonald-szigetek"
            },
            ita: {
                official: "Isole Heard e McDonald",
                common: "Isole Heard e McDonald"
            },
            jpn: {
                official: "\u30CF\u30FC\u30C9\u5CF6\u3068\u30DE\u30AF\u30C9\u30CA\u30EB\u30C9\u8AF8\u5CF6",
                common: "\u30CF\u30FC\u30C9\u5CF6\u3068\u30DE\u30AF\u30C9\u30CA\u30EB\u30C9\u8AF8\u5CF6"
            },
            kor: {
                official: "\uD5C8\uB4DC \uB9E5\uB3C4\uB110\uB4DC \uC81C\uB3C4",
                common: "\uD5C8\uB4DC \uB9E5\uB3C4\uB110\uB4DC \uC81C\uB3C4"
            },
            nld: {
                official: "Heard en McDonaldeilanden",
                common: "Heard-en McDonaldeilanden"
            },
            per: {
                official: "\u062C\u0632\u06CC\u0631\u0647 \u0647\u0631\u062F \u0648 \u062C\u0632\u0627\u06CC\u0631 \u0645\u06A9\u200C\u062F\u0648\u0646\u0627\u0644\u062F",
                common: "\u062C\u0632\u06CC\u0631\u0647 \u0647\u0631\u062F \u0648 \u062C\u0632\u0627\u06CC\u0631 \u0645\u06A9\u200C\u062F\u0648\u0646\u0627\u0644\u062F"
            },
            pol: {
                official: "Terytorium Wysp Heard i McDonalda",
                common: "Wyspy Heard i McDonalda"
            },
            por: {
                official: "Ilha Heard e Ilhas McDonald",
                common: "Ilha Heard e Ilhas McDonald"
            },
            rus: {
                official: "\u041E\u0441\u0442\u0440\u043E\u0432 \u0425\u0435\u0440\u0434 \u0438 \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u041C\u0430\u043A\u0434\u043E\u043D\u0430\u043B\u044C\u0434",
                common: "\u041E\u0441\u0442\u0440\u043E\u0432 \u0425\u0435\u0440\u0434 \u0438 \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u041C\u0430\u043A\u0434\u043E\u043D\u0430\u043B\u044C\u0434"
            },
            slk: {
                official: "Terit\xf3rium Heardovho ostrova a Macdonaldov\xfdch ostrovov",
                common: "Heardov ostrov"
            },
            spa: {
                official: "Islas Heard y McDonald",
                common: "Islas Heard y McDonald"
            },
            srp: {
                official: "\u041E\u0441\u0442\u0440\u0432\u0430 \u0425\u0435\u0440\u0434 \u0438 \u041C\u0430\u043A\u0434\u043E\u043D\u0430\u043B\u0434",
                common: "\u041E\u0441\u0442\u0440\u0432\u0430 \u0425\u0435\u0440\u0434 \u0438 \u041C\u0430\u043A\u0434\u043E\u043D\u0430\u043B\u0434"
            },
            swe: {
                official: "Heard- och McDonald\xf6arna",
                common: "Heard- och McDonald\xf6arna"
            },
            tur: {
                official: "Heard Adas\u0131 ve McDonald Adalar\u0131",
                common: "Heard Adas\u0131 ve McDonald Adalar\u0131"
            },
            urd: {
                official: "\u062C\u0632\u06CC\u0631\u06C1 \u06C1\u0631\u0688 \u0648 \u062C\u0632\u0627\u0626\u0631 \u0645\u06A9\u0688\u0648\u0646\u0644\u0688",
                common: "\u062C\u0632\u06CC\u0631\u06C1 \u06C1\u0631\u0688 \u0648 \u062C\u0632\u0627\u0626\u0631 \u0645\u06A9\u0688\u0648\u0646\u0644\u0688"
            },
            zho: {
                official: "\u8D6B\u5FB7\u5C9B\u548C\u9EA6\u5F53\u52B3\u7FA4\u5C9B",
                common: "\u8D6B\u5FB7\u5C9B\u548C\u9EA6\u5F53\u52B3\u7FA4\u5C9B"
            }
        },
        latlng: [
            53.0818,
            73.5042
        ],
        landlocked: false,
        area: 412,
        demonyms: {
            eng: {
                f: "Heard and McDonald Islander",
                m: "Heard and McDonald Islander"
            }
        },
        flag: "\uD83C\uDDED\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/k5FBAiVaVyozuYeA7",
            openStreetMaps: "https://www.openstreetmap.org/relation/2177227"
        },
        population: 0,
        car: {
            signs: [
                ""
            ],
            side: "right"
        },
        timezones: [
            "UTC+05:00"
        ],
        continents: [
            "Antarctica"
        ],
        flags: {
            png: "https://flagcdn.com/w320/hm.png",
            svg: "https://flagcdn.com/hm.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {}
    },
    {
        name: {
            common: "Rwanda",
            official: "Republic of Rwanda",
            nativeName: {
                eng: {
                    official: "Republic of Rwanda",
                    common: "Rwanda"
                },
                fra: {
                    official: "R\xe9publique rwandaise",
                    common: "Rwanda"
                },
                kin: {
                    official: "Repubulika y'u Rwanda",
                    common: "Rwanda"
                }
            }
        },
        tld: [
            ".rw"
        ],
        cca2: "RW",
        ccn3: "646",
        cca3: "RWA",
        cioc: "RWA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            RWF: {
                name: "Rwandan franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "50"
            ]
        },
        capital: [
            "Kigali"
        ],
        altSpellings: [
            "RW",
            "Republic of Rwanda",
            "Repubulika y'u Rwanda",
            "R\xe9publique du Rwanda"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            eng: "English",
            fra: "French",
            kin: "Kinyarwanda"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0631\u0648\u0627\u0646\u062F\u0627",
                common: "\u0631\u0648\u0627\u0646\u062F\u0627"
            },
            bre: {
                official: "Republik Rwanda",
                common: "Rwanda"
            },
            ces: {
                official: "Rwandsk\xe1 republika",
                common: "Rwanda"
            },
            cym: {
                official: "Republic of Rwanda",
                common: "Rwanda"
            },
            deu: {
                official: "Republik Ruanda",
                common: "Ruanda"
            },
            est: {
                official: "Rwanda Vabariik",
                common: "Rwanda"
            },
            fin: {
                official: "Ruandan tasavalta",
                common: "Ruanda"
            },
            fra: {
                official: "R\xe9publique rwandaise",
                common: "Rwanda"
            },
            hrv: {
                official: "Republika Ruandi",
                common: "Ruanda"
            },
            hun: {
                official: "Ruandai K\xf6zt\xe1rsas\xe1g",
                common: "Ruanda"
            },
            ita: {
                official: "Repubblica del Ruanda",
                common: "Ruanda"
            },
            jpn: {
                official: "\u30EB\u30EF\u30F3\u30C0\u5171\u548C\u56FD",
                common: "\u30EB\u30EF\u30F3\u30C0"
            },
            kor: {
                official: "\uB974\uC644\uB2E4 \uACF5\uD654\uAD6D",
                common: "\uB974\uC644\uB2E4"
            },
            nld: {
                official: "Republiek Rwanda",
                common: "Rwanda"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0631\u0648\u0627\u0646\u062F\u0627",
                common: "\u0631\u0648\u0627\u0646\u062F\u0627"
            },
            pol: {
                official: "Republika Rwandy",
                common: "Rwanda"
            },
            por: {
                official: "Rep\xfablica do Ruanda",
                common: "Ruanda"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0420\u0443\u0430\u043D\u0434\u0430",
                common: "\u0420\u0443\u0430\u043D\u0434\u0430"
            },
            slk: {
                official: "Rwandsk\xe1 republika",
                common: "Rwanda"
            },
            spa: {
                official: "Rep\xfablica de Rwanda",
                common: "Ruanda"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0420\u0443\u0430\u043D\u0434\u0430",
                common: "\u0420\u0443\u0430\u043D\u0434\u0430"
            },
            swe: {
                official: "Republiken Rwanda",
                common: "Rwanda"
            },
            tur: {
                official: "Ruanda Cumhuriyeti",
                common: "Ruanda"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0631\u0648\u0627\u0646\u0688\u0627",
                common: "\u0631\u0648\u0627\u0646\u0688\u0627"
            },
            zho: {
                official: "\u5362\u65FA\u8FBE\u5171\u548C\u56FD",
                common: "\u5362\u65FA\u8FBE"
            }
        },
        latlng: [
            -2,
            30
        ],
        landlocked: true,
        borders: [
            "BDI",
            "COD",
            "TZA",
            "UGA"
        ],
        area: 26338,
        demonyms: {
            eng: {
                f: "Rwandan",
                m: "Rwandan"
            },
            fra: {
                f: "Rwandaise",
                m: "Rwandais"
            }
        },
        flag: "\uD83C\uDDF7\uD83C\uDDFC",
        maps: {
            googleMaps: "https://goo.gl/maps/j5xb5r7CLqjYbyP86",
            openStreetMaps: "https://www.openstreetmap.org/relation/171496"
        },
        population: 12952209,
        gini: {
            2016: 43.7
        },
        fifa: "RWA",
        car: {
            signs: [
                "RWA"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/rw.png",
            svg: "https://flagcdn.com/rw.svg",
            alt: "The flag of Rwanda is composed of three horizontal bands of light blue, yellow and green. The light blue band is twice the height of the other two bands and bears a yellow sun with twenty-four rays on its fly side."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/rw.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/rw.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -1.95,
                30.05
            ]
        }
    },
    {
        name: {
            common: "Estonia",
            official: "Republic of Estonia",
            nativeName: {
                est: {
                    official: "Eesti Vabariik",
                    common: "Eesti"
                }
            }
        },
        tld: [
            ".ee"
        ],
        cca2: "EE",
        ccn3: "233",
        cca3: "EST",
        cioc: "EST",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "72"
            ]
        },
        capital: [
            "Tallinn"
        ],
        altSpellings: [
            "EE",
            "Eesti",
            "Republic of Estonia",
            "Eesti Vabariik"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            est: "Estonian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0625\u0633\u062A\u0648\u0646\u064A\u0627",
                common: "\u0625\u0633\u062A\u0648\u0646\u064A\u0627"
            },
            bre: {
                official: "Republik Estonia",
                common: "Estonia"
            },
            ces: {
                official: "Estonsk\xe1 republika",
                common: "Estonsko"
            },
            cym: {
                official: "Gweriniaeth Estonia",
                common: "Estonia"
            },
            deu: {
                official: "Republik Estland",
                common: "Estland"
            },
            est: {
                official: "Eesti Vabariik",
                common: "Eesti"
            },
            fin: {
                official: "Viron tasavalta",
                common: "Viro"
            },
            fra: {
                official: "R\xe9publique d'Estonie",
                common: "Estonie"
            },
            hrv: {
                official: "Republika Estonija",
                common: "Estonija"
            },
            hun: {
                official: "\xc9szt K\xf6zt\xe1rsas\xe1g",
                common: "\xc9sztorsz\xe1g"
            },
            ita: {
                official: "Repubblica di Estonia",
                common: "Estonia"
            },
            jpn: {
                official: "\u30A8\u30B9\u30C8\u30CB\u30A2\u5171\u548C\u56FD",
                common: "\u30A8\u30B9\u30C8\u30CB\u30A2"
            },
            kor: {
                official: "\uC5D0\uC2A4\uD1A0\uB2C8\uC544 \uACF5\uD654\uAD6D",
                common: "\uC5D0\uC2A4\uD1A0\uB2C8\uC544"
            },
            nld: {
                official: "Republiek Estland",
                common: "Estland"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u062A\u0648\u0646\u06CC",
                common: "\u0627\u0650\u0633\u062A\u0648\u0646\u06CC"
            },
            pol: {
                official: "Republika Esto\u0144ska",
                common: "Estonia"
            },
            por: {
                official: "Rep\xfablica da Est\xf3nia",
                common: "Est\xf3nia"
            },
            rus: {
                official: "\u042D\u0441\u0442\u043E\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u042D\u0441\u0442\u043E\u043D\u0438\u044F"
            },
            slk: {
                official: "Est\xf3nska republika",
                common: "Est\xf3nsko"
            },
            spa: {
                official: "Rep\xfablica de Estonia",
                common: "Estonia"
            },
            srp: {
                official: "\u0415\u0441\u0442\u043E\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0415\u0441\u0442\u043E\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Estland",
                common: "Estland"
            },
            tur: {
                official: "Estonya Cumhuriyeti",
                common: "Estonya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0633\u0679\u0648\u0646\u06CC\u0627",
                common: "\u0627\u0633\u0679\u0648\u0646\u06CC\u0627"
            },
            zho: {
                official: "\u7231\u6C99\u5C3C\u4E9A\u5171\u548C\u56FD",
                common: "\u7231\u6C99\u5C3C\u4E9A"
            }
        },
        latlng: [
            59,
            26
        ],
        landlocked: false,
        borders: [
            "LVA",
            "RUS"
        ],
        area: 45227,
        demonyms: {
            eng: {
                f: "Estonian",
                m: "Estonian"
            },
            fra: {
                f: "Estonienne",
                m: "Estonien"
            }
        },
        flag: "\uD83C\uDDEA\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/6SsynwGUodL1sDvq8",
            openStreetMaps: "https://www.openstreetmap.org/relation/79510"
        },
        population: 1331057,
        gini: {
            2018: 30.3
        },
        fifa: "EST",
        car: {
            signs: [
                "EST"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ee.png",
            svg: "https://flagcdn.com/ee.svg",
            alt: "The flag of Estonia is composed of three equal horizontal bands of blue, black and white."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ee.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ee.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                59.43,
                24.72
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Romania",
            official: "Romania",
            nativeName: {
                ron: {
                    official: "Rom\xe2nia",
                    common: "Rom\xe2nia"
                }
            }
        },
        tld: [
            ".ro"
        ],
        cca2: "RO",
        ccn3: "642",
        cca3: "ROU",
        cioc: "ROU",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            RON: {
                name: "Romanian leu",
                symbol: "lei"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "0"
            ]
        },
        capital: [
            "Bucharest"
        ],
        altSpellings: [
            "RO",
            "Rumania",
            "Roumania",
            "Rom\xe2nia"
        ],
        region: "Europe",
        subregion: "Southeast Europe",
        languages: {
            ron: "Romanian"
        },
        translations: {
            ara: {
                official: "\u0631\u0648\u0645\u0627\u0646\u064A\u0627",
                common: "\u0631\u0648\u0645\u0627\u0646\u064A\u0627"
            },
            bre: {
                official: "Roumania",
                common: "Roumania"
            },
            ces: {
                official: "Rumunsko",
                common: "Rumunsko"
            },
            cym: {
                official: "Romania",
                common: "Romania"
            },
            deu: {
                official: "Rum\xe4nien",
                common: "Rum\xe4nien"
            },
            est: {
                official: "Rumeenia",
                common: "Rumeenia"
            },
            fin: {
                official: "Romania",
                common: "Romania"
            },
            fra: {
                official: "Roumanie",
                common: "Roumanie"
            },
            hrv: {
                official: "Rumunija",
                common: "Rumunjska"
            },
            hun: {
                official: "Rom\xe1nia",
                common: "Rom\xe1nia"
            },
            ita: {
                official: "Romania",
                common: "Romania"
            },
            jpn: {
                official: "\u30EB\u30FC\u30DE\u30CB\u30A2",
                common: "\u30EB\u30FC\u30DE\u30CB\u30A2"
            },
            kor: {
                official: "\uB8E8\uB9C8\uB2C8\uC544",
                common: "\uB8E8\uB9C8\uB2C8\uC544"
            },
            nld: {
                official: "Roemeni\xeb",
                common: "Roemeni\xeb"
            },
            per: {
                official: "\u0631\u0648\u0645\u0627\u0646\u06CC",
                common: "\u0631\u0648\u0645\u0627\u0646\u06CC"
            },
            pol: {
                official: "Rumunia",
                common: "Rumunia"
            },
            por: {
                official: "Rom\xeania",
                common: "Rom\xe9nia"
            },
            rus: {
                official: "\u0420\u0443\u043C\u044B\u043D\u0438\u044F",
                common: "\u0420\u0443\u043C\u044B\u043D\u0438\u044F"
            },
            slk: {
                official: "Rumunsko",
                common: "Rumunsko"
            },
            spa: {
                official: "Rumania",
                common: "Rumania"
            },
            srp: {
                official: "\u0420\u0443\u043C\u0443\u043D\u0438\u0458\u0430",
                common: "\u0420\u0443\u043C\u0443\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Rum\xe4nien",
                common: "Rum\xe4nien"
            },
            tur: {
                official: "Romanya",
                common: "Romanya"
            },
            urd: {
                official: "\u0631\u0648\u0645\u0627\u0646\u06CC\u06C1",
                common: "\u0631\u0648\u0645\u0627\u0646\u06CC\u06C1"
            },
            zho: {
                official: "\u7F57\u9A6C\u5C3C\u4E9A",
                common: "\u7F57\u9A6C\u5C3C\u4E9A"
            }
        },
        latlng: [
            46,
            25
        ],
        landlocked: false,
        borders: [
            "BGR",
            "HUN",
            "MDA",
            "SRB",
            "UKR"
        ],
        area: 238391,
        demonyms: {
            eng: {
                f: "Romanian",
                m: "Romanian"
            },
            fra: {
                f: "Roumaine",
                m: "Roumain"
            }
        },
        flag: "\uD83C\uDDF7\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/845hAgCf1mDkN3vr7",
            openStreetMaps: "https://www.openstreetmap.org/relation/90689"
        },
        population: 19286123,
        gini: {
            2018: 35.8
        },
        fifa: "ROU",
        car: {
            signs: [
                "RO"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ro.png",
            svg: "https://flagcdn.com/ro.svg",
            alt: "The flag of Romania is composed of three equal vertical bands of navy blue, yellow and red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ro.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ro.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                44.43,
                26.1
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Trinidad and Tobago",
            official: "Republic of Trinidad and Tobago",
            nativeName: {
                eng: {
                    official: "Republic of Trinidad and Tobago",
                    common: "Trinidad and Tobago"
                }
            }
        },
        tld: [
            ".tt"
        ],
        cca2: "TT",
        ccn3: "780",
        cca3: "TTO",
        cioc: "TTO",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            TTD: {
                name: "Trinidad and Tobago dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "868"
            ]
        },
        capital: [
            "Port of Spain"
        ],
        altSpellings: [
            "TT",
            "Republic of Trinidad and Tobago"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0631\u064A\u0646\u064A\u062F\u0627\u062F \u0648\u062A\u0648\u0628\u0627\u063A\u0648",
                common: "\u062A\u0631\u064A\u0646\u064A\u062F\u0627\u062F \u0648\u062A\u0648\u0628\u0627\u063A\u0648"
            },
            bre: {
                official: "Republik Trinidad ha Tobago",
                common: "Trinidad ha Tobago"
            },
            ces: {
                official: "Republika Trinidad a Tobago",
                common: "Trinidad a Tobago"
            },
            cym: {
                official: "Republic of Trinidad and Tobago",
                common: "Trinidad and Tobago"
            },
            deu: {
                official: "Republik Trinidad und Tobago",
                common: "Trinidad und Tobago"
            },
            est: {
                official: "Trinidadi ja Tobago Vabariik",
                common: "Trinidad ja Tobago"
            },
            fin: {
                official: "Trinidadin ja Tobagon tasavalta",
                common: "Trinidad ja Tobago"
            },
            fra: {
                official: "R\xe9publique de Trinit\xe9-et-Tobago",
                common: "Trinit\xe9-et-Tobago"
            },
            hrv: {
                official: "Republika Trinidad i Tobago",
                common: "Trinidad i Tobago"
            },
            hun: {
                official: "Trinidad \xe9s Tobago K\xf6zt\xe1rsas\xe1g",
                common: "Trinidad \xe9s Tobago"
            },
            ita: {
                official: "Repubblica di Trinidad e Tobago",
                common: "Trinidad e Tobago"
            },
            jpn: {
                official: "\u30C8\u30EA\u30CB\u30C0\u30FC\u30C9\xb7\u30C8\u30D0\u30B4\u5171\u548C\u56FD",
                common: "\u30C8\u30EA\u30CB\u30C0\u30FC\u30C9\u30FB\u30C8\u30D0\u30B4"
            },
            kor: {
                official: "\uD2B8\uB9AC\uB2C8\uB2E4\uB4DC \uD1A0\uBC14\uACE0 \uACF5\uD654\uAD6D",
                common: "\uD2B8\uB9AC\uB2C8\uB2E4\uB4DC \uD1A0\uBC14\uACE0"
            },
            nld: {
                official: "Republiek Trinidad en Tobago",
                common: "Trinidad en Tobago"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0631\u06CC\u0646\u06CC\u062F\u0627\u062F \u0648 \u062A\u0648\u0628\u0627\u06AF\u0648",
                common: "\u062A\u0631\u06CC\u0646\u06CC\u062F\u0627\u062F \u0648 \u062A\u0648\u0628\u0627\u06AF\u0648"
            },
            pol: {
                official: "Trynidad i Tobago",
                common: "Trynidad i Tobago"
            },
            por: {
                official: "Rep\xfablica de Trinidad e Tobago",
                common: "Trinidade e Tobago"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0440\u0438\u043D\u0438\u0434\u0430\u0434 \u0438 \u0422\u043E\u0431\u0430\u0433\u043E",
                common: "\u0422\u0440\u0438\u043D\u0438\u0434\u0430\u0434 \u0438 \u0422\u043E\u0431\u0430\u0433\u043E"
            },
            slk: {
                official: "Republika Trinidad a Tobaga",
                common: "Trinidad a Tobago"
            },
            spa: {
                official: "Rep\xfablica de Trinidad y Tobago",
                common: "Trinidad y Tobago"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0440\u0438\u043D\u0438\u0434\u0430\u0434 \u0438 \u0422\u043E\u0431\u0430\u0433\u043E",
                common: "\u0422\u0440\u0438\u043D\u0438\u0434\u0430\u0434 \u0438 \u0422\u043E\u0431\u0430\u0433\u043E"
            },
            swe: {
                official: "Republiken Trinidad och Tobago",
                common: "Trinidad och Tobago"
            },
            tur: {
                official: "Trinidad ve Tobago",
                common: "Trinidad ve Tobago"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0679\u0631\u06CC\u0646\u06CC\u0688\u0627\u0688 \u0648 \u0679\u0648\u0628\u0627\u06AF\u0648",
                common: "\u0679\u0631\u06CC\u0646\u06CC\u0688\u0627\u0688 \u0648 \u0679\u0648\u0628\u0627\u06AF\u0648"
            },
            zho: {
                official: "\u7279\u7ACB\u5C3C\u8FBE\u548C\u591A\u5DF4\u54E5\u5171\u548C\u56FD",
                common: "\u7279\u7ACB\u5C3C\u8FBE\u548C\u591A\u5DF4\u54E5"
            }
        },
        latlng: [
            10.6918,
            -61.2225
        ],
        landlocked: false,
        area: 5130,
        demonyms: {
            eng: {
                f: "Trinidadian",
                m: "Trinidadian"
            },
            fra: {
                f: "Trinidadienne",
                m: "Trinidadien"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/NrRfDEWoG8FGZqWY7",
            openStreetMaps: "https://www.openstreetmap.org/relation/555717"
        },
        population: 1399491,
        gini: {
            1992: 40.3
        },
        fifa: "TRI",
        car: {
            signs: [
                "TT"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tt.png",
            svg: "https://flagcdn.com/tt.svg",
            alt: "The flag of Trinidad and Tobago has a red field with a white-edged black diagonal band that extends from the upper hoist-side corner to the lower fly-side corner of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/tt.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/tt.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                10.65,
                -61.52
            ]
        }
    },
    {
        name: {
            common: "Guyana",
            official: "Co-operative Republic of Guyana",
            nativeName: {
                eng: {
                    official: "Co-operative Republic of Guyana",
                    common: "Guyana"
                }
            }
        },
        tld: [
            ".gy"
        ],
        cca2: "GY",
        ccn3: "328",
        cca3: "GUY",
        cioc: "GUY",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            GYD: {
                name: "Guyanese dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "92"
            ]
        },
        capital: [
            "Georgetown"
        ],
        altSpellings: [
            "GY",
            "Co-operative Republic of Guyana"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u064A\u0627\u0646\u0627 \u0627\u0644\u062A\u0639\u0627\u0648\u0646\u064A\u0629",
                common: "\u063A\u064A\u0627\u0646\u0627"
            },
            bre: {
                official: "Republik Kevelourel Gwiana",
                common: "Guyana"
            },
            ces: {
                official: "Kooperativn\xed republika Guyana",
                common: "Guyana"
            },
            cym: {
                official: "Co-operative Republic of Guyana",
                common: "Guyana"
            },
            deu: {
                official: "Kooperative Republik Guyana",
                common: "Guyana"
            },
            est: {
                official: "Guyana Vabariik",
                common: "Guyana"
            },
            fin: {
                official: "Guayanan osuustoiminnallinen tasavalta",
                common: "Guayana"
            },
            fra: {
                official: "R\xe9publique coop\xe9rative de Guyana",
                common: "Guyana"
            },
            hrv: {
                official: "Zadruga Republika Gvajana",
                common: "Gvajana"
            },
            hun: {
                official: "Guyanai Sz\xf6vetkezeti K\xf6zt\xe1rsas\xe1g",
                common: "Guyana"
            },
            ita: {
                official: "Co -operative Republic of Guyana",
                common: "Guyana"
            },
            jpn: {
                official: "\u30AC\u30A4\u30A2\u30CA\u306E\u5354\u540C\u5171\u548C\u56FD",
                common: "\u30AC\u30A4\u30A2\u30CA"
            },
            kor: {
                official: "\uAC00\uC774\uC544\uB098 \uD611\uB3D9 \uACF5\uD654\uAD6D",
                common: "\uAC00\uC774\uC544\uB098"
            },
            nld: {
                official: "Co\xf6peratieve Republiek Guyana",
                common: "Guyana"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0639\u0627\u0648\u0646\u06CC \u06AF\u0648\u06CC\u0627\u0646",
                common: "\u06AF\u0648\u06CC\u0627\u0646"
            },
            pol: {
                official: "Kooperacyjna Republika Gujany",
                common: "Gujana"
            },
            por: {
                official: "Co -operative Rep\xfablica da Guiana",
                common: "Guiana"
            },
            rus: {
                official: "\u041A\u043E\u043E\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u0439\u0430\u043D\u0430",
                common: "\u0413\u0430\u0439\u0430\u043D\u0430"
            },
            slk: {
                official: "Guyansk\xe1 kooperat\xedvna republika",
                common: "Guyana"
            },
            spa: {
                official: "Rep\xfablica Cooperativa de Guyana",
                common: "Guyana"
            },
            srp: {
                official: "\u041A\u043E\u043E\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0430\u0458\u0430\u043D\u0430",
                common: "\u0413\u0432\u0430\u0458\u0430\u043D\u0430"
            },
            swe: {
                official: "Kooperativa republiken Guyana",
                common: "Guyana"
            },
            tur: {
                official: "Guyana Kooperatif Cumhuriyeti",
                common: "Guyana"
            },
            urd: {
                official: "\u062A\u0639\u0627\u0648\u0646\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u06CC\u0627\u0646\u0627",
                common: "\u06AF\u06CC\u0627\u0646\u0627"
            },
            zho: {
                official: "\u572D\u4E9A\u90A3\u5171\u548C\u56FD",
                common: "\u572D\u4E9A\u90A3"
            }
        },
        latlng: [
            5,
            -59
        ],
        landlocked: false,
        borders: [
            "BRA",
            "SUR",
            "VEN"
        ],
        area: 214969,
        demonyms: {
            eng: {
                f: "Guyanese",
                m: "Guyanese"
            },
            fra: {
                f: "Guyanienne",
                m: "Guyanien"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDFE",
        maps: {
            googleMaps: "https://goo.gl/maps/DFsme2xEeugUAsCx5",
            openStreetMaps: "https://www.openstreetmap.org/relation/287083"
        },
        population: 786559,
        gini: {
            1998: 45.1
        },
        fifa: "GUY",
        car: {
            signs: [
                "GUY"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gy.png",
            svg: "https://flagcdn.com/gy.svg",
            alt: "The flag of Guyana has a green field with two isosceles triangles which share a common base on the hoist end. The smaller black-edged red triangle spanning half the width of the field is superimposed on the larger white-edged yellow triangle which spans the full width of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gy.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gy.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                6.8,
                -58.15
            ]
        }
    },
    {
        name: {
            common: "Timor-Leste",
            official: "Democratic Republic of Timor-Leste",
            nativeName: {
                por: {
                    official: "Rep\xfablica Democr\xe1tica de Timor-Leste",
                    common: "Timor-Leste"
                },
                tet: {
                    official: "Rep\xfablika Demokr\xe1tika Tim\xf3r-Leste",
                    common: "Tim\xf3r-Leste"
                }
            }
        },
        tld: [
            ".tl"
        ],
        cca2: "TL",
        ccn3: "626",
        cca3: "TLS",
        cioc: "TLS",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "70"
            ]
        },
        capital: [
            "Dili"
        ],
        altSpellings: [
            "TL",
            "East Timor",
            "Democratic Republic of Timor-Leste",
            "Rep\xfablica Democr\xe1tica de Timor-Leste",
            "Rep\xfablika Demokr\xe1tika Tim\xf3r-Leste",
            "Tim\xf3r Lorosa'e",
            "Timor Lorosae"
        ],
        region: "Asia",
        subregion: "South-Eastern Asia",
        languages: {
            por: "Portuguese",
            tet: "Tetum"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u064A\u0645\u0648\u0631 \u0627\u0644\u0634\u0631\u0642\u064A\u0629 \u0627\u0644\u062F\u064A\u0645\u0642\u0631\u0627\u0637\u064A\u0629",
                common: "\u062A\u064A\u0645\u0648\u0631 \u0627\u0644\u0634\u0631\u0642\u064A\u0629"
            },
            bre: {
                official: "Republik demakratel Timor ar Reter",
                common: "Timor ar Reter"
            },
            ces: {
                official: "Demokratick\xe1 republika V\xfdchodn\xed Timor",
                common: "V\xfdchodn\xed Timor"
            },
            cym: {
                official: "Democratic Republic of Timor-Leste",
                common: "Timor-Leste"
            },
            deu: {
                official: "Demokratische Republik Timor-Leste",
                common: "Osttimor"
            },
            est: {
                official: "Timor-Leste Demokraatlik Vabariik",
                common: "Ida-Timor"
            },
            fin: {
                official: "It\xe4-Timorin demokraattinen tasavalta",
                common: "It\xe4-Timor"
            },
            fra: {
                official: "R\xe9publique d\xe9mocratique du Timor oriental",
                common: "Timor oriental"
            },
            hrv: {
                official: "Demokratska Republika Timor-Leste",
                common: "Isto\u010Dni Timor"
            },
            hun: {
                official: "Kelet-timori Demokratikus K\xf6zt\xe1rsas\xe1g",
                common: "Kelet-Timor"
            },
            ita: {
                official: "Repubblica Democratica di Timor Est",
                common: "Timor Est"
            },
            jpn: {
                official: "\u6771\u30C6\u30A3\u30E2\u30FC\u30EB\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u6771\u30C6\u30A3\u30E2\u30FC\u30EB"
            },
            kor: {
                official: "\uB3D9\uD2F0\uBAA8\uB974 \uBBFC\uC8FC \uACF5\uD654\uAD6D",
                common: "\uB3D9\uD2F0\uBAA8\uB974"
            },
            nld: {
                official: "Democratische Republiek Oost-Timor",
                common: "Oost-Timor"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062F\u0645\u0648\u06A9\u0631\u0627\u062A\u06CC\u06A9 \u062A\u06CC\u0645\u0648\u0631 \u0634\u0631\u0642\u06CC",
                common: "\u062A\u06CC\u0645\u0648\u0631 \u0634\u0631\u0642\u06CC"
            },
            pol: {
                official: "Demokratyczna Republika Timoru Wschodniego",
                common: "Timor Wschodni"
            },
            por: {
                official: "Rep\xfablica Democr\xe1tica de Timor-Leste",
                common: "Timor-Leste"
            },
            rus: {
                official: "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0438\u043C\u043E\u0440 -\u041B\u0435\u0448\u0442\u0438",
                common: "\u0412\u043E\u0441\u0442\u043E\u0447\u043D\u044B\u0439 \u0422\u0438\u043C\u043E\u0440"
            },
            slk: {
                official: "V\xfdchodotimorsk\xe1 demokratick\xe1 republika",
                common: "V\xfdchodn\xfd Timor"
            },
            spa: {
                official: "Rep\xfablica Democr\xe1tica de Timor-Leste",
                common: "Timor Oriental"
            },
            srp: {
                official: "\u0414\u0435\u043C\u043E\u043A\u0440\u0430\u0442\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0441\u0442\u043E\u0447\u043D\u0438 \u0422\u0438\u043C\u043E\u0440",
                common: "\u0418\u0441\u0442\u043E\u0447\u043D\u0438 \u0422\u0438\u043C\u043E\u0440"
            },
            swe: {
                official: "Demokratiska republiken \xd6sttimor",
                common: "\xd6sttimor"
            },
            tur: {
                official: "Do\u011Fu Timor Demokratik Cumhuriyeti",
                common: "Do\u011Fu Timor"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0634\u0631\u0642\u06CC \u062A\u06CC\u0645\u0648\u0631",
                common: "\u0645\u0634\u0631\u0642\u06CC \u062A\u06CC\u0645\u0648\u0631"
            },
            zho: {
                official: "\u4E1C\u5E1D\u6C76\u6C11\u4E3B\u5171\u548C\u56FD",
                common: "\u4E1C\u5E1D\u6C76"
            }
        },
        latlng: [
            -8.83333333,
            125.91666666
        ],
        landlocked: false,
        borders: [
            "IDN"
        ],
        area: 14874,
        demonyms: {
            eng: {
                f: "East Timorese",
                m: "East Timorese"
            },
            fra: {
                f: "Est-timoraise",
                m: "Est-timorais"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDF1",
        maps: {
            googleMaps: "https://goo.gl/maps/sFqBC9zjgUXPR1iTA",
            openStreetMaps: "https://www.openstreetmap.org/relation/305142"
        },
        population: 1318442,
        gini: {
            2014: 28.7
        },
        fifa: "TLS",
        car: {
            signs: [
                "TL"
            ],
            side: "left"
        },
        timezones: [
            "UTC+09:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tl.png",
            svg: "https://flagcdn.com/tl.svg",
            alt: "The flag of Timor-Leste has a red field with two isosceles triangles which share a common base on the hoist end. The smaller black triangle, which bears a five-pointed white star at its center and spans one-third the width of the field, is superimposed on the larger yellow triangle that extends to the center of the field."
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -8.58,
                125.6
            ]
        }
    },
    {
        name: {
            common: "Vietnam",
            official: "Socialist Republic of Vietnam",
            nativeName: {
                vie: {
                    official: "C\u1ED9ng h\xf2a x\xe3 h\u1ED9i ch\u1EE7 ngh\u0129a Vi\u1EC7t Nam",
                    common: "Vi\u1EC7t Nam"
                }
            }
        },
        tld: [
            ".vn"
        ],
        cca2: "VN",
        ccn3: "704",
        cca3: "VNM",
        cioc: "VIE",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            VND: {
                name: "Vietnamese \u0111\u1ED3ng",
                symbol: "\u20AB"
            }
        },
        idd: {
            root: "+8",
            suffixes: [
                "4"
            ]
        },
        capital: [
            "Hanoi"
        ],
        altSpellings: [
            "VN",
            "Socialist Republic of Vietnam",
            "C\u1ED9ng h\xf2a X\xe3 h\u1ED9i ch\u1EE7 ngh\u0129a Vi\u1EC7t Nam",
            "Viet Nam"
        ],
        region: "Asia",
        subregion: "South-Eastern Asia",
        languages: {
            vie: "Vietnamese"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0641\u064A\u062A\u0646\u0627\u0645 \u0627\u0644\u0627\u0634\u062A\u0631\u0627\u0643\u064A\u0629",
                common: "\u0641\u064A\u062A\u0646\u0627\u0645"
            },
            bre: {
                official: "Republik Sokialour Vi\xeat Nam",
                common: "Vi\xeat Nam"
            },
            ces: {
                official: "Vietnamsk\xe1 socialistick\xe1 republika",
                common: "Vietnam"
            },
            cym: {
                official: "Socialist Republic of Vietnam",
                common: "Vietnam"
            },
            deu: {
                official: "Sozialistische Republik Vietnam",
                common: "Vietnam"
            },
            est: {
                official: "Vietnami Sotsialistlik Vabariik",
                common: "Vietnam"
            },
            fin: {
                official: "Vietnamin sosialistinen tasavalta",
                common: "Vietnam"
            },
            fra: {
                official: "R\xe9publique socialiste du Vi\xeat Nam",
                common: "Vi\xeat Nam"
            },
            hrv: {
                official: "Socijalisti\u010Dka Republika Vijetnam",
                common: "Vijetnam"
            },
            hun: {
                official: "Vietn\xe1mi Szocialista K\xf6zt\xe1rsas\xe1g",
                common: "Vietn\xe1m"
            },
            ita: {
                official: "Repubblica socialista del Vietnam",
                common: "Vietnam"
            },
            jpn: {
                official: "\u30D9\u30C8\u30CA\u30E0\u793E\u4F1A\u4E3B\u7FA9\u5171\u548C\u56FD",
                common: "\u30D9\u30C8\u30CA\u30E0"
            },
            kor: {
                official: "\uBCA0\uD2B8\uB0A8 \uC0AC\uD68C\uC8FC\uC758 \uACF5\uD654\uAD6D",
                common: "\uBCA0\uD2B8\uB0A8"
            },
            nld: {
                official: "Socialistische Republiek Vietnam",
                common: "Vietnam"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0648\u0633\u06CC\u0627\u0644\u06CC\u0633\u062A\u06CC \u0648\u06CC\u062A\u0646\u0627\u0645",
                common: "\u0648\u06CC\u062A\u0646\u0627\u0645"
            },
            pol: {
                official: "Socjalistyczna Republika Wietnamu",
                common: "Wietnam"
            },
            por: {
                official: "Rep\xfablica Socialista do Vietname",
                common: "Vietname"
            },
            rus: {
                official: "\u0421\u043E\u0446\u0438\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u044C\u0435\u0442\u043D\u0430\u043C",
                common: "\u0412\u044C\u0435\u0442\u043D\u0430\u043C"
            },
            slk: {
                official: "Vietnamsk\xe1 socialistick\xe1 republika",
                common: "Vietnam"
            },
            spa: {
                official: "Rep\xfablica Socialista de Vietnam",
                common: "Vietnam"
            },
            srp: {
                official: "\u0421\u043E\u0446\u0438\u0458\u0430\u043B\u0438\u0441\u0442\u0438\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u0438\u0458\u0435\u0442\u043D\u0430\u043C",
                common: "\u0412\u0438\u0458\u0435\u0442\u043D\u0430\u043C"
            },
            swe: {
                official: "Socialistiska republiken Vietnam",
                common: "Vietnam"
            },
            tur: {
                official: "Vietnam Sosyalist Cumhuriyeti",
                common: "Vietnam"
            },
            urd: {
                official: "\u0627\u0634\u062A\u0631\u0627\u06A9\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0648\u06CC\u062A\u0646\u0627\u0645",
                common: "\u0648\u06CC\u062A\u0646\u0627\u0645"
            },
            zho: {
                official: "\u8D8A\u5357\u793E\u4F1A\u4E3B\u4E49\u5171\u548C\u56FD",
                common: "\u8D8A\u5357"
            }
        },
        latlng: [
            16.16666666,
            107.83333333
        ],
        landlocked: false,
        borders: [
            "KHM",
            "CHN",
            "LAO"
        ],
        area: 331212,
        demonyms: {
            eng: {
                f: "Vietnamese",
                m: "Vietnamese"
            },
            fra: {
                f: "Vietnamienne",
                m: "Vietnamien"
            }
        },
        flag: "\uD83C\uDDFB\uD83C\uDDF3",
        maps: {
            googleMaps: "https://goo.gl/maps/PCpVt9WzdJ9A9nEZ9",
            openStreetMaps: "https://www.openstreetmap.org/relation/49915"
        },
        population: 97338583,
        gini: {
            2018: 35.7
        },
        fifa: "VIE",
        car: {
            signs: [
                "VN"
            ],
            side: "right"
        },
        timezones: [
            "UTC+07:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/vn.png",
            svg: "https://flagcdn.com/vn.svg",
            alt: "The flag of Vietnam features a large five-pointed yellow star on a red field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/vn.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/vn.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                21.03,
                105.85
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Uruguay",
            official: "Oriental Republic of Uruguay",
            nativeName: {
                spa: {
                    official: "Rep\xfablica Oriental del Uruguay",
                    common: "Uruguay"
                }
            }
        },
        tld: [
            ".uy"
        ],
        cca2: "UY",
        ccn3: "858",
        cca3: "URY",
        cioc: "URU",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            UYU: {
                name: "Uruguayan peso",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "98"
            ]
        },
        capital: [
            "Montevideo"
        ],
        altSpellings: [
            "UY",
            "Oriental Republic of Uruguay",
            "Rep\xfablica Oriental del Uruguay"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0623\u0648\u0631\u0648\u063A\u0648\u0627\u064A \u0627\u0644\u0634\u0631\u0642\u064A\u0629",
                common: "\u0627\u0644\u0623\u0648\u0631\u0648\u063A\u0648\u0627\u064A"
            },
            bre: {
                official: "Republik Reter Uruguay",
                common: "Uruguay"
            },
            ces: {
                official: "Uruguaysk\xe1 v\xfdchodn\xed republika",
                common: "Uruguay"
            },
            cym: {
                official: "Oriental Republic of Uruguay",
                common: "Uruguay"
            },
            deu: {
                official: "Republik \xd6stlich des Uruguay",
                common: "Uruguay"
            },
            est: {
                official: "Uruguay Idavabariik",
                common: "Uruguay"
            },
            fin: {
                official: "Uruguayn it\xe4inen tasavalta",
                common: "Uruguay"
            },
            fra: {
                official: "R\xe9publique orientale de l'Uruguay",
                common: "Uruguay"
            },
            hrv: {
                official: "Orijentalna Republika Urugvaj",
                common: "Urugvaj"
            },
            hun: {
                official: "Uruguayi Keleti K\xf6zt\xe1rsas\xe1g",
                common: "Uruguay"
            },
            ita: {
                official: "Repubblica Orientale dell'Uruguay",
                common: "Uruguay"
            },
            jpn: {
                official: "\u30A6\u30EB\u30B0\u30A2\u30A4\u6771\u65B9\u5171\u548C\u56FD",
                common: "\u30A6\u30EB\u30B0\u30A2\u30A4"
            },
            kor: {
                official: "\uC6B0\uB8E8\uACFC\uC774 \uB3D9\uBC29 \uACF5\uD654\uAD6D",
                common: "\uC6B0\uB8E8\uACFC\uC774"
            },
            nld: {
                official: "Oosterse Republiek Uruguay",
                common: "Uruguay"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0631\u0648\u06AF\u0648\u0626\u0647",
                common: "\u0627\u0631\u0648\u06AF\u0648\u0626\u0647"
            },
            pol: {
                official: "Wschodnia Republika Urugwaju",
                common: "Urugwaj"
            },
            por: {
                official: "Rep\xfablica Oriental do Uruguai",
                common: "Uruguai"
            },
            rus: {
                official: "\u0412\u043E\u0441\u0442\u043E\u0447\u043D\u043E\u0439 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0438 \u0423\u0440\u0443\u0433\u0432\u0430\u0439",
                common: "\u0423\u0440\u0443\u0433\u0432\u0430\u0439"
            },
            slk: {
                official: "Uruguajsk\xe1 v\xfdchodn\xe1 republika",
                common: "Uruguaj"
            },
            spa: {
                official: "Rep\xfablica Oriental del Uruguay",
                common: "Uruguay"
            },
            srp: {
                official: "\u0418\u0441\u0442\u043E\u0447\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0423\u0440\u0443\u0433\u0432\u0430\u0458",
                common: "\u0423\u0440\u0443\u0433\u0432\u0430\u0458"
            },
            swe: {
                official: "Republiken Uruguay",
                common: "Uruguay"
            },
            tur: {
                official: "Uruguay Do\u011Fu Cumhuriyeti",
                common: "Uruguay"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0634\u0631\u0642\u06CC\u06C1 \u06CC\u0648\u0631\u0627\u06AF\u0648\u0626\u06D2",
                common: "\u06CC\u0648\u0631\u0627\u06AF\u0648\u0626\u06D2"
            },
            zho: {
                official: "\u4E4C\u62C9\u572D\u4E1C\u5CB8\u5171\u548C\u56FD",
                common: "\u4E4C\u62C9\u572D"
            }
        },
        latlng: [
            -33,
            -56
        ],
        landlocked: false,
        borders: [
            "ARG",
            "BRA"
        ],
        area: 181034,
        demonyms: {
            eng: {
                f: "Uruguayan",
                m: "Uruguayan"
            },
            fra: {
                f: "Uruguayenne",
                m: "Uruguayen"
            }
        },
        flag: "\uD83C\uDDFA\uD83C\uDDFE",
        maps: {
            googleMaps: "https://goo.gl/maps/tiQ9Baekb1jQtDSD9",
            openStreetMaps: "https://www.openstreetmap.org/relation/287072"
        },
        population: 3473727,
        gini: {
            2019: 39.7
        },
        fifa: "URU",
        car: {
            signs: [
                "ROU"
            ],
            side: "right"
        },
        timezones: [
            "UTC-03:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/uy.png",
            svg: "https://flagcdn.com/uy.svg",
            alt: "The flag of Uruguay is composed of nine equal horizontal bands of white alternating with blue, with a white square superimposed in the canton. In the white square is a yellow sun bearing a human face \u2014 the Sun of May \u2014 from which sixteen rays extend. The sun's rays alternate between triangular and wavy."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/uy.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/uy.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -34.85,
                -56.17
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Vatican City",
            official: "Vatican City State",
            nativeName: {
                ita: {
                    official: "Stato della Citt\xe0 del Vaticano",
                    common: "Vaticano"
                },
                lat: {
                    official: "Status Civitatis Vatican\xe6",
                    common: "Vatican\xe6"
                }
            }
        },
        tld: [
            ".va"
        ],
        cca2: "VA",
        ccn3: "336",
        cca3: "VAT",
        independent: true,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "906698",
                "79"
            ]
        },
        capital: [
            "Vatican City"
        ],
        altSpellings: [
            "VA",
            "Holy See (Vatican City State)",
            "Vatican City State",
            "Stato della Citt\xe0 del Vaticano"
        ],
        region: "Europe",
        subregion: "Southern Europe",
        languages: {
            ita: "Italian",
            lat: "Latin"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0644\u0629 \u0645\u062F\u064A\u0646\u0629 \u0627\u0644\u0641\u0627\u062A\u064A\u0643\u0627\u0646",
                common: "\u0645\u062F\u064A\u0646\u0629 \u0627\u0644\u0641\u0627\u062A\u064A\u0643\u0627\u0646"
            },
            bre: {
                official: "Riez Keoded ar Vatikan",
                common: "Vatikan"
            },
            ces: {
                official: "M\u011Bstsk\xfd st\xe1t Vatik\xe1n",
                common: "Vatik\xe1n"
            },
            cym: {
                official: "Vatican City State",
                common: "Vatican City"
            },
            deu: {
                official: "Staat Vatikanstadt",
                common: "Vatikanstadt"
            },
            est: {
                official: "Vatikani Linnriik",
                common: "Vatikan"
            },
            fin: {
                official: "Vatikaanin kaupunkivaltio",
                common: "Vatikaani"
            },
            fra: {
                official: "Cit\xe9 du Vatican",
                common: "Cit\xe9 du Vatican"
            },
            hrv: {
                official: "Vatikan",
                common: "Vatikan"
            },
            hun: {
                official: "Vatik\xe1n \xc1llam",
                common: "Vatik\xe1n"
            },
            ita: {
                official: "Citt\xe0 del Vaticano",
                common: "Citt\xe0 del Vaticano"
            },
            jpn: {
                official: "\u30D0\u30C1\u30AB\u30F3\u5E02\u56FD\u306E\u72B6\u614B",
                common: "\u30D0\u30C1\u30AB\u30F3\u5E02\u56FD"
            },
            kor: {
                official: "\uBC14\uD2F0\uCE78 \uC2DC\uAD6D",
                common: "\uBC14\uD2F0\uCE78"
            },
            nld: {
                official: "Vaticaanstad",
                common: "Vaticaanstad"
            },
            per: {
                official: "\u062F\u0648\u0644\u062A\u200C\u0634\u0647\u0631 \u0648\u0627\u062A\u06CC\u06A9\u0627\u0646",
                common: "\u0648\u0627\u062A\u06CC\u06A9\u0627\u0646"
            },
            pol: {
                official: "Pa\u0144stwo Watyka\u0144skie",
                common: "Watykan"
            },
            por: {
                official: "Cidade do Vaticano",
                common: "Cidade do Vaticano"
            },
            rus: {
                official: "\u0413\u043E\u0440\u043E\u0434-\u0433\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u0412\u0430\u0442\u0438\u043A\u0430\u043D",
                common: "\u0412\u0430\u0442\u0438\u043A\u0430\u043D"
            },
            slk: {
                official: "Sv\xe4t\xe1 stolica (Vatik\xe1nsky mestsk\xfd \u0161t\xe1t",
                common: "Vatik\xe1n"
            },
            spa: {
                official: "Ciudad del Vaticano",
                common: "Ciudad del Vaticano"
            },
            srp: {
                official: "\u0413\u0440\u0430\u0434 \u0412\u0430\u0442\u0438\u043A\u0430\u043D",
                common: "\u0412\u0430\u0442\u0438\u043A\u0430\u043D"
            },
            swe: {
                official: "Vatikanstaten",
                common: "Vatikanstaten"
            },
            tur: {
                official: "Vatikan \u015Eehir Devleti",
                common: "Vatikan"
            },
            urd: {
                official: "\u0648\u06CC\u0679\u06CC\u06A9\u0646 \u0633\u0679\u06CC",
                common: "\u0648\u06CC\u0679\u06CC\u06A9\u0646 \u0633\u0679\u06CC"
            },
            zho: {
                official: "\u68B5\u8482\u5188\u57CE\u56FD",
                common: "\u68B5\u8482\u5188"
            }
        },
        latlng: [
            41.9,
            12.45
        ],
        landlocked: true,
        borders: [
            "ITA"
        ],
        area: 0.44,
        demonyms: {
            eng: {
                f: "Vatican",
                m: "Vatican"
            },
            fra: {
                f: "Vaticane",
                m: "Vatican"
            }
        },
        flag: "\uD83C\uDDFB\uD83C\uDDE6",
        maps: {
            googleMaps: "https://goo.gl/maps/DTKvw5Bd1QZaDZmE8",
            openStreetMaps: "https://www.openstreetmap.org/relation/36989"
        },
        population: 451,
        car: {
            signs: [
                "V"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/va.png",
            svg: "https://flagcdn.com/va.svg",
            alt: "The flag of Vatican City is square shaped. It is composed of two equal vertical bands of yellow and white, with national coat of arms centered in the white band. The national coat of arms comprises the Papal Tiara superimposed on two crossed keys."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/va.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/va.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                41.9,
                12.45
            ]
        }
    },
    {
        name: {
            common: "Hong Kong",
            official: "Hong Kong Special Administrative Region of the People's Republic of China",
            nativeName: {
                eng: {
                    official: "Hong Kong Special Administrative Region of the People's Republic of China",
                    common: "Hong Kong"
                },
                zho: {
                    official: "\u4E2D\u534E\u4EBA\u6C11\u5171\u548C\u56FD\u9999\u6E2F\u7279\u522B\u884C\u653F\u533A",
                    common: "\u9999\u6E2F"
                }
            }
        },
        tld: [
            ".hk",
            ".\u9999\u6E2F"
        ],
        cca2: "HK",
        ccn3: "344",
        cca3: "HKG",
        cioc: "HKG",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            HKD: {
                name: "Hong Kong dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+8",
            suffixes: [
                "52"
            ]
        },
        capital: [
            "City of Victoria"
        ],
        altSpellings: [
            "HK"
        ],
        region: "Asia",
        subregion: "Eastern Asia",
        languages: {
            eng: "English",
            zho: "Chinese"
        },
        translations: {
            ara: {
                official: "\u0645\u0646\u0637\u0642\u0629 \u0647\u0648\u0646\u063A \u0643\u0648\u0646\u063A \u0627\u0644\u0627\u062F\u0627\u0631\u064A\u0629 \u0627\u0644\u062A\u0627\u0628\u0639\u0629 \u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0635\u064A\u0646 \u0627\u0644\u0634\u0639\u0628\u064A\u0629",
                common: "\u0647\u0648\u0646\u063A \u0643\u0648\u0646\u063A"
            },
            bre: {
                official: "Rannvro velestradurel arbennik Hong Kong eus Republik pobl Sina",
                common: "Hong Kong"
            },
            ces: {
                official: "Zvl\xe1\u0161tn\xed administrativn\xed oblast \u010C\xednsk\xe9 lidov\xe9 republiky Hongkong",
                common: "Hongkong"
            },
            cym: {
                official: "Hong Kong Special Administrative Region of the People's Republic of China",
                common: "Hong Kong"
            },
            deu: {
                official: "Sonderverwaltungszone Hongkong der Volksrepublik China",
                common: "Hongkong"
            },
            est: {
                official: "Hongkongi erihalduspiirkond",
                common: "Hongkong"
            },
            fin: {
                official: "Hong Kongin erityishallintoalue",
                common: "Hongkong"
            },
            fra: {
                official: "R\xe9gion administrative sp\xe9ciale de Hong Kong de la R\xe9publique populaire de Chine",
                common: "Hong Kong"
            },
            hrv: {
                official: "Hong Kong Posebnog upravnog podru\u010DjaNarodne Republike Kine",
                common: "Hong Kong"
            },
            hun: {
                official: "Hongkong",
                common: "Hongkong"
            },
            ita: {
                official: "Hong Kong Regione amministrativa speciale della Repubblica Popolare Cinese",
                common: "Hong Kong"
            },
            jpn: {
                official: "\u4E2D\u83EF\u4EBA\u6C11\u5171\u548C\u56FD\u9999\u6E2F\u7279\u5225\u884C\u653F\u533A",
                common: "\u9999\u6E2F"
            },
            kor: {
                official: "\uC911\uD654\uC778\uBBFC\uACF5\uD654\uAD6D \uD64D\uCF69 \uD2B9\uBCC4\uD589\uC815\uAD6C",
                common: "\uD64D\uCF69"
            },
            nld: {
                official: "Hong Kong Speciale Administratieve Regio van de Volksrepubliek China",
                common: "Hongkong"
            },
            per: {
                official: "\u0647\u064F\u0646\u06AF \u06A9\u064F\u0646\u06AF",
                common: "\u0647\u064F\u0646\u06AF \u06A9\u064F\u0646\u06AF"
            },
            pol: {
                official: "Specjalny Region Administracyjny Chi\u0144skiej Republiki Ludowej Hongkong",
                common: "Hongkong"
            },
            por: {
                official: "Hong Kong Regi\xe3o Administrativa Especial da Rep\xfablica Popular da China",
                common: "Hong Kong"
            },
            rus: {
                official: "Hong Kong \u0421\u043F\u0435\u0446\u0438\u0430\u043B\u044C\u043D\u044B\u0439 \u0430\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043D\u044B\u0439 \u0440\u0430\u0439\u043E\u043D \u041A\u0438\u0442\u0430\u0439\u0441\u043A\u043E\u0439 \u041D\u0430\u0440\u043E\u0434\u043D\u043E\u0439 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0438 \u041A\u0438\u0442\u0430\u044F",
                common: "\u0413\u043E\u043D\u043A\u043E\u043D\u0433"
            },
            slk: {
                official: "\u0160peci\xe1lna administrat\xedvna oblas\u0165\u010C\xednskej \u013Eudovej republiky Hongkong",
                common: "Hongkong"
            },
            spa: {
                official: "Hong Kong Regi\xf3n Administrativa Especial de la Rep\xfablica Popular China",
                common: "Hong Kong"
            },
            srp: {
                official: "\u0425\u043E\u043D\u0433\u043A\u043E\u043D\u0433 \u0441\u043F\u0435\u0446\u0438\u0458\u0430\u043B\u043D\u0430 \u0430\u0434\u043C\u0438\u043D\u0438\u0441\u0442\u0440\u0430\u0442\u0438\u0432\u043D\u0430 \u043E\u0431\u043B\u0430\u0441\u0442 \u041D\u0430\u0440\u043E\u0434\u043D\u0435 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0435 \u041A\u0438\u043D\u0435",
                common: "\u0425\u043E\u043D\u0433\u043A\u043E\u043D\u0433"
            },
            swe: {
                official: "Hongkong",
                common: "Hongkong"
            },
            tur: {
                official: "\xc7in Halk Cumhuriyeti Hong Kong \xd6zel \u0130dari B\xf6lgesi",
                common: "Hong Kong"
            },
            urd: {
                official: "\u06C1\u0627\u0646\u06AF \u06A9\u0627\u0646\u06AF \u0639\u0648\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u06CC\u0646 \u06A9\u0627 \u062E\u0635\u0648\u0635\u06CC \u0627\u0646\u062A\u0638\u0627\u0645\u06CC \u0639\u0644\u0627\u0642\u06C1",
                common: "\u06C1\u0627\u0646\u06AF \u06A9\u0627\u0646\u06AF"
            }
        },
        latlng: [
            22.267,
            114.188
        ],
        landlocked: false,
        borders: [
            "CHN"
        ],
        area: 1104,
        demonyms: {
            eng: {
                f: "Hong Konger",
                m: "Hong Konger"
            },
            fra: {
                f: "Hongkongaise",
                m: "Hongkongais"
            }
        },
        flag: "\uD83C\uDDED\uD83C\uDDF0",
        maps: {
            googleMaps: "https://goo.gl/maps/1sEnNmT47ffrC8MU8",
            openStreetMaps: "https://www.openstreetmap.org/relation/913110"
        },
        population: 7500700,
        fifa: "HKG",
        car: {
            signs: [
                "HK"
            ],
            side: "left"
        },
        timezones: [
            "UTC+08:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/hk.png",
            svg: "https://flagcdn.com/hk.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/hk.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/hk.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                22.267,
                114.188
            ]
        }
    },
    {
        name: {
            common: "Austria",
            official: "Republic of Austria",
            nativeName: {
                bar: {
                    official: "Republik \xd6sterreich",
                    common: "\xd6sterreich"
                }
            }
        },
        tld: [
            ".at"
        ],
        cca2: "AT",
        ccn3: "040",
        cca3: "AUT",
        cioc: "AUT",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "3"
            ]
        },
        capital: [
            "Vienna"
        ],
        altSpellings: [
            "AT",
            "Osterreich",
            "Oesterreich"
        ],
        region: "Europe",
        subregion: "Central Europe",
        languages: {
            de: "German"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0646\u0645\u0633\u0627",
                common: "\u0627\u0644\u0646\u0645\u0633\u0627"
            },
            bre: {
                official: "Republik Aostria",
                common: "Aostria"
            },
            ces: {
                official: "Rakousk\xe1 republika",
                common: "Rakousko"
            },
            cym: {
                official: "Gweriniaeth Awstria",
                common: "Awstria"
            },
            deu: {
                official: "Republik \xd6sterreich",
                common: "\xd6sterreich"
            },
            est: {
                official: "Austria Vabariik",
                common: "Austria"
            },
            fin: {
                official: "It\xe4vallan tasavalta",
                common: "It\xe4valta"
            },
            fra: {
                official: "R\xe9publique d'Autriche",
                common: "Autriche"
            },
            hrv: {
                official: "Republika Austrija",
                common: "Austrija"
            },
            hun: {
                official: "Ausztria",
                common: "Ausztria"
            },
            ita: {
                official: "Repubblica d'Austria",
                common: "Austria"
            },
            jpn: {
                official: "\u30AA\u30FC\u30B9\u30C8\u30EA\u30A2\u5171\u548C\u56FD",
                common: "\u30AA\u30FC\u30B9\u30C8\u30EA\u30A2"
            },
            kor: {
                official: "\uC624\uC2A4\uD2B8\uB9AC\uC544 \uACF5\uD654\uAD6D",
                common: "\uC624\uC2A4\uD2B8\uB9AC\uC544"
            },
            nld: {
                official: "Republiek Oostenrijk",
                common: "Oostenrijk"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u062A\u0631\u06CC\u0634",
                common: "\u0627\u062A\u0631\u06CC\u0634"
            },
            pol: {
                official: "Republika Austrii",
                common: "Austria"
            },
            por: {
                official: "Rep\xfablica da \xc1ustria",
                common: "\xc1ustria"
            },
            rus: {
                official: "\u0410\u0432\u0441\u0442\u0440\u0438\u0439\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0410\u0432\u0441\u0442\u0440\u0438\u044F"
            },
            slk: {
                official: "Rak\xfaska republika",
                common: "Rak\xfasko"
            },
            spa: {
                official: "Rep\xfablica de Austria",
                common: "Austria"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u0443\u0441\u0442\u0440\u0438\u0458\u0430",
                common: "\u0410\u0443\u0441\u0442\u0440\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken \xd6sterrike",
                common: "\xd6sterrike"
            },
            tur: {
                official: "Avusturya Cumhuriyeti",
                common: "Avusturya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0622\u0633\u0679\u0631\u06CC\u0627",
                common: "\u0622\u0633\u0679\u0631\u06CC\u0627"
            },
            zho: {
                official: "\u5965\u5730\u5229\u5171\u548C\u56FD",
                common: "\u5965\u5730\u5229"
            }
        },
        latlng: [
            47.33333333,
            13.33333333
        ],
        landlocked: true,
        borders: [
            "CZE",
            "DEU",
            "HUN",
            "ITA",
            "LIE",
            "SVK",
            "SVN",
            "CHE"
        ],
        area: 83871,
        demonyms: {
            eng: {
                f: "Austrian",
                m: "Austrian"
            },
            fra: {
                f: "Autrichienne",
                m: "Autrichien"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/pCWpWQhznHyRzQcu9",
            openStreetMaps: "https://www.openstreetmap.org/relation/16239"
        },
        population: 8917205,
        gini: {
            2018: 30.8
        },
        fifa: "AUT",
        car: {
            signs: [
                "A"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/at.png",
            svg: "https://flagcdn.com/at.svg",
            alt: "The flag of Austria is composed of three equal horizontal bands of red, white and red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/at.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/at.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                48.2,
                16.37
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Antigua and Barbuda",
            official: "Antigua and Barbuda",
            nativeName: {
                eng: {
                    official: "Antigua and Barbuda",
                    common: "Antigua and Barbuda"
                }
            }
        },
        tld: [
            ".ag"
        ],
        cca2: "AG",
        ccn3: "028",
        cca3: "ATG",
        cioc: "ANT",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XCD: {
                name: "Eastern Caribbean dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "268"
            ]
        },
        capital: [
            "Saint John's"
        ],
        altSpellings: [
            "AG"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0623\u0646\u062A\u064A\u063A\u0648\u0627 \u0648\u0628\u0627\u0631\u0628\u0648\u062F\u0627",
                common: "\u0623\u0646\u062A\u064A\u063A\u0648\u0627 \u0648\u0628\u0627\u0631\u0628\u0648\u062F\u0627"
            },
            bre: {
                official: "Antigua ha Barbuda",
                common: "Antigua ha Barbuda"
            },
            ces: {
                official: "Antigua a Barbuda",
                common: "Antigua a Barbuda"
            },
            cym: {
                official: "Antigwa a Barbiwda",
                common: "Antigwa a Barbiwda"
            },
            deu: {
                official: "Antigua und Barbuda",
                common: "Antigua und Barbuda"
            },
            est: {
                official: "Antigua ja Barbuda",
                common: "Antigua ja Barbuda"
            },
            fin: {
                official: "Antigua ja Barbuda",
                common: "Antigua ja Barbuda"
            },
            fra: {
                official: "Antigua-et-Barbuda",
                common: "Antigua-et-Barbuda"
            },
            hrv: {
                official: "Antigva i Barbuda",
                common: "Antigva i Barbuda"
            },
            hun: {
                official: "Antigua \xe9s Barbuda",
                common: "Antigua \xe9s Barbuda"
            },
            ita: {
                official: "Antigua e Barbuda",
                common: "Antigua e Barbuda"
            },
            jpn: {
                official: "\u30A2\u30F3\u30C1\u30B0\u30A2\u30D0\u30FC\u30D6\u30FC\u30C0",
                common: "\u30A2\u30F3\u30C6\u30A3\u30B0\u30A2\u30FB\u30D0\u30FC\u30D6\u30FC\u30C0"
            },
            kor: {
                official: "\uC564\uD2F0\uAC00 \uBC14\uBD80\uB2E4",
                common: "\uC564\uD2F0\uAC00 \uBC14\uBD80\uB2E4"
            },
            nld: {
                official: "Antigua en Barbuda",
                common: "Antigua en Barbuda"
            },
            per: {
                official: "\u0622\u0646\u062A\u06CC\u06AF\u0648\u0627 \u0648 \u0628\u0627\u0631\u0628\u0648\u062F\u0627",
                common: "\u0622\u0646\u062A\u06CC\u06AF\u0648\u0627 \u0648 \u0628\u0627\u0631\u0628\u0648\u062F\u0627"
            },
            pol: {
                official: "Antigua i Barbuda",
                common: "Antigua i Barbuda"
            },
            por: {
                official: "Antigua e Barbuda",
                common: "Ant\xedgua e Barbuda"
            },
            rus: {
                official: "\u0410\u043D\u0442\u0438\u0433\u0443\u0430 \u0438 \u0411\u0430\u0440\u0431\u0443\u0434\u0430",
                common: "\u0410\u043D\u0442\u0438\u0433\u0443\u0430 \u0438 \u0411\u0430\u0440\u0431\u0443\u0434\u0430"
            },
            slk: {
                official: "Antigua a Barbuda",
                common: "Antigua a Barbuda"
            },
            spa: {
                official: "Antigua y Barbuda",
                common: "Antigua y Barbuda"
            },
            srp: {
                official: "\u0410\u043D\u0442\u0438\u0433\u0432\u0430 \u0438 \u0411\u0430\u0440\u0431\u0443\u0434\u0430",
                common: "\u0410\u043D\u0442\u0438\u0433\u0432\u0430 \u0438 \u0411\u0430\u0440\u0431\u0443\u0434\u0430"
            },
            swe: {
                official: "Antigua och Barbuda",
                common: "Antigua och Barbuda"
            },
            tur: {
                official: "Antigua ve Barbuda",
                common: "Antigua ve Barbuda"
            },
            urd: {
                official: "\u0627\u06CC\u0646\u0679\u06CC\u06AF\u0648\u0627 \u0648 \u0628\u0627\u0631\u0628\u0648\u0688\u0627",
                common: "\u0627\u06CC\u0646\u0679\u06CC\u06AF\u0648\u0627 \u0648 \u0628\u0627\u0631\u0628\u0648\u0688\u0627"
            },
            zho: {
                official: "\u5B89\u63D0\u74DC\u548C\u5DF4\u5E03\u8FBE",
                common: "\u5B89\u63D0\u74DC\u548C\u5DF4\u5E03\u8FBE"
            }
        },
        latlng: [
            17.05,
            -61.8
        ],
        landlocked: false,
        area: 442,
        demonyms: {
            eng: {
                f: "Antiguan, Barbudan",
                m: "Antiguan, Barbudan"
            },
            fra: {
                f: "Antiguaise et barbudienne",
                m: "Antiguaise et barbudien"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/fnye4wGJ1RzC9jpX9",
            openStreetMaps: "https://www.openstreetmap.org/relation/536900"
        },
        population: 97928,
        fifa: "ATG",
        car: {
            signs: [
                "AG"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ag.png",
            svg: "https://flagcdn.com/ag.svg",
            alt: "The flag of Antigua and Barbuda has a red field with an inverted isosceles triangle based on the top edge and spanning the height of the field. This triangle has three horizontal bands of black, light blue and white, with the light blue band half the height of the two other bands. The top half of a golden-yellow sun is situated in the lower two-third of the black band to depict a rising sun."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ag.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ag.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                17.12,
                -61.85
            ]
        }
    },
    {
        name: {
            common: "Turkmenistan",
            official: "Turkmenistan",
            nativeName: {
                rus: {
                    official: "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u0441\u0442\u0430\u043D",
                    common: "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u044F"
                },
                tuk: {
                    official: "T\xfcrkmenistan",
                    common: "T\xfcrkmenistan"
                }
            }
        },
        tld: [
            ".tm"
        ],
        cca2: "TM",
        ccn3: "795",
        cca3: "TKM",
        cioc: "TKM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            TMT: {
                name: "Turkmenistan manat",
                symbol: "m"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "93"
            ]
        },
        capital: [
            "Ashgabat"
        ],
        altSpellings: [
            "TM"
        ],
        region: "Asia",
        subregion: "Central Asia",
        languages: {
            rus: "Russian",
            tuk: "Turkmen"
        },
        translations: {
            ara: {
                official: "\u062A\u0631\u0643\u0645\u0627\u0646\u0633\u062A\u0627\u0646",
                common: "\u062A\u0631\u0643\u0645\u0627\u0646\u0633\u062A\u0627\u0646"
            },
            bre: {
                official: "Republik Turkmenistan",
                common: "Turkmenistan"
            },
            ces: {
                official: "Turkmenist\xe1n",
                common: "Turkmenist\xe1n"
            },
            cym: {
                official: "Turkmenistan",
                common: "Turkmenistan"
            },
            deu: {
                official: "Turkmenistan",
                common: "Turkmenistan"
            },
            est: {
                official: "T\xfcrkmenistan",
                common: "T\xfcrkmenistan"
            },
            fin: {
                official: "Turkmenistan",
                common: "Turkmenistan"
            },
            fra: {
                official: "Turkm\xe9nistan",
                common: "Turkm\xe9nistan"
            },
            hrv: {
                official: "Turkmenistan",
                common: "Turkmenistan"
            },
            hun: {
                official: "T\xfcrkm\xe9n K\xf6zt\xe1rsas\xe1g",
                common: "T\xfcrkmeniszt\xe1n"
            },
            ita: {
                official: "Turkmenistan",
                common: "Turkmenistan"
            },
            jpn: {
                official: "\u30C8\u30EB\u30AF\u30E1\u30CB\u30B9\u30BF\u30F3",
                common: "\u30C8\u30EB\u30AF\u30E1\u30CB\u30B9\u30BF\u30F3"
            },
            kor: {
                official: "\uD22C\uB974\uD06C\uBA54\uB2C8\uC2A4\uD0C4",
                common: "\uD22C\uB974\uD06C\uBA54\uB2C8\uC2A4\uD0C4"
            },
            nld: {
                official: "Turkmenistan",
                common: "Turkmenistan"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062E\u0644\u0642 \u062A\u0631\u06A9\u0645\u0646\u0633\u062A\u0627\u0646",
                common: "\u062A\u0631\u06A9\u0645\u0646\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Republika Turkmenistanu",
                common: "Turkmenistan"
            },
            por: {
                official: "Turcomenist\xe3o",
                common: "Turquemenist\xe3o"
            },
            rus: {
                official: "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u0441\u0442\u0430\u043D",
                common: "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u044F"
            },
            slk: {
                official: "Turkm\xe9nsko",
                common: "Turkm\xe9nsko"
            },
            spa: {
                official: "Turkmenist\xe1n",
                common: "Turkmenist\xe1n"
            },
            srp: {
                official: "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u0441\u0442\u0430\u043D",
                common: "\u0422\u0443\u0440\u043A\u043C\u0435\u043D\u0438\u0441\u0442\u0430\u043D"
            },
            swe: {
                official: "Turkmenistan",
                common: "Turkmenistan"
            },
            tur: {
                official: "T\xfcrkmenistan",
                common: "T\xfcrkmenistan"
            },
            urd: {
                official: "\u062A\u0631\u06A9\u0645\u0627\u0646\u0633\u062A\u0627\u0646",
                common: "\u062A\u0631\u06A9\u0645\u0627\u0646\u0633\u062A\u0627\u0646"
            },
            zho: {
                official: "\u571F\u5E93\u66FC\u65AF\u5766",
                common: "\u571F\u5E93\u66FC\u65AF\u5766"
            }
        },
        latlng: [
            40,
            60
        ],
        landlocked: true,
        borders: [
            "AFG",
            "IRN",
            "KAZ",
            "UZB"
        ],
        area: 488100,
        demonyms: {
            eng: {
                f: "Turkmen",
                m: "Turkmen"
            },
            fra: {
                f: "Turkm\xe8ne",
                m: "Turkm\xe8ne"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/cgfUcaQHSWKuqeKk9",
            openStreetMaps: "https://www.openstreetmap.org/relation/223026"
        },
        population: 6031187,
        gini: {
            1998: 40.8
        },
        fifa: "TKM",
        car: {
            signs: [
                "TM"
            ],
            side: "right"
        },
        timezones: [
            "UTC+05:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tm.png",
            svg: "https://flagcdn.com/tm.svg",
            alt: "The flag of Turkmenistan has a green field. It features a red vertical band, bearing five carpet guls stacked above two crossed olive branches, near the hoist end of the field. Just to the fly side of the vertical band near the top edge of the field is a hoist-side facing white crescent and five small five-pointed white stars placed just outside the crescent opening."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/tm.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/tm.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                37.95,
                58.38
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Mozambique",
            official: "Republic of Mozambique",
            nativeName: {
                por: {
                    official: "Rep\xfablica de Mo\xe7ambique",
                    common: "Mo\xe7ambique"
                }
            }
        },
        tld: [
            ".mz"
        ],
        cca2: "MZ",
        ccn3: "508",
        cca3: "MOZ",
        cioc: "MOZ",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MZN: {
                name: "Mozambican metical",
                symbol: "MT"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "58"
            ]
        },
        capital: [
            "Maputo"
        ],
        altSpellings: [
            "MZ",
            "Republic of Mozambique",
            "Rep\xfablica de Mo\xe7ambique"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            por: "Portuguese"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0648\u0632\u0645\u0628\u064A\u0642",
                common: "\u0645\u0648\u0632\u0645\u0628\u064A\u0642"
            },
            bre: {
                official: "Republik Mozambik",
                common: "Mozambik"
            },
            ces: {
                official: "Mosambick\xe1 republika",
                common: "Mosambik"
            },
            cym: {
                official: "Republic of Mozambique",
                common: "Mozambique"
            },
            deu: {
                official: "Republik Mosambik",
                common: "Mosambik"
            },
            est: {
                official: "Mosambiigi Vabariik",
                common: "Mosambiik"
            },
            fin: {
                official: "Mosambikin tasavalta",
                common: "Mosambik"
            },
            fra: {
                official: "R\xe9publique du Mozambique",
                common: "Mozambique"
            },
            hrv: {
                official: "Republika Mozambiku",
                common: "Mozambik"
            },
            hun: {
                official: "Mozambiki K\xf6zt\xe1rsas\xe1g",
                common: "Mozambik"
            },
            ita: {
                official: "Repubblica del Mozambico",
                common: "Mozambico"
            },
            jpn: {
                official: "\u30E2\u30B6\u30F3\u30D3\u30FC\u30AF\u5171\u548C\u56FD",
                common: "\u30E2\u30B6\u30F3\u30D3\u30FC\u30AF"
            },
            kor: {
                official: "\uBAA8\uC7A0\uBE44\uD06C \uACF5\uD654\uAD6D",
                common: "\uBAA8\uC7A0\uBE44\uD06C"
            },
            nld: {
                official: "Republiek Mozambique",
                common: "Mozambique"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0648\u0632\u0627\u0645\u0628\u06CC\u06A9",
                common: "\u0645\u0648\u0632\u0627\u0645\u0628\u06CC\u06A9"
            },
            pol: {
                official: "Republika Mozambiku",
                common: "Mozambik"
            },
            por: {
                official: "Rep\xfablica de Mo\xe7ambique",
                common: "Mo\xe7ambique"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u043E\u0437\u0430\u043C\u0431\u0438\u043A",
                common: "\u041C\u043E\u0437\u0430\u043C\u0431\u0438\u043A"
            },
            slk: {
                official: "Mozambick\xe1 republika",
                common: "Mozambik"
            },
            spa: {
                official: "Rep\xfablica de Mozambique",
                common: "Mozambique"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u043E\u0437\u0430\u043C\u0431\u0438\u043A",
                common: "\u041C\u043E\u0437\u0430\u043C\u0431\u0438\u043A"
            },
            swe: {
                official: "Republiken Mo\xe7ambique",
                common: "Mo\xe7ambique"
            },
            tur: {
                official: "Mozambik Cumhuriyeti",
                common: "Mozambik"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0648\u0632\u0645\u0628\u06CC\u0642",
                common: "\u0645\u0648\u0632\u0645\u0628\u06CC\u0642"
            },
            zho: {
                official: "\u83AB\u6851\u6BD4\u514B\u5171\u548C\u56FD",
                common: "\u83AB\u6851\u6BD4\u514B"
            }
        },
        latlng: [
            -18.25,
            35
        ],
        landlocked: false,
        borders: [
            "MWI",
            "ZAF",
            "SWZ",
            "TZA",
            "ZMB",
            "ZWE"
        ],
        area: 801590,
        demonyms: {
            eng: {
                f: "Mozambican",
                m: "Mozambican"
            },
            fra: {
                f: "Mozambicaine",
                m: "Mozambicain"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDFF",
        maps: {
            googleMaps: "https://goo.gl/maps/xCLcY9fzU6x4Pueu5",
            openStreetMaps: "https://www.openstreetmap.org/relation/195273"
        },
        population: 31255435,
        gini: {
            2014: 54
        },
        fifa: "MOZ",
        car: {
            signs: [
                "MOC"
            ],
            side: "left"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mz.png",
            svg: "https://flagcdn.com/mz.svg",
            alt: "The flag of Mozambique is composed of three equal horizontal bands of teal, black with white top and bottom edges, and yellow. A red isosceles triangle spanning about two-fifth the width of the field is superimposed on the hoist side with its base on the hoist end. This triangle bears a crossed rifle and hoe in black superimposed on an open white book which is superimposed on a five-pointed yellow star."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mz.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mz.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -25.95,
                32.58
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Panama",
            official: "Republic of Panama",
            nativeName: {
                spa: {
                    official: "Rep\xfablica de Panam\xe1",
                    common: "Panam\xe1"
                }
            }
        },
        tld: [
            ".pa"
        ],
        cca2: "PA",
        ccn3: "591",
        cca3: "PAN",
        cioc: "PAN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            PAB: {
                name: "Panamanian balboa",
                symbol: "B/."
            },
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "07"
            ]
        },
        capital: [
            "Panama City"
        ],
        altSpellings: [
            "PA",
            "Republic of Panama",
            "Rep\xfablica de Panam\xe1"
        ],
        region: "Americas",
        subregion: "Central America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0628\u0646\u0645\u0627",
                common: "\u0628\u0646\u0645\u0627"
            },
            bre: {
                official: "Republik Panama",
                common: "Panama"
            },
            ces: {
                official: "Panamsk\xe1 republika",
                common: "Panama"
            },
            cym: {
                official: "Republic of Panama",
                common: "Panama"
            },
            deu: {
                official: "Republik Panama",
                common: "Panama"
            },
            est: {
                official: "Panama Vabariik",
                common: "Panama"
            },
            fin: {
                official: "Panaman tasavalta",
                common: "Panama"
            },
            fra: {
                official: "R\xe9publique du Panama",
                common: "Panama"
            },
            hrv: {
                official: "Republika Panama",
                common: "Panama"
            },
            hun: {
                official: "Panamai K\xf6zt\xe1rsas\xe1g",
                common: "Panama"
            },
            ita: {
                official: "Repubblica di Panama",
                common: "Panama"
            },
            jpn: {
                official: "\u30D1\u30CA\u30DE\u5171\u548C\u56FD",
                common: "\u30D1\u30CA\u30DE"
            },
            kor: {
                official: "\uD30C\uB098\uB9C8 \uACF5\uD654\uAD6D",
                common: "\uD30C\uB098\uB9C8"
            },
            nld: {
                official: "Republiek Panama",
                common: "Panama"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u067E\u0627\u0646\u0627\u0645\u0627",
                common: "\u067E\u0627\u0646\u0627\u0645\u0627"
            },
            pol: {
                official: "Republika Panamy",
                common: "Panama"
            },
            por: {
                official: "Rep\xfablica do Panam\xe1",
                common: "Panam\xe1"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043D\u0430\u043C\u0430",
                common: "\u041F\u0430\u043D\u0430\u043C\u0430"
            },
            slk: {
                official: "Panamsk\xe1 republika",
                common: "Panama"
            },
            spa: {
                official: "Rep\xfablica de Panam\xe1",
                common: "Panam\xe1"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u0430\u043D\u0430\u043C\u0430",
                common: "\u041F\u0430\u043D\u0430\u043C\u0430"
            },
            swe: {
                official: "Republiken Panama",
                common: "Panama"
            },
            tur: {
                official: "Panama Cumhuriyeti",
                common: "Panama"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0627\u0646\u0627\u0645\u0627",
                common: "\u067E\u0627\u0646\u0627\u0645\u0627"
            },
            zho: {
                official: "\u5DF4\u62FF\u9A6C\u5171\u548C\u56FD",
                common: "\u5DF4\u62FF\u9A6C"
            }
        },
        latlng: [
            9,
            -80
        ],
        landlocked: false,
        borders: [
            "COL",
            "CRI"
        ],
        area: 75417,
        demonyms: {
            eng: {
                f: "Panamanian",
                m: "Panamanian"
            },
            fra: {
                f: "Panam\xe9enne",
                m: "Panam\xe9en"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDE6",
        maps: {
            googleMaps: "https://goo.gl/maps/sEN7sKqeawa5oPNLA",
            openStreetMaps: "https://www.openstreetmap.org/relation/287668"
        },
        population: 4314768,
        gini: {
            2019: 49.8
        },
        fifa: "PAN",
        car: {
            signs: [
                "PA"
            ],
            side: "right"
        },
        timezones: [
            "UTC-05:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/pa.png",
            svg: "https://flagcdn.com/pa.svg",
            alt: "The flag of Panama is composed of four equal rectangular areas \u2014 a white rectangular area with a blue five-pointed star at its center, a red rectangular area, a white rectangular area with a red five-pointed star at its center, and a blue rectangular area \u2014 in the upper hoist side, upper fly side, lower fly side and lower hoist side respectively."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/pa.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/pa.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                8.97,
                -79.53
            ]
        }
    },
    {
        name: {
            common: "Micronesia",
            official: "Federated States of Micronesia",
            nativeName: {
                eng: {
                    official: "Federated States of Micronesia",
                    common: "Micronesia"
                }
            }
        },
        tld: [
            ".fm"
        ],
        cca2: "FM",
        ccn3: "583",
        cca3: "FSM",
        cioc: "FSM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "91"
            ]
        },
        capital: [
            "Palikir"
        ],
        altSpellings: [
            "FM",
            "Federated States of Micronesia",
            "Micronesia, Federated States of"
        ],
        region: "Oceania",
        subregion: "Micronesia",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0648\u0644\u0627\u064A\u0627\u062A \u0645\u064A\u0643\u0631\u0648\u0646\u064A\u0633\u064A\u0627 \u0627\u0644\u0645\u062A\u062D\u062F\u0629",
                common: "\u0645\u064A\u0643\u0631\u0648\u0646\u064A\u0633\u064A\u0627"
            },
            bre: {
                official: "Stado\xf9 Kevreet Mikronezia",
                common: "Mikronezia"
            },
            ces: {
                official: "Federativn\xed st\xe1ty Mikron\xe9sie",
                common: "Mikron\xe9sie"
            },
            cym: {
                official: "Federated States of Micronesia",
                common: "Micronesia"
            },
            deu: {
                official: "F\xf6derierte Staaten von Mikronesien",
                common: "Mikronesien"
            },
            est: {
                official: "Mikroneesia Liiduriigid",
                common: "Mikroneesia"
            },
            fin: {
                official: "Mikronesian liittovaltio",
                common: "Mikronesia"
            },
            fra: {
                official: "\xc9tats f\xe9d\xe9r\xe9s de Micron\xe9sie",
                common: "Micron\xe9sie"
            },
            hrv: {
                official: "Savezne Dr\u017Eave Mikronezije",
                common: "Mikronezija"
            },
            hun: {
                official: "Mikron\xe9ziai Sz\xf6vets\xe9gi \xc1llamok",
                common: "Mikron\xe9ziai Sz\xf6vets\xe9gi \xc1llamok"
            },
            ita: {
                official: "Stati federati di Micronesia",
                common: "Micronesia"
            },
            jpn: {
                official: "\u30DF\u30AF\u30ED\u30CD\u30B7\u30A2\u9023\u90A6",
                common: "\u30DF\u30AF\u30ED\u30CD\u30B7\u30A2\u9023\u90A6"
            },
            kor: {
                official: "\uBBF8\uD06C\uB85C\uB124\uC2DC\uC544 \uC5F0\uBC29",
                common: "\uBBF8\uD06C\uB85C\uB124\uC2DC\uC544"
            },
            nld: {
                official: "Federale Staten van Micronesia",
                common: "Micronesi\xeb"
            },
            per: {
                official: "\u0627\u06CC\u0627\u0644\u0627\u062A \u0641\u062F\u0631\u0627\u0644 \u0645\u06CC\u06A9\u0631\u0648\u0646\u0632\u06CC",
                common: "\u0645\u06CC\u06A9\u0631\u0648\u0646\u0632\u06CC"
            },
            pol: {
                official: "Sfederowane Stany Mikronezji",
                common: "Mikronezja"
            },
            por: {
                official: "Estados Federados da Micron\xe9sia",
                common: "Micron\xe9sia"
            },
            rus: {
                official: "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B \u041C\u0438\u043A\u0440\u043E\u043D\u0435\u0437\u0438\u0438",
                common: "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B \u041C\u0438\u043A\u0440\u043E\u043D\u0435\u0437\u0438\u0438"
            },
            slk: {
                official: "Mikron\xe9zske federat\xedvne \u0161t\xe1ty",
                common: "Mikron\xe9zia"
            },
            spa: {
                official: "Estados Federados de Micronesia",
                common: "Micronesia"
            },
            srp: {
                official: "\u0421\u0430\u0432\u0435\u0437 \u0414\u0440\u0436\u0430\u0432\u0430 \u041C\u0438\u043A\u0440\u043E\u043D\u0435\u0437\u0438\u0458\u0435",
                common: "\u041C\u0438\u043A\u0440\u043E\u043D\u0435\u0437\u0438\u0458\u0430"
            },
            swe: {
                official: "Mikronesiska federationen",
                common: "Mikronesiska federationen"
            },
            tur: {
                official: "Mikronezya Federal Devletleri",
                common: "Mikronezya"
            },
            urd: {
                official: "\u0631\u06CC\u0627\u0633\u062A\u06C1\u0627\u0626\u06D2 \u0648\u0641\u0627\u0642\u06CC\u06C1 \u0645\u0627\u0626\u06A9\u0631\u0648\u0646\u06CC\u0634\u06CC\u0627",
                common: "\u0645\u0627\u0626\u06A9\u0631\u0648\u0646\u06CC\u0634\u06CC\u0627"
            },
            zho: {
                official: "\u5BC6\u514B\u7F57\u5C3C\u897F\u4E9A\u8054\u90A6",
                common: "\u5BC6\u514B\u7F57\u5C3C\u897F\u4E9A"
            }
        },
        latlng: [
            6.91666666,
            158.25
        ],
        landlocked: false,
        area: 702,
        demonyms: {
            eng: {
                f: "Micronesian",
                m: "Micronesian"
            },
            fra: {
                f: "Micron\xe9sienne",
                m: "Micron\xe9sien"
            }
        },
        flag: "\uD83C\uDDEB\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/LLcnofC5LxZsJXTo8",
            openStreetMaps: "https://www.openstreetmap.org/relation/571802"
        },
        population: 115021,
        gini: {
            2013: 40.1
        },
        car: {
            signs: [
                "FSM"
            ],
            side: "right"
        },
        timezones: [
            "UTC+10:00",
            "UTC+11:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/fm.png",
            svg: "https://flagcdn.com/fm.svg",
            alt: "The flag of Micronesia has a light blue field, at the center of which are four five-pointed white stars arranged in the shape of a diamond."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/fm.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/fm.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                6.92,
                158.15
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Ireland",
            official: "Republic of Ireland",
            nativeName: {
                eng: {
                    official: "Republic of Ireland",
                    common: "Ireland"
                },
                gle: {
                    official: "Poblacht na h\xc9ireann",
                    common: "\xc9ire"
                }
            }
        },
        tld: [
            ".ie"
        ],
        cca2: "IE",
        ccn3: "372",
        cca3: "IRL",
        cioc: "IRL",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "53"
            ]
        },
        capital: [
            "Dublin"
        ],
        altSpellings: [
            "IE",
            "\xc9ire",
            "Republic of Ireland",
            "Poblacht na h\xc9ireann"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            eng: "English",
            gle: "Irish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u064A\u0631\u0644\u0646\u062F\u0627",
                common: "\u0623\u064A\u0631\u0644\u0646\u062F\u0627"
            },
            bre: {
                official: "Republik Iwerzhon",
                common: "Iwerzhon"
            },
            ces: {
                official: "Irsko",
                common: "Irsko"
            },
            cym: {
                official: "Republic of Ireland",
                common: "Ireland"
            },
            deu: {
                official: "Republik Irland",
                common: "Irland"
            },
            est: {
                official: "Iirimaa",
                common: "Iirimaa"
            },
            fin: {
                official: "Irlannin tasavalta",
                common: "Irlanti"
            },
            fra: {
                official: "R\xe9publique d'Irlande",
                common: "Irlande"
            },
            hrv: {
                official: "Republika Irska",
                common: "Irska"
            },
            hun: {
                official: "\xcdr K\xf6zt\xe1rsas\xe1g",
                common: "\xcdrorsz\xe1g"
            },
            ita: {
                official: "Repubblica d'Irlanda",
                common: "Irlanda"
            },
            jpn: {
                official: "\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9\u5171\u548C\u56FD",
                common: "\u30A2\u30A4\u30EB\u30E9\u30F3\u30C9"
            },
            kor: {
                official: "\uC544\uC77C\uB79C\uB4DC \uACF5\uD654\uAD6D",
                common: "\uC544\uC77C\uB79C\uB4DC"
            },
            nld: {
                official: "Republic of Ireland",
                common: "Ierland"
            },
            per: {
                official: "\u0627\u06CC\u0631\u0644\u0646\u062F",
                common: "\u0627\u06CC\u0631\u0644\u0646\u062F"
            },
            pol: {
                official: "Republika Irlandii",
                common: "Irlandia"
            },
            por: {
                official: "Rep\xfablica da Irlanda",
                common: "Irlanda"
            },
            rus: {
                official: "\u0418\u0440\u043B\u0430\u043D\u0434\u0438\u044F",
                common: "\u0418\u0440\u043B\u0430\u043D\u0434\u0438\u044F"
            },
            slk: {
                official: "\xcdrska republika",
                common: "\xcdrsko"
            },
            spa: {
                official: "Rep\xfablica de Irlanda",
                common: "Irlanda"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0440\u0441\u043A\u0430",
                common: "\u0418\u0440\u0441\u043A\u0430"
            },
            swe: {
                official: "Irland",
                common: "Irland"
            },
            tur: {
                official: "\u0130rlanda Cumhuriyeti",
                common: "\u0130rlanda"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0632\u06CC\u0631\u06C1 \u0622\u0626\u0631\u0644\u06CC\u0646\u0688",
                common: "\u062C\u0632\u06CC\u0631\u06C1 \u0622\u0626\u0631\u0644\u06CC\u0646\u0688"
            },
            zho: {
                official: "\u7231\u5C14\u5170\u5171\u548C\u56FD",
                common: "\u7231\u5C14\u5170"
            }
        },
        latlng: [
            53,
            -8
        ],
        landlocked: false,
        borders: [
            "GBR"
        ],
        area: 70273,
        demonyms: {
            eng: {
                f: "Irish",
                m: "Irish"
            },
            fra: {
                f: "Irlandaise",
                m: "Irlandais"
            }
        },
        flag: "\uD83C\uDDEE\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/hxd1BKxgpchStzQC6",
            openStreetMaps: "https://www.openstreetmap.org/relation/62273"
        },
        population: 4994724,
        gini: {
            2017: 31.4
        },
        fifa: "IRL",
        car: {
            signs: [
                "IRL"
            ],
            side: "left"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ie.png",
            svg: "https://flagcdn.com/ie.svg",
            alt: "The flag of Ireland is composed of three equal vertical bands of green, white and orange."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ie.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ie.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                53.32,
                -6.23
            ]
        }
    },
    {
        name: {
            common: "Cura\xe7ao",
            official: "Country of Cura\xe7ao",
            nativeName: {
                eng: {
                    official: "Country of Cura\xe7ao",
                    common: "Cura\xe7ao"
                },
                nld: {
                    official: "Land Cura\xe7ao",
                    common: "Cura\xe7ao"
                },
                pap: {
                    official: "Pais K\xf2rsou",
                    common: "Pais K\xf2rsou"
                }
            }
        },
        tld: [
            ".cw"
        ],
        cca2: "CW",
        ccn3: "531",
        cca3: "CUW",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            ANG: {
                name: "Netherlands Antillean guilder",
                symbol: "\u0192"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "99"
            ]
        },
        capital: [
            "Willemstad"
        ],
        altSpellings: [
            "CW",
            "Curacao",
            "K\xf2rsou",
            "Country of Cura\xe7ao",
            "Land Cura\xe7ao",
            "Pais K\xf2rsou"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English",
            nld: "Dutch",
            pap: "Papiamento"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0644\u0629 \u0643\u0648\u0631\u0627\u0633\u0627\u0648",
                common: "\u0643\u0648\u0631\u0627\u0633\u0627\u0648"
            },
            bre: {
                official: "Bro Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            ces: {
                official: "Autonomn\xed zem\u011B Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            cym: {
                official: "Country of Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            deu: {
                official: "Land Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            est: {
                official: "Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            fin: {
                official: "Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            fra: {
                official: "Pays de Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            hun: {
                official: "Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            ita: {
                official: "Paese di Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            kor: {
                official: "\uD034\uB77C\uC18C",
                common: "\uD034\uB77C\uC18C"
            },
            nld: {
                official: "Land Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            per: {
                official: "\u06A9\u0648\u0631\u0627\u0633\u0627\u0626\u0648",
                common: "\u06A9\u0648\u0631\u0627\u0633\u0627\u0626\u0648"
            },
            pol: {
                official: "Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            por: {
                official: "Pa\xeds de Cura\xe7ao",
                common: "ilha da Cura\xe7\xe3o"
            },
            rus: {
                official: "\u0421\u0442\u0440\u0430\u043D\u0430 \u041A\u044E\u0440\u0430\u0441\u0430\u043E",
                common: "\u041A\u044E\u0440\u0430\u0441\u0430\u043E"
            },
            slk: {
                official: "Curacao",
                common: "Curacao"
            },
            spa: {
                official: "Pa\xeds de Curazao",
                common: "Curazao"
            },
            srp: {
                official: "\u041A\u0443\u0440\u0430\u0441\u0430\u043E",
                common: "\u041A\u0443\u0440\u0430\u0441\u0430\u043E"
            },
            swe: {
                official: "Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            tur: {
                official: "Cura\xe7ao",
                common: "Cura\xe7ao"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u06A9\u06CC\u0648\u0631\u0627\u0633\u0627\u0624",
                common: "\u06A9\u06CC\u0648\u0631\u0627\u0633\u0627\u0624"
            },
            zho: {
                official: "\u5E93\u62C9\u7D22",
                common: "\u5E93\u62C9\u7D22"
            }
        },
        latlng: [
            12.116667,
            -68.933333
        ],
        landlocked: false,
        area: 444,
        demonyms: {
            eng: {
                f: "Cura\xe7aoan",
                m: "Cura\xe7aoan"
            },
            fra: {
                f: "Curacienne",
                m: "Curacien"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDFC",
        maps: {
            googleMaps: "https://goo.gl/maps/9D3hTeA3qKaRT7S16",
            openStreetMaps: "https://www.openstreetmap.org/relation/1216719"
        },
        population: 155014,
        fifa: "CUW",
        car: {
            signs: [
                "CW"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cw.png",
            svg: "https://flagcdn.com/cw.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cw.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cw.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                12.1,
                -68.92
            ]
        }
    },
    {
        name: {
            common: "French Guiana",
            official: "Guiana",
            nativeName: {
                fra: {
                    official: "Guyane",
                    common: "Guyane fran\xe7aise"
                }
            }
        },
        tld: [
            ".gf"
        ],
        cca2: "GF",
        ccn3: "254",
        cca3: "GUF",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "94"
            ]
        },
        capital: [
            "Cayenne"
        ],
        altSpellings: [
            "GF",
            "Guiana",
            "Guyane"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u063A\u0648\u064A\u0627\u0646\u0627 \u0627\u0644\u0641\u0631\u0646\u0633\u064A\u0629",
                common: "\u063A\u0648\u064A\u0627\u0646\u0627"
            },
            bre: {
                official: "Gwiana C'hall",
                common: "Gwiana C'hall"
            },
            ces: {
                official: "Francouzsk\xe1 Guyana",
                common: "Francouzsk\xe1 Guyana"
            },
            cym: {
                official: "Guiana",
                common: "French Guiana"
            },
            deu: {
                official: "Franz\xf6sisch-Guayana",
                common: "Franz\xf6sisch-Guayana"
            },
            est: {
                official: "Guajaana departemang",
                common: "Prantsuse Guajaana"
            },
            fin: {
                official: "Ranskan Guayana",
                common: "Ranskan Guayana"
            },
            fra: {
                official: "Guyane",
                common: "Guyane"
            },
            hrv: {
                official: "Gijana",
                common: "Francuska Gvajana"
            },
            hun: {
                official: "Francia Guyana",
                common: "Francia Guyana"
            },
            ita: {
                official: "Guiana",
                common: "Guyana francese"
            },
            jpn: {
                official: "\u30AE\u30A2\u30CA",
                common: "\u30D5\u30E9\u30F3\u30B9\u9818\u30AE\u30A2\u30CA"
            },
            kor: {
                official: "\uD504\uB791\uC2A4\uB839 \uAE30\uC544\uB098",
                common: "\uD504\uB791\uC2A4\uB839 \uAE30\uC544\uB098"
            },
            nld: {
                official: "Guyana",
                common: "Frans-Guyana"
            },
            per: {
                official: "\u06AF\u0648\u06CC\u0627\u0646 \u0641\u0631\u0627\u0646\u0633\u0647",
                common: "\u06AF\u0648\u06CC\u0627\u0646 \u0641\u0631\u0627\u0646\u0633\u0647"
            },
            pol: {
                official: "Gujana Francuska",
                common: "Gujana Francuska"
            },
            por: {
                official: "Guiana",
                common: "Guiana Francesa"
            },
            rus: {
                official: "\u0413\u0432\u0438\u0430\u043D\u0430",
                common: "\u0424\u0440\u0430\u043D\u0446\u0443\u0437\u0441\u043A\u0430\u044F \u0413\u0432\u0438\u0430\u043D\u0430"
            },
            slk: {
                official: "Franc\xfazska Guyana",
                common: "Guyana"
            },
            spa: {
                official: "Guayana",
                common: "Guayana Francesa"
            },
            srp: {
                official: "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430 \u0413\u0432\u0430\u0458\u0430\u043D\u0430",
                common: "\u0424\u0440\u0430\u043D\u0446\u0443\u0441\u043A\u0430 \u0413\u0432\u0430\u0458\u0430\u043D\u0430"
            },
            swe: {
                official: "Franska Guyana",
                common: "Franska Guyana"
            },
            tur: {
                official: "Frans\u0131z Guyanas\u0131",
                common: "Frans\u0131z Guyanas\u0131"
            },
            urd: {
                official: "\u06AF\u06CC\u0627\u0646\u0627",
                common: "\u0641\u0631\u0627\u0646\u0633\u06CC\u0633\u06CC \u06AF\u06CC\u0627\u0646\u0627"
            },
            zho: {
                official: "\u6CD5\u5C5E\u572D\u4E9A\u90A3",
                common: "\u6CD5\u5C5E\u572D\u4E9A\u90A3"
            }
        },
        latlng: [
            4,
            -53
        ],
        landlocked: false,
        borders: [
            "BRA",
            "SUR"
        ],
        area: 83534,
        demonyms: {
            eng: {
                f: "Guianan",
                m: "Guianan"
            },
            fra: {
                f: "Guyanaise",
                m: "Guyanais"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDEB",
        maps: {
            googleMaps: "https://goo.gl/maps/NJawFwMzG7YtCrVP7",
            openStreetMaps: "https://www.openstreetmap.org/relation/2502058"
        },
        population: 254541,
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC-03:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gf.png",
            svg: "https://flagcdn.com/gf.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gf.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gf.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                4.94,
                -52.33
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^((97|98)3\\d{2})$"
        }
    },
    {
        name: {
            common: "Norway",
            official: "Kingdom of Norway",
            nativeName: {
                nno: {
                    official: "Kongeriket Noreg",
                    common: "Noreg"
                },
                nob: {
                    official: "Kongeriket Norge",
                    common: "Norge"
                },
                smi: {
                    official: "Norgga gonagasriika",
                    common: "Norgga"
                }
            }
        },
        tld: [
            ".no"
        ],
        cca2: "NO",
        ccn3: "578",
        cca3: "NOR",
        cioc: "NOR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            NOK: {
                name: "Norwegian krone",
                symbol: "kr"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "7"
            ]
        },
        capital: [
            "Oslo"
        ],
        altSpellings: [
            "NO",
            "Norge",
            "Noreg",
            "Kingdom of Norway",
            "Kongeriket Norge",
            "Kongeriket Noreg"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            nno: "Norwegian Nynorsk",
            nob: "Norwegian Bokm\xe5l",
            smi: "Sami"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0646\u0631\u0648\u064A\u062C",
                common: "\u0627\u0644\u0646\u0631\u0648\u064A\u062C"
            },
            bre: {
                official: "Rouantelezh Norvegia",
                common: "Norvegia"
            },
            ces: {
                official: "Norsk\xe9 kr\xe1lovstv\xed",
                common: "Norsko"
            },
            cym: {
                official: "Kingdom of Norway",
                common: "Norway"
            },
            deu: {
                official: "K\xf6nigreich Norwegen",
                common: "Norwegen"
            },
            est: {
                official: "Norra Kuningriik",
                common: "Norra"
            },
            fin: {
                official: "Norjan kuningaskunta",
                common: "Norja"
            },
            fra: {
                official: "Royaume de Norv\xe8ge",
                common: "Norv\xe8ge"
            },
            hrv: {
                official: "Kraljevina Norve\u0161ka",
                common: "Norve\u0161ka"
            },
            hun: {
                official: "Norv\xe9g Kir\xe1lys\xe1g",
                common: "Norv\xe9gia"
            },
            ita: {
                official: "Regno di Norvegia",
                common: "Norvegia"
            },
            jpn: {
                official: "\u30CE\u30EB\u30A6\u30A7\u30FC\u738B\u56FD",
                common: "\u30CE\u30EB\u30A6\u30A7\u30FC"
            },
            kor: {
                official: "\uB178\uB974\uC6E8\uC774 \uC655\uAD6D",
                common: "\uB178\uB974\uC6E8\uC774"
            },
            nld: {
                official: "Koninkrijk Noorwegen",
                common: "Noorwegen"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0646\u0631\u0648\u0698",
                common: "\u0646\u0631\u0648\u0698"
            },
            pol: {
                official: "Kr\xf3lestwo Norwegii",
                common: "Norwegia"
            },
            por: {
                official: "Reino da Noruega",
                common: "Noruega"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u041D\u043E\u0440\u0432\u0435\u0433\u0438\u044F",
                common: "\u041D\u043E\u0440\u0432\u0435\u0433\u0438\u044F"
            },
            slk: {
                official: "N\xf3rske kr\xe1\u013Eovstvo",
                common: "N\xf3rsko"
            },
            spa: {
                official: "Reino de Noruega",
                common: "Noruega"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u041D\u043E\u0440\u0432\u0435\u0448\u043A\u0430",
                common: "\u041D\u043E\u0440\u0432\u0435\u0448\u043A\u0430"
            },
            swe: {
                official: "Konungariket Norge",
                common: "Norge"
            },
            tur: {
                official: "Norve\xe7 Krall\u0131\u011F\u0131",
                common: "Norve\xe7"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0646\u0627\u0631\u0648\u06D2",
                common: "\u0646\u0627\u0631\u0648\u06D2"
            },
            zho: {
                official: "\u632A\u5A01\u738B\u56FD",
                common: "\u632A\u5A01"
            }
        },
        latlng: [
            62,
            10
        ],
        landlocked: false,
        borders: [
            "FIN",
            "SWE",
            "RUS"
        ],
        area: 323802,
        demonyms: {
            eng: {
                f: "Norwegian",
                m: "Norwegian"
            },
            fra: {
                f: "Norv\xe9gienne",
                m: "Norv\xe9gien"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/htWRrphA7vNgQNdSA",
            openStreetMaps: "https://www.openstreetmap.org/relation/2978650"
        },
        population: 5379475,
        gini: {
            2018: 27.6
        },
        fifa: "NOR",
        car: {
            signs: [
                "N"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/no.png",
            svg: "https://flagcdn.com/no.svg",
            alt: "The flag of Norway has a red field with a large white-edged navy blue cross that extends to the edges of the field. The vertical part of this cross is offset towards the hoist side."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/no.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/no.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                59.92,
                10.75
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "\xc5land Islands",
            official: "\xc5land Islands",
            nativeName: {
                swe: {
                    official: "Landskapet \xc5land",
                    common: "\xc5land"
                }
            }
        },
        tld: [
            ".ax"
        ],
        cca2: "AX",
        ccn3: "248",
        cca3: "ALA",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "5818"
            ]
        },
        capital: [
            "Mariehamn"
        ],
        altSpellings: [
            "AX",
            "Aaland",
            "Aland",
            "Ahvenanmaa"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            swe: "Swedish"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u0623\u0648\u0644\u0627\u0646\u062F",
                common: "\u062C\u0632\u0631 \u0623\u0648\u0644\u0627\u0646\u062F"
            },
            bre: {
                official: "Inizi \xc5land",
                common: "\xc5land"
            },
            ces: {
                official: "\xc5landsk\xe9 ostrovy",
                common: "\xc5landy"
            },
            cym: {
                official: "\xc5land Islands",
                common: "\xc5land Islands"
            },
            deu: {
                official: "\xc5land-Inseln",
                common: "\xc5land"
            },
            est: {
                official: "Ahvenamaa maakond",
                common: "Ahvenamaa"
            },
            fin: {
                official: "Ahvenanmaan maakunta",
                common: "Ahvenanmaa"
            },
            fra: {
                official: "Ahvenanmaa",
                common: "Ahvenanmaa"
            },
            hrv: {
                official: "Aland Islands",
                common: "\xc5landski otoci"
            },
            hun: {
                official: "\xc5land-szigetek",
                common: "\xc5land-szigetek"
            },
            ita: {
                official: "Isole \xc5land",
                common: "Isole Aland"
            },
            jpn: {
                official: "\u30AA\u30FC\u30E9\u30F3\u30C9\u8AF8\u5CF6",
                common: "\u30AA\u30FC\u30E9\u30F3\u30C9\u8AF8\u5CF6"
            },
            kor: {
                official: "\uC62C\uB780\uB4DC \uC81C\uB3C4",
                common: "\uC62C\uB780\uB4DC \uC81C\uB3C4"
            },
            nld: {
                official: "\xc5land eilanden",
                common: "\xc5landeilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0646\u062F",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0646\u062F"
            },
            pol: {
                official: "Wyspy Alandzkie",
                common: "Wyspy Alandzkie"
            },
            por: {
                official: "Ilhas \xc5land",
                common: "Al\xe2ndia"
            },
            rus: {
                official: "\u0410\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u0410\u043B\u0430\u043D\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Alandsk\xe9 ostrovy",
                common: "Alandy"
            },
            spa: {
                official: "Islas \xc5land",
                common: "Alandia"
            },
            srp: {
                official: "\u041E\u043B\u0430\u043D\u0434\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                common: "\u041E\u043B\u0430\u043D\u0434\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "\xc5land",
                common: "\xc5land"
            },
            tur: {
                official: "\xc5land Adalar\u0131",
                common: "\xc5land"
            },
            urd: {
                official: "\u062C\u0632\u0627\u0626\u0631 \u0627\u0648\u0644\u0646\u062F",
                common: "\u062C\u0632\u0627\u0626\u0631 \u0627\u0648\u0644\u0646\u062F"
            },
            zho: {
                official: "\u5965\u5170\u7FA4\u5C9B",
                common: "\u5965\u5170\u7FA4\u5C9B"
            }
        },
        latlng: [
            60.116667,
            19.9
        ],
        landlocked: false,
        area: 1580,
        demonyms: {
            eng: {
                f: "\xc5landish",
                m: "\xc5landish"
            },
            fra: {
                f: "\xc5landaise",
                m: "\xc5landais"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDFD",
        maps: {
            googleMaps: "https://goo.gl/maps/ewFb3vYsfUmVCoSb8",
            openStreetMaps: "https://www.openstreetmap.org/relation/1650407"
        },
        population: 29458,
        car: {
            signs: [
                ""
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ax.png",
            svg: "https://flagcdn.com/ax.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ax.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ax.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                60.12,
                19.9
            ]
        }
    },
    {
        name: {
            common: "Central African Republic",
            official: "Central African Republic",
            nativeName: {
                fra: {
                    official: "R\xe9publique centrafricaine",
                    common: "R\xe9publique centrafricaine"
                },
                sag: {
                    official: "K\xf6d\xf6r\xf6s\xease t\xee B\xeaafr\xeeka",
                    common: "B\xeaafr\xeeka"
                }
            }
        },
        tld: [
            ".cf"
        ],
        cca2: "CF",
        ccn3: "140",
        cca3: "CAF",
        cioc: "CAF",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XAF: {
                name: "Central African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "36"
            ]
        },
        capital: [
            "Bangui"
        ],
        altSpellings: [
            "CF",
            "Central African Republic",
            "R\xe9publique centrafricaine"
        ],
        region: "Africa",
        subregion: "Middle Africa",
        languages: {
            fra: "French",
            sag: "Sango"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0641\u0631\u064A\u0642\u064A\u0627 \u0627\u0644\u0648\u0633\u0637\u0649",
                common: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0641\u0631\u064A\u0642\u064A\u0627 \u0627\u0644\u0648\u0633\u0637\u0649"
            },
            bre: {
                official: "Republik Kreizafrikan",
                common: "Republik Kreizafrikan"
            },
            ces: {
                official: "St\u0159edoafrick\xe1 republika",
                common: "St\u0159edoafrick\xe1 republika"
            },
            cym: {
                official: "Gweriniaeth Canolbarth Affrica",
                common: "Gweriniaeth Canolbarth Affrica"
            },
            deu: {
                official: "Zentralafrikanische Republik",
                common: "Zentralafrikanische Republik"
            },
            est: {
                official: "Kesk-Aafrika Vabariik",
                common: "Kesk-Aafrika Vabariik"
            },
            fin: {
                official: "Keski-Afrikan tasavalta",
                common: "Keski-Afrikan tasavalta"
            },
            fra: {
                official: "R\xe9publique centrafricaine",
                common: "R\xe9publique centrafricaine"
            },
            hrv: {
                official: "Centralna Afri\u010Dka Republika",
                common: "Srednjoafri\u010Dka Republika"
            },
            hun: {
                official: "K\xf6z\xe9p-afrikai K\xf6zt\xe1rsas\xe1g",
                common: "K\xf6z\xe9p-afrikai K\xf6zt\xe1rsas\xe1g"
            },
            ita: {
                official: "Repubblica Centrafricana",
                common: "Repubblica Centrafricana"
            },
            jpn: {
                official: "\u4E2D\u592E\u30A2\u30D5\u30EA\u30AB\u5171\u548C\u56FD",
                common: "\u4E2D\u592E\u30A2\u30D5\u30EA\u30AB\u5171\u548C\u56FD"
            },
            kor: {
                official: "\uC911\uC559\uC544\uD504\uB9AC\uCE74 \uACF5\uD654\uAD6D",
                common: "\uC911\uC559\uC544\uD504\uB9AC\uCE74 \uACF5\uD654\uAD6D"
            },
            nld: {
                official: "Centraal-Afrikaanse Republiek",
                common: "Centraal-Afrikaanse Republiek"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0641\u0631\u06CC\u0642\u0627\u06CC \u0645\u0631\u06A9\u0632\u06CC",
                common: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0641\u0631\u06CC\u0642\u0627\u06CC \u0645\u0631\u06A9\u0632\u06CC"
            },
            pol: {
                official: "Republika \u015Arodkowoafryka\u0144ska",
                common: "Republika \u015Arodkowoafryka\u0144ska"
            },
            por: {
                official: "Rep\xfablica Centro-Africano",
                common: "Rep\xfablica Centro-Africana"
            },
            rus: {
                official: "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u043E-\u0410\u0444\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u044C\u043D\u043E\u0430\u0444\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430"
            },
            slk: {
                official: "Stredoafrick\xe1 republika",
                common: "Stredoafrick\xe1 republika"
            },
            spa: {
                official: "Rep\xfablica Centroafricana",
                common: "Rep\xfablica Centroafricana"
            },
            srp: {
                official: "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u043D\u043E\u0430\u0444\u0440\u0438\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0426\u0435\u043D\u0442\u0440\u0430\u043B\u043D\u043E\u0430\u0444\u0440\u0438\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430"
            },
            swe: {
                official: "Centralafrikanska republiken",
                common: "Centralafrikanska republiken"
            },
            tur: {
                official: "Orta Afrika Cumhuriyeti",
                common: "Orta Afrika Cumhuriyeti"
            },
            urd: {
                official: "\u0648\u0633\u0637\u06CC \u0627\u0641\u0631\u06CC\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1",
                common: "\u0648\u0633\u0637\u06CC \u0627\u0641\u0631\u06CC\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1"
            },
            zho: {
                official: "\u4E2D\u975E\u5171\u548C\u56FD",
                common: "\u4E2D\u975E\u5171\u548C\u56FD"
            }
        },
        latlng: [
            7,
            21
        ],
        landlocked: true,
        borders: [
            "CMR",
            "TCD",
            "COD",
            "COG",
            "SSD",
            "SDN"
        ],
        area: 622984,
        demonyms: {
            eng: {
                f: "Central African",
                m: "Central African"
            },
            fra: {
                f: "Centrafricaine",
                m: "Centrafricain"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDEB",
        maps: {
            googleMaps: "https://goo.gl/maps/51V8dsi2rGYC9n3c9",
            openStreetMaps: "https://www.openstreetmap.org/relation/192790"
        },
        population: 4829764,
        gini: {
            2008: 56.2
        },
        fifa: "CTA",
        car: {
            signs: [
                "RCA"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cf.png",
            svg: "https://flagcdn.com/cf.svg",
            alt: "The flag of Central African Republic is composed of four equal horizontal bands of blue, white, green and yellow intersected at the center by a vertical red band of equal size as the horizontal bands. A yellow five-pointed star is situated on the hoist side of the blue band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cf.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cf.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                4.37,
                18.58
            ]
        }
    },
    {
        name: {
            common: "Burkina Faso",
            official: "Burkina Faso",
            nativeName: {
                fra: {
                    official: "R\xe9publique du Burkina",
                    common: "Burkina Faso"
                }
            }
        },
        tld: [
            ".bf"
        ],
        cca2: "BF",
        ccn3: "854",
        cca3: "BFA",
        cioc: "BUR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XOF: {
                name: "West African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "26"
            ]
        },
        capital: [
            "Ouagadougou"
        ],
        altSpellings: [
            "BF"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0628\u0648\u0631\u0643\u064A\u0646\u0627 \u0641\u0627\u0633\u0648",
                common: "\u0628\u0648\u0631\u0643\u064A\u0646\u0627 \u0641\u0627\u0633\u0648"
            },
            bre: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            ces: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            cym: {
                official: "Bwrcina Ffaso",
                common: "Bwrcina Ffaso"
            },
            deu: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            est: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            fin: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            fra: {
                official: "R\xe9publique du Burkina",
                common: "Burkina Faso"
            },
            hrv: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            hun: {
                official: "Burkina Faso",
                common: "Burkina"
            },
            ita: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            jpn: {
                official: "\u30D6\u30EB\u30AD\u30CA\u30D5\u30A1\u30BD",
                common: "\u30D6\u30EB\u30AD\u30CA\u30D5\u30A1\u30BD"
            },
            kor: {
                official: "\uBD80\uB974\uD0A4\uB098\uD30C\uC18C",
                common: "\uBD80\uB974\uD0A4\uB098\uD30C\uC18C"
            },
            nld: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            per: {
                official: "\u0628\u0648\u0631\u06A9\u06CC\u0646\u0627\u0641\u0627\u0633\u0648",
                common: "\u0628\u0648\u0631\u06A9\u06CC\u0646\u0627\u0641\u0627\u0633\u0648"
            },
            pol: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            por: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            rus: {
                official: "\u0411\u0443\u0440\u043A\u0438\u043D\u0430 -\u0424\u0430\u0441\u043E",
                common: "\u0411\u0443\u0440\u043A\u0438\u043D\u0430-\u0424\u0430\u0441\u043E"
            },
            slk: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            spa: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            srp: {
                official: "\u0411\u0443\u0440\u043A\u0438\u043D\u0430 \u0424\u0430\u0441\u043E",
                common: "\u0411\u0443\u0440\u043A\u0438\u043D\u0430 \u0424\u0430\u0441\u043E"
            },
            swe: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            tur: {
                official: "Burkina Faso",
                common: "Burkina Faso"
            },
            urd: {
                official: "\u0628\u0631\u06A9\u06CC\u0646\u0627 \u0641\u0627\u0633\u0648",
                common: "\u0628\u0631\u06A9\u06CC\u0646\u0627 \u0641\u0627\u0633\u0648"
            },
            zho: {
                official: "\u5E03\u57FA\u7EB3\u6CD5\u7D22",
                common: "\u5E03\u57FA\u7EB3\u6CD5\u7D22"
            }
        },
        latlng: [
            13,
            -2
        ],
        landlocked: true,
        borders: [
            "BEN",
            "CIV",
            "GHA",
            "MLI",
            "NER",
            "TGO"
        ],
        area: 272967,
        demonyms: {
            eng: {
                f: "Burkinabe",
                m: "Burkinabe"
            },
            fra: {
                f: "Burkinab\xe9e",
                m: "Burkinab\xe9"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDEB",
        maps: {
            googleMaps: "https://goo.gl/maps/rKRmpcMbFher2ozb7",
            openStreetMaps: "https://www.openstreetmap.org/relation/192783"
        },
        population: 20903278,
        gini: {
            2014: 35.3
        },
        fifa: "BFA",
        car: {
            signs: [
                "BF"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bf.png",
            svg: "https://flagcdn.com/bf.svg",
            alt: "The flag of Burkina Faso features two equal horizontal bands of red and green, with a yellow five-pointed star in the center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bf.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bf.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                12.37,
                -1.52
            ]
        }
    },
    {
        name: {
            common: "Eritrea",
            official: "State of Eritrea",
            nativeName: {
                ara: {
                    official: "\u062F\u0648\u0644\u0629 \u0625\u0631\u062A\u0631\u064A\u0627",
                    common: "\u0625\u0631\u062A\u0631\u064A\u0627\u200E"
                },
                eng: {
                    official: "State of Eritrea",
                    common: "Eritrea"
                },
                tir: {
                    official: "\u1203\u1308\u1228 \u12A4\u122D\u1275\u122B",
                    common: "\u12A4\u122D\u1275\u122B"
                }
            }
        },
        tld: [
            ".er"
        ],
        cca2: "ER",
        ccn3: "232",
        cca3: "ERI",
        cioc: "ERI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            ERN: {
                name: "Eritrean nakfa",
                symbol: "Nfk"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "91"
            ]
        },
        capital: [
            "Asmara"
        ],
        altSpellings: [
            "ER",
            "State of Eritrea",
            "\u1203\u1308\u1228 \u12A4\u122D\u1275\u122B",
            "Dawlat Iritriy\xe1",
            "\u02BEErtr\u0101",
            "Iritriy\u0101"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            ara: "Arabic",
            eng: "English",
            tir: "Tigrinya"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0644\u0629 \u0625\u0631\u064A\u062A\u0631\u064A\u0627",
                common: "\u0625\u0631\u064A\u062A\u0631\u064A\u0627"
            },
            bre: {
                official: "Stad Eritrea",
                common: "Eritrea"
            },
            ces: {
                official: "St\xe1t Eritrea",
                common: "Eritrea"
            },
            cym: {
                official: "Gwladwriaeth Eritrea",
                common: "Eritrea"
            },
            deu: {
                official: "Staat Eritrea",
                common: "Eritrea"
            },
            est: {
                official: "Eritrea Riik",
                common: "Eritrea"
            },
            fin: {
                official: "Eritrean valtio",
                common: "Eritrea"
            },
            fra: {
                official: "\xc9tat d'\xc9rythr\xe9e",
                common: "\xc9rythr\xe9e"
            },
            hrv: {
                official: "Dr\u017Eava Eritreji",
                common: "Eritreja"
            },
            hun: {
                official: "Eritrea",
                common: "Eritrea"
            },
            ita: {
                official: "Stato di Eritrea",
                common: "Eritrea"
            },
            jpn: {
                official: "\u30A8\u30EA\u30C8\u30EA\u30A2\u56FD",
                common: "\u30A8\u30EA\u30C8\u30EA\u30A2"
            },
            kor: {
                official: "\uC5D0\uB9AC\uD2B8\uB808\uC544\uAD6D",
                common: "\uC5D0\uB9AC\uD2B8\uB808\uC544"
            },
            nld: {
                official: "Staat Eritrea",
                common: "Eritrea"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0631\u06CC\u062A\u0631\u0647",
                common: "\u0627\u0631\u06CC\u062A\u0631\u0647"
            },
            pol: {
                official: "Pa\u0144stwo Erytrea",
                common: "Erytrea"
            },
            por: {
                official: "Estado da Eritreia",
                common: "Eritreia"
            },
            rus: {
                official: "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u042D\u0440\u0438\u0442\u0440\u0435\u044F",
                common: "\u042D\u0440\u0438\u0442\u0440\u0435\u044F"
            },
            slk: {
                official: "Eritrejsk\xfd \u0161t\xe1t",
                common: "Eritrea"
            },
            spa: {
                official: "Estado de Eritrea",
                common: "Eritrea"
            },
            srp: {
                official: "\u0414\u0440\u0436\u0430\u0432\u0430 \u0415\u0440\u0438\u0442\u0440\u0435\u0458\u0430",
                common: "\u0415\u0440\u0438\u0442\u0440\u0435\u0458\u0430"
            },
            swe: {
                official: "Staten Eritrea",
                common: "Eritrea"
            },
            tur: {
                official: "Eritre Devleti",
                common: "Eritre"
            },
            urd: {
                official: "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0627\u0631\u062A\u0631\u06CC\u0627",
                common: "\u0627\u0631\u062A\u0631\u06CC\u0627"
            },
            zho: {
                official: "\u5384\u7ACB\u7279\u91CC\u4E9A",
                common: "\u5384\u7ACB\u7279\u91CC\u4E9A"
            }
        },
        latlng: [
            15,
            39
        ],
        landlocked: false,
        borders: [
            "DJI",
            "ETH",
            "SDN"
        ],
        area: 117600,
        demonyms: {
            eng: {
                f: "Eritrean",
                m: "Eritrean"
            },
            fra: {
                f: "\xc9rythr\xe9enne",
                m: "\xc9rythr\xe9en"
            }
        },
        flag: "\uD83C\uDDEA\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/HRyqUpnPwwG6jY5j6",
            openStreetMaps: "https://www.openstreetmap.org/relation/296961"
        },
        population: 5352000,
        fifa: "ERI",
        car: {
            signs: [
                "ER"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/er.png",
            svg: "https://flagcdn.com/er.svg",
            alt: "The flag of Eritrea comprises three triangles \u2014 a large red isosceles triangle with its base spanning the hoist end and its apex at the midpoint on the fly end, and a green and blue right-angled triangle above and beneath the red triangle. On the hoist side of the red triangle is a golden vertical olive branch encircled by a golden olive wreath."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/er.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/er.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                15.33,
                38.93
            ]
        }
    },
    {
        name: {
            common: "Tanzania",
            official: "United Republic of Tanzania",
            nativeName: {
                eng: {
                    official: "United Republic of Tanzania",
                    common: "Tanzania"
                },
                swa: {
                    official: "Jamhuri ya Muungano wa Tanzania",
                    common: "Tanzania"
                }
            }
        },
        tld: [
            ".tz"
        ],
        cca2: "TZ",
        ccn3: "834",
        cca3: "TZA",
        cioc: "TAN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            TZS: {
                name: "Tanzanian shilling",
                symbol: "Sh"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "55"
            ]
        },
        capital: [
            "Dodoma"
        ],
        altSpellings: [
            "TZ",
            "Tanzania, United Republic of",
            "United Republic of Tanzania",
            "Jamhuri ya Muungano wa Tanzania"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            eng: "English",
            swa: "Swahili"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0646\u0632\u0627\u0646\u064A\u0627 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                common: "\u062A\u0646\u0632\u0627\u0646\u064A\u0627"
            },
            bre: {
                official: "Republik Unanet Tanzania",
                common: "Tanzania"
            },
            ces: {
                official: "Sjednocen\xe1 tanzansk\xe1 republika",
                common: "Tanzanie"
            },
            cym: {
                official: "United Republic of Tanzania",
                common: "Tanzania"
            },
            deu: {
                official: "Vereinigte Republik Tansania",
                common: "Tansania"
            },
            est: {
                official: "Tansaania \xdchendvabariik",
                common: "Tansaania"
            },
            fin: {
                official: "Tansanian yhdistynyt tasavalta",
                common: "Tansania"
            },
            fra: {
                official: "R\xe9publique -Unie de Tanzanie",
                common: "Tanzanie"
            },
            hrv: {
                official: "Ujedinjena Republika Tanzanija",
                common: "Tanzanija"
            },
            hun: {
                official: "T\xe1dzsik K\xf6zt\xe1rsas\xe1g",
                common: "T\xe1dzsikiszt\xe1n"
            },
            ita: {
                official: "Repubblica Unita di Tanzania",
                common: "Tanzania"
            },
            jpn: {
                official: "\u30BF\u30F3\u30B6\u30CB\u30A2\u9023\u5408\u5171\u548C\u56FD",
                common: "\u30BF\u30F3\u30B6\u30CB\u30A2"
            },
            kor: {
                official: "\uD0C4\uC790\uB2C8\uC544 \uC5F0\uD569 \uACF5\uD654\uAD6D",
                common: "\uD0C4\uC790\uB2C8\uC544"
            },
            nld: {
                official: "Verenigde Republiek Tanzania",
                common: "Tanzania"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u062A\u062D\u062F \u062A\u0627\u0646\u0632\u0627\u0646\u06CC\u0627",
                common: "\u062A\u0627\u0646\u0632\u0627\u0646\u06CC\u0627"
            },
            pol: {
                official: "Zjednoczona Republika Tanzanii",
                common: "Tanzania"
            },
            por: {
                official: "Rep\xfablica Unida da Tanz\xe2nia",
                common: "Tanz\xe2nia"
            },
            rus: {
                official: "\u041E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0430\u043D\u0437\u0430\u043D\u0438\u044F",
                common: "\u0422\u0430\u043D\u0437\u0430\u043D\u0438\u044F"
            },
            slk: {
                official: "Tanz\xe1nijsk\xe1 zjednoten\xe1 republika",
                common: "Tanz\xe1nia"
            },
            spa: {
                official: "Rep\xfablica Unida de Tanzania",
                common: "Tanzania"
            },
            srp: {
                official: "\u0423\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0430\u043D\u0437\u0430\u043D\u0438\u0458\u0430",
                common: "\u0422\u0430\u043D\u0437\u0430\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "F\xf6renade republiken Tanzania",
                common: "Tanzania"
            },
            tur: {
                official: "Tanzanya Birle\u015Fik Cumhuriyeti",
                common: "Tanzanya"
            },
            urd: {
                official: "\u0645\u062A\u062D\u062F\u06C1 \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062A\u0646\u0632\u0627\u0646\u06CC\u06C1",
                common: "\u062A\u0646\u0632\u0627\u0646\u06CC\u06C1"
            },
            zho: {
                official: "\u5766\u6851\u5C3C\u4E9A\u8054\u5408\u5171\u548C\u56FD",
                common: "\u5766\u6851\u5C3C\u4E9A"
            }
        },
        latlng: [
            -6,
            35
        ],
        landlocked: false,
        borders: [
            "BDI",
            "COD",
            "KEN",
            "MWI",
            "MOZ",
            "RWA",
            "UGA",
            "ZMB"
        ],
        area: 945087,
        demonyms: {
            eng: {
                f: "Tanzanian",
                m: "Tanzanian"
            },
            fra: {
                f: "Tanzanienne",
                m: "Tanzanien"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDFF",
        maps: {
            googleMaps: "https://goo.gl/maps/NWYMqZYXte4zGZ2Q8",
            openStreetMaps: "https://www.openstreetmap.org/relation/195270"
        },
        population: 59734213,
        gini: {
            2017: 40.5
        },
        fifa: "TAN",
        car: {
            signs: [
                "EAT"
            ],
            side: "left"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tz.png",
            svg: "https://flagcdn.com/tz.svg",
            alt: "The flag of Tanzania features a yellow-edged black diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. Above and beneath this band are a green and light blue triangle respectively."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/tz.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/tz.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -6.16,
                35.75
            ]
        }
    },
    {
        name: {
            common: "South Korea",
            official: "Republic of Korea",
            nativeName: {
                kor: {
                    official: "\uB300\uD55C\uBBFC\uAD6D",
                    common: "\uD55C\uAD6D"
                }
            }
        },
        tld: [
            ".kr",
            ".\uD55C\uAD6D"
        ],
        cca2: "KR",
        ccn3: "410",
        cca3: "KOR",
        cioc: "KOR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            KRW: {
                name: "South Korean won",
                symbol: "\u20A9"
            }
        },
        idd: {
            root: "+8",
            suffixes: [
                "2"
            ]
        },
        capital: [
            "Seoul"
        ],
        altSpellings: [
            "KR",
            "Korea, Republic of",
            "Republic of Korea",
            "\uB0A8\uD55C",
            "\uB0A8\uC870\uC120"
        ],
        region: "Asia",
        subregion: "Eastern Asia",
        languages: {
            kor: "Korean"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0631\u064A\u0627",
                common: "\u0643\u0648\u0631\u064A\u0627 \u0627\u0644\u062C\u0646\u0648\u0628\u064A\u0629"
            },
            bre: {
                official: "Republik Korea",
                common: "Korea ar Su"
            },
            ces: {
                official: "Korejsk\xe1 republika",
                common: "Ji\u017En\xed Korea"
            },
            cym: {
                official: "Republic of Korea",
                common: "South Korea"
            },
            deu: {
                official: "Republik Korea",
                common: "S\xfcdkorea"
            },
            est: {
                official: "Korea Vabariik",
                common: "L\xf5una-Korea"
            },
            fin: {
                official: "Korean tasavalta",
                common: "Etel\xe4-Korea"
            },
            fra: {
                official: "R\xe9publique de Cor\xe9e",
                common: "Cor\xe9e du Sud"
            },
            hrv: {
                official: "Republika Koreja",
                common: "Ju\u017Ena Koreja"
            },
            hun: {
                official: "Koreai K\xf6zt\xe1rsas\xe1g",
                common: "D\xe9l-Korea"
            },
            ita: {
                official: "Repubblica di Corea",
                common: "Corea del Sud"
            },
            jpn: {
                official: "\u5927\u97D3\u6C11\u56FD",
                common: "\u97D3\u56FD"
            },
            kor: {
                official: "\uB300\uD55C\uBBFC\uAD6D",
                common: "\uD55C\uAD6D"
            },
            nld: {
                official: "Republiek Korea",
                common: "Zuid-Korea"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0631\u0647",
                common: "\u06A9\u0631\u0647\u0654 \u062C\u0646\u0648\u0628\u06CC"
            },
            pol: {
                official: "Republika Korei",
                common: "Korea Po\u0142udniowa"
            },
            por: {
                official: "Rep\xfablica da Coreia",
                common: "Coreia do Sul"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0440\u0435\u044F",
                common: "\u042E\u0436\u043D\u0430\u044F \u041A\u043E\u0440\u0435\u044F"
            },
            slk: {
                official: "K\xf3rejsk\xe1 republika",
                common: "Ju\u017En\xe1 K\xf3rea"
            },
            spa: {
                official: "Rep\xfablica de Corea",
                common: "Corea del Sur"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0440\u0435\u0458\u0430",
                common: "\u0408\u0443\u0436\u043D\u0430 \u041A\u043E\u0440\u0435\u0458\u0430"
            },
            swe: {
                official: "Republiken Korea",
                common: "Sydkorea"
            },
            tur: {
                official: "Kore Cumhuriyeti",
                common: "G\xfcney Kore"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u0631\u06CC\u0627 ",
                common: "\u062C\u0646\u0648\u0628\u06CC \u06A9\u0648\u0631\u06CC\u0627"
            },
            zho: {
                official: "\u5927\u97E9\u6C11\u56FD",
                common: "\u97E9\u56FD"
            }
        },
        latlng: [
            37,
            127.5
        ],
        landlocked: false,
        borders: [
            "PRK"
        ],
        area: 100210,
        demonyms: {
            eng: {
                f: "South Korean",
                m: "South Korean"
            },
            fra: {
                f: "Sud-cor\xe9enne",
                m: "Sud-cor\xe9en"
            }
        },
        flag: "\uD83C\uDDF0\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/7ecjaJXefjAQhxjGA",
            openStreetMaps: "https://www.openstreetmap.org/relation/307756"
        },
        population: 51780579,
        gini: {
            2016: 31.4
        },
        fifa: "KOR",
        car: {
            signs: [
                "ROK"
            ],
            side: "right"
        },
        timezones: [
            "UTC+09:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/kr.png",
            svg: "https://flagcdn.com/kr.svg",
            alt: "The flag of South Korea has a white field, at the center of which is a red and blue Taegeuk circle surrounded by four black trigrams, one in each corner."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/kr.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/kr.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                37.55,
                126.98
            ]
        },
        postalCode: {
            format: "SEOUL ###-###",
            regex: "^(?:SEOUL)*(\\d{6})$"
        }
    },
    {
        name: {
            common: "Jordan",
            official: "Hashemite Kingdom of Jordan",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0623\u0631\u062F\u0646\u064A\u0629 \u0627\u0644\u0647\u0627\u0634\u0645\u064A\u0629",
                    common: "\u0627\u0644\u0623\u0631\u062F\u0646"
                }
            }
        },
        tld: [
            ".jo",
            "\u0627\u0644\u0627\u0631\u062F\u0646."
        ],
        cca2: "JO",
        ccn3: "400",
        cca3: "JOR",
        cioc: "JOR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            JOD: {
                name: "Jordanian dinar",
                symbol: "\u062F.\u0627"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "62"
            ]
        },
        capital: [
            "Amman"
        ],
        altSpellings: [
            "JO",
            "Hashemite Kingdom of Jordan",
            "al-Mamlakah al-Urdun\u012Byah al-H\u0101shim\u012Byah"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u0645\u0645\u0644\u0643\u0629 \u0627\u0644\u0623\u0631\u062F\u0646\u064A\u0629 \u0627\u0644\u0647\u0627\u0634\u0645\u064A\u0629",
                common: "\u0627\u0644\u0623\u0631\u062F\u0646"
            },
            bre: {
                official: "Rouantelezh hachemit Jordania",
                common: "Jordania"
            },
            ces: {
                official: "Jord\xe1nsk\xe9 h\xe1\u0161imovsk\xe9 kr\xe1lovstv\xed",
                common: "Jord\xe1nsko"
            },
            cym: {
                official: "Hashemite Kingdom of Jordan",
                common: "Jordan"
            },
            deu: {
                official: "Haschemitisches K\xf6nigreich Jordanien",
                common: "Jordanien"
            },
            est: {
                official: "Jordaania Ha\u0161imiidi Kuningriik",
                common: "Jordaania"
            },
            fin: {
                official: "Jordanian ha\u0161emiittinen kunigaskunta",
                common: "Jordania"
            },
            fra: {
                official: "Royaume hach\xe9mite de Jordanie",
                common: "Jordanie"
            },
            hrv: {
                official: "Ha\u0161emitske Kraljevine Jordan",
                common: "Jordan"
            },
            hun: {
                official: "Jord\xe1nia",
                common: "Jord\xe1nia"
            },
            ita: {
                official: "Regno hascemita di Giordania",
                common: "Giordania"
            },
            jpn: {
                official: "\u30E8\u30EB\u30C0\u30F3\xb7\u30CF\u30B7\u30DF\u30C6\u738B\u56FD",
                common: "\u30E8\u30EB\u30C0\u30F3"
            },
            kor: {
                official: "\uC694\uB974\uB2E8 \uD558\uC2EC \uC655\uAD6D",
                common: "\uC694\uB974\uB2E8"
            },
            nld: {
                official: "Hasjemitisch Koninkrijk Jordani\xeb",
                common: "Jordani\xeb"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0627\u064F\u0631\u062F\u064F\u0646 \u0647\u0627\u0634\u0645\u06CC",
                common: "\u0627\u0631\u062F\u0646"
            },
            pol: {
                official: "Jorda\u0144skie Kr\xf3lestwo Haszymidzkie",
                common: "Jordania"
            },
            por: {
                official: "Reino Hachemita da Jord\xe2nia",
                common: "Jord\xe2nia"
            },
            rus: {
                official: "\u0418\u043E\u0440\u0434\u0430\u043D\u0441\u043A\u043E\u0433\u043E \u0425\u0430\u0448\u0438\u043C\u0438\u0442\u0441\u043A\u043E\u0433\u043E \u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u0430",
                common: "\u0418\u043E\u0440\u0434\u0430\u043D\u0438\u044F"
            },
            slk: {
                official: "Jord\xe1nske h\xe1\u0161imovsk\xe9 kr\xe1\u013Eovstvo",
                common: "Jord\xe1nsko"
            },
            spa: {
                official: "Reino Hachemita de Jordania",
                common: "Jordania"
            },
            srp: {
                official: "\u0425\u0430\u0448\u0435\u043C\u0438\u0442\u0441\u043A\u0430 \u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0408\u043E\u0440\u0434\u0430\u043D",
                common: "\u0408\u043E\u0440\u0434\u0430\u043D"
            },
            swe: {
                official: "Hashimitiska kungad\xf6met Jordanien",
                common: "Jordanien"
            },
            tur: {
                official: "\xdcrd\xfcn H\xe2\u015Fimi Krall\u0131\u011F\u0131",
                common: "\xdcrd\xfcn"
            },
            urd: {
                official: "\u06BE\u0627\u0634\u0645\u06CC \u0645\u0645\u0644\u06A9\u062A\u0650 \u0627\u0631\u062F\u0646",
                common: "\u0627\u0631\u062F\u0646"
            },
            zho: {
                official: "\u7EA6\u65E6\u54C8\u5E0C\u59C6\u738B\u56FD",
                common: "\u7EA6\u65E6"
            }
        },
        latlng: [
            31,
            36
        ],
        landlocked: false,
        borders: [
            "IRQ",
            "ISR",
            "PSE",
            "SAU",
            "SYR"
        ],
        area: 89342,
        demonyms: {
            eng: {
                f: "Jordanian",
                m: "Jordanian"
            },
            fra: {
                f: "Jordanienne",
                m: "Jordanien"
            }
        },
        flag: "\uD83C\uDDEF\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/ko1dzSDKg8Gsi9A98",
            openStreetMaps: "https://www.openstreetmap.org/relation/184818"
        },
        population: 10203140,
        gini: {
            2010: 33.7
        },
        fifa: "JOR",
        car: {
            signs: [
                "HKJ"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/jo.png",
            svg: "https://flagcdn.com/jo.svg",
            alt: "The flag of Jordan is composed of three equal horizontal bands of black, white and green, with a red isosceles triangle superimposed on the hoist side of the field. This triangle has its base on the hoist end, spans about half the width of the field and bears a small seven-pointed white star at its center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/jo.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/jo.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                31.95,
                35.93
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Mauritania",
            official: "Islamic Republic of Mauritania",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A\u0629 \u0627\u0644\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0629",
                    common: "\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627"
                }
            }
        },
        tld: [
            ".mr"
        ],
        cca2: "MR",
        ccn3: "478",
        cca3: "MRT",
        cioc: "MTN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MRU: {
                name: "Mauritanian ouguiya",
                symbol: "UM"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "22"
            ]
        },
        capital: [
            "Nouakchott"
        ],
        altSpellings: [
            "MR",
            "Islamic Republic of Mauritania",
            "al-Jumh\u016Briyyah al-\u02BEIsl\u0101miyyah al-M\u016Br\u012Bt\u0101niyyah"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A\u0629 \u0627\u0644\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0629",
                common: "\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627"
            },
            bre: {
                official: "Republik islamek Maouritania",
                common: "Maouritania"
            },
            ces: {
                official: "Maurit\xe1nsk\xe1 isl\xe1msk\xe1 republika",
                common: "Maurit\xe1nie"
            },
            cym: {
                official: "Islamic Republic of Mauritania",
                common: "Mauritania"
            },
            deu: {
                official: "Islamische Republik Mauretanien",
                common: "Mauretanien"
            },
            est: {
                official: "Mauritaania Islamivabariik",
                common: "Mauritaania"
            },
            fin: {
                official: "Mauritanian islamilainen tasavalta",
                common: "Mauritania"
            },
            fra: {
                official: "R\xe9publique islamique de Mauritanie",
                common: "Mauritanie"
            },
            hrv: {
                official: "Islamska Republika Mauritanija",
                common: "Mauritanija"
            },
            hun: {
                official: "Maurit\xe1niai Iszl\xe1m K\xf6zt\xe1rsas\xe1g",
                common: "Maurit\xe1nia"
            },
            ita: {
                official: "Repubblica islamica di Mauritania",
                common: "Mauritania"
            },
            jpn: {
                official: "\u30E2\u30FC\u30EA\u30BF\u30CB\u30A2\xb7\u30A4\u30B9\u30E9\u30E0\u5171\u548C\u56FD",
                common: "\u30E2\u30FC\u30EA\u30BF\u30CB\u30A2"
            },
            kor: {
                official: "\uBAA8\uB9AC\uD0C0\uB2C8 \uC774\uC2AC\uB78C \uACF5\uD654\uAD6D",
                common: "\uBAA8\uB9AC\uD0C0\uB2C8"
            },
            nld: {
                official: "Islamitische Republiek Mauritani\xeb",
                common: "Mauritani\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0645\u0648\u0631\u06CC\u062A\u0627\u0646\u06CC",
                common: "\u0645\u0648\u0631\u06CC\u062A\u0627\u0646\u06CC"
            },
            pol: {
                official: "Islamska Republika Maureta\u0144ska",
                common: "Mauretania"
            },
            por: {
                official: "Rep\xfablica Isl\xe2mica da Maurit\xe2nia",
                common: "Maurit\xe2nia"
            },
            rus: {
                official: "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0432\u0440\u0438\u0442\u0430\u043D\u0438\u044F",
                common: "\u041C\u0430\u0432\u0440\u0438\u0442\u0430\u043D\u0438\u044F"
            },
            slk: {
                official: "Maurit\xe1nska islamsk\xe1 republika",
                common: "Maurit\xe1nia"
            },
            spa: {
                official: "Rep\xfablica Isl\xe1mica de Mauritania",
                common: "Mauritania"
            },
            srp: {
                official: "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u0443\u0440\u0438\u0442\u0430\u043D\u0438\u0458\u0430",
                common: "\u041C\u0430\u0443\u0440\u0438\u0442\u0430\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Islamiska republiken Mauretanien",
                common: "Mauretanien"
            },
            tur: {
                official: "Moritanya \u0130slam Cumhuriyeti",
                common: "Moritanya"
            },
            urd: {
                official: "\u0627\u0633\u0644\u0627\u0645\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0648\u0631\u06CC\u062A\u0627\u0646\u06CC\u06C1",
                common: "\u0645\u0648\u0631\u06CC\u062A\u0627\u0646\u06CC\u06C1"
            },
            zho: {
                official: "\u6BDB\u91CC\u5854\u5C3C\u4E9A\u4F0A\u65AF\u5170\u5171\u548C\u56FD",
                common: "\u6BDB\u91CC\u5854\u5C3C\u4E9A"
            }
        },
        latlng: [
            20,
            -12
        ],
        landlocked: false,
        borders: [
            "DZA",
            "MLI",
            "SEN",
            "ESH"
        ],
        area: 1030700,
        demonyms: {
            eng: {
                f: "Mauritanian",
                m: "Mauritanian"
            },
            fra: {
                f: "Mauritanienne",
                m: "Mauritanien"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/im2MmQ5jFjzxWBks5",
            openStreetMaps: "https://www.openstreetmap.org/relation/192763"
        },
        population: 4649660,
        gini: {
            2014: 32.6
        },
        fifa: "MTN",
        car: {
            signs: [
                "RIM"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mr.png",
            svg: "https://flagcdn.com/mr.svg",
            alt: "The flag of Mauritania has a green field with a thin red horizontal band at the top and bottom of the field. At the center of the field is a five-pointed yellow star above an upward facing yellow crescent."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mr.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mr.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                18.07,
                -15.97
            ]
        }
    },
    {
        name: {
            common: "Lithuania",
            official: "Republic of Lithuania",
            nativeName: {
                lit: {
                    official: "Lietuvos Respublikos",
                    common: "Lietuva"
                }
            }
        },
        tld: [
            ".lt"
        ],
        cca2: "LT",
        ccn3: "440",
        cca3: "LTU",
        cioc: "LTU",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "70"
            ]
        },
        capital: [
            "Vilnius"
        ],
        altSpellings: [
            "LT",
            "Republic of Lithuania",
            "Lietuvos Respublika"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            lit: "Lithuanian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0644\u064A\u062A\u0648\u0627\u0646\u064A\u0627",
                common: "\u0644\u064A\u062A\u0648\u0627\u0646\u064A\u0627"
            },
            bre: {
                official: "Republik Lituania",
                common: "Lituania"
            },
            ces: {
                official: "Litevsk\xe1 republika",
                common: "Litva"
            },
            cym: {
                official: "Republic of Lithuania",
                common: "Lithuania"
            },
            deu: {
                official: "Republik Litauen",
                common: "Litauen"
            },
            est: {
                official: "Leedu Vabariik",
                common: "Leedu"
            },
            fin: {
                official: "Liettuan tasavalta",
                common: "Liettua"
            },
            fra: {
                official: "R\xe9publique de Lituanie",
                common: "Lituanie"
            },
            hrv: {
                official: "Republika Litva",
                common: "Litva"
            },
            hun: {
                official: "Litv\xe1n K\xf6zt\xe1rsas\xe1g",
                common: "Litv\xe1nia"
            },
            ita: {
                official: "Repubblica di Lituania",
                common: "Lituania"
            },
            jpn: {
                official: "\u30EA\u30C8\u30A2\u30CB\u30A2\u5171\u548C\u56FD",
                common: "\u30EA\u30C8\u30A2\u30CB\u30A2"
            },
            kor: {
                official: "\uB9AC\uD22C\uC544\uB2C8\uC544 \uACF5\uD654\uAD6D",
                common: "\uB9AC\uD22C\uC544\uB2C8\uC544"
            },
            nld: {
                official: "Republiek Litouwen",
                common: "Litouwen"
            },
            per: {
                official: "\u0644\u06CC\u062A\u0648\u0627\u0646\u06CC\u0627\u06CC\u06CC\u200C\u0647\u0627",
                common: "\u0644\u06CC\u062A\u0648\u0627\u0646\u06CC\u0627\u06CC\u06CC\u200C\u0647\u0627"
            },
            pol: {
                official: "Republika Litewska",
                common: "Litwa"
            },
            por: {
                official: "Rep\xfablica da Litu\xe2nia",
                common: "Litu\xe2nia"
            },
            rus: {
                official: "\u041B\u0438\u0442\u043E\u0432\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041B\u0438\u0442\u0432\u0430"
            },
            slk: {
                official: "Litovsk\xe1 republika",
                common: "Litva"
            },
            spa: {
                official: "Rep\xfablica de Lituania",
                common: "Lituania"
            },
            srp: {
                official: "\u041B\u0438\u0442\u0432\u0430\u043D\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041B\u0438\u0442\u0432\u0430\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Litauen",
                common: "Litauen"
            },
            tur: {
                official: "Litvanya Cumhuriyeti",
                common: "Litvanya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0644\u062A\u06BE\u0648\u0648\u06CC\u0646\u06CC\u0627",
                common: "\u0644\u062A\u06BE\u0648\u0648\u06CC\u0646\u06CC\u0627"
            },
            zho: {
                official: "\u7ACB\u9676\u5B9B\u5171\u548C\u56FD",
                common: "\u7ACB\u9676\u5B9B"
            }
        },
        latlng: [
            56,
            24
        ],
        landlocked: false,
        borders: [
            "BLR",
            "LVA",
            "POL",
            "RUS"
        ],
        area: 65300,
        demonyms: {
            eng: {
                f: "Lithuanian",
                m: "Lithuanian"
            },
            fra: {
                f: "Lituanienne",
                m: "Lituanien"
            }
        },
        flag: "\uD83C\uDDF1\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/dd1s9rrLjrK2G8yY6",
            openStreetMaps: "https://www.openstreetmap.org/relation/72596"
        },
        population: 2794700,
        gini: {
            2018: 35.7
        },
        fifa: "LTU",
        car: {
            signs: [
                "LT"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/lt.png",
            svg: "https://flagcdn.com/lt.svg",
            alt: "The flag of Lithuania is composed of three equal horizontal bands of yellow, green and red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/lt.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/lt.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                54.68,
                25.32
            ]
        },
        postalCode: {
            format: "LT-#####",
            regex: "^(?:LT)*(\\d{5})$"
        }
    },
    {
        name: {
            common: "United States Minor Outlying Islands",
            official: "United States Minor Outlying Islands",
            nativeName: {
                eng: {
                    official: "United States Minor Outlying Islands",
                    common: "United States Minor Outlying Islands"
                }
            }
        },
        tld: [
            ".us"
        ],
        cca2: "UM",
        ccn3: "581",
        cca3: "UMI",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "68"
            ]
        },
        capital: [
            "Washington DC"
        ],
        altSpellings: [
            "UM"
        ],
        region: "Americas",
        subregion: "North America",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629 \u0627\u0644\u0635\u063A\u064A\u0631\u0629 \u0627\u0644\u0646\u0627\u0626\u064A\u0629",
                common: "\u062C\u0632\u0631 \u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629 \u0627\u0644\u0635\u063A\u064A\u0631\u0629 \u0627\u0644\u0646\u0627\u0626\u064A\u0629"
            },
            bre: {
                official: "Inizi Minor A-bell Stado\xf9-Unanet",
                common: "Inizi Minor A-bell Stado\xf9-Unanet"
            },
            ces: {
                official: "Men\u0161\xed odlehl\xe9 ostrovy Spojen\xfdch st\xe1t\u016F americk\xfdch",
                common: "Men\u0161\xed odlehl\xe9 ostrovy USA"
            },
            cym: {
                official: "United States Minor Outlying Islands",
                common: "United States Minor Outlying Islands"
            },
            deu: {
                official: "USA, kleinere ausgelagerte Inseln",
                common: "Kleinere Inselbesitzungen der Vereinigten Staaten"
            },
            est: {
                official: "\xdchendriikide v\xe4ikesed hajasaared",
                common: "\xdchendriikide hajasaared"
            },
            fin: {
                official: "Yhdysvaltain asumattomat saaret",
                common: "Yhdysvaltain asumattomat saaret"
            },
            fra: {
                official: "\xceles mineures \xe9loign\xe9es des \xc9tats-Unis",
                common: "\xceles mineures \xe9loign\xe9es des \xc9tats-Unis"
            },
            hrv: {
                official: "Mali udaljeni otoci SAD-a",
                common: "Mali udaljeni otoci SAD-a"
            },
            hun: {
                official: "Az Amerikai Egyes\xfclt \xc1llamok lakatlan k\xfclbirtokai",
                common: "Az Amerikai Egyes\xfclt \xc1llamok lakatlan k\xfclbirtokai"
            },
            ita: {
                official: "Stati Uniti Isole Minori",
                common: "Isole minori esterne degli Stati Uniti d'America"
            },
            jpn: {
                official: "\u30A2\u30E1\u30EA\u30AB\u5408\u8846\u56FD\u5916\u8AF8\u5CF6",
                common: "\u5408\u8846\u56FD\u9818\u6709\u5C0F\u96E2\u5CF6"
            },
            kor: {
                official: "\uBBF8\uAD6D\uB839 \uAD70\uC18C \uC81C\uB3C4",
                common: "\uBBF8\uAD6D\uB839 \uAD70\uC18C \uC81C\uB3C4"
            },
            nld: {
                official: "Kleine afgelegen eilanden van de Verenigde Staten",
                common: "Kleine afgelegen eilanden van de Verenigde Staten"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u0686\u06A9 \u062D\u0627\u0634\u06CC\u0647\u200C\u0627\u06CC \u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u0648\u0686\u06A9 \u062D\u0627\u0634\u06CC\u0647\u200C\u0627\u06CC \u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627"
            },
            pol: {
                official: "Dalekie Wyspy Mniejsze Stan\xf3w Zjednoczonych",
                common: "Dalekie Wyspy Mniejsze Stan\xf3w Zjednoczonych"
            },
            por: {
                official: "Estados Unidos Ilhas Menores Distantes",
                common: "Ilhas Menores Distantes dos Estados Unidos"
            },
            rus: {
                official: "\u0412\u043D\u0435\u0448\u043D\u0438\u0435 \u043C\u0430\u043B\u044B\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u0421\u0428\u0410",
                common: "\u0412\u043D\u0435\u0448\u043D\u0438\u0435 \u043C\u0430\u043B\u044B\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430 \u0421\u0428\u0410"
            },
            slk: {
                official: "Men\u0161ie od\u013Eahl\xe9 ostrovy Spjoen\xfdch \u0161t\xe1tov",
                common: "Men\u0161ie od\u013Eahl\xe9 ostrovy USA"
            },
            spa: {
                official: "Estados Unidos Islas menores alejadas de",
                common: "Islas Ultramarinas Menores de Estados Unidos"
            },
            srp: {
                official: "\u041C\u0430\u043B\u0430 \u0441\u043F\u043E\u0459\u043D\u0430 \u043E\u0441\u0442\u0440\u0432\u0430 \u0421\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0438\u0445 \u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0438\u0445 \u0414\u0440\u0436\u0430\u0432\u0430",
                common: "\u041C\u0430\u043B\u0430 \u0441\u043F\u043E\u0459\u043D\u0430 \u043E\u0441\u0442\u0440\u0432\u0430 \u0421\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0438\u0445 \u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0438\u0445 \u0414\u0440\u0436\u0430\u0432\u0430"
            },
            swe: {
                official: "F\xf6renta staternas mindre \xf6ar i Oceanien och V\xe4stindien",
                common: "F\xf6renta staternas mindre \xf6ar i Oceanien och V\xe4stindien"
            },
            tur: {
                official: "Amerika Birle\u015Fik Devletleri K\xfc\xe7\xfck D\u0131\u015F Adalar\u0131",
                common: "Amerika Birle\u015Fik Devletleri K\xfc\xe7\xfck D\u0131\u015F Adalar\u0131"
            },
            urd: {
                official: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0686\u06BE\u0648\u0679\u06D2 \u0628\u06CC\u0631\u0648\u0646\u06CC \u062C\u0632\u0627\u0626\u0631",
                common: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0686\u06BE\u0648\u0679\u06D2 \u0628\u06CC\u0631\u0648\u0646\u06CC \u062C\u0632\u0627\u0626\u0631"
            },
            zho: {
                official: "\u7F8E\u56FD\u672C\u571F\u5916\u5C0F\u5C9B\u5C7F",
                common: "\u7F8E\u56FD\u672C\u571F\u5916\u5C0F\u5C9B\u5C7F"
            }
        },
        latlng: [
            19.3,
            166.633333
        ],
        landlocked: false,
        area: 34.2,
        demonyms: {
            eng: {
                f: "American Islander",
                m: "American Islander"
            }
        },
        flag: "\uD83C\uDDFA\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/hZKnrzgeK69dDyPF8",
            openStreetMaps: "https://www.openstreetmap.org/relation/6430384"
        },
        population: 300,
        car: {
            signs: [
                ""
            ],
            side: "right"
        },
        timezones: [
            "UTC-11:00",
            "UTC-10:00",
            "UTC+12:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/um.png",
            svg: "https://flagcdn.com/um.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {}
    },
    {
        name: {
            common: "Slovakia",
            official: "Slovak Republic",
            nativeName: {
                slk: {
                    official: "Slovensk\xe1 republika",
                    common: "Slovensko"
                }
            }
        },
        tld: [
            ".sk"
        ],
        cca2: "SK",
        ccn3: "703",
        cca3: "SVK",
        cioc: "SVK",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "21"
            ]
        },
        capital: [
            "Bratislava"
        ],
        altSpellings: [
            "SK",
            "Slovak Republic",
            "Slovensk\xe1 republika"
        ],
        region: "Europe",
        subregion: "Central Europe",
        languages: {
            slk: "Slovak"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u0644\u0648\u0641\u0627\u0643\u064A\u0627",
                common: "\u0633\u0644\u0648\u0641\u0627\u0643\u064A\u0627"
            },
            bre: {
                official: "Republik Slovak",
                common: "Slovakia"
            },
            ces: {
                official: "Slovensk\xe1 republika",
                common: "Slovensko"
            },
            cym: {
                official: "Slovak Republic",
                common: "Slovakia"
            },
            deu: {
                official: "Slowakische Republik",
                common: "Slowakei"
            },
            est: {
                official: "Slovaki Vabariik",
                common: "Slovakkia"
            },
            fin: {
                official: "Slovakian tasavalta",
                common: "Slovakia"
            },
            fra: {
                official: "R\xe9publique slovaque",
                common: "Slovaquie"
            },
            hrv: {
                official: "slova\u010Dka",
                common: "Slova\u010Dka"
            },
            hun: {
                official: "Szlov\xe1k K\xf6zt\xe1rsas\xe1g",
                common: "Szlov\xe1kia"
            },
            ita: {
                official: "Repubblica slovacca",
                common: "Slovacchia"
            },
            jpn: {
                official: "\u30B9\u30ED\u30D0\u30AD\u30A2\u5171\u548C\u56FD",
                common: "\u30B9\u30ED\u30D0\u30AD\u30A2"
            },
            kor: {
                official: "\uC2AC\uB85C\uBC14\uD0A4\uC544 \uACF5\uD654\uAD6D",
                common: "\uC2AC\uB85C\uBC14\uD0A4\uC544"
            },
            nld: {
                official: "Slowaakse Republiek",
                common: "Slowakije"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0648\u0627\u06A9\u06CC",
                common: "\u0627\u0650\u0633\u0644\u064F\u0648\u0627\u06A9\u06CC"
            },
            pol: {
                official: "Republika S\u0142owacka",
                common: "S\u0142owacja"
            },
            por: {
                official: "Rep\xfablica Eslovaca",
                common: "Eslov\xe1quia"
            },
            rus: {
                official: "\u0421\u043B\u043E\u0432\u0430\u0446\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0421\u043B\u043E\u0432\u0430\u043A\u0438\u044F"
            },
            slk: {
                official: "Slovensk\xe1 republika",
                common: "Slovensko"
            },
            spa: {
                official: "Rep\xfablica Eslovaca",
                common: "Rep\xfablica Eslovaca"
            },
            srp: {
                official: "\u0421\u043B\u043E\u0432\u0430\u0447\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u0421\u043B\u043E\u0432\u0430\u0447\u043A\u0430"
            },
            swe: {
                official: "Republiken Slovakien",
                common: "Slovakien"
            },
            tur: {
                official: "Slovak Cumhuriyeti",
                common: "Slovakya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0644\u0648\u0648\u0627\u06A9\u06CC\u06C1",
                common: "\u0633\u0644\u0648\u0648\u0627\u06A9\u06CC\u06C1"
            },
            zho: {
                official: "\u65AF\u6D1B\u4F10\u514B\u5171\u548C\u56FD",
                common: "\u65AF\u6D1B\u4F10\u514B"
            }
        },
        latlng: [
            48.66666666,
            19.5
        ],
        landlocked: true,
        borders: [
            "AUT",
            "CZE",
            "HUN",
            "POL",
            "UKR"
        ],
        area: 49037,
        demonyms: {
            eng: {
                f: "Slovak",
                m: "Slovak"
            },
            fra: {
                f: "Slovaque",
                m: "Slovaque"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDF0",
        maps: {
            googleMaps: "https://goo.gl/maps/uNSH2wW4bLoZVYJj7",
            openStreetMaps: "https://www.openstreetmap.org/relation/14296"
        },
        population: 5458827,
        gini: {
            2018: 25
        },
        fifa: "SVK",
        car: {
            signs: [
                "SK"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sk.png",
            svg: "https://flagcdn.com/sk.svg",
            alt: "The flag of Slovakia is composed of three equal horizontal bands of white, blue and red. The coat of arms of Slovakia is superimposed at the center of the field slightly towards the hoist side."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sk.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sk.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                48.15,
                17.12
            ]
        },
        postalCode: {
            format: "###  ##",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Angola",
            official: "Republic of Angola",
            nativeName: {
                por: {
                    official: "Rep\xfablica de Angola",
                    common: "Angola"
                }
            }
        },
        tld: [
            ".ao"
        ],
        cca2: "AO",
        ccn3: "024",
        cca3: "AGO",
        cioc: "ANG",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            AOA: {
                name: "Angolan kwanza",
                symbol: "Kz"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "44"
            ]
        },
        capital: [
            "Luanda"
        ],
        altSpellings: [
            "AO",
            "Rep\xfablica de Angola",
            "\u0281\u025Bpublika de an'\u0261\u0254la"
        ],
        region: "Africa",
        subregion: "Middle Africa",
        languages: {
            por: "Portuguese"
        },
        translations: {
            ara: {
                official: "\u0623\u0646\u063A\u0648\u0644\u0627",
                common: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0646\u063A\u0648\u0644\u0627"
            },
            bre: {
                official: "Republik Angola",
                common: "Angola"
            },
            ces: {
                official: "Angolsk\xe1 republika",
                common: "Angola"
            },
            cym: {
                official: "Gweriniaeth Angola",
                common: "Angola"
            },
            deu: {
                official: "Republik Angola",
                common: "Angola"
            },
            est: {
                official: "Angola Vabariik",
                common: "Angola"
            },
            fin: {
                official: "Angolan tasavalta",
                common: "Angola"
            },
            fra: {
                official: "R\xe9publique d'Angola",
                common: "Angola"
            },
            hrv: {
                official: "Republika Angola",
                common: "Angola"
            },
            hun: {
                official: "Angola",
                common: "Angola"
            },
            ita: {
                official: "Repubblica dell'Angola",
                common: "Angola"
            },
            jpn: {
                official: "\u30A2\u30F3\u30B4\u30E9\u5171\u548C\u56FD",
                common: "\u30A2\u30F3\u30B4\u30E9"
            },
            kor: {
                official: "\uC559\uACE8\uB77C \uACF5\uD654\uAD6D",
                common: "\uC559\uACE8\uB77C"
            },
            nld: {
                official: "Republiek Angola",
                common: "Angola"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0646\u06AF\u0648\u0644\u0627",
                common: "\u0622\u0646\u06AF\u0648\u0644\u0627"
            },
            pol: {
                official: "Republika Angoli",
                common: "Angola"
            },
            por: {
                official: "Rep\xfablica de Angola",
                common: "Angola"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043D\u0433\u043E\u043B\u0430",
                common: "\u0410\u043D\u0433\u043E\u043B\u0430"
            },
            slk: {
                official: "Angolsk\xe1 republika",
                common: "Angola"
            },
            spa: {
                official: "Rep\xfablica de Angola",
                common: "Angola"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043D\u0433\u043E\u043B\u0430",
                common: "\u0410\u043D\u0433\u043E\u043B\u0430"
            },
            swe: {
                official: "Republiken Angola",
                common: "Angola"
            },
            tur: {
                official: "Angola Cumhuriyeti",
                common: "Angola"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0646\u06AF\u0648\u0644\u06C1",
                common: "\u0627\u0646\u06AF\u0648\u0644\u06C1"
            },
            zho: {
                official: "\u5B89\u54E5\u62C9\u5171\u548C\u56FD",
                common: "\u5B89\u54E5\u62C9"
            }
        },
        latlng: [
            -12.5,
            18.5
        ],
        landlocked: false,
        borders: [
            "COG",
            "COD",
            "ZMB",
            "NAM"
        ],
        area: 1246700,
        demonyms: {
            eng: {
                f: "Angolan",
                m: "Angolan"
            },
            fra: {
                f: "Angolaise",
                m: "Angolais"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/q42Qbf1BmQL3fuZg9",
            openStreetMaps: "https://www.openstreetmap.org/relation/195267"
        },
        population: 32866268,
        gini: {
            2018: 51.3
        },
        fifa: "ANG",
        car: {
            signs: [
                "ANG"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ao.png",
            svg: "https://flagcdn.com/ao.svg",
            alt: "The flag of Angola features two equal horizontal bands of red and black, with a yellow emblem at its centre. This emblem consists of a five-pointed star within the hoist-side facing half of a cogwheel that is crossed on its lower end by a machete."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ao.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ao.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -8.83,
                13.22
            ]
        }
    },
    {
        name: {
            common: "Kazakhstan",
            official: "Republic of Kazakhstan",
            nativeName: {
                kaz: {
                    official: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430\u0441\u044B",
                    common: "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D"
                },
                rus: {
                    official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D",
                    common: "\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D"
                }
            }
        },
        tld: [
            ".kz",
            ".\u049B\u0430\u0437"
        ],
        cca2: "KZ",
        ccn3: "398",
        cca3: "KAZ",
        cioc: "KAZ",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            KZT: {
                name: "Kazakhstani tenge",
                symbol: "\u20B8"
            }
        },
        idd: {
            root: "+7",
            suffixes: [
                "6",
                "7"
            ]
        },
        capital: [
            "Nur-Sultan"
        ],
        altSpellings: [
            "KZ",
            "Qazaqstan",
            "\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D",
            "Republic of Kazakhstan",
            "\u049A\u0430\u0437\u0430\u049B\u0441\u0442\u0430\u043D \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430\u0441\u044B",
            "Qazaqstan Respubl\xefkas\u0131",
            "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D",
            "Respublika Kazakhstan"
        ],
        region: "Asia",
        subregion: "Central Asia",
        languages: {
            kaz: "Kazakh",
            rus: "Russian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0627\u0632\u0627\u062E\u0633\u062A\u0627\u0646",
                common: "\u0643\u0627\u0632\u0627\u062E\u0633\u062A\u0627\u0646"
            },
            bre: {
                official: "Republik Kazakstan",
                common: "Kazakstan"
            },
            ces: {
                official: "Republika Kazachst\xe1n",
                common: "Kazachst\xe1n"
            },
            cym: {
                official: "Republic of Kazakhstan",
                common: "Kazakhstan"
            },
            deu: {
                official: "Republik Kasachstan",
                common: "Kasachstan"
            },
            est: {
                official: "Kasahstani Vabariik",
                common: "Kasahstan"
            },
            fin: {
                official: "Kazakstanin tasavalta",
                common: "Kazakstan"
            },
            fra: {
                official: "R\xe9publique du Kazakhstan",
                common: "Kazakhstan"
            },
            hrv: {
                official: "Republika Kazahstan",
                common: "Kazahstan"
            },
            hun: {
                official: "Kazah K\xf6zt\xe1rsas\xe1g",
                common: "Kazahszt\xe1n"
            },
            ita: {
                official: "Repubblica del Kazakhstan",
                common: "Kazakistan"
            },
            jpn: {
                official: "\u30AB\u30B6\u30D5\u30B9\u30BF\u30F3\u5171\u548C\u56FD",
                common: "\u30AB\u30B6\u30D5\u30B9\u30BF\u30F3"
            },
            kor: {
                official: "\uCE74\uC790\uD750\uC2A4\uD0C4 \uACF5\uD654\uAD6D",
                common: "\uCE74\uC790\uD750\uC2A4\uD0C4"
            },
            nld: {
                official: "Republiek Kazachstan",
                common: "Kazachstan"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0642\u0632\u0627\u0642\u0633\u062A\u0627\u0646",
                common: "\u0642\u0632\u0627\u0642\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Republika Kazachstanu",
                common: "Kazachstan"
            },
            por: {
                official: "Rep\xfablica do Cazaquist\xe3o",
                common: "Cazaquist\xe3o"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D",
                common: "\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D"
            },
            slk: {
                official: "Kaza\u0161sk\xe1 republika",
                common: "Kazachstan"
            },
            spa: {
                official: "Rep\xfablica de Kazajst\xe1n",
                common: "Kazajist\xe1n"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D",
                common: "\u041A\u0430\u0437\u0430\u0445\u0441\u0442\u0430\u043D"
            },
            swe: {
                official: "Republiken Kazakstan",
                common: "Kazakstan"
            },
            tur: {
                official: "Kazakistan Cumhuriyeti",
                common: "Kazakistan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0642\u0627\u0632\u0642\u0633\u062A\u0627\u0646",
                common: "\u0642\u0627\u0632\u0642\u0633\u062A\u0627\u0646"
            },
            zho: {
                official: "\u54C8\u8428\u514B\u65AF\u5766\u5171\u548C\u56FD",
                common: "\u54C8\u8428\u514B\u65AF\u5766"
            }
        },
        latlng: [
            48.0196,
            66.9237
        ],
        landlocked: true,
        borders: [
            "CHN",
            "KGZ",
            "RUS",
            "TKM",
            "UZB"
        ],
        area: 2724900,
        demonyms: {
            eng: {
                f: "Kazakhstani",
                m: "Kazakhstani"
            },
            fra: {
                f: "Kazakhstanaise",
                m: "Kazakhstanais"
            }
        },
        flag: "\uD83C\uDDF0\uD83C\uDDFF",
        maps: {
            googleMaps: "https://goo.gl/maps/8VohJGu7ShuzZYyeA",
            openStreetMaps: "https://www.openstreetmap.org/relation/214665"
        },
        population: 18754440,
        gini: {
            2018: 27.8
        },
        fifa: "KAZ",
        car: {
            signs: [
                "KZ"
            ],
            side: "right"
        },
        timezones: [
            "UTC+05:00",
            "UTC+06:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/kz.png",
            svg: "https://flagcdn.com/kz.svg",
            alt: "The flag of Kazakhstan has a turquoise field, at the center of which is a gold sun with thirty-two rays above a soaring golden steppe eagle. A thin vertical band displays a national ornamental pattern \u2014 koshkar-muiz \u2014 in gold near the hoist end."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/kz.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/kz.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                51.16,
                71.45
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Moldova",
            official: "Republic of Moldova",
            nativeName: {
                ron: {
                    official: "Republica Moldova",
                    common: "Moldova"
                }
            }
        },
        tld: [
            ".md"
        ],
        cca2: "MD",
        ccn3: "498",
        cca3: "MDA",
        cioc: "MDA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MDL: {
                name: "Moldovan leu",
                symbol: "L"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "73"
            ]
        },
        capital: [
            "Chi\u0219in\u0103u"
        ],
        altSpellings: [
            "MD",
            "Moldova, Republic of",
            "Republic of Moldova",
            "Republica Moldova"
        ],
        region: "Europe",
        subregion: "Eastern Europe",
        languages: {
            ron: "Romanian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0648\u0644\u062F\u0648\u06A4\u0627",
                common: "\u0645\u0648\u0644\u062F\u0648\u06A4\u0627"
            },
            bre: {
                official: "Republik Moldova",
                common: "Moldova"
            },
            ces: {
                official: "Moldavsk\xe1 republika",
                common: "Moldavsko"
            },
            cym: {
                official: "Republic of Moldova",
                common: "Moldova"
            },
            deu: {
                official: "Republik Moldau",
                common: "Moldawien"
            },
            est: {
                official: "Moldova Vabariik",
                common: "Moldova"
            },
            fin: {
                official: "Moldovan tasavalta",
                common: "Moldova"
            },
            fra: {
                official: "R\xe9publique de Moldavie",
                common: "Moldavie"
            },
            hrv: {
                official: "Moldavija",
                common: "Moldova"
            },
            hun: {
                official: "Moldovai K\xf6zt\xe1rsas\xe1g",
                common: "Moldova"
            },
            ita: {
                official: "Repubblica di Moldova",
                common: "Moldavia"
            },
            jpn: {
                official: "\u30E2\u30EB\u30C9\u30D0\u5171\u548C\u56FD",
                common: "\u30E2\u30EB\u30C9\u30D0\u5171\u548C\u56FD"
            },
            kor: {
                official: "\uBAB0\uB3C4\uBC14 \uACF5\uD654\uAD6D",
                common: "\uBAB0\uB3C4\uBC14"
            },
            nld: {
                official: "Republiek Moldavi\xeb",
                common: "Moldavi\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0648\u0644\u062F\u0627\u0648\u06CC",
                common: "\u0645\u0648\u0644\u062F\u0627\u0648\u06CC"
            },
            pol: {
                official: "Republika Mo\u0142dawii",
                common: "Mo\u0142dawia"
            },
            por: {
                official: "Rep\xfablica da Mold\xe1via",
                common: "Mold\xe1via"
            },
            rus: {
                official: "\u041C\u043E\u043B\u0434\u043E\u0432\u0430",
                common: "\u041C\u043E\u043B\u0434\u0430\u0432\u0438\u044F"
            },
            slk: {
                official: "Moldavsk\xe1 republika",
                common: "Moldavsko"
            },
            spa: {
                official: "Rep\xfablica de Moldova",
                common: "Moldavia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u043E\u043B\u0434\u0430\u0432\u0438\u0458\u0430",
                common: "\u041C\u043E\u043B\u0434\u0430\u0432\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Moldavien",
                common: "Moldavien"
            },
            tur: {
                official: "Moldova Cumhuriyeti",
                common: "Moldova"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0627\u0644\u062F\u0648\u0648\u0627",
                common: "\u0645\u0627\u0644\u062F\u0648\u0648\u0627"
            },
            zho: {
                official: "\u6469\u5C14\u591A\u74E6\u5171\u548C\u56FD",
                common: "\u6469\u5C14\u591A\u74E6"
            }
        },
        latlng: [
            47,
            29
        ],
        landlocked: true,
        borders: [
            "ROU",
            "UKR"
        ],
        area: 33846,
        demonyms: {
            eng: {
                f: "Moldovan",
                m: "Moldovan"
            },
            fra: {
                f: "Moldave",
                m: "Moldave"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDE9",
        maps: {
            googleMaps: "https://goo.gl/maps/JjmyUuULujnDeFPf7",
            openStreetMaps: "https://www.openstreetmap.org/relation/58974"
        },
        population: 2617820,
        gini: {
            2018: 25.7
        },
        fifa: "MDA",
        car: {
            signs: [
                "MD"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/md.png",
            svg: "https://flagcdn.com/md.svg",
            alt: "The flag of Moldova is composed of three equal vertical bands of blue, yellow and red, with the national coat of arms centered in the yellow band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/md.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/md.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                47.01,
                28.9
            ]
        },
        postalCode: {
            format: "MD-####",
            regex: "^(?:MD)*(\\d{4})$"
        }
    },
    {
        name: {
            common: "Mali",
            official: "Republic of Mali",
            nativeName: {
                fra: {
                    official: "R\xe9publique du Mali",
                    common: "Mali"
                }
            }
        },
        tld: [
            ".ml"
        ],
        cca2: "ML",
        ccn3: "466",
        cca3: "MLI",
        cioc: "MLI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XOF: {
                name: "West African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "23"
            ]
        },
        capital: [
            "Bamako"
        ],
        altSpellings: [
            "ML",
            "Republic of Mali",
            "R\xe9publique du Mali"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0627\u0644\u064A",
                common: "\u0645\u0627\u0644\u064A"
            },
            bre: {
                official: "Republik Mali",
                common: "Mali"
            },
            ces: {
                official: "Republika Mali",
                common: "Mali"
            },
            cym: {
                official: "Republic of Mali",
                common: "Mali"
            },
            deu: {
                official: "Republik Mali",
                common: "Mali"
            },
            est: {
                official: "Mali Vabariik",
                common: "Mali"
            },
            fin: {
                official: "Malin tasavalta",
                common: "Mali"
            },
            fra: {
                official: "R\xe9publique du Mali",
                common: "Mali"
            },
            hrv: {
                official: "Republika Mali",
                common: "Mali"
            },
            hun: {
                official: "Mali K\xf6zt\xe1rsas\xe1g",
                common: "Mali"
            },
            ita: {
                official: "Repubblica del Mali",
                common: "Mali"
            },
            jpn: {
                official: "\u30DE\u30EA\u5171\u548C\u56FD",
                common: "\u30DE\u30EA"
            },
            kor: {
                official: "\uB9D0\uB9AC \uACF5\uD654\uAD6D",
                common: "\uB9D0\uB9AC"
            },
            nld: {
                official: "Republiek Mali",
                common: "Mali"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0627\u0644\u06CC",
                common: "\u0645\u0627\u0644\u06CC"
            },
            pol: {
                official: "Republika Mali",
                common: "Mali"
            },
            por: {
                official: "Rep\xfablica do Mali",
                common: "Mali"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u0438",
                common: "\u041C\u0430\u043B\u0438"
            },
            slk: {
                official: "Malijsk\xe1 republika",
                common: "Mali"
            },
            spa: {
                official: "Rep\xfablica de Mal\xed",
                common: "Mali"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u0438",
                common: "\u041C\u0430\u043B\u0438"
            },
            swe: {
                official: "Republiken Mali",
                common: "Mali"
            },
            tur: {
                official: "Mali Cumhuriyeti",
                common: "Mali"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0627\u0644\u06CC",
                common: "\u0645\u0627\u0644\u06CC"
            },
            zho: {
                official: "\u9A6C\u91CC\u5171\u548C\u56FD",
                common: "\u9A6C\u91CC"
            }
        },
        latlng: [
            17,
            -4
        ],
        landlocked: true,
        borders: [
            "DZA",
            "BFA",
            "GIN",
            "CIV",
            "MRT",
            "NER",
            "SEN"
        ],
        area: 1240192,
        demonyms: {
            eng: {
                f: "Malian",
                m: "Malian"
            },
            fra: {
                f: "Malienne",
                m: "Malien"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDF1",
        maps: {
            googleMaps: "https://goo.gl/maps/u9mYJkCB19wyuzh27",
            openStreetMaps: "https://www.openstreetmap.org/relation/192785"
        },
        population: 20250834,
        gini: {
            2009: 33
        },
        fifa: "MLI",
        car: {
            signs: [
                "RMM"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ml.png",
            svg: "https://flagcdn.com/ml.svg",
            alt: "The flag of Mali is composed of three equal vertical bands of green, yellow and red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ml.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ml.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                12.65,
                -8
            ]
        }
    },
    {
        name: {
            common: "Falkland Islands",
            official: "Falkland Islands",
            nativeName: {
                eng: {
                    official: "Falkland Islands",
                    common: "Falkland Islands"
                }
            }
        },
        tld: [
            ".fk"
        ],
        cca2: "FK",
        ccn3: "238",
        cca3: "FLK",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            FKP: {
                name: "Falkland Islands pound",
                symbol: "\xa3"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "00"
            ]
        },
        capital: [
            "Stanley"
        ],
        altSpellings: [
            "FK",
            "Islas Malvinas",
            "Falkland Islands (Malvinas)"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u0641\u0648\u0643\u0644\u0627\u0646\u062F",
                common: "\u062C\u0632\u0631 \u0641\u0648\u0643\u0644\u0627\u0646\u062F"
            },
            bre: {
                official: "Inizi Malo\xf9",
                common: "Inizi Malo\xf9"
            },
            ces: {
                official: "Falklandsk\xe9 ostrovy",
                common: "Falklandy"
            },
            cym: {
                official: "Falkland Islands",
                common: "Falkland Islands"
            },
            deu: {
                official: "Falklandinseln",
                common: "Falklandinseln"
            },
            est: {
                official: "Falklandi saared",
                common: "Falklandi saared"
            },
            fin: {
                official: "Falkandinsaaret",
                common: "Falkandinsaaret"
            },
            fra: {
                official: "\xceles Malouines",
                common: "\xceles Malouines"
            },
            hrv: {
                official: "Falklandski otoci",
                common: "Falklandski Otoci"
            },
            hun: {
                official: "Falkland-szigetek",
                common: "Falkland-szigetek"
            },
            ita: {
                official: "Isole Falkland",
                common: "Isole Falkland o Isole Malvine"
            },
            jpn: {
                official: "\u30D5\u30A9\u30FC\u30AF\u30E9\u30F3\u30C9",
                common: "\u30D5\u30A9\u30FC\u30AF\u30E9\u30F3\u30C9\uFF08\u30DE\u30EB\u30D3\u30CA\u30B9\uFF09\u8AF8\u5CF6"
            },
            kor: {
                official: "\uD3EC\uD074\uB79C\uB4DC \uC81C\uB3C4",
                common: "\uD3EC\uD074\uB79C\uB4DC \uC81C\uB3C4"
            },
            nld: {
                official: "Falkland eilanden",
                common: "Falklandeilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u0641\u0627\u0644\u06A9\u0644\u0646\u062F",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u0641\u0627\u0644\u06A9\u0644\u0646\u062F"
            },
            pol: {
                official: "Falklandy",
                common: "Falklandy"
            },
            por: {
                official: "Ilhas Malvinas",
                common: "Ilhas Malvinas"
            },
            rus: {
                official: "\u0424\u043E\u043B\u043A\u043B\u0435\u043D\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u0424\u043E\u043B\u043A\u043B\u0435\u043D\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Falklandsk\xe9 ostrovy",
                common: "Falklandy"
            },
            spa: {
                official: "islas Malvinas",
                common: "Islas Malvinas"
            },
            srp: {
                official: "\u0424\u043E\u043B\u043A\u043B\u0430\u043D\u0434\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                common: "\u0424\u043E\u043B\u043A\u043B\u0430\u043D\u0434\u0438"
            },
            swe: {
                official: "Falklands\xf6arna",
                common: "Falklands\xf6arna"
            },
            tur: {
                official: "Falkland (Malvina) Adalar\u0131",
                common: "Falkland (Malvina) Adalar\u0131"
            },
            urd: {
                official: "\u062C\u0632\u0627\u0626\u0631 \u0641\u0627\u06A9\u0644\u06CC\u0646\u0688",
                common: "\u062C\u0632\u0627\u0626\u0631 \u0641\u0627\u06A9\u0644\u06CC\u0646\u0688"
            },
            zho: {
                official: "\u798F\u514B\u5170\u7FA4\u5C9B",
                common: "\u798F\u514B\u5170\u7FA4\u5C9B"
            }
        },
        latlng: [
            -51.75,
            -59
        ],
        landlocked: false,
        area: 12173,
        demonyms: {
            eng: {
                f: "Falkland Islander",
                m: "Falkland Islander"
            },
            fra: {
                f: "Malouinne",
                m: "Malouin"
            }
        },
        flag: "\uD83C\uDDEB\uD83C\uDDF0",
        maps: {
            googleMaps: "https://goo.gl/maps/TZH1x7AGanQKifNk7",
            openStreetMaps: "https://www.openstreetmap.org/relation/2185374"
        },
        population: 2563,
        car: {
            signs: [
                "GB"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/fk.png",
            svg: "https://flagcdn.com/fk.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/fk.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/fk.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -51.7,
                -57.85
            ]
        }
    },
    {
        name: {
            common: "Armenia",
            official: "Republic of Armenia",
            nativeName: {
                hye: {
                    official: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576\u056B \u0540\u0561\u0576\u0580\u0561\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576",
                    common: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576"
                }
            }
        },
        tld: [
            ".am"
        ],
        cca2: "AM",
        ccn3: "051",
        cca3: "ARM",
        cioc: "ARM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            AMD: {
                name: "Armenian dram",
                symbol: "\u058F"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "74"
            ]
        },
        capital: [
            "Yerevan"
        ],
        altSpellings: [
            "AM",
            "Hayastan",
            "Republic of Armenia",
            "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576\u056B \u0540\u0561\u0576\u0580\u0561\u057A\u0565\u057F\u0578\u0582\u0569\u0575\u0578\u0582\u0576"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            hye: "Armenian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0631\u0645\u064A\u0646\u064A\u0627",
                common: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627"
            },
            bre: {
                official: "Republik Armenia",
                common: "Armenia"
            },
            ces: {
                official: "Arm\xe9nsk\xe1 republika",
                common: "Arm\xe9nie"
            },
            cym: {
                official: "Gweriniaeth Armenia",
                common: "Armenia"
            },
            deu: {
                official: "Republik Armenien",
                common: "Armenien"
            },
            est: {
                official: "Armeenia Vabariik",
                common: "Armeenia"
            },
            fin: {
                official: "Armenian tasavalta",
                common: "Armenia"
            },
            fra: {
                official: "R\xe9publique d'Arm\xe9nie",
                common: "Arm\xe9nie"
            },
            hrv: {
                official: "Republika Armenija",
                common: "Armenija"
            },
            hun: {
                official: "\xd6rm\xe9nyorsz\xe1g",
                common: "\xd6rm\xe9nyorsz\xe1g"
            },
            ita: {
                official: "Repubblica di Armenia",
                common: "Armenia"
            },
            jpn: {
                official: "\u30A2\u30EB\u30E1\u30CB\u30A2\u5171\u548C\u56FD",
                common: "\u30A2\u30EB\u30E1\u30CB\u30A2"
            },
            kor: {
                official: "\uC544\uB974\uBA54\uB2C8\uC544 \uACF5\uD654\uAD6D",
                common: "\uC544\uB974\uBA54\uB2C8\uC544"
            },
            nld: {
                official: "Republiek Armeni\xeb",
                common: "Armeni\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646",
                common: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Republika Armenii",
                common: "Armenia"
            },
            por: {
                official: "Rep\xfablica da Arm\xe9nia",
                common: "Arm\xe9nia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u0440\u043C\u0435\u043D\u0438\u044F",
                common: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F"
            },
            slk: {
                official: "Arm\xe9nska republika",
                common: "Arm\xe9nsko"
            },
            spa: {
                official: "Rep\xfablica de Armenia",
                common: "Armenia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0408\u0435\u0440\u043C\u0435\u043D\u0438\u0458\u0430",
                common: "\u0408\u0435\u0440\u043C\u0435\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Armenien",
                common: "Armenien"
            },
            tur: {
                official: "Ermenistan Cumhuriyeti",
                common: "Ermenistan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0622\u0631\u0645\u06CC\u0646\u06CC\u0627",
                common: "\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627"
            },
            zho: {
                official: "\u4E9A\u7F8E\u5C3C\u4E9A\u5171\u548C\u56FD",
                common: "\u4E9A\u7F8E\u5C3C\u4E9A"
            }
        },
        latlng: [
            40,
            45
        ],
        landlocked: true,
        borders: [
            "AZE",
            "GEO",
            "IRN",
            "TUR"
        ],
        area: 29743,
        demonyms: {
            eng: {
                f: "Armenian",
                m: "Armenian"
            },
            fra: {
                f: "Arm\xe9nienne",
                m: "Arm\xe9nien"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/azWUtK9bUQYEyccbA",
            openStreetMaps: "https://www.openstreetmap.org/relation/364066"
        },
        population: 2963234,
        gini: {
            2019: 29.9
        },
        fifa: "ARM",
        car: {
            signs: [
                "AM"
            ],
            side: "right"
        },
        timezones: [
            "UTC+04:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/am.png",
            svg: "https://flagcdn.com/am.svg",
            alt: "The flag of Armenia is composed of three equal horizontal bands of red, blue and orange."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/am.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/am.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                40.17,
                44.5
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Samoa",
            official: "Independent State of Samoa",
            nativeName: {
                eng: {
                    official: "Independent State of Samoa",
                    common: "Samoa"
                },
                smo: {
                    official: "Malo Sa\u02BBoloto Tuto\u02BBatasi o S\u0101moa",
                    common: "S\u0101moa"
                }
            }
        },
        tld: [
            ".ws"
        ],
        cca2: "WS",
        ccn3: "882",
        cca3: "WSM",
        cioc: "SAM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            WST: {
                name: "Samoan t\u0101l\u0101",
                symbol: "T"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "85"
            ]
        },
        capital: [
            "Apia"
        ],
        altSpellings: [
            "WS",
            "Independent State of Samoa",
            "Malo Sa\u02BBoloto Tuto\u02BBatasi o S\u0101moa"
        ],
        region: "Oceania",
        subregion: "Polynesia",
        languages: {
            eng: "English",
            smo: "Samoan"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0644\u0629 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0645\u0633\u062A\u0642\u0644\u0629",
                common: "\u0633\u0627\u0645\u0648\u0627"
            },
            bre: {
                official: "Stad Dizalc'h Samoa",
                common: "Samoa"
            },
            ces: {
                official: "Nez\xe1visl\xfd st\xe1t Samoa",
                common: "Samoa"
            },
            cym: {
                official: "Independent State of Samoa",
                common: "Samoa"
            },
            deu: {
                official: "Unabh\xe4ngige Staat Samoa",
                common: "Samoa"
            },
            est: {
                official: "Samoa Iseseisvusriik",
                common: "Samoa"
            },
            fin: {
                official: "Samoan itsen\xe4inen valtio",
                common: "Samoa"
            },
            fra: {
                official: "Samoa",
                common: "Samoa"
            },
            hrv: {
                official: "Nezavisna Dr\u017Eava Samoa",
                common: "Samoa"
            },
            hun: {
                official: "Szamoai F\xfcggetlen \xc1llam",
                common: "Szamoa"
            },
            ita: {
                official: "Stato indipendente di Samoa",
                common: "Samoa"
            },
            jpn: {
                official: "\u30B5\u30E2\u30A2\u72EC\u7ACB\u56FD",
                common: "\u30B5\u30E2\u30A2"
            },
            kor: {
                official: "\uC0AC\uBAA8\uC544 \uB3C5\uB9BD\uAD6D",
                common: "\uC0AC\uBAA8\uC544"
            },
            nld: {
                official: "Onafhankelijke Staat Samoa",
                common: "Samoa"
            },
            per: {
                official: "\u0627\u06CC\u0627\u0644\u062A \u0645\u0633\u062A\u0642\u0644 \u0633\u0627\u0645\u0648\u0622",
                common: "\u0633\u0627\u0645\u0648\u0622"
            },
            pol: {
                official: "Niezale\u017Cne Pa\u0144stwo Samoa",
                common: "Samoa"
            },
            por: {
                official: "Estado Independente de Samoa",
                common: "Samoa"
            },
            rus: {
                official: "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043C\u043E\u0435 \u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u0421\u0430\u043C\u043E\u0430",
                common: "\u0421\u0430\u043C\u043E\u0430"
            },
            slk: {
                official: "Nez\xe1visl\xfd \u0161t\xe1tSamoa",
                common: "Samoa"
            },
            spa: {
                official: "Estado Independiente de Samoa",
                common: "Samoa"
            },
            srp: {
                official: "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u043D\u0430 \u0414\u0440\u0436\u0430\u0432\u0430 \u0421\u0430\u043C\u043E\u0430",
                common: "\u0421\u0430\u043C\u043E\u0430"
            },
            swe: {
                official: "Sj\xe4lvst\xe4ndiga staten Samoa",
                common: "Samoa"
            },
            tur: {
                official: "Ba\u011F\u0131ms\u0131z Samoa Devleti",
                common: "Ba\u011F\u0131ms\u0131z Samoa Devleti"
            },
            urd: {
                official: "\u0622\u0632\u0627\u062F \u0633\u0644\u0637\u0646\u062A\u0650 \u0633\u0627\u0645\u0648\u0627",
                common: "\u0633\u0627\u0645\u0648\u0648\u0627"
            },
            zho: {
                official: "\u8428\u6469\u4E9A\u72EC\u7ACB\u56FD",
                common: "\u8428\u6469\u4E9A"
            }
        },
        latlng: [
            -13.58333333,
            -172.33333333
        ],
        landlocked: false,
        area: 2842,
        demonyms: {
            eng: {
                f: "Samoan",
                m: "Samoan"
            },
            fra: {
                f: "Samoane",
                m: "Samoan"
            }
        },
        flag: "\uD83C\uDDFC\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/CFC9fEFP9cfkYUBF9",
            openStreetMaps: "https://www.openstreetmap.org/relation/1872673"
        },
        population: 198410,
        gini: {
            2013: 38.7
        },
        fifa: "SAM",
        car: {
            signs: [
                "WS"
            ],
            side: "left"
        },
        timezones: [
            "UTC+13:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ws.png",
            svg: "https://flagcdn.com/ws.svg",
            alt: "The flag of Samoa has a red field. A blue rectangle, bearing a representation of the Southern Cross made up of five large and one smaller five-pointed white stars, is superimposed in the canton."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ws.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ws.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -13.82,
                -171.77
            ]
        }
    },
    {
        name: {
            common: "Jersey",
            official: "Bailiwick of Jersey",
            nativeName: {
                eng: {
                    official: "Bailiwick of Jersey",
                    common: "Jersey"
                },
                fra: {
                    official: "Bailliage de Jersey",
                    common: "Jersey"
                },
                nrf: {
                    official: "Bailliage d\xe9 J\xe8rri",
                    common: "J\xe8rri"
                }
            }
        },
        tld: [
            ".je"
        ],
        cca2: "JE",
        ccn3: "832",
        cca3: "JEY",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            GBP: {
                name: "British pound",
                symbol: "\xa3"
            },
            JEP: {
                name: "Jersey pound",
                symbol: "\xa3"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "4"
            ]
        },
        capital: [
            "Saint Helier"
        ],
        altSpellings: [
            "JE",
            "Bailiwick of Jersey",
            "Bailliage de Jersey",
            "Bailliage d\xe9 J\xe8rri"
        ],
        region: "Europe",
        subregion: "Northern Europe",
        languages: {
            eng: "English",
            fra: "French",
            nrf: "J\xe8rriais"
        },
        translations: {
            ara: {
                official: "\u062C\u064A\u0631\u0632\u064A",
                common: "\u062C\u064A\u0631\u0632\u064A"
            },
            bre: {
                official: "Jerzenez",
                common: "Jerzenez"
            },
            ces: {
                official: "Rycht\xe1\u0159stv\xed Jersey",
                common: "Jersey"
            },
            cym: {
                official: "Bailiwick of Jersey",
                common: "Jersey"
            },
            deu: {
                official: "Vogtei Jersey",
                common: "Jersey"
            },
            est: {
                official: "Jersey foogtkond",
                common: "Jersey"
            },
            fin: {
                official: "Jersey",
                common: "Jersey"
            },
            fra: {
                official: "Bailliage de Jersey",
                common: "Jersey"
            },
            hrv: {
                official: "Struka od Jersey",
                common: "Jersey"
            },
            hun: {
                official: "Jersey",
                common: "Jersey"
            },
            ita: {
                official: "Baliato di Jersey",
                common: "Isola di Jersey"
            },
            jpn: {
                official: "\u30B8\u30E3\u30FC\u30B8\u306E\u5F97\u610F\u5206\u91CE",
                common: "\u30B8\u30E3\u30FC\u30B8\u30FC"
            },
            kor: {
                official: "\uC800\uC9C0 \uC12C",
                common: "\uC800\uC9C0 \uC12C"
            },
            nld: {
                official: "Baljuwschap Jersey",
                common: "Jersey"
            },
            per: {
                official: "\u062C\u0631\u0632\u06CC",
                common: "\u062C\u0631\u0632\u06CC"
            },
            pol: {
                official: "Jersey",
                common: "Jersey"
            },
            por: {
                official: "Bailiado de Jersey",
                common: "Jersey"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043D\u043D\u043E\u0435 \u0432\u043B\u0430\u0434\u0435\u043D\u0438\u0435 \u0414\u0436\u0435\u0440\u0441\u0438",
                common: "\u0414\u0436\u0435\u0440\u0441\u0438"
            },
            slk: {
                official: "Bailiwick Jersey",
                common: "Jersey"
            },
            spa: {
                official: "Bail\xeda de Jersey",
                common: "Jersey"
            },
            srp: {
                official: "\u040F\u0435\u0440\u0437\u0438",
                common: "\u040F\u0435\u0440\u0437\u0438"
            },
            swe: {
                official: "Jersey",
                common: "Jersey"
            },
            tur: {
                official: "Jersey",
                common: "Jersey"
            },
            urd: {
                official: "\u062C\u0631\u0632\u06CC",
                common: "\u062C\u0631\u0632\u06CC"
            },
            zho: {
                official: "\u6CFD\u897F\u5C9B",
                common: "\u6CFD\u897F\u5C9B"
            }
        },
        latlng: [
            49.25,
            -2.16666666
        ],
        landlocked: false,
        area: 116,
        demonyms: {
            eng: {
                f: "Channel Islander",
                m: "Channel Islander"
            },
            fra: {
                f: "Jersiaise",
                m: "Jersiais"
            }
        },
        flag: "\uD83C\uDDEF\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/rXG8GZZtsqK92kTCA",
            openStreetMaps: "https://www.openstreetmap.org/relation/367988"
        },
        population: 100800,
        car: {
            signs: [
                "GBJ"
            ],
            side: "left"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/je.png",
            svg: "https://flagcdn.com/je.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/je.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/je.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                49.18,
                -2.1
            ]
        },
        postalCode: {
            format: "@# #@@|@## #@@|@@# #@@|@@## #@@|@#@ #@@|@@#@ #@@|GIR0AA",
            regex: "^(([A-Z]\\d{2}[A-Z]{2})|([A-Z]\\d{3}[A-Z]{2})|([A-Z]{2}\\d{2}[A-Z]{2})|([A-Z]{2}\\d{3}[A-Z]{2})|([A-Z]\\d[A-Z]\\d[A-Z]{2})|([A-Z]{2}\\d[A-Z]\\d[A-Z]{2})|(GIR0AA))$"
        }
    },
    {
        name: {
            common: "Japan",
            official: "Japan",
            nativeName: {
                jpn: {
                    official: "\u65E5\u672C",
                    common: "\u65E5\u672C"
                }
            }
        },
        tld: [
            ".jp",
            ".\u307F\u3093\u306A"
        ],
        cca2: "JP",
        ccn3: "392",
        cca3: "JPN",
        cioc: "JPN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            JPY: {
                name: "Japanese yen",
                symbol: "\xa5"
            }
        },
        idd: {
            root: "+8",
            suffixes: [
                "1"
            ]
        },
        capital: [
            "Tokyo"
        ],
        altSpellings: [
            "JP",
            "Nippon",
            "Nihon"
        ],
        region: "Asia",
        subregion: "Eastern Asia",
        languages: {
            jpn: "Japanese"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u064A\u0627\u0628\u0627\u0646",
                common: "\u0627\u0644\u064A\u0627\u0628\u0627\u0646"
            },
            bre: {
                official: "Japan",
                common: "Japan"
            },
            ces: {
                official: "Japonsko",
                common: "Japonsko"
            },
            cym: {
                official: "Japan",
                common: "Japan"
            },
            deu: {
                official: "Japan",
                common: "Japan"
            },
            est: {
                official: "Jaapan",
                common: "Jaapan"
            },
            fin: {
                official: "Japani",
                common: "Japani"
            },
            fra: {
                official: "Japon",
                common: "Japon"
            },
            hrv: {
                official: "Japan",
                common: "Japan"
            },
            hun: {
                official: "Jap\xe1n",
                common: "Jap\xe1n"
            },
            ita: {
                official: "Giappone",
                common: "Giappone"
            },
            jpn: {
                official: "\u65E5\u672C",
                common: "\u65E5\u672C"
            },
            kor: {
                official: "\uC77C\uBCF8\uAD6D",
                common: "\uC77C\uBCF8"
            },
            nld: {
                official: "Japan",
                common: "Japan"
            },
            per: {
                official: "\u0698\u0627\u067E\u0646",
                common: "\u0698\u0627\u067E\u0646"
            },
            pol: {
                official: "Japonia",
                common: "Japonia"
            },
            por: {
                official: "Jap\xe3o",
                common: "Jap\xe3o"
            },
            rus: {
                official: "\u042F\u043F\u043E\u043D\u0438\u044F",
                common: "\u042F\u043F\u043E\u043D\u0438\u044F"
            },
            slk: {
                official: "Japonsko",
                common: "Japonsko"
            },
            spa: {
                official: "Jap\xf3n",
                common: "Jap\xf3n"
            },
            srp: {
                official: "\u0408\u0430\u043F\u0430\u043D",
                common: "\u0408\u0430\u043F\u0430\u043D"
            },
            swe: {
                official: "Japan",
                common: "Japan"
            },
            tur: {
                official: "Japonya",
                common: "Japonya"
            },
            urd: {
                official: "\u062C\u0627\u067E\u0627\u0646",
                common: "\u062C\u0627\u067E\u0627\u0646"
            },
            zho: {
                official: "\u65E5\u672C\u56FD",
                common: "\u65E5\u672C"
            }
        },
        latlng: [
            36,
            138
        ],
        landlocked: false,
        area: 377930,
        demonyms: {
            eng: {
                f: "Japanese",
                m: "Japanese"
            },
            fra: {
                f: "Japonaise",
                m: "Japonais"
            }
        },
        flag: "\uD83C\uDDEF\uD83C\uDDF5",
        maps: {
            googleMaps: "https://goo.gl/maps/NGTLSCSrA8bMrvnX9",
            openStreetMaps: "https://www.openstreetmap.org/relation/382313"
        },
        population: 125836021,
        gini: {
            2013: 32.9
        },
        fifa: "JPN",
        car: {
            signs: [
                "J"
            ],
            side: "left"
        },
        timezones: [
            "UTC+09:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/jp.png",
            svg: "https://flagcdn.com/jp.svg",
            alt: "The flag of Japan features a crimson-red circle at the center of a white field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/jp.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/jp.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                35.68,
                139.75
            ]
        },
        postalCode: {
            format: "###-####",
            regex: "^(\\d{7})$"
        }
    },
    {
        name: {
            common: "Bolivia",
            official: "Plurinational State of Bolivia",
            nativeName: {
                aym: {
                    official: "Wuliwya Suyu",
                    common: "Wuliwya"
                },
                grn: {
                    official: "Tet\xe3 Vol\xedvia",
                    common: "Vol\xedvia"
                },
                que: {
                    official: "Buliwya Mamallaqta",
                    common: "Buliwya"
                },
                spa: {
                    official: "Estado Plurinacional de Bolivia",
                    common: "Bolivia"
                }
            }
        },
        tld: [
            ".bo"
        ],
        cca2: "BO",
        ccn3: "068",
        cca3: "BOL",
        cioc: "BOL",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BOB: {
                name: "Bolivian boliviano",
                symbol: "Bs."
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "91"
            ]
        },
        capital: [
            "Sucre"
        ],
        altSpellings: [
            "BO",
            "Buliwya",
            "Wuliwya",
            "Bolivia, Plurinational State of",
            "Plurinational State of Bolivia",
            "Estado Plurinacional de Bolivia",
            "Buliwya Mamallaqta",
            "Wuliwya Suyu",
            "Tet\xe3 Vol\xedvia"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            aym: "Aymara",
            grn: "Guaran\xed",
            que: "Quechua",
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0644\u0629 \u0628\u0648\u0644\u064A\u0641\u064A\u0627 \u0627\u0644\u0645\u062A\u0639\u062F\u062F\u0629 \u0627\u0644\u0642\u0648\u0645\u064A\u0627\u062A",
                common: "\u0628\u0648\u0644\u064A\u0641\u064A\u0627"
            },
            bre: {
                official: "Stad Liesvroadel Bolivia",
                common: "Bolivia"
            },
            ces: {
                official: "Mnohon\xe1rodnostn\xed st\xe1t Bol\xedvie",
                common: "Bol\xedvie"
            },
            cym: {
                official: "Gweriniaeth Bolifia",
                common: "Bolifia"
            },
            deu: {
                official: "Plurinationaler Staat Bolivien",
                common: "Bolivien"
            },
            est: {
                official: "Boliivia Paljurahvuseline Riik",
                common: "Boliivia"
            },
            fin: {
                official: "Bolivian monikansainen valtio",
                common: "Bolivia"
            },
            fra: {
                official: "\xc9tat plurinational de Bolivie",
                common: "Bolivie"
            },
            hrv: {
                official: "Plurinational State of Bolivia",
                common: "Bolivija"
            },
            hun: {
                official: "Bol\xedviai T\xf6bbnemzetis\xe9g\u0171 \xc1llam",
                common: "Bol\xedvia"
            },
            ita: {
                official: "Stato Plurinazionale della Bolivia",
                common: "Bolivia"
            },
            jpn: {
                official: "\u30DC\u30EA\u30D3\u30A2\u306E\u591A\u6C11\u65CF\u56FD",
                common: "\u30DC\u30EA\u30D3\u30A2\u591A\u6C11\u65CF\u56FD"
            },
            kor: {
                official: "\uBCFC\uB9AC\uBE44\uC544 \uB2E4\uBBFC\uC871\uAD6D",
                common: "\uBCFC\uB9AC\uBE44\uC544"
            },
            nld: {
                official: "Plurinationale Staat van Bolivia",
                common: "Bolivia"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0648\u0644\u06CC\u0648\u06CC",
                common: "\u0628\u0648\u0644\u06CC\u0648\u06CC"
            },
            pol: {
                official: "Wielonarodowe Pa\u0144stwo Boliwia",
                common: "Boliwia"
            },
            por: {
                official: "Estado Plurinacional da Bol\xedvia",
                common: "Bol\xedvia"
            },
            rus: {
                official: "\u041C\u043D\u043E\u0433\u043E\u043D\u0430\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u043E\u0435 \u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u0411\u043E\u043B\u0438\u0432\u0438\u044F",
                common: "\u0411\u043E\u043B\u0438\u0432\u0438\u044F"
            },
            slk: {
                official: "Bol\xedvijsk\xe1 republika",
                common: "Bol\xedvia"
            },
            spa: {
                official: "Estado Plurinacional de Bolivia",
                common: "Bolivia"
            },
            srp: {
                official: "\u0412\u0438\u0448\u0435\u043D\u0430\u0446\u0438\u043E\u043D\u0430\u043B\u043D\u0430 \u0414\u0440\u0436\u0430\u0432\u0430 \u0411\u043E\u043B\u0438\u0432\u0438\u0458\u0430",
                common: "\u0411\u043E\u043B\u0438\u0432\u0438\u0458\u0430"
            },
            swe: {
                official: "M\xe5ngnationella staten Bolivia",
                common: "Bolivia"
            },
            tur: {
                official: "Bolivya \xc7okuluslu Devleti",
                common: "Bolivya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0648\u0644\u06CC\u0648\u06CC\u0627",
                common: "\u0628\u0648\u0644\u06CC\u0648\u06CC\u0627"
            },
            zho: {
                official: "\u591A\u6C11\u65CF\u73BB\u5229\u7EF4\u4E9A\u56FD",
                common: "\u73BB\u5229\u7EF4\u4E9A"
            }
        },
        latlng: [
            -17,
            -65
        ],
        landlocked: true,
        borders: [
            "ARG",
            "BRA",
            "CHL",
            "PRY",
            "PER"
        ],
        area: 1098581,
        demonyms: {
            eng: {
                f: "Bolivian",
                m: "Bolivian"
            },
            fra: {
                f: "Bolivienne",
                m: "Bolivien"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/9DfnyfbxNM2g5U9b9",
            openStreetMaps: "https://www.openstreetmap.org/relation/252645"
        },
        population: 11673029,
        gini: {
            2019: 41.6
        },
        fifa: "BOL",
        car: {
            signs: [
                "BOL"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bo.png",
            svg: "https://flagcdn.com/bo.svg",
            alt: "The flag of Bolivia is composed of three equal horizontal bands of red, yellow and green, with the national coat of arms centered in the yellow band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bo.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bo.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -19.02,
                -65.26
            ]
        }
    },
    {
        name: {
            common: "Chile",
            official: "Republic of Chile",
            nativeName: {
                spa: {
                    official: "Rep\xfablica de Chile",
                    common: "Chile"
                }
            }
        },
        tld: [
            ".cl"
        ],
        cca2: "CL",
        ccn3: "152",
        cca3: "CHL",
        cioc: "CHI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            CLP: {
                name: "Chilean peso",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "6"
            ]
        },
        capital: [
            "Santiago"
        ],
        altSpellings: [
            "CL",
            "Republic of Chile",
            "Rep\xfablica de Chile"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0634\u064A\u0644\u064A",
                common: "\u062A\u0634\u064A\u0644\u064A"
            },
            bre: {
                official: "Republik Chile",
                common: "Chile"
            },
            ces: {
                official: "Chilsk\xe1 republika",
                common: "Chile"
            },
            cym: {
                official: "Gweriniaeth Chile",
                common: "Chile"
            },
            deu: {
                official: "Republik Chile",
                common: "Chile"
            },
            est: {
                official: "T\u0161iili Vabariik",
                common: "T\u0161iili"
            },
            fin: {
                official: "Chilen tasavalta",
                common: "Chile"
            },
            fra: {
                official: "R\xe9publique du Chili",
                common: "Chili"
            },
            hrv: {
                official: "Republika \u010Cile",
                common: "\u010Cile"
            },
            hun: {
                official: "Chilei K\xf6zt\xe1rsas\xe1g",
                common: "Chile"
            },
            ita: {
                official: "Repubblica del Cile",
                common: "Cile"
            },
            jpn: {
                official: "\u30C1\u30EA\u5171\u548C\u56FD",
                common: "\u30C1\u30EA"
            },
            kor: {
                official: "\uCE60\uB808 \uACF5\uD654\uAD6D",
                common: "\uCE60\uB808"
            },
            nld: {
                official: "Republiek Chili",
                common: "Chili"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0634\u06CC\u0644\u06CC",
                common: "\u0634\u06CC\u0644\u06CC"
            },
            pol: {
                official: "Republika Chile",
                common: "Chile"
            },
            por: {
                official: "Rep\xfablica do Chile",
                common: "Chile"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0427\u0438\u043B\u0438",
                common: "\u0427\u0438\u043B\u0438"
            },
            slk: {
                official: "\u010C\xedlska republika",
                common: "\u010Cile"
            },
            spa: {
                official: "Rep\xfablica de Chile",
                common: "Chile"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0427\u0438\u043B\u0435",
                common: "\u0427\u0438\u043B\u0435"
            },
            swe: {
                official: "Republiken Chile",
                common: "Chile"
            },
            tur: {
                official: "\u015Eili Cumhuriyeti",
                common: "\u015Eili"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u0644\u06CC",
                common: "\u0686\u0644\u06CC"
            },
            zho: {
                official: "\u667A\u5229\u5171\u548C\u56FD",
                common: "\u667A\u5229"
            }
        },
        latlng: [
            -30,
            -71
        ],
        landlocked: false,
        borders: [
            "ARG",
            "BOL",
            "PER"
        ],
        area: 756102,
        demonyms: {
            eng: {
                f: "Chilean",
                m: "Chilean"
            },
            fra: {
                f: "Chilienne",
                m: "Chilien"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDF1",
        maps: {
            googleMaps: "https://goo.gl/maps/XboxyNHh2fAjCPNn9",
            openStreetMaps: "https://www.openstreetmap.org/relation/167454"
        },
        population: 19116209,
        gini: {
            2017: 44.4
        },
        fifa: "CHI",
        car: {
            signs: [
                "RCH"
            ],
            side: "right"
        },
        timezones: [
            "UTC-06:00",
            "UTC-04:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cl.png",
            svg: "https://flagcdn.com/cl.svg",
            alt: "The flag of Chile is composed of two equal horizontal bands of white and red, with a blue square of the same height as the white band superimposed in the canton. A white five-pointed star is centered in the blue square."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/cl.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/cl.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -33.45,
                -70.67
            ]
        },
        postalCode: {
            format: "#######",
            regex: "^(\\d{7})$"
        }
    },
    {
        name: {
            common: "United States",
            official: "United States of America",
            nativeName: {
                eng: {
                    official: "United States of America",
                    common: "United States"
                }
            }
        },
        tld: [
            ".us"
        ],
        cca2: "US",
        ccn3: "840",
        cca3: "USA",
        cioc: "USA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "201",
                "202",
                "203",
                "205",
                "206",
                "207",
                "208",
                "209",
                "210",
                "212",
                "213",
                "214",
                "215",
                "216",
                "217",
                "218",
                "219",
                "220",
                "224",
                "225",
                "227",
                "228",
                "229",
                "231",
                "234",
                "239",
                "240",
                "248",
                "251",
                "252",
                "253",
                "254",
                "256",
                "260",
                "262",
                "267",
                "269",
                "270",
                "272",
                "274",
                "276",
                "281",
                "283",
                "301",
                "302",
                "303",
                "304",
                "305",
                "307",
                "308",
                "309",
                "310",
                "312",
                "313",
                "314",
                "315",
                "316",
                "317",
                "318",
                "319",
                "320",
                "321",
                "323",
                "325",
                "327",
                "330",
                "331",
                "334",
                "336",
                "337",
                "339",
                "346",
                "347",
                "351",
                "352",
                "360",
                "361",
                "364",
                "380",
                "385",
                "386",
                "401",
                "402",
                "404",
                "405",
                "406",
                "407",
                "408",
                "409",
                "410",
                "412",
                "413",
                "414",
                "415",
                "417",
                "419",
                "423",
                "424",
                "425",
                "430",
                "432",
                "434",
                "435",
                "440",
                "442",
                "443",
                "447",
                "458",
                "463",
                "464",
                "469",
                "470",
                "475",
                "478",
                "479",
                "480",
                "484",
                "501",
                "502",
                "503",
                "504",
                "505",
                "507",
                "508",
                "509",
                "510",
                "512",
                "513",
                "515",
                "516",
                "517",
                "518",
                "520",
                "530",
                "531",
                "534",
                "539",
                "540",
                "541",
                "551",
                "559",
                "561",
                "562",
                "563",
                "564",
                "567",
                "570",
                "571",
                "573",
                "574",
                "575",
                "580",
                "585",
                "586",
                "601",
                "602",
                "603",
                "605",
                "606",
                "607",
                "608",
                "609",
                "610",
                "612",
                "614",
                "615",
                "616",
                "617",
                "618",
                "619",
                "620",
                "623",
                "626",
                "628",
                "629",
                "630",
                "631",
                "636",
                "641",
                "646",
                "650",
                "651",
                "657",
                "660",
                "661",
                "662",
                "667",
                "669",
                "678",
                "681",
                "682",
                "701",
                "702",
                "703",
                "704",
                "706",
                "707",
                "708",
                "712",
                "713",
                "714",
                "715",
                "716",
                "717",
                "718",
                "719",
                "720",
                "724",
                "725",
                "727",
                "730",
                "731",
                "732",
                "734",
                "737",
                "740",
                "743",
                "747",
                "754",
                "757",
                "760",
                "762",
                "763",
                "765",
                "769",
                "770",
                "772",
                "773",
                "774",
                "775",
                "779",
                "781",
                "785",
                "786",
                "801",
                "802",
                "803",
                "804",
                "805",
                "806",
                "808",
                "810",
                "812",
                "813",
                "814",
                "815",
                "816",
                "817",
                "818",
                "828",
                "830",
                "831",
                "832",
                "843",
                "845",
                "847",
                "848",
                "850",
                "854",
                "856",
                "857",
                "858",
                "859",
                "860",
                "862",
                "863",
                "864",
                "865",
                "870",
                "872",
                "878",
                "901",
                "903",
                "904",
                "906",
                "907",
                "908",
                "909",
                "910",
                "912",
                "913",
                "914",
                "915",
                "916",
                "917",
                "918",
                "919",
                "920",
                "925",
                "928",
                "929",
                "930",
                "931",
                "934",
                "936",
                "937",
                "938",
                "940",
                "941",
                "947",
                "949",
                "951",
                "952",
                "954",
                "956",
                "959",
                "970",
                "971",
                "972",
                "973",
                "975",
                "978",
                "979",
                "980",
                "984",
                "985",
                "989"
            ]
        },
        capital: [
            "Washington, D.C."
        ],
        altSpellings: [
            "US",
            "USA",
            "United States of America"
        ],
        region: "Americas",
        subregion: "North America",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629 \u0627\u0644\u0627\u0645\u0631\u064A\u0643\u064A\u0629",
                common: "\u0627\u0644\u0648\u0644\u0627\u064A\u0627\u062A \u0627\u0644\u0645\u062A\u062D\u062F\u0629"
            },
            bre: {
                official: "Stado\xf9-Unanet Amerika",
                common: "Stado\xf9-Unanet"
            },
            ces: {
                official: "Spojen\xe9 st\xe1ty americk\xe9",
                common: "Spojen\xe9 st\xe1ty"
            },
            cym: {
                official: "United States of America",
                common: "United States"
            },
            deu: {
                official: "Vereinigte Staaten von Amerika",
                common: "Vereinigte Staaten"
            },
            est: {
                official: "Ameerika \xdchendriigid",
                common: "Ameerika \xdchendriigid"
            },
            fin: {
                official: "Amerikan yhdysvallat",
                common: "Yhdysvallat"
            },
            fra: {
                official: "Les \xe9tats-unis d'Am\xe9rique",
                common: "\xc9tats-Unis"
            },
            hrv: {
                official: "Sjedinjene Dr\u017Eave Amerike",
                common: "Sjedinjene Ameri\u010Dke Dr\u017Eave"
            },
            hun: {
                official: "Amerikai Egyes\xfclt \xc1llamok",
                common: "Amerikai Egyes\xfclt \xc1llamok"
            },
            ita: {
                official: "Stati Uniti d'America",
                common: "Stati Uniti d'America"
            },
            jpn: {
                official: "\u30A2\u30E1\u30EA\u30AB\u5408\u8846\u56FD",
                common: "\u30A2\u30E1\u30EA\u30AB\u5408\u8846\u56FD"
            },
            kor: {
                official: "\uC544\uBA54\uB9AC\uCE74 \uD569\uC911\uAD6D",
                common: "\uBBF8\uAD6D"
            },
            nld: {
                official: "Verenigde Staten van Amerika",
                common: "Verenigde Staten"
            },
            per: {
                official: "\u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627",
                common: "\u0627\u06CC\u0627\u0644\u0627\u062A \u0645\u062A\u062D\u062F\u0647 \u0622\u0645\u0631\u06CC\u06A9\u0627"
            },
            pol: {
                official: "Stany Zjednoczone Ameryki",
                common: "Stany Zjednoczone"
            },
            por: {
                official: "Estados Unidos da Am\xe9rica",
                common: "Estados Unidos"
            },
            rus: {
                official: "\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B \u0410\u043C\u0435\u0440\u0438\u043A\u0438",
                common: "\u0421\u043E\u0435\u0434\u0438\u043D\u0451\u043D\u043D\u044B\u0435 \u0428\u0442\u0430\u0442\u044B \u0410\u043C\u0435\u0440\u0438\u043A\u0438"
            },
            slk: {
                official: "Spojen\xe9 \u0161t\xe1ty Americk\xe9",
                common: "Spojen\xe9 \u0161t\xe1ty americk\xe9"
            },
            spa: {
                official: "Estados Unidos de Am\xe9rica",
                common: "Estados Unidos"
            },
            srp: {
                official: "\u0421\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0435 \u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0435 \u0414\u0440\u0436\u0430\u0432\u0435",
                common: "\u0421\u0458\u0435\u0434\u0438\u045A\u0435\u043D\u0435 \u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0435 \u0414\u0440\u0436\u0430\u0432\u0435"
            },
            swe: {
                official: "Amerikas f\xf6renta stater",
                common: "USA"
            },
            tur: {
                official: "Amerika Birle\u015Fik Devletleri",
                common: "Amerika Birle\u015Fik Devletleri"
            },
            urd: {
                official: "\u0631\u06CC\u0627\u0633\u062A\u06C1\u0627\u0626\u06D2 \u0645\u062A\u062D\u062F\u06C1 \u0627\u0645\u0631\u06CC\u06A9\u0627",
                common: "\u0631\u06CC\u0627\u0633\u062A\u06C1\u0627\u0626\u06D2 \u0645\u062A\u062D\u062F\u06C1"
            },
            zho: {
                official: "\u7F8E\u5229\u575A\u5408\u4F17\u56FD",
                common: "\u7F8E\u56FD"
            }
        },
        latlng: [
            38,
            -97
        ],
        landlocked: false,
        borders: [
            "CAN",
            "MEX"
        ],
        area: 9372610,
        demonyms: {
            eng: {
                f: "American",
                m: "American"
            },
            fra: {
                f: "Am\xe9ricaine",
                m: "Am\xe9ricain"
            }
        },
        flag: "\uD83C\uDDFA\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/e8M246zY4BSjkjAv6",
            openStreetMaps: "https://www.openstreetmap.org/relation/148838#map=2/20.6/-85.8"
        },
        population: 329484123,
        gini: {
            2018: 41.4
        },
        fifa: "USA",
        car: {
            signs: [
                "USA"
            ],
            side: "right"
        },
        timezones: [
            "UTC-12:00",
            "UTC-11:00",
            "UTC-10:00",
            "UTC-09:00",
            "UTC-08:00",
            "UTC-07:00",
            "UTC-06:00",
            "UTC-05:00",
            "UTC-04:00",
            "UTC+10:00",
            "UTC+12:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/us.png",
            svg: "https://flagcdn.com/us.svg",
            alt: "The flag of the United States of America is composed of thirteen equal horizontal bands of red alternating with white. A blue rectangle, bearing fifty small five-pointed white stars arranged in nine rows where rows of six stars alternate with rows of five stars, is superimposed in the canton."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/us.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/us.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                38.89,
                -77.05
            ]
        },
        postalCode: {
            format: "#####-####",
            regex: "^\\d{5}(-\\d{4})?$"
        }
    },
    {
        name: {
            common: "Saint Vincent and the Grenadines",
            official: "Saint Vincent and the Grenadines",
            nativeName: {
                eng: {
                    official: "Saint Vincent and the Grenadines",
                    common: "Saint Vincent and the Grenadines"
                }
            }
        },
        tld: [
            ".vc"
        ],
        cca2: "VC",
        ccn3: "670",
        cca3: "VCT",
        cioc: "VIN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XCD: {
                name: "Eastern Caribbean dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "784"
            ]
        },
        capital: [
            "Kingstown"
        ],
        altSpellings: [
            "VC"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0633\u0627\u0646\u062A \u0641\u064A\u0646\u0633\u0646\u062A \u0648\u0627\u0644\u063A\u0631\u064A\u0646\u0627\u062F\u064A\u0646",
                common: "\u0633\u0627\u0646\u062A \u0641\u064A\u0646\u0633\u0646\u062A \u0648\u0627\u0644\u063A\u0631\u064A\u0646\u0627\u062F\u064A\u0646"
            },
            bre: {
                official: "Sant-Visant hag ar Grenadinez",
                common: "Sant-Visant hag ar Grenadinez"
            },
            ces: {
                official: "Svat\xfd Vincenc a Grenadiny",
                common: "Svat\xfd Vincenc a Grenadiny"
            },
            cym: {
                official: "Saint Vincent and the Grenadines",
                common: "Saint Vincent and the Grenadines"
            },
            deu: {
                official: "St. Vincent und die Grenadinen",
                common: "St. Vincent und die Grenadinen"
            },
            est: {
                official: "Saint Vincent ja Grenadiinid",
                common: "Saint Vincent"
            },
            fin: {
                official: "Saint Vincent ja Grenadiinit",
                common: "Saint Vincent ja Grenadiinit"
            },
            fra: {
                official: "Saint-Vincent-et-les Grenadines",
                common: "Saint-Vincent-et-les-Grenadines"
            },
            hrv: {
                official: "Sveti Vincent i Grenadini",
                common: "Sveti Vincent i Grenadini"
            },
            hun: {
                official: "Saint Vincent \xe9s a Grenadine-szigetek",
                common: "Saint Vincent \xe9s a Grenadine-szigetek"
            },
            ita: {
                official: "Saint Vincent e Grenadine",
                common: "Saint Vincent e Grenadine"
            },
            jpn: {
                official: "\u30BB\u30F3\u30C8\u30D3\u30F3\u30BB\u30F3\u30C8\u304A\u3088\u3073\u30B0\u30EC\u30CA\u30C7\u30A3\u30FC\u30F3\u8AF8\u5CF6",
                common: "\u30BB\u30F3\u30C8\u30D3\u30F3\u30BB\u30F3\u30C8\u304A\u3088\u3073\u30B0\u30EC\u30CA\u30C7\u30A3\u30FC\u30F3\u8AF8\u5CF6"
            },
            kor: {
                official: "\uC138\uC778\uD2B8\uBE48\uC13C\uD2B8 \uADF8\uB808\uB098\uB518",
                common: "\uC138\uC778\uD2B8\uBE48\uC13C\uD2B8 \uADF8\uB808\uB098\uB518"
            },
            nld: {
                official: "Saint Vincent en de Grenadines",
                common: "Saint Vincent en de Grenadines"
            },
            per: {
                official: "\u0633\u0646\u062A \u0648\u06CC\u0646\u0633\u0646\u062A \u0648 \u06AF\u0631\u0646\u0627\u062F\u06CC\u0646\u200C\u0647\u0627",
                common: "\u0633\u0646\u062A \u0648\u06CC\u0646\u0633\u0646\u062A \u0648 \u06AF\u0631\u0646\u0627\u062F\u06CC\u0646\u200C\u0647\u0627"
            },
            pol: {
                official: "Saint Vincent i Grenadyny",
                common: "Saint Vincent i Grenadyny"
            },
            por: {
                official: "S\xe3o Vicente e Granadinas",
                common: "S\xe3o Vincente e Granadinas"
            },
            rus: {
                official: "\u0421\u0435\u043D\u0442-\u0412\u0438\u043D\u0441\u0435\u043D\u0442 \u0438 \u0413\u0440\u0435\u043D\u0430\u0434\u0438\u043D\u044B",
                common: "\u0421\u0435\u043D\u0442-\u0412\u0438\u043D\u0441\u0435\u043D\u0442 \u0438 \u0413\u0440\u0435\u043D\u0430\u0434\u0438\u043D\u044B"
            },
            slk: {
                official: "Sv\xe4t\xfd Vincent a Grenad\xedny",
                common: "Sv\xe4t\xfd Vincent a Grenad\xedny"
            },
            spa: {
                official: "San Vicente y las Granadinas",
                common: "San Vicente y Granadinas"
            },
            srp: {
                official: "\u0421\u0432\u0435\u0442\u0438 \u0412\u0438\u043D\u0441\u0435\u043D\u0442 \u0438 \u0413\u0440\u0435\u043D\u0430\u0434\u0438\u043D\u0438",
                common: "\u0421\u0432\u0435\u0442\u0438 \u0412\u0438\u043D\u0441\u0435\u043D\u0442 \u0438 \u0413\u0440\u0435\u043D\u0430\u0434\u0438\u043D\u0438"
            },
            swe: {
                official: "Saint Vincent och Grenadinerna",
                common: "Saint Vincent och Grenadinerna"
            },
            tur: {
                official: "Saint Vincent ve Grenadinler",
                common: "Saint Vincent ve Grenadinler"
            },
            urd: {
                official: "\u0633\u06CC\u0646\u0679 \u0648\u06CC\u0646\u0633\u06CC\u0646\u0679 \u0648 \u06AF\u0631\u06CC\u0646\u0627\u0688\u0627\u0626\u0646\u0632",
                common: "\u0633\u06CC\u0646\u0679 \u0648\u06CC\u0646\u0633\u06CC\u0646\u0679 \u0648 \u06AF\u0631\u06CC\u0646\u0627\u0688\u0627\u0626\u0646\u0632"
            },
            zho: {
                official: "\u5723\u6587\u68EE\u7279\u548C\u683C\u6797\u7EB3\u4E01\u65AF",
                common: "\u5723\u6587\u68EE\u7279\u548C\u683C\u6797\u7EB3\u4E01\u65AF"
            }
        },
        latlng: [
            13.25,
            -61.2
        ],
        landlocked: false,
        area: 389,
        demonyms: {
            eng: {
                f: "Saint Vincentian",
                m: "Saint Vincentian"
            },
            fra: {
                f: "Vincentaise",
                m: "Vincentais"
            }
        },
        flag: "\uD83C\uDDFB\uD83C\uDDE8",
        maps: {
            googleMaps: "https://goo.gl/maps/wMbnMqjG37FMnrwf7",
            openStreetMaps: "https://www.openstreetmap.org/relation/550725"
        },
        population: 110947,
        fifa: "VIN",
        car: {
            signs: [
                "WV"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/vc.png",
            svg: "https://flagcdn.com/vc.svg",
            alt: "The flag of Saint Vincent and the Grenadines is composed of three vertical bands of blue, gold and green. The gold band is twice as wide as the other two bands and bears three green diamonds arranged to form the letter V at its center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/vc.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/vc.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                13.13,
                -61.22
            ]
        }
    },
    {
        name: {
            common: "Bermuda",
            official: "Bermuda",
            nativeName: {
                eng: {
                    official: "Bermuda",
                    common: "Bermuda"
                }
            }
        },
        tld: [
            ".bm"
        ],
        cca2: "BM",
        ccn3: "060",
        cca3: "BMU",
        cioc: "BER",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            BMD: {
                name: "Bermudian dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "441"
            ]
        },
        capital: [
            "Hamilton"
        ],
        altSpellings: [
            "BM",
            "The Islands of Bermuda",
            "The Bermudas",
            "Somers Isles"
        ],
        region: "Americas",
        subregion: "North America",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0628\u0631\u0645\u0648\u062F\u0627",
                common: "\u0628\u0631\u0645\u0648\u062F\u0627"
            },
            bre: {
                official: "Bermuda",
                common: "Bermuda"
            },
            ces: {
                official: "Bermudsk\xe9 ostrovy",
                common: "Bermudy"
            },
            cym: {
                official: "Bermiwda",
                common: "Bermiwda"
            },
            deu: {
                official: "Bermuda",
                common: "Bermuda"
            },
            est: {
                official: "Bermuda",
                common: "Bermuda"
            },
            fin: {
                official: "Bermuda",
                common: "Bermuda"
            },
            fra: {
                official: "Bermudes",
                common: "Bermudes"
            },
            hrv: {
                official: "Bermuda",
                common: "Bermudi"
            },
            hun: {
                official: "Bermuda",
                common: "Bermuda"
            },
            ita: {
                official: "Bermuda",
                common: "Bermuda"
            },
            jpn: {
                official: "\u30D0\u30DF\u30E5\u30FC\u30C0",
                common: "\u30D0\u30DF\u30E5\u30FC\u30C0"
            },
            kor: {
                official: "\uBC84\uBBA4\uB2E4",
                common: "\uBC84\uBBA4\uB2E4"
            },
            nld: {
                official: "Bermuda",
                common: "Bermuda"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u0628\u0631\u0645\u0648\u062F\u0627",
                common: "\u0628\u0631\u0645\u0648\u062F\u0627"
            },
            pol: {
                official: "Bermudy",
                common: "Bermudy"
            },
            por: {
                official: "Bermudas",
                common: "Bermudas"
            },
            rus: {
                official: "\u0411\u0435\u0440\u043C\u0443\u0434\u0441\u043A\u0438\u0435 \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u0411\u0435\u0440\u043C\u0443\u0434\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Bermudy",
                common: "Bermudy"
            },
            spa: {
                official: "Bermuda",
                common: "Bermudas"
            },
            srp: {
                official: "\u0411\u0435\u0440\u043C\u0443\u0434\u0430",
                common: "\u0411\u0435\u0440\u043C\u0443\u0434\u0430"
            },
            swe: {
                official: "Bermuda",
                common: "Bermuda"
            },
            tur: {
                official: "Bermuda",
                common: "Bermuda"
            },
            urd: {
                official: "\u0628\u0631\u0645\u0648\u062F\u0627",
                common: "\u0628\u0631\u0645\u0648\u062F\u0627"
            },
            zho: {
                official: "\u767E\u6155\u5927",
                common: "\u767E\u6155\u5927"
            }
        },
        latlng: [
            32.33333333,
            -64.75
        ],
        landlocked: false,
        area: 54,
        demonyms: {
            eng: {
                f: "Bermudian",
                m: "Bermudian"
            },
            fra: {
                f: "Bermudienne",
                m: "Bermudien"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/NLsRGNjTzDghTtAJA",
            openStreetMaps: "https://www.openstreetmap.org/relation/1993208"
        },
        population: 63903,
        fifa: "BER",
        car: {
            signs: [
                "GB"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bm.png",
            svg: "https://flagcdn.com/bm.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bm.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bm.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                32.28,
                -64.78
            ]
        },
        postalCode: {
            format: "@@ ##",
            regex: "^([A-Z]{2}\\d{2})$"
        }
    },
    {
        name: {
            common: "Seychelles",
            official: "Republic of Seychelles",
            nativeName: {
                crs: {
                    official: "Repiblik Sesel",
                    common: "Sesel"
                },
                eng: {
                    official: "Republic of Seychelles",
                    common: "Seychelles"
                },
                fra: {
                    official: "R\xe9publique des Seychelles",
                    common: "Seychelles"
                }
            }
        },
        tld: [
            ".sc"
        ],
        cca2: "SC",
        ccn3: "690",
        cca3: "SYC",
        cioc: "SEY",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SCR: {
                name: "Seychellois rupee",
                symbol: "\u20A8"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "48"
            ]
        },
        capital: [
            "Victoria"
        ],
        altSpellings: [
            "SC",
            "Republic of Seychelles",
            "Repiblik Sesel",
            "R\xe9publique des Seychelles"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            crs: "Seychellois Creole",
            eng: "English",
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0633\u064A\u0634\u0644",
                common: "\u0633\u064A\u0634\u0644"
            },
            bre: {
                official: "Republik Sechelez",
                common: "Sechelez"
            },
            ces: {
                official: "Seychelsk\xe1 republika",
                common: "Seychely"
            },
            cym: {
                official: "Republic of Seychelles",
                common: "Seychelles"
            },
            deu: {
                official: "Republik der Seychellen",
                common: "Seychellen"
            },
            est: {
                official: "Sei\u0161elli Vabariik",
                common: "Sei\u0161ellid"
            },
            fin: {
                official: "Seychellien tasavalta",
                common: "Seychellit"
            },
            fra: {
                official: "R\xe9publique des Seychelles",
                common: "Seychelles"
            },
            hrv: {
                official: "Republika Sej\u0161eli",
                common: "Sej\u0161eli"
            },
            hun: {
                official: "Seychelle K\xf6zt\xe1rsas\xe1g",
                common: "Seychelle-szigetek"
            },
            ita: {
                official: "Repubblica delle Seychelles",
                common: "Seychelles"
            },
            jpn: {
                official: "\u30BB\u30A4\u30B7\u30A7\u30EB\u5171\u548C\u56FD",
                common: "\u30BB\u30FC\u30B7\u30A7\u30EB"
            },
            kor: {
                official: "\uC138\uC774\uC178 \uACF5\uD654\uAD6D",
                common: "\uC138\uC774\uC178"
            },
            nld: {
                official: "Republiek der Seychellen",
                common: "Seychellen"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u06CC\u0634\u0644",
                common: "\u0633\u06CC\u0634\u0644"
            },
            pol: {
                official: "Republika Seszeli",
                common: "Seszele"
            },
            por: {
                official: "Rep\xfablica das Seychelles",
                common: "Seicheles"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0439\u0448\u0435\u043B\u044C\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u0421\u0435\u0439\u0448\u0435\u043B\u044C\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Seychelsk\xe1 republika",
                common: "Seychely"
            },
            spa: {
                official: "Rep\xfablica de las Seychelles",
                common: "Seychelles"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0458\u0448\u0435\u043B\u0438",
                common: "\u0421\u0435\u0458\u0448\u0435\u043B\u0438"
            },
            swe: {
                official: "Republiken Seychellerna",
                common: "Seychellerna"
            },
            tur: {
                official: "Sey\u015Feller Cumhuriyeti",
                common: "Sey\u015Feller"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u06CC\u0686\u06CC\u0644\u06CC\u0633",
                common: "\u0633\u06CC\u0686\u06CC\u0644\u06CC\u0633"
            },
            zho: {
                official: "\u585E\u820C\u5C14\u5171\u548C\u56FD",
                common: "\u585E\u820C\u5C14"
            }
        },
        latlng: [
            -4.58333333,
            55.66666666
        ],
        landlocked: false,
        area: 452,
        demonyms: {
            eng: {
                f: "Seychellois",
                m: "Seychellois"
            },
            fra: {
                f: "Seychelloise",
                m: "Seychellois"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDE8",
        maps: {
            googleMaps: "https://goo.gl/maps/aqCcy2TKh5TV5MAX8",
            openStreetMaps: "https://www.openstreetmap.org/relation/536765"
        },
        population: 98462,
        gini: {
            2018: 32.1
        },
        fifa: "SEY",
        car: {
            signs: [
                "SY"
            ],
            side: "left"
        },
        timezones: [
            "UTC+04:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/sc.png",
            svg: "https://flagcdn.com/sc.svg",
            alt: "The flag of Seychelles is composed of five broadening oblique bands of blue, yellow, red, white and green, which extend from the hoist side of the bottom edge to the top and fly edges of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/sc.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/sc.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -4.62,
                55.45
            ]
        }
    },
    {
        name: {
            common: "British Indian Ocean Territory",
            official: "British Indian Ocean Territory",
            nativeName: {
                eng: {
                    official: "British Indian Ocean Territory",
                    common: "British Indian Ocean Territory"
                }
            }
        },
        tld: [
            ".io"
        ],
        cca2: "IO",
        ccn3: "086",
        cca3: "IOT",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "46"
            ]
        },
        capital: [
            "Diego Garcia"
        ],
        altSpellings: [
            "IO"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0625\u0642\u0644\u064A\u0645 \u0627\u0644\u0645\u062D\u064A\u0637 \u0627\u0644\u0647\u0646\u062F\u064A \u0627\u0644\u0628\u0631\u064A\u0637\u0627\u0646\u064A",
                common: "\u0625\u0642\u0644\u064A\u0645 \u0627\u0644\u0645\u062D\u064A\u0637 \u0627\u0644\u0647\u0646\u062F\u064A \u0627\u0644\u0628\u0631\u064A\u0637\u0627\u0646\u064A"
            },
            bre: {
                official: "Tiriad breizhveurat Meurvor Indez",
                common: "Tiriad breizhveurat Meurvor Indez"
            },
            ces: {
                official: "Britsk\xe9 indickooce\xe1nsk\xe9 \xfazem\xed",
                common: "Britsk\xe9 indickooce\xe1nsk\xe9 \xfazem\xed"
            },
            cym: {
                official: "Tiriogaeth Brydeinig Cefnfor India",
                common: "Tiriogaeth Brydeinig Cefnfor India"
            },
            deu: {
                official: "Britisches Territorium im Indischen Ozean",
                common: "Britisches Territorium im Indischen Ozean"
            },
            est: {
                official: "Briti India ookeani ala",
                common: "Briti India ookeani ala"
            },
            fin: {
                official: "Brittil\xe4inen Intian valtameren alue",
                common: "Brittil\xe4inen Intian valtameren alue"
            },
            fra: {
                official: "Territoire britannique de l' oc\xe9an Indien",
                common: "Territoire britannique de l'oc\xe9an Indien"
            },
            hrv: {
                official: "British Indian Ocean Territory",
                common: "Britanski Indijskooceanski teritorij"
            },
            hun: {
                official: "Brit Indiai-\xf3ce\xe1ni Ter\xfclet",
                common: "Brit Indiai-\xf3ce\xe1ni Ter\xfclet"
            },
            ita: {
                official: "Territorio britannico dell'Oceano Indiano",
                common: "Territorio britannico dell'oceano indiano"
            },
            jpn: {
                official: "\u30A4\u30AE\u30EA\u30B9\u9818\u30A4\u30F3\u30C9\u6D0B\u5730\u57DF",
                common: "\u30A4\u30AE\u30EA\u30B9\u9818\u30A4\u30F3\u30C9\u6D0B\u5730\u57DF"
            },
            kor: {
                official: "\uC778\uB3C4 \uACF5\uD654\uAD6D",
                common: "\uC778\uB3C4"
            },
            nld: {
                official: "Brits Indische Oceaan Territorium",
                common: "Britse Gebieden in de Indische Oceaan"
            },
            per: {
                official: "\u0642\u0644\u0645\u0631\u0648 \u0628\u0631\u06CC\u062A\u0627\u0646\u06CC\u0627 \u062F\u0631 \u0627\u0642\u06CC\u0627\u0646\u0648\u0633 \u0647\u0646\u062F",
                common: "\u0642\u0644\u0645\u0631\u0648 \u0628\u0631\u06CC\u062A\u0627\u0646\u06CC\u0627 \u062F\u0631 \u0627\u0642\u06CC\u0627\u0646\u0648\u0633 \u0647\u0646\u062F"
            },
            pol: {
                official: "Brytyjskie Terytorium Oceanu Indyjskiego",
                common: "Brytyjskie Terytorium Oceanu Indyjskiego"
            },
            por: {
                official: "British Indian Ocean Territory",
                common: "Territ\xf3rio Brit\xe2nico do Oceano \xcdndico"
            },
            rus: {
                official: "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430\u044F \u0442\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u0418\u043D\u0434\u0438\u0439\u0441\u043A\u043E\u0433\u043E \u043E\u043A\u0435\u0430\u043D\u0430",
                common: "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430\u044F \u0442\u0435\u0440\u0440\u0438\u0442\u043E\u0440\u0438\u044F \u0432 \u0418\u043D\u0434\u0438\u0439\u0441\u043A\u043E\u043C \u043E\u043A\u0435\u0430\u043D\u0435"
            },
            slk: {
                official: "Britsk\xe9 indickooce\xe1nske \xfazemie",
                common: "Britsk\xe9 indickooce\xe1nske \xfazemie"
            },
            spa: {
                official: "Territorio Brit\xe1nico del Oc\xe9ano \xcdndico",
                common: "Territorio Brit\xe1nico del Oc\xe9ano \xcdndico"
            },
            srp: {
                official: "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430 \u0442\u0435\u0440\u0438\u0442\u043E\u0440\u0438\u0458\u0430 \u0418\u043D\u0434\u0438\u0458\u0441\u043A\u043E\u0433 \u043E\u043A\u0435\u0430\u043D\u0430",
                common: "\u0411\u0440\u0438\u0442\u0430\u043D\u0441\u043A\u0430 \u0442\u0435\u0440\u0438\u0442\u043E\u0440\u0438\u0458\u0430 \u0418\u043D\u0434\u0438\u0458\u0441\u043A\u043E\u0433 \u043E\u043A\u0435\u0430\u043D\u0430"
            },
            swe: {
                official: "Brittiska territoriet i Indiska Oceanen",
                common: "Brittiska territoriet i Indiska Oceanen"
            },
            tur: {
                official: "Britanya Hint Okyanusu Topraklar\u0131",
                common: "Britanya Hint Okyanusu Topraklar\u0131"
            },
            urd: {
                official: "\u0628\u0631\u0637\u0627\u0646\u0648\u06CC \u0628\u062D\u0631\u06C1\u0646\u062F \u062E\u0637\u06C1",
                common: "\u0628\u0631\u0637\u0627\u0646\u0648\u06CC \u0628\u062D\u0631\u06C1\u0646\u062F \u062E\u0637\u06C1"
            },
            zho: {
                official: "\u82F1\u5C5E\u5370\u5EA6\u6D0B\u9886\u5730",
                common: "\u82F1\u5C5E\u5370\u5EA6\u6D0B\u9886\u5730"
            }
        },
        latlng: [
            -6,
            71.5
        ],
        landlocked: false,
        area: 60,
        demonyms: {
            eng: {
                f: "Indian",
                m: "Indian"
            }
        },
        flag: "\uD83C\uDDEE\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/bheNucgekVEYozoi6",
            openStreetMaps: "https://www.openstreetmap.org/relation/1993867"
        },
        population: 3000,
        car: {
            signs: [
                "GB"
            ],
            side: "right"
        },
        timezones: [
            "UTC+06:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/io.png",
            svg: "https://flagcdn.com/io.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -7.3,
                72.4
            ]
        }
    },
    {
        name: {
            common: "Guatemala",
            official: "Republic of Guatemala",
            nativeName: {
                spa: {
                    official: "Rep\xfablica de Guatemala",
                    common: "Guatemala"
                }
            }
        },
        tld: [
            ".gt"
        ],
        cca2: "GT",
        ccn3: "320",
        cca3: "GTM",
        cioc: "GUA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            GTQ: {
                name: "Guatemalan quetzal",
                symbol: "Q"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "02"
            ]
        },
        capital: [
            "Guatemala City"
        ],
        altSpellings: [
            "GT"
        ],
        region: "Americas",
        subregion: "Central America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u0648\u0627\u062A\u064A\u0645\u0627\u0644\u0627",
                common: "\u063A\u0648\u0627\u062A\u064A\u0645\u0627\u0644\u0627"
            },
            bre: {
                official: "Republik Guatemala",
                common: "Guatemala"
            },
            ces: {
                official: "Republika Guatemala",
                common: "Guatemala"
            },
            cym: {
                official: "Republic of Guatemala",
                common: "Guatemala"
            },
            deu: {
                official: "Republik Guatemala",
                common: "Guatemala"
            },
            est: {
                official: "Guatemala Vabariik",
                common: "Guatemala"
            },
            fin: {
                official: "Guatemalan tasavalta",
                common: "Guatemala"
            },
            fra: {
                official: "R\xe9publique du Guatemala",
                common: "Guatemala"
            },
            hrv: {
                official: "Republika Gvatemala",
                common: "Gvatemala"
            },
            hun: {
                official: "Guatemalai K\xf6zt\xe1rsas\xe1g",
                common: "Guatemala"
            },
            ita: {
                official: "Repubblica del Guatemala",
                common: "Guatemala"
            },
            jpn: {
                official: "\u30B0\u30A2\u30C6\u30DE\u30E9\u5171\u548C\u56FD",
                common: "\u30B0\u30A2\u30C6\u30DE\u30E9"
            },
            kor: {
                official: "\uACFC\uD14C\uB9D0\uB77C \uACF5\uD654\uAD6D",
                common: "\uACFC\uD14C\uB9D0\uB77C"
            },
            nld: {
                official: "Republiek Guatemala",
                common: "Guatemala"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06AF\u0648\u0627\u062A\u0650\u0645\u0627\u0644\u0627",
                common: "\u06AF\u0648\u0627\u062A\u0650\u0645\u0627\u0644\u0627"
            },
            pol: {
                official: "Republika Gwatemali",
                common: "Gwatemala"
            },
            por: {
                official: "Rep\xfablica da Guatemala",
                common: "Guatemala"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0430\u0442\u0435\u043C\u0430\u043B\u0430",
                common: "\u0413\u0432\u0430\u0442\u0435\u043C\u0430\u043B\u0430"
            },
            slk: {
                official: "Guatemalsk\xe1 republika",
                common: "Guatemala"
            },
            spa: {
                official: "Rep\xfablica de Guatemala",
                common: "Guatemala"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0432\u0430\u0442\u0435\u043C\u0430\u043B\u0430",
                common: "\u0413\u0432\u0430\u0442\u0435\u043C\u0430\u043B\u0430"
            },
            swe: {
                official: "Republiken Guatemala",
                common: "Guatemala"
            },
            tur: {
                official: "Guatemala Cumhuriyeti",
                common: "Guatemala"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u0648\u0627\u062A\u06CC\u0645\u0627\u0644\u0627",
                common: "\u06AF\u0648\u0627\u062A\u06CC\u0645\u0627\u0644\u0627"
            },
            zho: {
                official: "\u5371\u5730\u9A6C\u62C9\u5171\u548C\u56FD",
                common: "\u5371\u5730\u9A6C\u62C9"
            }
        },
        latlng: [
            15.5,
            -90.25
        ],
        landlocked: false,
        borders: [
            "BLZ",
            "SLV",
            "HND",
            "MEX"
        ],
        area: 108889,
        demonyms: {
            eng: {
                f: "Guatemalan",
                m: "Guatemalan"
            },
            fra: {
                f: "Guat\xe9malt\xe8que",
                m: "Guat\xe9malt\xe8que"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/JoRAbem4Hxb9FYbVA",
            openStreetMaps: "https://www.openstreetmap.org/relation/1521463"
        },
        population: 16858333,
        gini: {
            2014: 48.3
        },
        fifa: "GUA",
        car: {
            signs: [
                "GCA"
            ],
            side: "right"
        },
        timezones: [
            "UTC-06:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gt.png",
            svg: "https://flagcdn.com/gt.svg",
            alt: "The flag of Guatemala is composed of three equal vertical bands of light blue, white and light blue, with the national coat of arms centered in the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gt.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gt.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                14.62,
                -90.52
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Ecuador",
            official: "Republic of Ecuador",
            nativeName: {
                spa: {
                    official: "Rep\xfablica del Ecuador",
                    common: "Ecuador"
                }
            }
        },
        tld: [
            ".ec"
        ],
        cca2: "EC",
        ccn3: "218",
        cca3: "ECU",
        cioc: "ECU",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "93"
            ]
        },
        capital: [
            "Quito"
        ],
        altSpellings: [
            "EC",
            "Republic of Ecuador",
            "Rep\xfablica del Ecuador"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0625\u0643\u0648\u0627\u062F\u0648\u0631",
                common: "\u0627\u0644\u0625\u0643\u0648\u0627\u062F\u0648\u0631"
            },
            bre: {
                official: "Republik Ecuador",
                common: "Ecuador"
            },
            ces: {
                official: "Ekv\xe1dorsk\xe1 republika",
                common: "Ekv\xe1dor"
            },
            cym: {
                official: "Gweriniaeth Ecwador",
                common: "Ecwador"
            },
            deu: {
                official: "Republik Ecuador",
                common: "Ecuador"
            },
            est: {
                official: "Ecuadori Vabariik",
                common: "Ecuador"
            },
            fin: {
                official: "Ecuadorin tasavalta",
                common: "Ecuador"
            },
            fra: {
                official: "R\xe9publique de l'\xc9quateur",
                common: "\xc9quateur"
            },
            hrv: {
                official: "Republika Ekvador",
                common: "Ekvador"
            },
            hun: {
                official: "Ecuadori K\xf6zt\xe1rsas\xe1g",
                common: "Ecuador"
            },
            ita: {
                official: "Repubblica dell'Ecuador",
                common: "Ecuador"
            },
            jpn: {
                official: "\u30A8\u30AF\u30A2\u30C9\u30EB\u5171\u548C\u56FD",
                common: "\u30A8\u30AF\u30A2\u30C9\u30EB"
            },
            kor: {
                official: "\uC5D0\uCF70\uB3C4\uB974 \uACF5\uD654\uAD6D",
                common: "\uC5D0\uCF70\uB3C4\uB974"
            },
            nld: {
                official: "Republiek Ecuador",
                common: "Ecuador"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u06A9\u0648\u0627\u062F\u0648\u0631",
                common: "\u0627\u06A9\u0648\u0627\u062F\u0648\u0631"
            },
            pol: {
                official: "Ekwador",
                common: "Ekwador"
            },
            por: {
                official: "Rep\xfablica do Equador",
                common: "Equador"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u042D\u043A\u0432\u0430\u0434\u043E\u0440",
                common: "\u042D\u043A\u0432\u0430\u0434\u043E\u0440"
            },
            slk: {
                official: "Ekv\xe1dorsk\xe1 republika",
                common: "Ekv\xe1dor"
            },
            spa: {
                official: "Rep\xfablica del Ecuador",
                common: "Ecuador"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0415\u043A\u0432\u0430\u0434\u043E\u0440",
                common: "\u0415\u043A\u0432\u0430\u0434\u043E\u0440"
            },
            swe: {
                official: "Republiken Ecuador",
                common: "Ecuador"
            },
            tur: {
                official: "Ekvador Cumhuriyeti",
                common: "Ekvador"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u06CC\u06A9\u0648\u0688\u0648\u0631",
                common: "\u0627\u06CC\u06A9\u0648\u0627\u0688\u0648\u0631"
            },
            zho: {
                official: "\u5384\u74DC\u591A\u5C14\u5171\u548C\u56FD",
                common: "\u5384\u74DC\u591A\u5C14"
            }
        },
        latlng: [
            -2,
            -77.5
        ],
        landlocked: false,
        borders: [
            "COL",
            "PER"
        ],
        area: 276841,
        demonyms: {
            eng: {
                f: "Ecuadorean",
                m: "Ecuadorean"
            },
            fra: {
                f: "\xc9quatorienne",
                m: "\xc9quatorien"
            }
        },
        flag: "\uD83C\uDDEA\uD83C\uDDE8",
        maps: {
            googleMaps: "https://goo.gl/maps/TbX8hUW4gcbRPZiK7",
            openStreetMaps: "https://www.openstreetmap.org/relation/108089"
        },
        population: 17643060,
        gini: {
            2019: 45.7
        },
        fifa: "ECU",
        car: {
            signs: [
                "EC"
            ],
            side: "right"
        },
        timezones: [
            "UTC-06:00",
            "UTC-05:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ec.png",
            svg: "https://flagcdn.com/ec.svg",
            alt: "The flag of Ecuador is composed of the horizontal bands of yellow, blue and red, with the yellow band twice the height of the other two bands. The Ecuadorian coat of arms is superimposed in the center of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ec.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ec.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -0.22,
                -78.5
            ]
        },
        postalCode: {
            format: "@####@",
            regex: "^([a-zA-Z]\\d{4}[a-zA-Z])$"
        }
    },
    {
        name: {
            common: "Martinique",
            official: "Martinique",
            nativeName: {
                fra: {
                    official: "Martinique",
                    common: "Martinique"
                }
            }
        },
        tld: [
            ".mq"
        ],
        cca2: "MQ",
        ccn3: "474",
        cca3: "MTQ",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "96"
            ]
        },
        capital: [
            "Fort-de-France"
        ],
        altSpellings: [
            "MQ"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0645\u0627\u0631\u062A\u064A\u0646\u064A\u0643",
                common: "\u0645\u0627\u0631\u062A\u064A\u0646\u064A\u0643"
            },
            bre: {
                official: "Martinik",
                common: "Martinik"
            },
            ces: {
                official: "Martinik",
                common: "Martinik"
            },
            cym: {
                official: "Martinique",
                common: "Martinique"
            },
            deu: {
                official: "Martinique",
                common: "Martinique"
            },
            est: {
                official: "Martinique\u2019i departemang",
                common: "Martinique"
            },
            fin: {
                official: "Martinique",
                common: "Martinique"
            },
            fra: {
                official: "Martinique",
                common: "Martinique"
            },
            hrv: {
                official: "Martinique",
                common: "Martinique"
            },
            hun: {
                official: "Martinique",
                common: "Martinique"
            },
            ita: {
                official: "Martinique",
                common: "Martinica"
            },
            jpn: {
                official: "\u30DE\u30EB\u30C6\u30A3\u30CB\u30FC\u30AF\u5CF6",
                common: "\u30DE\u30EB\u30C6\u30A3\u30CB\u30FC\u30AF"
            },
            kor: {
                official: "\uB9C8\uB974\uD2F0\uB2C8\uD06C",
                common: "\uB9C8\uB974\uD2F0\uB2C8\uD06C"
            },
            nld: {
                official: "Martinique",
                common: "Martinique"
            },
            per: {
                official: "\u0645\u0627\u0631\u062A\u06CC\u0646\u06CC\u06A9",
                common: "\u0645\u0627\u0631\u062A\u06CC\u0646\u06CC\u06A9"
            },
            pol: {
                official: "Martynika",
                common: "Martynika"
            },
            por: {
                official: "Martinique",
                common: "Martinica"
            },
            rus: {
                official: "\u041C\u0430\u0440\u0442\u0438\u043D\u0438\u043A\u0430",
                common: "\u041C\u0430\u0440\u0442\u0438\u043D\u0438\u043A\u0430"
            },
            slk: {
                official: "Martinique",
                common: "Martinique"
            },
            spa: {
                official: "Martinica",
                common: "Martinica"
            },
            srp: {
                official: "\u041C\u0430\u0440\u0442\u0438\u043D\u0438\u043A",
                common: "\u041C\u0430\u0440\u0442\u0438\u043D\u0438\u043A"
            },
            swe: {
                official: "Martinique",
                common: "Martinique"
            },
            tur: {
                official: "Martinik",
                common: "Martinik"
            },
            urd: {
                official: "\u0645\u0627\u0631\u0679\u06CC\u0646\u06CC\u06A9",
                common: "\u0645\u0627\u0631\u0679\u06CC\u0646\u06CC\u06A9"
            },
            zho: {
                official: "\u9A6C\u63D0\u5C3C\u514B",
                common: "\u9A6C\u63D0\u5C3C\u514B"
            }
        },
        latlng: [
            14.666667,
            -61
        ],
        landlocked: false,
        area: 1128,
        demonyms: {
            eng: {
                f: "Martinican",
                m: "Martinican"
            },
            fra: {
                f: "Martiniquaise",
                m: "Martiniquais"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDF6",
        maps: {
            googleMaps: "https://goo.gl/maps/87ER7sDAFU7JjcvR6",
            openStreetMaps: "https://www.openstreetmap.org/relation/2473088"
        },
        population: 378243,
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mq.png",
            svg: "https://flagcdn.com/mq.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mq.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mq.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                14.6,
                -61.08
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Tajikistan",
            official: "Republic of Tajikistan",
            nativeName: {
                rus: {
                    official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0430\u0434\u0436\u0438\u043A\u0438\u0441\u0442\u0430\u043D",
                    common: "\u0422\u0430\u0434\u0436\u0438\u043A\u0438\u0441\u0442\u0430\u043D"
                },
                tgk: {
                    official: "\u04B6\u0443\u043C\u04B3\u0443\u0440\u0438\u0438 \u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D",
                    common: "\u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D"
                }
            }
        },
        tld: [
            ".tj"
        ],
        cca2: "TJ",
        ccn3: "762",
        cca3: "TJK",
        cioc: "TJK",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            TJS: {
                name: "Tajikistani somoni",
                symbol: "\u0405\u041C"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "92"
            ]
        },
        capital: [
            "Dushanbe"
        ],
        altSpellings: [
            "TJ",
            "To\xe7ikiston",
            "Republic of Tajikistan",
            "\u04B6\u0443\u043C\u04B3\u0443\u0440\u0438\u0438 \u0422\u043E\u04B7\u0438\u043A\u0438\u0441\u0442\u043E\u043D",
            "\xc7umhuriyi To\xe7ikiston"
        ],
        region: "Asia",
        subregion: "Central Asia",
        languages: {
            rus: "Russian",
            tgk: "Tajik"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0637\u0627\u062C\u064A\u0643\u0633\u062A\u0627\u0646",
                common: "\u0637\u0627\u062C\u064A\u0643\u0633\u062A\u0627\u0646"
            },
            bre: {
                official: "Republik Tadjikistan",
                common: "Tadjikistan"
            },
            ces: {
                official: "Republika T\xe1d\u017Eikist\xe1n",
                common: "T\xe1d\u017Eikist\xe1n"
            },
            cym: {
                official: "Republic of Tajikistan",
                common: "Tajikistan"
            },
            deu: {
                official: "Republik Tadschikistan",
                common: "Tadschikistan"
            },
            est: {
                official: "Tad\u017Eikistani Vabariik",
                common: "Tad\u017Eikistan"
            },
            fin: {
                official: "Tad\u017Eikistanin tasavalta",
                common: "Tad\u017Eikistan"
            },
            fra: {
                official: "R\xe9publique du Tadjikistan",
                common: "Tadjikistan"
            },
            hrv: {
                official: "Republika Tad\u017Eikistan",
                common: "Ta\u0111ikistan"
            },
            hun: {
                official: "T\xe1dzsik K\xf6zt\xe1rsas\xe1g",
                common: "T\xe1dzsikiszt\xe1n"
            },
            ita: {
                official: "Repubblica del Tajikistan",
                common: "Tagikistan"
            },
            jpn: {
                official: "\u30BF\u30B8\u30AD\u30B9\u30BF\u30F3\u5171\u548C\u56FD",
                common: "\u30BF\u30B8\u30AD\u30B9\u30BF\u30F3"
            },
            kor: {
                official: "\uD0C0\uC9C0\uD0A4\uC2A4\uD0C4 \uACF5\uD654\uAD6D",
                common: "\uD0C0\uC9C0\uD0A4\uC2A4\uD0C4"
            },
            nld: {
                official: "Tadzjikistan",
                common: "Tadzjikistan"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u062A\u0627\u062C\u06CC\u06A9\u0633\u062A\u0627\u0646",
                common: "\u062A\u0627\u062C\u06CC\u06A9\u0650\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Republika Tad\u017Cykistanu",
                common: "Tad\u017Cykistan"
            },
            por: {
                official: "Rep\xfablica do Tajiquist\xe3o",
                common: "Tajiquist\xe3o"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0430\u0434\u0436\u0438\u043A\u0438\u0441\u0442\u0430\u043D",
                common: "\u0422\u0430\u0434\u0436\u0438\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            slk: {
                official: "Ta\u01C6ick\xe1 republika",
                common: "Ta\u01C6ikistan"
            },
            spa: {
                official: "Rep\xfablica de Tayikist\xe1n",
                common: "Tayikist\xe1n"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0422\u0430\u045F\u0438\u043A\u0438\u0441\u0442\u0430\u043D",
                common: "\u0422\u0430\u045F\u0438\u043A\u0438\u0441\u0442\u0430\u043D"
            },
            swe: {
                official: "Republiken Tadzjikistan",
                common: "Tadzjikistan"
            },
            tur: {
                official: "Tacikistan Cumhuriyeti",
                common: "Tacikistan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062A\u0627\u062C\u06A9\u0633\u062A\u0627\u0646",
                common: "\u062A\u0627\u062C\u06A9\u0633\u062A\u0627\u0646"
            },
            zho: {
                official: "\u5854\u5409\u514B\u65AF\u5766\u5171\u548C\u56FD",
                common: "\u5854\u5409\u514B\u65AF\u5766"
            }
        },
        latlng: [
            39,
            71
        ],
        landlocked: true,
        borders: [
            "AFG",
            "CHN",
            "KGZ",
            "UZB"
        ],
        area: 143100,
        demonyms: {
            eng: {
                f: "Tadzhik",
                m: "Tadzhik"
            },
            fra: {
                f: "Tadjike",
                m: "Tadjike"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDEF",
        maps: {
            googleMaps: "https://goo.gl/maps/8rQgW88jEXijhVb58",
            openStreetMaps: "https://www.openstreetmap.org/relation/214626"
        },
        population: 9537642,
        gini: {
            2015: 34
        },
        fifa: "TJK",
        car: {
            signs: [
                "TJ"
            ],
            side: "right"
        },
        timezones: [
            "UTC+05:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/tj.png",
            svg: "https://flagcdn.com/tj.svg",
            alt: "The flag of Tajikistan is composed of three horizontal bands of red, white and green in the ratio of 2:3:2. A golden-yellow crown surmounted by an arc of seven five-pointed golden-yellow stars is centered in the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/tj.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/tj.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                38.55,
                68.77
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Malta",
            official: "Republic of Malta",
            nativeName: {
                eng: {
                    official: "Republic of Malta",
                    common: "Malta"
                },
                mlt: {
                    official: "Repubblika ta ' Malta",
                    common: "Malta"
                }
            }
        },
        tld: [
            ".mt"
        ],
        cca2: "MT",
        ccn3: "470",
        cca3: "MLT",
        cioc: "MLT",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "56"
            ]
        },
        capital: [
            "Valletta"
        ],
        altSpellings: [
            "MT",
            "Republic of Malta",
            "Repubblika ta' Malta"
        ],
        region: "Europe",
        subregion: "Southern Europe",
        languages: {
            eng: "English",
            mlt: "Maltese"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0627\u0644\u0637\u0627",
                common: "\u0645\u0627\u0644\u0637\u0627"
            },
            bre: {
                official: "Republik Malta",
                common: "Malta"
            },
            ces: {
                official: "Maltsk\xe1 republika",
                common: "Malta"
            },
            cym: {
                official: "Republic of Malta",
                common: "Malta"
            },
            deu: {
                official: "Republik Malta",
                common: "Malta"
            },
            est: {
                official: "Malta Vabariik",
                common: "Malta"
            },
            fin: {
                official: "Maltan tasavalta",
                common: "Malta"
            },
            fra: {
                official: "R\xe9publique de Malte",
                common: "Malte"
            },
            hrv: {
                official: "Republika Malta",
                common: "Malta"
            },
            hun: {
                official: "M\xe1ltai K\xf6zt\xe1rsas\xe1g",
                common: "M\xe1lta"
            },
            ita: {
                official: "Repubblica di Malta",
                common: "Malta"
            },
            jpn: {
                official: "\u30DE\u30EB\u30BF\u5171\u548C\u56FD",
                common: "\u30DE\u30EB\u30BF"
            },
            kor: {
                official: "\uBAB0\uD0C0 \uACF5\uD654\uAD6D",
                common: "\uBAB0\uD0C0"
            },
            nld: {
                official: "Republiek Malta",
                common: "Malta"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0627\u0644\u062A",
                common: "\u0645\u0627\u0644\u062A"
            },
            pol: {
                official: "Republika Malty",
                common: "Malta"
            },
            por: {
                official: "Rep\xfablica de Malta",
                common: "Malta"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u044C\u0442\u0430",
                common: "\u041C\u0430\u043B\u044C\u0442\u0430"
            },
            slk: {
                official: "Maltsk\xe1 republika",
                common: "Malta"
            },
            spa: {
                official: "Rep\xfablica de Malta",
                common: "Malta"
            },
            srp: {
                official: " \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u0442\u0430",
                common: "\u041C\u0430\u043B\u0442\u0430"
            },
            swe: {
                official: "Republiken Malta",
                common: "Malta"
            },
            tur: {
                official: "Malta Cumhuriyeti",
                common: "Malta"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0627\u0644\u0679\u0627",
                common: "\u0645\u0627\u0644\u0679\u0627"
            },
            zho: {
                official: "\u9A6C\u8033\u4ED6\u5171\u548C\u56FD",
                common: "\u9A6C\u8033\u4ED6"
            }
        },
        latlng: [
            35.9375,
            14.3754
        ],
        landlocked: false,
        area: 316,
        demonyms: {
            eng: {
                f: "Maltese",
                m: "Maltese"
            },
            fra: {
                f: "Maltaise",
                m: "Maltais"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/skXCqguxDxxEKVk47",
            openStreetMaps: "https://www.openstreetmap.org/relation/365307"
        },
        population: 525285,
        gini: {
            2018: 28.7
        },
        fifa: "MLT",
        car: {
            signs: [
                "M"
            ],
            side: "left"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mt.png",
            svg: "https://flagcdn.com/mt.svg",
            alt: "The flag of Malta is composed of two equal vertical bands of white and red. A representation of the George cross edged in red is situated on the upper hoist-side corner of the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mt.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mt.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                35.88,
                14.5
            ]
        },
        postalCode: {
            format: "@@@ ###|@@@ ##",
            regex: "^([A-Z]{3}\\d{2}\\d?)$"
        }
    },
    {
        name: {
            common: "Gambia",
            official: "Republic of the Gambia",
            nativeName: {
                eng: {
                    official: "Republic of the Gambia",
                    common: "Gambia"
                }
            }
        },
        tld: [
            ".gm"
        ],
        cca2: "GM",
        ccn3: "270",
        cca3: "GMB",
        cioc: "GAM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            GMD: {
                name: "dalasi",
                symbol: "D"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "20"
            ]
        },
        capital: [
            "Banjul"
        ],
        altSpellings: [
            "GM",
            "Republic of the Gambia"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u0627\u0645\u0628\u064A\u0627",
                common: "\u063A\u0627\u0645\u0628\u064A\u0627"
            },
            bre: {
                official: "Republik islamek ar Gambia",
                common: "Gambia"
            },
            ces: {
                official: "Gambijsk\xe1 republika",
                common: "Gambie"
            },
            cym: {
                official: "Republic of the Gambia",
                common: "Gambia"
            },
            deu: {
                official: "Republik Gambia",
                common: "Gambia"
            },
            est: {
                official: "Gambia Vabariik",
                common: "Gambia"
            },
            fin: {
                official: "Gambian tasavalta",
                common: "Gambia"
            },
            fra: {
                official: "R\xe9publique de Gambie",
                common: "Gambie"
            },
            hrv: {
                official: "Republika Gambija",
                common: "Gambija"
            },
            hun: {
                official: "Gambiai K\xf6zt\xe1rsas\xe1g",
                common: "Gambia"
            },
            ita: {
                official: "Repubblica del Gambia",
                common: "Gambia"
            },
            jpn: {
                official: "\u30AC\u30F3\u30D3\u30A2\u5171\u548C\u56FD",
                common: "\u30AC\u30F3\u30D3\u30A2"
            },
            kor: {
                official: "\uAC10\uBE44\uC544 \uACF5\uD654\uAD6D",
                common: "\uAC10\uBE44\uC544"
            },
            nld: {
                official: "Republiek Gambia",
                common: "Gambia"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06AF\u0627\u0645\u0628\u06CC\u0627",
                common: "\u06AF\u0627\u0645\u0628\u06CC\u0627"
            },
            pol: {
                official: "Republika Gambii",
                common: "Gambia"
            },
            por: {
                official: "Rep\xfablica da G\xe2mbia",
                common: "G\xe2mbia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u043C\u0431\u0438\u044F",
                common: "\u0413\u0430\u043C\u0431\u0438\u044F"
            },
            slk: {
                official: "Gambijsk\xe1 republika",
                common: "Gambia"
            },
            spa: {
                official: "Rep\xfablica de Gambia",
                common: "Gambia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u043C\u0431\u0438\u0458\u0430",
                common: "\u0413\u0430\u043C\u0431\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Gambia",
                common: "Gambia"
            },
            tur: {
                official: "Gambiya Cumhuriyeti",
                common: "Gambiya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u06CC\u0645\u0628\u06CC\u0627",
                common: "\u06AF\u06CC\u0645\u0628\u06CC\u0627"
            },
            zho: {
                official: "\u5188\u6BD4\u4E9A\u5171\u548C\u56FD",
                common: "\u5188\u6BD4\u4E9A"
            }
        },
        latlng: [
            13.46666666,
            -16.56666666
        ],
        landlocked: false,
        borders: [
            "SEN"
        ],
        area: 10689,
        demonyms: {
            eng: {
                f: "Gambian",
                m: "Gambian"
            },
            fra: {
                f: "Gambienne",
                m: "Gambien"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/bbGBCxxtfD2A9Z4m6",
            openStreetMaps: "https://www.openstreetmap.org/relation/192774"
        },
        population: 2416664,
        gini: {
            2015: 35.9
        },
        fifa: "GAM",
        car: {
            signs: [
                "WAG"
            ],
            side: "right"
        },
        timezones: [
            "UTC+00:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gm.png",
            svg: "https://flagcdn.com/gm.svg",
            alt: "The flag of Gambia is composed of three equal horizontal bands of red, blue with white top and bottom edges, and green."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gm.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gm.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                13.45,
                -16.57
            ]
        }
    },
    {
        name: {
            common: "Nigeria",
            official: "Federal Republic of Nigeria",
            nativeName: {
                eng: {
                    official: "Federal Republic of Nigeria",
                    common: "Nigeria"
                }
            }
        },
        tld: [
            ".ng"
        ],
        cca2: "NG",
        ccn3: "566",
        cca3: "NGA",
        cioc: "NGR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            NGN: {
                name: "Nigerian naira",
                symbol: "\u20A6"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "34"
            ]
        },
        capital: [
            "Abuja"
        ],
        altSpellings: [
            "NG",
            "Nijeriya",
            "Na\xedj\xedr\xed\xe0",
            "Federal Republic of Nigeria"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0646\u064A\u062C\u064A\u0631\u064A\u0627 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                common: "\u0646\u064A\u062C\u064A\u0631\u064A\u0627"
            },
            bre: {
                official: "Republik Kevreadel Nigeria",
                common: "Nigeria"
            },
            ces: {
                official: "Nigerijsk\xe1 federativn\xed republika",
                common: "Nig\xe9rie"
            },
            cym: {
                official: "Federal Republic of Nigeria",
                common: "Nigeria"
            },
            deu: {
                official: "Bundesrepublik Nigeria",
                common: "Nigeria"
            },
            est: {
                official: "Nigeeria Liitvabariik",
                common: "Nigeeria"
            },
            fin: {
                official: "Nigerian liittotasavalta",
                common: "Nigeria"
            },
            fra: {
                official: "R\xe9publique f\xe9d\xe9rale du Nigeria",
                common: "Nig\xe9ria"
            },
            hrv: {
                official: "Savezna Republika Nigerija",
                common: "Nigerija"
            },
            hun: {
                official: "Nig\xe9ria",
                common: "Nig\xe9ria"
            },
            ita: {
                official: "Repubblica federale di Nigeria",
                common: "Nigeria"
            },
            jpn: {
                official: "\u30CA\u30A4\u30B8\u30A7\u30EA\u30A2\u9023\u90A6\u5171\u548C\u56FD",
                common: "\u30CA\u30A4\u30B8\u30A7\u30EA\u30A2"
            },
            kor: {
                official: "\uB098\uC774\uC9C0\uB9AC\uC544 \uC5F0\uBC29 \uACF5\uD654\uAD6D",
                common: "\uB098\uC774\uC9C0\uB9AC\uC544"
            },
            nld: {
                official: "Federale Republiek Nigeria",
                common: "Nigeria"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u0644 \u0646\u06CC\u062C\u0631\u06CC\u0647",
                common: "\u0646\u06CC\u062C\u0631\u06CC\u0647"
            },
            pol: {
                official: "Federalna Republika Nigerii",
                common: "Nigeria"
            },
            por: {
                official: "Rep\xfablica Federal da Nig\xe9ria",
                common: "Nig\xe9ria"
            },
            rus: {
                official: "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u0433\u0435\u0440\u0438\u044F",
                common: "\u041D\u0438\u0433\u0435\u0440\u0438\u044F"
            },
            slk: {
                official: "Nig\xe9rijsk\xe1 federat\xedvna republika",
                common: "Nig\xe9ria"
            },
            spa: {
                official: "Rep\xfablica Federal de Nigeria",
                common: "Nigeria"
            },
            srp: {
                official: "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u0433\u0435\u0440\u0438\u0458\u0430",
                common: "\u041D\u0438\u0433\u0435\u0440\u0438\u0458\u0430 "
            },
            swe: {
                official: "F\xf6rbundsrepubliken Nigeria",
                common: "Nigeria"
            },
            tur: {
                official: "Nijerya Federal Cumhuriyeti",
                common: "Nijerya"
            },
            urd: {
                official: "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u0627\u0626\u062C\u06CC\u0631\u06CC\u0627",
                common: "\u0646\u0627\u0626\u062C\u06CC\u0631\u06CC\u0627"
            },
            zho: {
                official: "\u5C3C\u65E5\u5229\u4E9A\u8054\u90A6\u5171\u548C\u56FD",
                common: "\u5C3C\u65E5\u5229\u4E9A"
            }
        },
        latlng: [
            10,
            8
        ],
        landlocked: false,
        borders: [
            "BEN",
            "CMR",
            "TCD",
            "NER"
        ],
        area: 923768,
        demonyms: {
            eng: {
                f: "Nigerian",
                m: "Nigerian"
            },
            fra: {
                f: "Nig\xe9riane",
                m: "Nig\xe9rian"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/LTn417qWwBPFszuV9",
            openStreetMaps: "https://www.openstreetmap.org/relation/192787"
        },
        population: 206139587,
        gini: {
            2018: 35.1
        },
        fifa: "NGA",
        car: {
            signs: [
                "WAN"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ng.png",
            svg: "https://flagcdn.com/ng.svg",
            alt: "The flag of Nigeria is composed of three equal vertical bands of green, white and green."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ng.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ng.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                9.08,
                7.53
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Bahamas",
            official: "Commonwealth of the Bahamas",
            nativeName: {
                eng: {
                    official: "Commonwealth of the Bahamas",
                    common: "Bahamas"
                }
            }
        },
        tld: [
            ".bs"
        ],
        cca2: "BS",
        ccn3: "044",
        cca3: "BHS",
        cioc: "BAH",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BSD: {
                name: "Bahamian dollar",
                symbol: "$"
            },
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "242"
            ]
        },
        capital: [
            "Nassau"
        ],
        altSpellings: [
            "BS",
            "Commonwealth of the Bahamas"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0643\u0648\u0645\u0646\u0648\u0644\u062B \u062C\u0632\u0631 \u0627\u0644\u0628\u0647\u0627\u0645\u0627",
                common: "\u0628\u0627\u0647\u0627\u0645\u0627\u0633"
            },
            bre: {
                official: "Kenglad ar Bahamas",
                common: "Bahamas"
            },
            ces: {
                official: "Bahamsk\xe9 spole\u010Denstv\xed",
                common: "Bahamy"
            },
            cym: {
                official: "Cymanwlad y Bahamas",
                common: "Bahamas"
            },
            deu: {
                official: "Commonwealth der Bahamas",
                common: "Bahamas"
            },
            est: {
                official: "Bahama \xdchendus",
                common: "Bahama"
            },
            fin: {
                official: "Bahaman liittovaltio",
                common: "Bahamasaaret"
            },
            fra: {
                official: "Commonwealth des Bahamas",
                common: "Bahamas"
            },
            hrv: {
                official: "Zajednica Bahama",
                common: "Bahami"
            },
            hun: {
                official: "Bahamai K\xf6z\xf6ss\xe9g",
                common: "Bahama-szigetek"
            },
            ita: {
                official: "Commonwealth delle Bahamas",
                common: "Bahamas"
            },
            jpn: {
                official: "\u30D0\u30CF\u30DE",
                common: "\u30D0\u30CF\u30DE"
            },
            kor: {
                official: "\uBC14\uD558\uB9C8 \uC5F0\uBC29",
                common: "\uBC14\uD558\uB9C8"
            },
            nld: {
                official: "Gemenebest van de Bahama's",
                common: "Bahama\u2019s"
            },
            per: {
                official: "\u0642\u0644\u0645\u0631\u0648 \u0647\u0645\u0633\u0648\u062F \u0628\u0627\u0647\u0627\u0645\u0627",
                common: "\u0628\u0627\u0647\u0627\u0645\u0627"
            },
            pol: {
                official: "Bahamy",
                common: "Bahamy"
            },
            por: {
                official: "Comunidade das Bahamas",
                common: "Bahamas"
            },
            rus: {
                official: "\u0421\u043E\u0434\u0440\u0443\u0436\u0435\u0441\u0442\u0432\u043E \u0411\u0430\u0433\u0430\u043C\u0441\u043A\u0438\u0445 \u041E\u0441\u0442\u0440\u043E\u0432\u043E\u0432",
                common: "\u0411\u0430\u0433\u0430\u043C\u0441\u043A\u0438\u0435 \u041E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Bahamsk\xe9 spolo\u010Denstvo",
                common: "Bahamy"
            },
            spa: {
                official: "Commonwealth de las Bahamas",
                common: "Bahamas"
            },
            srp: {
                official: "\u041A\u043E\u043C\u043E\u043D\u0432\u0435\u043B\u0442 \u0411\u0430\u0445\u0430\u043C\u0430",
                common: "\u0411\u0430\u0445\u0430\u043C\u0438"
            },
            swe: {
                official: "Samv\xe4ldet Bahamas",
                common: "Bahamas"
            },
            tur: {
                official: "Bahama Milletler Toplulu\u011Fu",
                common: "Bahamalar"
            },
            urd: {
                official: "\u062F\u0648\u0644\u062A\u0650 \u0645\u0634\u062A\u0631\u06A9\u06C1 \u0628\u06C1\u0627\u0645\u0627\u0633",
                common: "\u0628\u06C1\u0627\u0645\u0627\u0633"
            },
            zho: {
                official: "\u5DF4\u54C8\u9A6C\u8054\u90A6",
                common: "\u5DF4\u54C8\u9A6C"
            }
        },
        latlng: [
            25.0343,
            -77.3963
        ],
        landlocked: false,
        area: 13943,
        demonyms: {
            eng: {
                f: "Bahamian",
                m: "Bahamian"
            },
            fra: {
                f: "Bahamienne",
                m: "Bahamien"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/1YzRs1BZrG8p8pmVA",
            openStreetMaps: "https://www.openstreetmap.org/relation/547469"
        },
        population: 393248,
        fifa: "BAH",
        car: {
            signs: [
                "BS"
            ],
            side: "left"
        },
        timezones: [
            "UTC-05:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bs.png",
            svg: "https://flagcdn.com/bs.svg",
            alt: "The flag of the Bahamas is composed of three equal horizontal bands of aquamarine, yellow and aquamarine, with a black equilateral triangle superimposed on the hoist side of the field. This triangle has its base on the hoist end and spans about one-third the width of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bs.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bs.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                25.08,
                -77.35
            ]
        }
    },
    {
        name: {
            common: "Kosovo",
            official: "Republic of Kosovo",
            nativeName: {
                sqi: {
                    official: "Republika e Kosov\xebs",
                    common: "Kosova"
                },
                srp: {
                    official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u043E\u0432\u043E",
                    common: "\u041A\u043E\u0441\u043E\u0432\u043E"
                }
            }
        },
        cca2: "XK",
        cca3: "UNK",
        cioc: "KOS",
        status: "user-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "83"
            ]
        },
        capital: [
            "Pristina"
        ],
        altSpellings: [
            "XK",
            "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u043E\u0432\u043E"
        ],
        region: "Europe",
        subregion: "Southeast Europe",
        languages: {
            sqi: "Albanian",
            srp: "Serbian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u0648\u0633\u0648\u0641\u0648",
                common: "\u0643\u0648\u0633\u0648\u0641\u0648"
            },
            bre: {
                official: "Republik Kosovo",
                common: "Kosovo"
            },
            ces: {
                official: "Kosovsk\xe1 republika",
                common: "Kosovo"
            },
            cym: {
                official: "Republic of Kosovo",
                common: "Kosovo"
            },
            deu: {
                official: "Republik Kosovo",
                common: "Kosovo"
            },
            est: {
                official: "Kosovo Vabariik",
                common: "Kosovo"
            },
            fin: {
                official: "Kosovon tasavalta",
                common: "Kosovo"
            },
            fra: {
                official: "R\xe9publique du Kosovo",
                common: "Kosovo"
            },
            hrv: {
                official: "Republika Kosovo",
                common: "Kosovo"
            },
            hun: {
                official: "Koszov\xf3",
                common: "Koszov\xf3"
            },
            ita: {
                official: "Repubblica del Kosovo",
                common: "Kosovo"
            },
            kor: {
                official: "\uCF54\uC18C\uBCF4 \uACF5\uD654\uAD6D",
                common: "\uCF54\uC18C\uBCF4"
            },
            nld: {
                official: "Republiek Kosovo",
                common: "Kosovo"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u0648\u0632\u0648\u0648",
                common: "\u06A9\u0648\u0632\u0648\u0648"
            },
            pol: {
                official: "Republika Kosowa",
                common: "Kosowo"
            },
            por: {
                official: "Rep\xfablica do Kosovo",
                common: "Kosovo"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u043E\u0432\u043E",
                common: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u043E\u0432\u043E"
            },
            slk: {
                official: "Republika Kosovo",
                common: "Kosovo"
            },
            spa: {
                official: "Rep\xfablica de Kosovo",
                common: "Kosovo"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u0441\u043E\u0432\u043E",
                common: "\u041A\u043E\u0441\u043E\u0432\u043E"
            },
            swe: {
                official: "Republiken Kosovo",
                common: "Kosovo"
            },
            tur: {
                official: "Kosova Cumhuriyeti",
                common: "Kosova"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0648\u0633\u0648\u0648\u06C1",
                common: "\u06A9\u0648\u0633\u0648\u0648\u06C1"
            },
            zho: {
                official: "\u79D1\u7D22\u6C83\u5171\u548C\u56FD",
                common: "\u79D1\u7D22\u6C83"
            }
        },
        latlng: [
            42.666667,
            21.166667
        ],
        landlocked: true,
        borders: [
            "ALB",
            "MKD",
            "MNE",
            "SRB"
        ],
        area: 10908,
        demonyms: {
            eng: {
                f: "Kosovar",
                m: "Kosovar"
            },
            fra: {
                f: "Kosovare",
                m: "Kosovar"
            }
        },
        flag: "\uD83C\uDDFD\uD83C\uDDF0",
        maps: {
            googleMaps: "https://goo.gl/maps/CSC4Yc8SWPgburuD9",
            openStreetMaps: "https://www.openstreetmap.org/relation/2088990"
        },
        population: 1775378,
        gini: {
            2017: 29
        },
        fifa: "KVX",
        car: {
            signs: [
                "CS"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/xk.png",
            svg: "https://flagcdn.com/xk.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/xk.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/xk.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                42.67,
                21.17
            ]
        }
    },
    {
        name: {
            common: "Kuwait",
            official: "State of Kuwait",
            nativeName: {
                ara: {
                    official: "\u062F\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064A\u062A",
                    common: "\u0627\u0644\u0643\u0648\u064A\u062A"
                }
            }
        },
        tld: [
            ".kw"
        ],
        cca2: "KW",
        ccn3: "414",
        cca3: "KWT",
        cioc: "KUW",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            KWD: {
                name: "Kuwaiti dinar",
                symbol: "\u062F.\u0643"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "65"
            ]
        },
        capital: [
            "Kuwait City"
        ],
        altSpellings: [
            "KW",
            "State of Kuwait",
            "Dawlat al-Kuwait"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064A\u062A",
                common: "\u0627\u0644\u0643\u0648\u064A\u062A"
            },
            bre: {
                official: "Stad Koweit",
                common: "Koweit"
            },
            ces: {
                official: "St\xe1t Kuvajt",
                common: "Kuvajt"
            },
            cym: {
                official: "State of Kuwait",
                common: "Kuwait"
            },
            deu: {
                official: "Staat Kuwait",
                common: "Kuwait"
            },
            est: {
                official: "Kuveidi Riik",
                common: "Kuveit"
            },
            fin: {
                official: "Kuwaitin valtio",
                common: "Kuwait"
            },
            fra: {
                official: "\xc9tat du Kowe\xeft",
                common: "Kowe\xeft"
            },
            hrv: {
                official: "Dr\u017Eava Kuvajt",
                common: "Kuvajt"
            },
            hun: {
                official: "Kuvaiti \xc1llam",
                common: "Kuvait"
            },
            ita: {
                official: "Stato del Kuwait",
                common: "Kuwait"
            },
            jpn: {
                official: "\u30AF\u30A6\u30A7\u30FC\u30C8\u56FD",
                common: "\u30AF\u30A6\u30A7\u30FC\u30C8"
            },
            kor: {
                official: "\uCFE0\uC6E8\uC774\uD2B8\uAD6D",
                common: "\uCFE0\uC6E8\uC774\uD2B8"
            },
            nld: {
                official: "Staat Koeweit",
                common: "Koeweit"
            },
            per: {
                official: "\u062F\u0648\u0644\u062A \u06A9\u0648\u06CC\u062A",
                common: "\u06A9\u064F\u0648\u06CC\u062A"
            },
            pol: {
                official: "Pa\u0144stwo Kuwejt",
                common: "Kuwejt"
            },
            por: {
                official: "Estado do Kuwait",
                common: "Kuwait"
            },
            rus: {
                official: "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u041A\u0443\u0432\u0435\u0439\u0442",
                common: "\u041A\u0443\u0432\u0435\u0439\u0442"
            },
            slk: {
                official: "Kuvajtsk\xfd \u0161t\xe1t",
                common: "Kuvajt"
            },
            spa: {
                official: "Estado de Kuwait",
                common: "Kuwait"
            },
            srp: {
                official: "\u0414\u0440\u0436\u0430\u0432\u0430 \u041A\u0443\u0432\u0430\u0458\u0442",
                common: "\u041A\u0443\u0432\u0430\u0458\u0442"
            },
            swe: {
                official: "Staten Kuwait",
                common: "Kuwait"
            },
            tur: {
                official: "Kuveyt Devleti",
                common: "Kuveyt"
            },
            urd: {
                official: "\u062F\u0648\u0644\u062A\u0650 \u06A9\u0648\u06CC\u062A",
                common: "\u06A9\u0648\u06CC\u062A"
            },
            zho: {
                official: "\u79D1\u5A01\u7279\u56FD",
                common: "\u79D1\u5A01\u7279"
            }
        },
        latlng: [
            29.5,
            45.75
        ],
        landlocked: false,
        borders: [
            "IRQ",
            "SAU"
        ],
        area: 17818,
        demonyms: {
            eng: {
                f: "Kuwaiti",
                m: "Kuwaiti"
            },
            fra: {
                f: "Kowe\xeftienne",
                m: "Kowe\xeftien"
            }
        },
        flag: "\uD83C\uDDF0\uD83C\uDDFC",
        maps: {
            googleMaps: "https://goo.gl/maps/aqr3aNQjS1BAvksJ7",
            openStreetMaps: "https://www.openstreetmap.org/relation/305099"
        },
        population: 4270563,
        fifa: "KUW",
        car: {
            signs: [
                "KWT"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/kw.png",
            svg: "https://flagcdn.com/kw.svg",
            alt: "The flag of Kuwait is composed of three equal horizontal bands of green, white and red, with a black trapezium superimposed on the hoist side of the field. This trapezium has its base on the hoist end and spans about one-fourth the width of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/kw.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/kw.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                29.37,
                47.97
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Maldives",
            official: "Republic of the Maldives",
            nativeName: {
                div: {
                    official: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0783\u07A7\u0787\u07B0\u0796\u07AD\u078E\u07AC \u0796\u07AA\u0789\u07B0\u0780\u07AB\u0783\u07A8\u0787\u07B0\u0794\u07A7",
                    common: "\u078B\u07A8\u0788\u07AC\u0780\u07A8\u0783\u07A7\u0787\u07B0\u0796\u07AD\u078E\u07AC"
                }
            }
        },
        tld: [
            ".mv"
        ],
        cca2: "MV",
        ccn3: "462",
        cca3: "MDV",
        cioc: "MDV",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MVR: {
                name: "Maldivian rufiyaa",
                symbol: ".\u0783"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "60"
            ]
        },
        capital: [
            "Mal\xe9"
        ],
        altSpellings: [
            "MV",
            "Maldive Islands",
            "Republic of the Maldives",
            "Dhivehi Raajjeyge Jumhooriyya"
        ],
        region: "Asia",
        subregion: "Southern Asia",
        languages: {
            div: "Maldivian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0645\u0627\u0644\u062F\u064A\u0641",
                common: "\u0627\u0644\u0645\u0627\u0644\u062F\u064A\u0641"
            },
            bre: {
                official: "Republik Maldivez",
                common: "Maldivez"
            },
            ces: {
                official: "Maledivsk\xe1 republika",
                common: "Maledivy"
            },
            cym: {
                official: "Republic of the Maldives",
                common: "Maldives"
            },
            deu: {
                official: "Republik Malediven",
                common: "Malediven"
            },
            est: {
                official: "Maldiivi Vabariik",
                common: "Maldiivid"
            },
            fin: {
                official: "Malediivien tasavalta",
                common: "Malediivit"
            },
            fra: {
                official: "R\xe9publique des Maldives",
                common: "Maldives"
            },
            hrv: {
                official: "Republika Maldivi",
                common: "Maldivi"
            },
            hun: {
                official: "Mald\xedv-szigetek",
                common: "Mald\xedv-szigetek"
            },
            ita: {
                official: "Repubblica delle Maldive",
                common: "Maldive"
            },
            jpn: {
                official: "\u30E2\u30EB\u30C7\u30A3\u30D6\u5171\u548C\u56FD",
                common: "\u30E2\u30EB\u30C7\u30A3\u30D6"
            },
            kor: {
                official: "\uBAB0\uB514\uBE0C \uACF5\uD654\uAD6D",
                common: "\uBAB0\uB514\uBE0C"
            },
            nld: {
                official: "Republiek van de Malediven",
                common: "Maldiven"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u0627\u0644\u062F\u06CC\u0648",
                common: "\u0645\u0627\u0644\u062F\u06CC\u0648"
            },
            pol: {
                official: "Republika Malediw\xf3w",
                common: "Malediwy"
            },
            por: {
                official: "Rep\xfablica das Maldivas",
                common: "Maldivas"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041C\u0430\u043B\u044C\u0434\u0438\u0432\u044B",
                common: "\u041C\u0430\u043B\u044C\u0434\u0438\u0432\u044B"
            },
            slk: {
                official: "Maldivsk\xe1 republika",
                common: "Maldivy"
            },
            spa: {
                official: "Rep\xfablica de las Maldivas",
                common: "Maldivas"
            },
            srp: {
                official: "\u041C\u0430\u043B\u0434\u0438\u0432\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041C\u0430\u043B\u0434\u0438\u0432\u0438"
            },
            swe: {
                official: "Republiken Maldiverna",
                common: "Maldiverna"
            },
            tur: {
                official: "Maldivler Cumhuriyeti",
                common: "Maldivler"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u0627\u0644\u062F\u06CC\u067E",
                common: "\u0645\u0627\u0644\u062F\u06CC\u067E"
            },
            zho: {
                official: "\u9A6C\u5C14\u4EE3\u592B\u5171\u548C\u56FD",
                common: "\u9A6C\u5C14\u4EE3\u592B"
            }
        },
        latlng: [
            3.25,
            73
        ],
        landlocked: false,
        area: 300,
        demonyms: {
            eng: {
                f: "Maldivan",
                m: "Maldivan"
            },
            fra: {
                f: "Maldivienne",
                m: "Maldivien"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDFB",
        maps: {
            googleMaps: "https://goo.gl/maps/MNAWGq9vEdbZ9vUV7",
            openStreetMaps: "https://www.openstreetmap.org/relation/536773"
        },
        population: 540542,
        gini: {
            2016: 31.3
        },
        fifa: "MDV",
        car: {
            signs: [
                "MV"
            ],
            side: "left"
        },
        timezones: [
            "UTC+05:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mv.png",
            svg: "https://flagcdn.com/mv.svg",
            alt: "The flag of Maldives has a red field, at the center of which is a large green rectangle bearing a fly-side facing white crescent."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mv.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mv.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                4.17,
                73.51
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "South Sudan",
            official: "Republic of South Sudan",
            nativeName: {
                eng: {
                    official: "Republic of South Sudan",
                    common: "South Sudan"
                }
            }
        },
        tld: [
            ".ss"
        ],
        cca2: "SS",
        ccn3: "728",
        cca3: "SSD",
        cioc: "SSD",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            SSP: {
                name: "South Sudanese pound",
                symbol: "\xa3"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "11"
            ]
        },
        capital: [
            "Juba"
        ],
        altSpellings: [
            "SS"
        ],
        region: "Africa",
        subregion: "Middle Africa",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062C\u0646\u0648\u0628 \u0627\u0644\u0633\u0648\u062F\u0627\u0646",
                common: "\u062C\u0646\u0648\u0628 \u0627\u0644\u0633\u0648\u062F\u0627\u0646"
            },
            bre: {
                official: "Republik Soudan ar Su",
                common: "Soudan ar Su"
            },
            ces: {
                official: "Jihos\xfad\xe1nsk\xe1 republika",
                common: "Ji\u017En\xed S\xfad\xe1n"
            },
            cym: {
                official: "Republic of South Sudan",
                common: "South Sudan"
            },
            deu: {
                official: "Republik S\xfcdsudan",
                common: "S\xfcdsudan"
            },
            est: {
                official: "L\xf5una-Sudaani Vabariik",
                common: "L\xf5una-Sudaan"
            },
            fin: {
                official: "Etel\xe4-Sudanin tasavalta",
                common: "Etel\xe4-Sudan"
            },
            fra: {
                official: "R\xe9publique du Soudan du Sud",
                common: "Soudan du Sud"
            },
            hrv: {
                official: "Republika Ju\u017Eni Sudan",
                common: "Ju\u017Eni Sudan"
            },
            hun: {
                official: "D\xe9l-szud\xe1ni K\xf6zt\xe1rsas\xe1g",
                common: "D\xe9l-Szud\xe1n"
            },
            ita: {
                official: "Repubblica del Sudan del Sud",
                common: "Sudan del sud"
            },
            jpn: {
                official: "\u5357\u30B9\u30FC\u30C0\u30F3\u5171\u548C\u56FD",
                common: "\u5357\u30B9\u30FC\u30C0\u30F3"
            },
            kor: {
                official: "\uB0A8\uC218\uB2E8 \uACF5\uD654\uAD6D",
                common: "\uB0A8\uC218\uB2E8"
            },
            nld: {
                official: "Republiek Zuid-Soedan",
                common: "Zuid-Soedan"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0633\u0648\u062F\u0627\u0646 \u062C\u0646\u0648\u0628\u06CC",
                common: "\u0633\u0648\u062F\u0627\u0646 \u062C\u0646\u0648\u0628\u06CC"
            },
            pol: {
                official: "Republika Sudanu",
                common: "Sudan"
            },
            por: {
                official: "Rep\xfablica do Sud\xe3o do Sul",
                common: "Sud\xe3o do Sul"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u042E\u0436\u043D\u044B\u0439 \u0421\u0443\u0434\u0430\u043D",
                common: "\u042E\u0436\u043D\u044B\u0439 \u0421\u0443\u0434\u0430\u043D"
            },
            slk: {
                official: "Juhosud\xe1nska republika",
                common: "Ju\u017En\xfd Sud\xe1n"
            },
            spa: {
                official: "Rep\xfablica de Sud\xe1n del Sur",
                common: "Sud\xe1n del Sur"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0408\u0443\u0436\u043D\u0438 \u0421\u0443\u0434\u0430\u043D",
                common: "\u0408\u0443\u0436\u043D\u0438 \u0421\u0443\u0434\u0430\u043D"
            },
            swe: {
                official: "Republiken Sydsudan",
                common: "Sydsudan"
            },
            tur: {
                official: "G\xfcney Sudan Cumhuriyeti",
                common: "G\xfcney Sudan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u062C\u0646\u0648\u0628\u06CC \u0633\u0648\u0688\u0627\u0646",
                common: "\u062C\u0646\u0648\u0628\u06CC \u0633\u0648\u0688\u0627\u0646"
            },
            zho: {
                official: "\u5357\u82CF\u4E39\u5171\u548C\u56FD",
                common: "\u5357\u82CF\u4E39"
            }
        },
        latlng: [
            7,
            30
        ],
        landlocked: true,
        borders: [
            "CAF",
            "COD",
            "ETH",
            "KEN",
            "SDN",
            "UGA"
        ],
        area: 619745,
        demonyms: {
            eng: {
                f: "South Sudanese",
                m: "South Sudanese"
            },
            fra: {
                f: "Sud-Soudanaise",
                m: "Sud-Soudanais"
            }
        },
        flag: "\uD83C\uDDF8\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/Zm1AYCXb9HSNF1P27",
            openStreetMaps: "https://www.openstreetmap.org/relation/1656678"
        },
        population: 11193729,
        gini: {
            2016: 44.1
        },
        fifa: "SSD",
        car: {
            signs: [
                ""
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ss.png",
            svg: "https://flagcdn.com/ss.svg",
            alt: "The flag of South Sudan is composed of three equal horizontal bands of black, red with white top and bottom edges, and green. A blue equilateral triangle which spans about two-fifth the width of the field is superimposed on the hoist side with its base on the hoist end of the field. At the center of this triangle is a five-pointed yellow star."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ss.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ss.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                4.85,
                31.62
            ]
        }
    },
    {
        name: {
            common: "Iran",
            official: "Islamic Republic of Iran",
            nativeName: {
                fas: {
                    official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u06CC\u0631\u0627\u0646",
                    common: "\u0627\u06CC\u0631\u0627\u0646"
                }
            }
        },
        tld: [
            ".ir",
            "\u0627\u06CC\u0631\u0627\u0646."
        ],
        cca2: "IR",
        ccn3: "364",
        cca3: "IRN",
        cioc: "IRI",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            IRR: {
                name: "Iranian rial",
                symbol: "\uFDFC"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "8"
            ]
        },
        capital: [
            "Tehran"
        ],
        altSpellings: [
            "IR",
            "Islamic Republic of Iran",
            "Iran, Islamic Republic of",
            "Jomhuri-ye Esl\u0101mi-ye Ir\u0101n"
        ],
        region: "Asia",
        subregion: "Southern Asia",
        languages: {
            fas: "Persian (Farsi)"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0625\u064A\u0631\u0627\u0646 \u0627\u0644\u0625\u0633\u0644\u0627\u0645\u064A\u0629",
                common: "\u0625\u064A\u0631\u0627\u0646"
            },
            bre: {
                official: "Republik Islamek Iran",
                common: "Iran"
            },
            ces: {
                official: "Isl\xe1msk\xe1 republika \xcdr\xe1n",
                common: "\xcdr\xe1n"
            },
            cym: {
                official: "Islamic Republic of Iran",
                common: "Iran"
            },
            deu: {
                official: "Islamische Republik Iran",
                common: "Iran"
            },
            est: {
                official: "Iraani Islamivabariik",
                common: "Iraan"
            },
            fin: {
                official: "Iranin islamilainen tasavalta",
                common: "Iran"
            },
            fra: {
                official: "R\xe9publique islamique d'Iran",
                common: "Iran"
            },
            hrv: {
                official: "Islamska Republika Iran",
                common: "Iran"
            },
            hun: {
                official: "Ir\xe1ni Iszl\xe1m K\xf6zt\xe1rsas\xe1g",
                common: "Ir\xe1n"
            },
            ita: {
                official: "Repubblica islamica dell'Iran",
                common: "Iran"
            },
            jpn: {
                official: "\u30A4\u30E9\u30F3\xb7\u30A4\u30B9\u30E9\u30E0\u5171\u548C\u56FD",
                common: "\u30A4\u30E9\u30F3\u30FB\u30A4\u30B9\u30E9\u30E0\u5171\u548C\u56FD"
            },
            kor: {
                official: "\uC774\uB780 \uC774\uC2AC\uB78C \uACF5\uD654\uAD6D",
                common: "\uC774\uB780"
            },
            nld: {
                official: "Islamitische Republiek Iran",
                common: "Iran"
            },
            pol: {
                official: "Islamska Republika Iranu",
                common: "Iran"
            },
            por: {
                official: "Rep\xfablica Isl\xe2mica do Ir\xe3",
                common: "Ir\xe3o"
            },
            rus: {
                official: "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0440\u0430\u043D",
                common: "\u0418\u0440\u0430\u043D"
            },
            slk: {
                official: "Ir\xe1nska islamsk\xe1 republika",
                common: "Ir\xe1n"
            },
            spa: {
                official: "Rep\xfablica Isl\xe1mica de Ir\xe1n",
                common: "Iran"
            },
            srp: {
                official: "\u0418\u0441\u043B\u0430\u043C\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0418\u0440\u0430\u043D",
                common: "\u0418\u0440\u0430\u043D"
            },
            swe: {
                official: "Islamiska republiken Iran",
                common: "Iran"
            },
            tur: {
                official: "\u0130ran \u0130slam Cumhuriyeti",
                common: "\u0130ran"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u06CC\u0631\u0627\u0646",
                common: "\u0627\u06CC\u0631\u0627\u0646"
            },
            zho: {
                official: "\u4F0A\u6717\u4F0A\u65AF\u5170\u5171\u548C\u56FD",
                common: "\u4F0A\u6717"
            }
        },
        latlng: [
            32,
            53
        ],
        landlocked: false,
        borders: [
            "AFG",
            "ARM",
            "AZE",
            "IRQ",
            "PAK",
            "TUR",
            "TKM"
        ],
        area: 1648195,
        demonyms: {
            eng: {
                f: "Iranian",
                m: "Iranian"
            },
            fra: {
                f: "Iranienne",
                m: "Iranien"
            }
        },
        flag: "\uD83C\uDDEE\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/dMgEGuacBPGYQnjY7",
            openStreetMaps: "https://www.openstreetmap.org/relation/304938"
        },
        population: 83992953,
        gini: {
            2018: 42
        },
        fifa: "IRN",
        car: {
            signs: [
                "IR"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:30"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ir.png",
            svg: "https://flagcdn.com/ir.svg",
            alt: "The flag of Iran is composed of three equal horizontal bands of green, white and red. A red emblem of Iran is centered in the white band and Arabic inscriptions in white span the bottom edge of the green band and the top edge of the red band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ir.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ir.svg"
        },
        startOfWeek: "saturday",
        capitalInfo: {
            latlng: [
                35.7,
                51.42
            ]
        },
        postalCode: {
            format: "##########",
            regex: "^(\\d{10})$"
        }
    },
    {
        name: {
            common: "Albania",
            official: "Republic of Albania",
            nativeName: {
                sqi: {
                    official: "Republika e Shqip\xebris\xeb",
                    common: "Shqip\xebria"
                }
            }
        },
        tld: [
            ".al"
        ],
        cca2: "AL",
        ccn3: "008",
        cca3: "ALB",
        cioc: "ALB",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            ALL: {
                name: "Albanian lek",
                symbol: "L"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "55"
            ]
        },
        capital: [
            "Tirana"
        ],
        altSpellings: [
            "AL",
            "Shqip\xebri",
            "Shqip\xebria",
            "Shqipnia"
        ],
        region: "Europe",
        subregion: "Southeast Europe",
        languages: {
            sqi: "Albanian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0623\u0644\u0628\u0627\u0646\u064A\u0627",
                common: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627"
            },
            bre: {
                official: "Republik Albania",
                common: "Albania"
            },
            ces: {
                official: "Alb\xe1nsk\xe1 republika",
                common: "Alb\xe1nie"
            },
            cym: {
                official: "Gweriniaeth Albania",
                common: "Albania"
            },
            deu: {
                official: "Republik Albanien",
                common: "Albanien"
            },
            est: {
                official: "Albaania Vabariik",
                common: "Albaania"
            },
            fin: {
                official: "Albanian tasavalta",
                common: "Albania"
            },
            fra: {
                official: "R\xe9publique d'Albanie",
                common: "Albanie"
            },
            hrv: {
                official: "Republika Albanija",
                common: "Albanija"
            },
            hun: {
                official: "Alb\xe1n K\xf6zt\xe1rsas\xe1g",
                common: "Alb\xe1nia"
            },
            ita: {
                official: "Repubblica d'Albania",
                common: "Albania"
            },
            jpn: {
                official: "\u30A2\u30EB\u30D0\u30CB\u30A2\u5171\u548C\u56FD",
                common: "\u30A2\u30EB\u30D0\u30CB\u30A2"
            },
            kor: {
                official: "\uC54C\uBC14\uB2C8\uC544 \uACF5\uD654\uAD6D",
                common: "\uC54C\uBC14\uB2C8\uC544"
            },
            nld: {
                official: "Republiek Albani\xeb",
                common: "Albani\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0622\u0644\u0628\u0627\u0646\u06CC",
                common: "\u0622\u0644\u0628\u0627\u0646\u06CC"
            },
            pol: {
                official: "Republika Albanii",
                common: "Albania"
            },
            por: {
                official: "Rep\xfablica da Alb\xe2nia",
                common: "Alb\xe2nia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043B\u0431\u0430\u043D\u0438\u044F",
                common: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F"
            },
            slk: {
                official: "Alb\xe1nska republika",
                common: "Alb\xe1nsko"
            },
            spa: {
                official: "Rep\xfablica de Albania",
                common: "Albania"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430",
                common: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Albanien",
                common: "Albanien"
            },
            tur: {
                official: "Arnavutluk Cumhuriyeti",
                common: "Arnavutluk"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0627\u0644\u0628\u0627\u0646\u06CC\u0627",
                common: "\u0627\u0644\u0628\u0627\u0646\u06CC\u0627"
            },
            zho: {
                official: "\u963F\u5C14\u5DF4\u5C3C\u4E9A\u5171\u548C\u56FD",
                common: "\u963F\u5C14\u5DF4\u5C3C\u4E9A"
            }
        },
        latlng: [
            41,
            20
        ],
        landlocked: false,
        borders: [
            "MNE",
            "GRC",
            "MKD",
            "UNK"
        ],
        area: 28748,
        demonyms: {
            eng: {
                f: "Albanian",
                m: "Albanian"
            },
            fra: {
                f: "Albanaise",
                m: "Albanais"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDF1",
        maps: {
            googleMaps: "https://goo.gl/maps/BzN9cTuj68ZA8SyZ8",
            openStreetMaps: "https://www.openstreetmap.org/relation/53292"
        },
        population: 2837743,
        gini: {
            2017: 33.2
        },
        fifa: "ALB",
        car: {
            signs: [
                "AL"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/al.png",
            svg: "https://flagcdn.com/al.svg",
            alt: "The flag of Albania features a silhouetted double-headed black eagle at the center of a red field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/al.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/al.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                41.32,
                19.82
            ]
        }
    },
    {
        name: {
            common: "Brazil",
            official: "Federative Republic of Brazil",
            nativeName: {
                por: {
                    official: "Rep\xfablica Federativa do Brasil",
                    common: "Brasil"
                }
            }
        },
        tld: [
            ".br"
        ],
        cca2: "BR",
        ccn3: "076",
        cca3: "BRA",
        cioc: "BRA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BRL: {
                name: "Brazilian real",
                symbol: "R$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "5"
            ]
        },
        capital: [
            "Bras\xedlia"
        ],
        altSpellings: [
            "BR",
            "Brasil",
            "Federative Republic of Brazil",
            "Rep\xfablica Federativa do Brasil"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            por: "Portuguese"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0628\u0631\u0627\u0632\u064A\u0644 \u0627\u0644\u0627\u062A\u062D\u0627\u062F\u064A\u0629",
                common: "\u0627\u0644\u0628\u0631\u0627\u0632\u064A\u0644"
            },
            bre: {
                official: "Republik Kevreel Brazil",
                common: "Brazil"
            },
            ces: {
                official: "Brazilsk\xe1 federativn\xed republika",
                common: "Braz\xedlie"
            },
            cym: {
                official: "Gweriniaeth Ffederal Brasil",
                common: "Brasil"
            },
            deu: {
                official: "F\xf6derative Republik Brasilien",
                common: "Brasilien"
            },
            est: {
                official: "Brasiilia Liitvabariik",
                common: "Brasiilia"
            },
            fin: {
                official: "Brasilian liittotasavalta",
                common: "Brasilia"
            },
            fra: {
                official: "R\xe9publique f\xe9d\xe9rative du Br\xe9sil",
                common: "Br\xe9sil"
            },
            hrv: {
                official: "Savezne Republike Brazil",
                common: "Brazil"
            },
            hun: {
                official: "Brazil Sz\xf6vets\xe9gi K\xf6zt\xe1rsas\xe1g",
                common: "Braz\xedlia"
            },
            ita: {
                official: "Repubblica federativa del Brasile",
                common: "Brasile"
            },
            jpn: {
                official: "\u30D6\u30E9\u30B8\u30EB\u9023\u90A6\u5171\u548C\u56FD",
                common: "\u30D6\u30E9\u30B8\u30EB"
            },
            kor: {
                official: "\uBE0C\uB77C\uC9C8 \uC5F0\uBC29 \uACF5\uD654\uAD6D",
                common: "\uBE0C\uB77C\uC9C8"
            },
            nld: {
                official: "Federale Republiek Brazili\xeb",
                common: "Brazili\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0641\u062F\u0631\u0627\u062A\u06CC\u0648 \u0628\u0631\u0632\u06CC\u0644",
                common: "\u0628\u0631\u0632\u06CC\u0644"
            },
            pol: {
                official: "Federacyjna Republika Brazylii",
                common: "Brazylia"
            },
            por: {
                official: "Rep\xfablica Federativa do Brasil",
                common: "Brasil"
            },
            rus: {
                official: "\u0424\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0440\u0430\u0437\u0438\u043B\u0438\u044F",
                common: "\u0411\u0440\u0430\u0437\u0438\u043B\u0438\u044F"
            },
            slk: {
                official: "Braz\xedlska federat\xedvna republika",
                common: "Braz\xedlia"
            },
            spa: {
                official: "Rep\xfablica Federativa del Brasil",
                common: "Brasil"
            },
            srp: {
                official: "\u0421\u0430\u0432\u0435\u0437\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0411\u0440\u0430\u0437\u0438\u043B",
                common: "\u0411\u0440\u0430\u0437\u0438\u043B"
            },
            swe: {
                official: "F\xf6rbundsrepubliken Brasilien",
                common: "Brasilien"
            },
            tur: {
                official: "Brezilya Federal Cumhuriyeti",
                common: "Brezilya"
            },
            urd: {
                official: "\u0648\u0641\u0627\u0642\u06CC \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0628\u0631\u0627\u0632\u06CC\u0644",
                common: "\u0628\u0631\u0627\u0632\u06CC\u0644"
            },
            zho: {
                official: "\u5DF4\u897F\u8054\u90A6\u5171\u548C\u56FD",
                common: "\u5DF4\u897F"
            }
        },
        latlng: [
            -10,
            -55
        ],
        landlocked: false,
        borders: [
            "ARG",
            "BOL",
            "COL",
            "GUF",
            "GUY",
            "PRY",
            "PER",
            "SUR",
            "URY",
            "VEN"
        ],
        area: 8515767,
        demonyms: {
            eng: {
                f: "Brazilian",
                m: "Brazilian"
            },
            fra: {
                f: "Br\xe9silienne",
                m: "Br\xe9silien"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/waCKk21HeeqFzkNC9",
            openStreetMaps: "https://www.openstreetmap.org/relation/59470"
        },
        population: 212559409,
        gini: {
            2019: 53.4
        },
        fifa: "BRA",
        car: {
            signs: [
                "BR"
            ],
            side: "right"
        },
        timezones: [
            "UTC-05:00",
            "UTC-04:00",
            "UTC-03:00",
            "UTC-02:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/br.png",
            svg: "https://flagcdn.com/br.svg",
            alt: "The flag of Brazil has a green field with a large yellow rhombus in the center. Within the rhombus is a dark blue globe with twenty-seven small five-pointed white stars depicting a starry sky and a thin white convex horizontal band inscribed with the national motto 'Ordem e Progresso' across its center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/br.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/br.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -15.79,
                -47.88
            ]
        },
        postalCode: {
            format: "#####-###",
            regex: "^(\\d{8})$"
        }
    },
    {
        name: {
            common: "Serbia",
            official: "Republic of Serbia",
            nativeName: {
                srp: {
                    official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0440\u0431\u0438\u0458\u0430",
                    common: "\u0421\u0440\u0431\u0438\u0458\u0430"
                }
            }
        },
        tld: [
            ".rs",
            ".\u0441\u0440\u0431"
        ],
        cca2: "RS",
        ccn3: "688",
        cca3: "SRB",
        cioc: "SRB",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            RSD: {
                name: "Serbian dinar",
                symbol: "\u0434\u0438\u043D."
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "81"
            ]
        },
        capital: [
            "Belgrade"
        ],
        altSpellings: [
            "RS",
            "Srbija",
            "Republic of Serbia",
            "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0440\u0431\u0438\u0458\u0430",
            "Republika Srbija"
        ],
        region: "Europe",
        subregion: "Southeast Europe",
        languages: {
            srp: "Serbian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0635\u064A\u0631\u0628\u064A\u0627",
                common: "\u0635\u064A\u0631\u0628\u064A\u0627"
            },
            bre: {
                official: "Republik Serbia",
                common: "Serbia"
            },
            ces: {
                official: "Srbsk\xe1 republika",
                common: "Srbsko"
            },
            cym: {
                official: "Republic of Serbia",
                common: "Serbia"
            },
            deu: {
                official: "Republik Serbien",
                common: "Serbien"
            },
            est: {
                official: "Serbia Vabariik",
                common: "Serbia"
            },
            fin: {
                official: "Serbian tasavalta",
                common: "Serbia"
            },
            fra: {
                official: "R\xe9publique de Serbie",
                common: "Serbie"
            },
            hrv: {
                official: "Republika Srbija",
                common: "Srbija"
            },
            hun: {
                official: "Szerb K\xf6zt\xe1rsas\xe1g",
                common: "Szerbia"
            },
            ita: {
                official: "Repubblica di Serbia",
                common: "Serbia"
            },
            jpn: {
                official: "\u30BB\u30EB\u30D3\u30A2\u5171\u548C\u56FD",
                common: "\u30BB\u30EB\u30D3\u30A2"
            },
            kor: {
                official: "\uC138\uB974\uBE44\uC544 \uACF5\uD654\uAD6D",
                common: "\uC138\uB974\uBE44\uC544"
            },
            nld: {
                official: "Republiek Servi\xeb",
                common: "Servi\xeb"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0635\u0631\u0628\u0633\u062A\u0627\u0646",
                common: "\u0635\u0631\u0628\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Republika Serbii",
                common: "Serbia"
            },
            por: {
                official: "Rep\xfablica da S\xe9rvia",
                common: "S\xe9rvia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0435\u0440\u0431\u0438\u044F",
                common: "\u0421\u0435\u0440\u0431\u0438\u044F"
            },
            slk: {
                official: "Srbsk\xe1 republika",
                common: "Srbsko"
            },
            spa: {
                official: "Rep\xfablica de Serbia",
                common: "Serbia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0440\u0431\u0438\u0458\u0430",
                common: "\u0421\u0440\u0431\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Serbien",
                common: "Serbien"
            },
            tur: {
                official: "S\u0131rbistan Cumhuriyeti",
                common: "S\u0131rbistan"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0633\u0631\u0628\u06CC\u0627",
                common: "\u0633\u0631\u0628\u06CC\u0627"
            },
            zho: {
                official: "\u585E\u5C14\u7EF4\u4E9A\u5171\u548C\u56FD",
                common: "\u585E\u5C14\u7EF4\u4E9A"
            }
        },
        latlng: [
            44,
            21
        ],
        landlocked: true,
        borders: [
            "BIH",
            "BGR",
            "HRV",
            "HUN",
            "UNK",
            "MKD",
            "MNE",
            "ROU"
        ],
        area: 88361,
        demonyms: {
            eng: {
                f: "Serbian",
                m: "Serbian"
            },
            fra: {
                f: "Serbe",
                m: "Serbe"
            }
        },
        flag: "\uD83C\uDDF7\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/2Aqof7aV2Naq8YEK8",
            openStreetMaps: "https://www.openstreetmap.org/relation/1741311"
        },
        population: 6908224,
        gini: {
            2017: 36.2
        },
        fifa: "SRB",
        car: {
            signs: [
                "SRB"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/rs.png",
            svg: "https://flagcdn.com/rs.svg",
            alt: "The flag of Serbia is composed of three equal horizontal bands of red, blue and white. The coat of arms of Serbia is superimposed at the center of the field slightly towards the hoist side."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/rs.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/rs.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                44.83,
                20.5
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Belize",
            official: "Belize",
            nativeName: {
                bjz: {
                    official: "Belize",
                    common: "Belize"
                },
                eng: {
                    official: "Belize",
                    common: "Belize"
                },
                spa: {
                    official: "Belice",
                    common: "Belice"
                }
            }
        },
        tld: [
            ".bz"
        ],
        cca2: "BZ",
        ccn3: "084",
        cca3: "BLZ",
        cioc: "BIZ",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BZD: {
                name: "Belize dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "01"
            ]
        },
        capital: [
            "Belmopan"
        ],
        altSpellings: [
            "BZ"
        ],
        region: "Americas",
        subregion: "Central America",
        languages: {
            bjz: "Belizean Creole",
            eng: "English",
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u0628\u0644\u064A\u0632",
                common: "\u0628\u0644\u064A\u0632"
            },
            bre: {
                official: "Belize",
                common: "Belize"
            },
            ces: {
                official: "Belize",
                common: "Belize"
            },
            cym: {
                official: "Bel\xees",
                common: "Bel\xees"
            },
            deu: {
                official: "Belize",
                common: "Belize"
            },
            est: {
                official: "Belize",
                common: "Belize"
            },
            fin: {
                official: "Belize",
                common: "Belize"
            },
            fra: {
                official: "Belize",
                common: "Belize"
            },
            hrv: {
                official: "Belize",
                common: "Belize"
            },
            hun: {
                official: "Belize",
                common: "Belize"
            },
            ita: {
                official: "Belize",
                common: "Belize"
            },
            jpn: {
                official: "\u30D9\u30EA\u30FC\u30BA",
                common: "\u30D9\u30EA\u30FC\u30BA"
            },
            kor: {
                official: "\uBCA8\uB9AC\uC988",
                common: "\uBCA8\uB9AC\uC988"
            },
            nld: {
                official: "Belize",
                common: "Belize"
            },
            per: {
                official: "\u0628\u0644\u06CC\u0632",
                common: "\u0628\u0644\u06CC\u0632"
            },
            pol: {
                official: "Belize",
                common: "Belize"
            },
            por: {
                official: "Belize",
                common: "Belize"
            },
            rus: {
                official: "\u0411\u0435\u043B\u0438\u0437",
                common: "\u0411\u0435\u043B\u0438\u0437"
            },
            slk: {
                official: "Belize",
                common: "Belize"
            },
            spa: {
                official: "Belice",
                common: "Belice"
            },
            srp: {
                official: "\u0411\u0435\u043B\u0438\u0437\u0435",
                common: "\u0411\u0435\u043B\u0438\u0437\u0435"
            },
            swe: {
                official: "Belize",
                common: "Belize"
            },
            tur: {
                official: "Belize",
                common: "Belize"
            },
            urd: {
                official: "\u0628\u06CC\u0644\u06CC\u0632",
                common: "\u0628\u06CC\u0644\u06CC\u0632"
            },
            zho: {
                official: "\u4F2F\u5229\u5179",
                common: "\u4F2F\u5229\u5179"
            }
        },
        latlng: [
            17.25,
            -88.75
        ],
        landlocked: false,
        borders: [
            "GTM",
            "MEX"
        ],
        area: 22966,
        demonyms: {
            eng: {
                f: "Belizean",
                m: "Belizean"
            },
            fra: {
                f: "B\xe9lizienne",
                m: "B\xe9lizien"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDFF",
        maps: {
            googleMaps: "https://goo.gl/maps/jdCccpdLodm1uTmo9",
            openStreetMaps: "https://www.openstreetmap.org/relation/287827"
        },
        population: 397621,
        gini: {
            1999: 53.3
        },
        fifa: "BLZ",
        car: {
            signs: [
                "BH"
            ],
            side: "right"
        },
        timezones: [
            "UTC-06:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bz.png",
            svg: "https://flagcdn.com/bz.svg",
            alt: "The flag of Belize has a royal blue field with a thin red horizontal band at the top and bottom of the field and the national coat of arms in the center."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bz.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bz.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                17.25,
                -88.77
            ]
        }
    },
    {
        name: {
            common: "Myanmar",
            official: "Republic of the Union of Myanmar",
            nativeName: {
                mya: {
                    official: "\u1015\u103C\u100A\u103A\u1011\u1031\u102C\u1004\u103A\u1005\u102F \u101E\u1019\u1039\u1019\u1010 \u1019\u103C\u1014\u103A\u1019\u102C\u1014\u102D\u102F\u1004\u103A\u1004\u1036\u1010\u1031\u102C\u103A",
                    common: "\u1019\u103C\u1014\u103A\u1019\u102C"
                }
            }
        },
        tld: [
            ".mm"
        ],
        cca2: "MM",
        ccn3: "104",
        cca3: "MMR",
        cioc: "MYA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MMK: {
                name: "Burmese kyat",
                symbol: "Ks"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "5"
            ]
        },
        capital: [
            "Naypyidaw"
        ],
        altSpellings: [
            "MM",
            "Burma",
            "Republic of the Union of Myanmar",
            "Pyidaunzu Thanm\u0103da My\u0103ma Nainngandaw"
        ],
        region: "Asia",
        subregion: "South-Eastern Asia",
        languages: {
            mya: "Burmese"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u062A\u062D\u0627\u062F \u0645\u064A\u0627\u0646\u0645\u0627\u0631",
                common: "\u0645\u064A\u0627\u0646\u0645\u0627\u0631"
            },
            bre: {
                official: "Republik Unaniezh Myanmar",
                common: "Myanmar"
            },
            ces: {
                official: "Republika Myanmarsk\xfd svaz",
                common: "Myanmar"
            },
            cym: {
                official: "Republic of the Union of Myanmar",
                common: "Myanmar"
            },
            deu: {
                official: "Republik der Union Myanmar",
                common: "Myanmar"
            },
            est: {
                official: "Myanmari Liidu Vabariik",
                common: "Myanmar"
            },
            fin: {
                official: "Myanmarin liiton tasavalta",
                common: "Myanmar"
            },
            fra: {
                official: "R\xe9publique de l'Union du Myanmar",
                common: "Birmanie"
            },
            hrv: {
                official: "Republika Unije Mijanmar",
                common: "Mijanmar"
            },
            hun: {
                official: "Mianmari \xc1llamsz\xf6vets\xe9g K\xf6zt\xe1rsas\xe1ga",
                common: "Mianmar"
            },
            ita: {
                official: "Repubblica dell'Unione di Myanmar",
                common: "Birmania"
            },
            jpn: {
                official: "\u30DF\u30E3\u30F3\u30DE\u30FC\u9023\u90A6\u5171\u548C\u56FD",
                common: "\u30DF\u30E3\u30F3\u30DE\u30FC"
            },
            kor: {
                official: "\uBBF8\uC580\uB9C8 \uC5F0\uBC29 \uACF5\uD654\uAD6D",
                common: "\uBBF8\uC580\uB9C8"
            },
            nld: {
                official: "Republiek van de Unie van Myanmar",
                common: "Myanmar"
            },
            per: {
                official: "\u0627\u062A\u062D\u0627\u062F\u06CC\u0647 \u062C\u0645\u0647\u0648\u0631\u06CC \u0645\u06CC\u0627\u0646\u0645\u0627\u0631",
                common: "\u0645\u06CC\u0627\u0646\u0645\u0627\u0631"
            },
            pol: {
                official: "Republika Zwi\u0105zku Mjanmy",
                common: "Mjanma"
            },
            por: {
                official: "Rep\xfablica da Uni\xe3o de Myanmar",
                common: "Myanmar"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u043E\u044E\u0437\u0430 \u041C\u044C\u044F\u043D\u043C\u0430",
                common: "\u041C\u044C\u044F\u043D\u043C\u0430"
            },
            slk: {
                official: "Mjanmarsk\xe1 zv\xe4zov\xe1 republika",
                common: "Mjanmarsko"
            },
            spa: {
                official: "Rep\xfablica de la Uni\xf3n de Myanmar",
                common: "Myanmar"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0421\u0430\u0432\u0435\u0437 \u041C\u0458\u0430\u043D\u043C\u0430\u0440\u0430",
                common: "\u041C\u0458\u0430\u043D\u043C\u0430\u0440"
            },
            swe: {
                official: "Republiken Unionen Myanmar",
                common: "Myanmar"
            },
            tur: {
                official: "Myanmar Birli\u011Fi Cumhuriyeti",
                common: "Myanmar"
            },
            urd: {
                official: "\u0645\u062A\u062D\u062F\u06C1 \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0645\u06CC\u0627\u0646\u0645\u0627\u0631",
                common: "\u0645\u06CC\u0627\u0646\u0645\u0627\u0631"
            },
            zho: {
                official: "\u7F05\u7538\u8054\u90A6\u5171\u548C\u56FD",
                common: "\u7F05\u7538"
            }
        },
        latlng: [
            22,
            98
        ],
        landlocked: false,
        borders: [
            "BGD",
            "CHN",
            "IND",
            "LAO",
            "THA"
        ],
        area: 676578,
        demonyms: {
            eng: {
                f: "Burmese",
                m: "Burmese"
            },
            fra: {
                f: "Birmane",
                m: "Birman"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/4jrZyJkDERUfHyp26",
            openStreetMaps: "https://www.openstreetmap.org/relation/50371"
        },
        population: 54409794,
        gini: {
            2017: 30.7
        },
        fifa: "MYA",
        car: {
            signs: [
                "BUR"
            ],
            side: "right"
        },
        timezones: [
            "UTC+06:30"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mm.png",
            svg: "https://flagcdn.com/mm.svg",
            alt: "The flag of Myanmar is composed of three equal horizontal bands of yellow, green and red, with a large five-pointed white star superimposed at the center of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mm.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mm.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                19.76,
                96.07
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Bhutan",
            official: "Kingdom of Bhutan",
            nativeName: {
                dzo: {
                    official: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F62\u0F92\u0FB1\u0F63\u0F0B\u0F41\u0F56\u0F0B",
                    common: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B"
                }
            }
        },
        tld: [
            ".bt"
        ],
        cca2: "BT",
        ccn3: "064",
        cca3: "BTN",
        cioc: "BHU",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BTN: {
                name: "Bhutanese ngultrum",
                symbol: "Nu."
            },
            INR: {
                name: "Indian rupee",
                symbol: "\u20B9"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "75"
            ]
        },
        capital: [
            "Thimphu"
        ],
        altSpellings: [
            "BT",
            "Kingdom of Bhutan"
        ],
        region: "Asia",
        subregion: "Southern Asia",
        languages: {
            dzo: "Dzongkha"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u0628\u0648\u062A\u0627\u0646",
                common: "\u0628\u0648\u062A\u0627\u0646"
            },
            bre: {
                official: "Rouantelezh Bhoutan",
                common: "Bhoutan"
            },
            ces: {
                official: "Bh\xfat\xe1nsk\xe9 kr\xe1lovstv\xed",
                common: "Bh\xfat\xe1n"
            },
            cym: {
                official: "Teyrnas Bhwtan",
                common: "Bhwtan"
            },
            deu: {
                official: "K\xf6nigreich Bhutan",
                common: "Bhutan"
            },
            est: {
                official: "Bhutani Kuningriik",
                common: "Bhutan"
            },
            fin: {
                official: "Bhutanin kuningaskunta",
                common: "Bhutan"
            },
            fra: {
                official: "Royaume du Bhoutan",
                common: "Bhoutan"
            },
            hrv: {
                official: "Kraljevina Butan",
                common: "Butan"
            },
            hun: {
                official: "Bhut\xe1ni Kir\xe1lys\xe1g",
                common: "Bhut\xe1n"
            },
            ita: {
                official: "Regno del Bhutan",
                common: "Bhutan"
            },
            jpn: {
                official: "\u30D6\u30FC\u30BF\u30F3\u738B\u56FD",
                common: "\u30D6\u30FC\u30BF\u30F3"
            },
            kor: {
                official: "\uBD80\uD0C4 \uC655\uAD6D",
                common: "\uBD80\uD0C4"
            },
            nld: {
                official: "Koninkrijk Bhutan",
                common: "Bhutan"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0628\u0648\u062A\u0627\u0646",
                common: "\u0628\u0648\u062A\u0627\u0646"
            },
            pol: {
                official: "Bhutan",
                common: "Bhutan"
            },
            por: {
                official: "Reino do But\xe3o",
                common: "But\xe3o"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0411\u0443\u0442\u0430\u043D",
                common: "\u0411\u0443\u0442\u0430\u043D"
            },
            slk: {
                official: "Bhut\xe1nske kr\xe2\u013Eovstvo",
                common: "Bhut\xe1n"
            },
            spa: {
                official: "Reino de But\xe1n",
                common: "But\xe1n"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0411\u0443\u0442\u0430\u043D",
                common: "\u0411\u0443\u0442\u0430\u043D"
            },
            swe: {
                official: "Konungariket Bhutan",
                common: "Bhutan"
            },
            tur: {
                official: "Butan Krall\u0131\u011F\u0131",
                common: "Butan"
            },
            urd: {
                official: "\u0633\u0644\u0637\u0646\u062A \u0628\u06BE\u0648\u0679\u0627\u0646",
                common: "\u0628\u06BE\u0648\u0679\u0627\u0646"
            },
            zho: {
                official: "\u4E0D\u4E39\u738B\u56FD",
                common: "\u4E0D\u4E39"
            }
        },
        latlng: [
            27.5,
            90.5
        ],
        landlocked: true,
        borders: [
            "CHN",
            "IND"
        ],
        area: 38394,
        demonyms: {
            eng: {
                f: "Bhutanese",
                m: "Bhutanese"
            },
            fra: {
                f: "Bhoutanaise",
                m: "Bhoutanais"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/VEfXXBftTFLUpNgp8",
            openStreetMaps: "https://www.openstreetmap.org/relation/184629"
        },
        population: 771612,
        gini: {
            2017: 37.4
        },
        fifa: "BHU",
        car: {
            signs: [
                "BHT"
            ],
            side: "left"
        },
        timezones: [
            "UTC+06:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bt.png",
            svg: "https://flagcdn.com/bt.svg",
            alt: "The flag of Bhutan is divided diagonally, from the lower hoist-side corner to the upper fly-side corner, into an upper yellow and a lower orange triangle. A fly-side facing white dragon holding four jewels in its claws is situated along the boundary of the two triangles."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bt.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bt.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                27.47,
                89.63
            ]
        }
    },
    {
        name: {
            common: "Venezuela",
            official: "Bolivarian Republic of Venezuela",
            nativeName: {
                spa: {
                    official: "Rep\xfablica Bolivariana de Venezuela",
                    common: "Venezuela"
                }
            }
        },
        tld: [
            ".ve"
        ],
        cca2: "VE",
        ccn3: "862",
        cca3: "VEN",
        cioc: "VEN",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            VES: {
                name: "Venezuelan bol\xedvar soberano",
                symbol: "Bs.S."
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "8"
            ]
        },
        capital: [
            "Caracas"
        ],
        altSpellings: [
            "VE",
            "Bolivarian Republic of Venezuela",
            "Venezuela, Bolivarian Republic of",
            "Rep\xfablica Bolivariana de Venezuela"
        ],
        region: "Americas",
        subregion: "South America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0641\u0646\u0632\u0648\u064A\u0644\u0627 \u0627\u0644\u0628\u0648\u0644\u064A\u0641\u0627\u0631\u064A\u0629",
                common: "\u0641\u0646\u0632\u0648\u064A\u0644\u0627"
            },
            bre: {
                official: "Republik Volivarian Venezuela",
                common: "Venezuela"
            },
            ces: {
                official: "Bol\xedvarsk\xe1 republika Venezuela",
                common: "Venezuela"
            },
            cym: {
                official: "Bolivarian Republic of Venezuela",
                common: "Venezuela"
            },
            deu: {
                official: "Bolivarische Republik Venezuela",
                common: "Venezuela"
            },
            est: {
                official: "Venezuela Bol\xedvari Vabariik",
                common: "Venezuela"
            },
            fin: {
                official: "Venezuelan bolivariaainen tasavalta",
                common: "Venezuela"
            },
            fra: {
                official: "R\xe9publique bolivarienne du Venezuela",
                common: "Venezuela"
            },
            hrv: {
                official: "BOLIVARIJANSKA Republika Venezuela",
                common: "Venezuela"
            },
            hun: {
                official: "Venezuelai Boliv\xe1ri K\xf6zt\xe1rsas\xe1g",
                common: "Venezuela"
            },
            ita: {
                official: "Repubblica Bolivariana del Venezuela",
                common: "Venezuela"
            },
            jpn: {
                official: "\u30D9\u30CD\u30BA\u30A8\u30E9\xb7\u30DC\u30EA\u30D0\u30EB\u5171\u548C\u56FD",
                common: "\u30D9\u30CD\u30BA\u30A8\u30E9\u30FB\u30DC\u30EA\u30D0\u30EB\u5171\u548C\u56FD"
            },
            kor: {
                official: "\uBCA0\uB124\uC218\uC5D8\uB77C \uBCFC\uB9AC\uBC14\uB974 \uACF5\uD654\uAD6D",
                common: "\uBCA0\uB124\uC218\uC5D8\uB77C"
            },
            nld: {
                official: "Bolivariaanse Republiek Venezuela",
                common: "Venezuela"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0648\u0644\u06CC\u0648\u0627\u0631\u06CC \u0648\u0646\u0632\u0648\u0626\u0644\u0627",
                common: "\u0648\u0646\u0632\u0648\u0626\u0644\u0627"
            },
            pol: {
                official: "Boliwaria\u0144ska Republika Wenezueli",
                common: "Wenezuela"
            },
            por: {
                official: "Rep\xfablica Bolivariana da Venezuela",
                common: "Venezuela"
            },
            rus: {
                official: "\u0411\u043E\u043B\u0438\u0432\u0430\u0440\u0438\u0430\u043D\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u0435\u043D\u0435\u0441\u0443\u044D\u043B\u0430",
                common: "\u0412\u0435\u043D\u0435\u0441\u0443\u044D\u043B\u0430"
            },
            slk: {
                official: "Venezuelsk\xe1 bol\xedvarovsk\xe1 republika",
                common: "Venezuela"
            },
            spa: {
                official: "Rep\xfablica Bolivariana de Venezuela",
                common: "Venezuela"
            },
            srp: {
                official: "\u0411\u043E\u043B\u0438\u0432\u0430\u0440\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0412\u0435\u043D\u0435\u0446\u0443\u0435\u043B\u0430",
                common: "\u0412\u0435\u043D\u0435\u0446\u0443\u0435\u043B\u0430"
            },
            swe: {
                official: "Bolivarianska republiken Venezuela",
                common: "Venezuela"
            },
            tur: {
                official: "Bolivarc\u0131 Venezuela Cumhuriyeti",
                common: "Venezuela"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0648\u06CC\u0646\u06CC\u0632\u0648\u06CC\u0644\u0627",
                common: "\u0648\u06CC\u0646\u06CC\u0632\u0648\u06CC\u0644\u0627"
            },
            zho: {
                official: "\u59D4\u5185\u745E\u62C9\u73BB\u5229\u74E6\u5C14\u5171\u548C\u56FD",
                common: "\u59D4\u5185\u745E\u62C9"
            }
        },
        latlng: [
            8,
            -66
        ],
        landlocked: false,
        borders: [
            "BRA",
            "COL",
            "GUY"
        ],
        area: 916445,
        demonyms: {
            eng: {
                f: "Venezuelan",
                m: "Venezuelan"
            },
            fra: {
                f: "V\xe9n\xe9zu\xe9lienne",
                m: "V\xe9n\xe9zu\xe9lien"
            }
        },
        flag: "\uD83C\uDDFB\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/KLCwDN8sec7z2kse9",
            openStreetMaps: "https://www.openstreetmap.org/relation/272644"
        },
        population: 28435943,
        gini: {
            2006: 44.8
        },
        fifa: "VEN",
        car: {
            signs: [
                "YV"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "South America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ve.png",
            svg: "https://flagcdn.com/ve.svg",
            alt: "The flag of Venezuela is composed of three equal horizontal bands of yellow, blue and red. At the center of the blue band are eight five-pointed white stars arranged in a horizontal arc."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ve.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ve.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                10.48,
                -66.87
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Liberia",
            official: "Republic of Liberia",
            nativeName: {
                eng: {
                    official: "Republic of Liberia",
                    common: "Liberia"
                }
            }
        },
        tld: [
            ".lr"
        ],
        cca2: "LR",
        ccn3: "430",
        cca3: "LBR",
        cioc: "LBR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            LRD: {
                name: "Liberian dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "31"
            ]
        },
        capital: [
            "Monrovia"
        ],
        altSpellings: [
            "LR",
            "Republic of Liberia"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0644\u064A\u0628\u064A\u0631\u064A\u0627",
                common: "\u0644\u064A\u0628\u064A\u0631\u064A\u0627"
            },
            bre: {
                official: "Republik Liberia",
                common: "Liberia"
            },
            ces: {
                official: "Liberijsk\xe1 republika",
                common: "Lib\xe9rie"
            },
            cym: {
                official: "Republic of Liberia",
                common: "Liberia"
            },
            deu: {
                official: "Republik Liberia",
                common: "Liberia"
            },
            est: {
                official: "Libeeria Vabariik",
                common: "Libeeria"
            },
            fin: {
                official: "Liberian tasavalta",
                common: "Liberia"
            },
            fra: {
                official: "R\xe9publique du Lib\xe9ria",
                common: "Liberia"
            },
            hrv: {
                official: "Republika Liberija",
                common: "Liberija"
            },
            hun: {
                official: "Lib\xe9riai K\xf6zt\xe1rsas\xe1g",
                common: "Lib\xe9ria"
            },
            ita: {
                official: "Repubblica di Liberia",
                common: "Liberia"
            },
            jpn: {
                official: "\u30EA\u30D9\u30EA\u30A2\u5171\u548C\u56FD",
                common: "\u30EA\u30D9\u30EA\u30A2"
            },
            kor: {
                official: "\uB77C\uC774\uBCA0\uB9AC\uC544 \uACF5\uD654\uAD6D",
                common: "\uB77C\uC774\uBCA0\uB9AC\uC544"
            },
            nld: {
                official: "Republiek Liberia",
                common: "Liberia"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0644\u06CC\u0628\u0631\u06CC\u0627",
                common: "\u0644\u06CC\u0628\u0640\u0650\u0631\u06CC\u0627"
            },
            pol: {
                official: "Republika Liberii",
                common: "Liberia"
            },
            por: {
                official: "Rep\xfablica da Lib\xe9ria",
                common: "Lib\xe9ria"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041B\u0438\u0431\u0435\u0440\u0438\u044F",
                common: "\u041B\u0438\u0431\u0435\u0440\u0438\u044F"
            },
            slk: {
                official: "Lib\xe9rijsk\xe1 republika",
                common: "Lib\xe9ria"
            },
            spa: {
                official: "Rep\xfablica de Liberia",
                common: "Liberia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041B\u0438\u0431\u0435\u0440\u0438\u0458\u0430",
                common: "\u041B\u0438\u0431\u0435\u0440\u0438\u0458\u0430"
            },
            swe: {
                official: "Republiken Liberia",
                common: "Liberia"
            },
            tur: {
                official: "Liberya Cumhuriyeti",
                common: "Liberya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0644\u0627\u0626\u0628\u06CC\u0631\u06CC\u0627",
                common: "\u0644\u0627\u0626\u0628\u06CC\u0631\u06CC\u0627"
            },
            zho: {
                official: "\u5229\u6BD4\u91CC\u4E9A\u5171\u548C\u56FD",
                common: "\u5229\u6BD4\u91CC\u4E9A"
            }
        },
        latlng: [
            6.5,
            -9.5
        ],
        landlocked: false,
        borders: [
            "GIN",
            "CIV",
            "SLE"
        ],
        area: 111369,
        demonyms: {
            eng: {
                f: "Liberian",
                m: "Liberian"
            },
            fra: {
                f: "Lib\xe9rienne",
                m: "Lib\xe9rien"
            }
        },
        flag: "\uD83C\uDDF1\uD83C\uDDF7",
        maps: {
            googleMaps: "https://goo.gl/maps/4VsHsc2oeGeRL3wg6",
            openStreetMaps: "https://www.openstreetmap.org/relation/192780"
        },
        population: 5057677,
        gini: {
            2016: 35.3
        },
        fifa: "LBR",
        car: {
            signs: [
                "LB"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/lr.png",
            svg: "https://flagcdn.com/lr.svg",
            alt: "The flag of Liberia is composed of eleven equal horizontal bands of red alternating with white. A blue square bearing a five-pointed white star is superimposed in the canton."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/lr.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/lr.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                6.3,
                -10.8
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Jamaica",
            official: "Jamaica",
            nativeName: {
                eng: {
                    official: "Jamaica",
                    common: "Jamaica"
                },
                jam: {
                    official: "Jamaica",
                    common: "Jamaica"
                }
            }
        },
        tld: [
            ".jm"
        ],
        cca2: "JM",
        ccn3: "388",
        cca3: "JAM",
        cioc: "JAM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            JMD: {
                name: "Jamaican dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "876"
            ]
        },
        capital: [
            "Kingston"
        ],
        altSpellings: [
            "JM"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English",
            jam: "Jamaican Patois"
        },
        translations: {
            ara: {
                official: "\u062C\u0627\u0645\u0627\u064A\u0643\u0627",
                common: "\u062C\u0627\u0645\u0627\u064A\u0643\u0627"
            },
            bre: {
                official: "Jamaika",
                common: "Jamaika"
            },
            ces: {
                official: "Jamajka",
                common: "Jamajka"
            },
            cym: {
                official: "Jamaica",
                common: "Jamaica"
            },
            deu: {
                official: "Jamaika",
                common: "Jamaika"
            },
            est: {
                official: "Jamaica",
                common: "Jamaica"
            },
            fin: {
                official: "Jamaika",
                common: "Jamaika"
            },
            fra: {
                official: "Jama\xefque",
                common: "Jama\xefque"
            },
            hrv: {
                official: "Jamajka",
                common: "Jamajka"
            },
            hun: {
                official: "Jamaica",
                common: "Jamaica"
            },
            ita: {
                official: "Giamaica",
                common: "Giamaica"
            },
            jpn: {
                official: "\u30B8\u30E3\u30DE\u30A4\u30AB",
                common: "\u30B8\u30E3\u30DE\u30A4\u30AB"
            },
            kor: {
                official: "\uC790\uBA54\uC774\uCE74",
                common: "\uC790\uBA54\uC774\uCE74"
            },
            nld: {
                official: "Jamaica",
                common: "Jamaica"
            },
            per: {
                official: "\u062C\u0627\u0645\u0627\u0626\u06CC\u06A9\u0627",
                common: "\u062C\u0627\u0645\u0627\u0626\u06CC\u06A9\u0627"
            },
            pol: {
                official: "Jamajka",
                common: "Jamajka"
            },
            por: {
                official: "Jamaica",
                common: "Jamaica"
            },
            rus: {
                official: "\u042F\u043C\u0430\u0439\u043A\u0430",
                common: "\u042F\u043C\u0430\u0439\u043A\u0430"
            },
            slk: {
                official: "Jamajka",
                common: "Jamajka"
            },
            spa: {
                official: "Jamaica",
                common: "Jamaica"
            },
            srp: {
                official: "\u0408\u0430\u043C\u0430\u0458\u043A\u0430",
                common: "\u0408\u0430\u043C\u0430\u0458\u043A\u0430"
            },
            swe: {
                official: "Jamaica",
                common: "Jamaica"
            },
            tur: {
                official: "Jamaika",
                common: "Jamaika"
            },
            urd: {
                official: "\u062C\u0645\u06CC\u06A9\u0627",
                common: "\u062C\u0645\u06CC\u06A9\u0627"
            },
            zho: {
                official: "\u7259\u4E70\u52A0",
                common: "\u7259\u4E70\u52A0"
            }
        },
        latlng: [
            18.25,
            -77.5
        ],
        landlocked: false,
        area: 10991,
        demonyms: {
            eng: {
                f: "Jamaican",
                m: "Jamaican"
            },
            fra: {
                f: "Jama\xefcaine",
                m: "Jama\xefcain"
            }
        },
        flag: "\uD83C\uDDEF\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/Z8mQ6jxnRQKFwJy9A",
            openStreetMaps: "https://www.openstreetmap.org/relation/555017"
        },
        population: 2961161,
        gini: {
            2004: 45.5
        },
        fifa: "JAM",
        car: {
            signs: [
                "JA"
            ],
            side: "left"
        },
        timezones: [
            "UTC-05:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/jm.png",
            svg: "https://flagcdn.com/jm.svg",
            alt: "The flag of Jamaica is divided by a gold diagonal cross into four alternating triangular areas of green at the top and bottom, and black on the hoist and fly sides"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/jm.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/jm.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                17.99702,
                -76.79358
            ]
        }
    },
    {
        name: {
            common: "Poland",
            official: "Republic of Poland",
            nativeName: {
                pol: {
                    official: "Rzeczpospolita Polska",
                    common: "Polska"
                }
            }
        },
        tld: [
            ".pl"
        ],
        cca2: "PL",
        ccn3: "616",
        cca3: "POL",
        cioc: "POL",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            PLN: {
                name: "Polish z\u0142oty",
                symbol: "z\u0142"
            }
        },
        idd: {
            root: "+4",
            suffixes: [
                "8"
            ]
        },
        capital: [
            "Warsaw"
        ],
        altSpellings: [
            "PL",
            "Republic of Poland",
            "Rzeczpospolita Polska"
        ],
        region: "Europe",
        subregion: "Central Europe",
        languages: {
            pol: "Polish"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0628\u0648\u0644\u0646\u062F\u064A\u0629",
                common: "\u0628\u0648\u0644\u0646\u062F\u0627"
            },
            bre: {
                official: "Republik Polonia",
                common: "Polonia"
            },
            ces: {
                official: "Polsk\xe1 republika",
                common: "Polsko"
            },
            cym: {
                official: "Republic of Poland",
                common: "Poland"
            },
            deu: {
                official: "Republik Polen",
                common: "Polen"
            },
            est: {
                official: "Poola Vabariik",
                common: "Poola"
            },
            fin: {
                official: "Puolan tasavalta",
                common: "Puola"
            },
            fra: {
                official: "R\xe9publique de Pologne",
                common: "Pologne"
            },
            hrv: {
                official: "Republika Poljska",
                common: "Poljska"
            },
            hun: {
                official: "Lengyel K\xf6zt\xe1rsas\xe1g",
                common: "Lengyelorsz\xe1g"
            },
            ita: {
                official: "Repubblica di Polonia",
                common: "Polonia"
            },
            jpn: {
                official: "\u30DD\u30FC\u30E9\u30F3\u30C9\u5171\u548C\u56FD",
                common: "\u30DD\u30FC\u30E9\u30F3\u30C9"
            },
            kor: {
                official: "\uD3F4\uB780\uB4DC \uACF5\uD654\uAD6D",
                common: "\uD3F4\uB780\uB4DC"
            },
            nld: {
                official: "Republiek Polen",
                common: "Polen"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0644\u0647\u0633\u062A\u0627\u0646",
                common: "\u0644\u0647\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Rzeczpospolita Polska",
                common: "Polska"
            },
            por: {
                official: "Rep\xfablica da Pol\xf3nia",
                common: "Pol\xf3nia"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u043E\u043B\u044C\u0448\u0430",
                common: "\u041F\u043E\u043B\u044C\u0448\u0430"
            },
            slk: {
                official: "Po\u013Esk\xe1 republika",
                common: "Po\u013Esko"
            },
            spa: {
                official: "Rep\xfablica de Polonia",
                common: "Polonia"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041F\u043E\u0459\u0441\u043A\u0430",
                common: "\u041F\u043E\u0459\u0441\u043A\u0430"
            },
            swe: {
                official: "Republiken Polen",
                common: "Polen"
            },
            tur: {
                official: "Polonya Cumhuriyeti",
                common: "Polonya"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0648\u0644\u06CC\u0646\u0688",
                common: "\u067E\u0648\u0644\u06CC\u0646\u0688"
            },
            zho: {
                official: "\u6CE2\u5170\u5171\u548C\u56FD",
                common: "\u6CE2\u5170"
            }
        },
        latlng: [
            52,
            20
        ],
        landlocked: false,
        borders: [
            "BLR",
            "CZE",
            "DEU",
            "LTU",
            "RUS",
            "SVK",
            "UKR"
        ],
        area: 312679,
        demonyms: {
            eng: {
                f: "Polish",
                m: "Polish"
            },
            fra: {
                f: "Polonaise",
                m: "Polonais"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDF1",
        maps: {
            googleMaps: "https://goo.gl/maps/gY9Xw4Sf4415P4949",
            openStreetMaps: "https://www.openstreetmap.org/relation/49715"
        },
        population: 37950802,
        gini: {
            2018: 30.2
        },
        fifa: "POL",
        car: {
            signs: [
                "PL"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/pl.png",
            svg: "https://flagcdn.com/pl.svg",
            alt: "The flag of Poland is composed of two equal horizontal bands of white and red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/pl.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/pl.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                52.25,
                21
            ]
        },
        postalCode: {
            format: "##-###",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "Cayman Islands",
            official: "Cayman Islands",
            nativeName: {
                eng: {
                    official: "Cayman Islands",
                    common: "Cayman Islands"
                }
            }
        },
        tld: [
            ".ky"
        ],
        cca2: "KY",
        ccn3: "136",
        cca3: "CYM",
        cioc: "CAY",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            KYD: {
                name: "Cayman Islands dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "345"
            ]
        },
        capital: [
            "George Town"
        ],
        altSpellings: [
            "KY"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0632\u0631 \u0643\u0627\u064A\u0645\u0627\u0646",
                common: "\u062C\u0632\u0631 \u0643\u0627\u064A\u0645\u0627\u0646"
            },
            bre: {
                official: "Inizi Cayman",
                common: "Inizi Cayman"
            },
            ces: {
                official: "Kajmansk\xe9 ostrovy",
                common: "Kajmansk\xe9 ostrovy"
            },
            cym: {
                official: "Ynysoedd Cayman",
                common: "Ynysoedd Cayman"
            },
            deu: {
                official: "Cayman-Inseln",
                common: "Kaimaninseln"
            },
            est: {
                official: "Kaimanisaared",
                common: "Kaimanisaared"
            },
            fin: {
                official: "Caymansaaret",
                common: "Caymansaaret"
            },
            fra: {
                official: "\xceles Ca\xefmans",
                common: "\xceles Ca\xefmans"
            },
            hrv: {
                official: "Kajmanski otoci",
                common: "Kajmanski otoci"
            },
            hun: {
                official: "Kajm\xe1n-szigetek",
                common: "Kajm\xe1n-szigetek"
            },
            ita: {
                official: "Isole Cayman",
                common: "Isole Cayman"
            },
            jpn: {
                official: "\u30B1\u30A4\u30DE\u30F3\u8AF8\u5CF6",
                common: "\u30B1\u30A4\u30DE\u30F3\u8AF8\u5CF6"
            },
            kor: {
                official: "\uCF00\uC774\uB9E8 \uC81C\uB3C4",
                common: "\uCF00\uC774\uB9E8 \uC81C\uB3C4"
            },
            nld: {
                official: "Caymaneilanden",
                common: "Caymaneilanden"
            },
            per: {
                official: "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u06CC\u0645\u0646",
                common: "\u062C\u0632\u0627\u06CC\u0631 \u06A9\u06CC\u0645\u0646"
            },
            pol: {
                official: "Kajmany",
                common: "Kajmany"
            },
            por: {
                official: "Ilhas Cayman",
                common: "Ilhas Caim\xe3o"
            },
            rus: {
                official: "\u041A\u0430\u0439\u043C\u0430\u043D\u043E\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430",
                common: "\u041A\u0430\u0439\u043C\u0430\u043D\u043E\u0432\u044B \u043E\u0441\u0442\u0440\u043E\u0432\u0430"
            },
            slk: {
                official: "Kajmanie ostrovy",
                common: "Kajmanie ostrovy"
            },
            spa: {
                official: "Islas Caim\xe1n",
                common: "Islas Caim\xe1n"
            },
            srp: {
                official: "\u041A\u0430\u0458\u043C\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430",
                common: "\u041A\u0430\u0458\u043C\u0430\u043D\u0441\u043A\u0430 \u041E\u0441\u0442\u0440\u0432\u0430"
            },
            swe: {
                official: "Cayman\xf6arna",
                common: "Cayman\xf6arna"
            },
            tur: {
                official: "Cayman Adalar\u0131",
                common: "Cayman Adalar\u0131"
            },
            urd: {
                official: "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06CC\u0645\u06CC\u0646",
                common: "\u062C\u0632\u0627\u0626\u0631 \u06A9\u06CC\u0645\u06CC\u0646"
            },
            zho: {
                official: "\u5F00\u66FC\u7FA4\u5C9B",
                common: "\u5F00\u66FC\u7FA4\u5C9B"
            }
        },
        latlng: [
            19.3133,
            -81.2546
        ],
        landlocked: false,
        area: 264,
        demonyms: {
            eng: {
                f: "Caymanian",
                m: "Caymanian"
            },
            fra: {
                f: "Ca\xefmanienne",
                m: "Ca\xefmanien"
            }
        },
        flag: "\uD83C\uDDF0\uD83C\uDDFE",
        maps: {
            googleMaps: "https://goo.gl/maps/P3ZVXX3LH63t91hL8",
            openStreetMaps: "https://www.openstreetmap.org/relation/7269765"
        },
        population: 65720,
        fifa: "CAY",
        car: {
            signs: [
                "GB"
            ],
            side: "left"
        },
        timezones: [
            "UTC-05:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ky.png",
            svg: "https://flagcdn.com/ky.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ky.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ky.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                19.3,
                -81.38
            ]
        }
    },
    {
        name: {
            common: "Brunei",
            official: "Nation of Brunei, Abode of Peace",
            nativeName: {
                msa: {
                    official: "Nation of Brunei, Abode Damai",
                    common: "Negara Brunei Darussalam"
                }
            }
        },
        tld: [
            ".bn"
        ],
        cca2: "BN",
        ccn3: "096",
        cca3: "BRN",
        cioc: "BRU",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            BND: {
                name: "Brunei dollar",
                symbol: "$"
            },
            SGD: {
                name: "Singapore dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "73"
            ]
        },
        capital: [
            "Bandar Seri Begawan"
        ],
        altSpellings: [
            "BN",
            "Brunei Darussalam",
            "Nation of Brunei",
            "the Abode of Peace"
        ],
        region: "Asia",
        subregion: "South-Eastern Asia",
        languages: {
            msa: "Malay"
        },
        translations: {
            ara: {
                official: "\u0628\u0631\u0648\u0646\u0627\u064A \u062F\u0627\u0631 \u0627\u0644\u0633\u0644\u0627\u0645",
                common: "\u0628\u0631\u0648\u0646\u0627\u064A"
            },
            bre: {
                official: "Stad Brunei Darussalam",
                common: "Brunei"
            },
            ces: {
                official: "Sultan\xe1t Brunej",
                common: "Brunej"
            },
            cym: {
                official: "Teyrnas Brwnei",
                common: "Brunei"
            },
            deu: {
                official: "Sultanat Brunei Darussalam",
                common: "Brunei"
            },
            est: {
                official: "Brunei Darussalami Riik",
                common: "Brunei"
            },
            fin: {
                official: "Brunei Darussalamin valtio",
                common: "Brunei"
            },
            fra: {
                official: "\xc9tat de Brunei Darussalam",
                common: "Brunei"
            },
            hrv: {
                official: "Nacija od Bruneja, Ku\u0107u Mira",
                common: "Brunej"
            },
            hun: {
                official: "Brunei Szultan\xe1tus",
                common: "Brunei"
            },
            ita: {
                official: "Nazione di Brunei, Dimora della Pace",
                common: "Brunei"
            },
            jpn: {
                official: "\u30D6\u30EB\u30CD\u30A4\u3001\u5E73\u548C\u306E\u7CBE\u820E\u306E\u56FD\u5BB6",
                common: "\u30D6\u30EB\u30CD\u30A4\u30FB\u30C0\u30EB\u30B5\u30E9\u30FC\u30E0"
            },
            kor: {
                official: "\uBE0C\uB8E8\uB098\uC774 \uB2E4\uB8E8\uC0B4\uB78C\uAD6D",
                common: "\uBE0C\uB8E8\uB098\uC774"
            },
            nld: {
                official: "Natie van Brunei, de verblijfplaats van de Vrede",
                common: "Brunei"
            },
            per: {
                official: "\u0628\u0631\u0648\u0646\u0626\u06CC \u0633\u0631\u0627\u06CC \u0635\u0644\u062D",
                common: "\u0628\u0631\u0648\u0646\u0626\u06CC"
            },
            pol: {
                official: "Pa\u0144stwo Brunei Darussalam",
                common: "Brunei"
            },
            por: {
                official: "Na\xe7\xe3o do Brunei, Morada da Paz",
                common: "Brunei"
            },
            rus: {
                official: "\u041D\u0430\u0446\u0438\u044F \u0411\u0440\u0443\u043D\u0435\u0439, \u043E\u0431\u0438\u0442\u0435\u043B\u044C \u043C\u0438\u0440\u0430",
                common: "\u0411\u0440\u0443\u043D\u0435\u0439"
            },
            slk: {
                official: "Brunejsk\xfd sultan\xe2t",
                common: "Brunej"
            },
            spa: {
                official: "Naci\xf3n de Brunei, Morada de la Paz",
                common: "Brunei"
            },
            srp: {
                official: "\u0421\u0443\u043B\u0442\u0430\u043D\u0430\u0442 \u0411\u0440\u0443\u043D\u0435\u0458, \u0431\u043E\u0440\u0430\u0432\u0438\u0448\u0442\u0435 \u043C\u0438\u0440\u0430",
                common: "\u0411\u0440\u0443\u043D\u0435\u0458"
            },
            swe: {
                official: "Brunei Darussalam",
                common: "Brunei"
            },
            tur: {
                official: "Brunei Bar\u0131\u015F \xdclkesi Devleti",
                common: "Brunei"
            },
            urd: {
                official: "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0628\u0631\u0648\u0646\u0627\u0626\u06CC \u062F\u0627\u0631\u0627\u0644\u0633\u0644\u0627\u0645",
                common: "\u0628\u0631\u0648\u0646\u0627\u0626\u06CC"
            },
            zho: {
                official: "\u6587\u83B1\u548C\u5E73\u4E4B\u56FD",
                common: "\u6587\u83B1"
            }
        },
        latlng: [
            4.5,
            114.66666666
        ],
        landlocked: false,
        borders: [
            "MYS"
        ],
        area: 5765,
        demonyms: {
            eng: {
                f: "Bruneian",
                m: "Bruneian"
            },
            fra: {
                f: "Brun\xe9ienne",
                m: "Brun\xe9ien"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDF3",
        maps: {
            googleMaps: "https://goo.gl/maps/4jb4CqBXhr8vNh579",
            openStreetMaps: "https://www.openstreetmap.org/relation/2103120"
        },
        population: 437483,
        fifa: "BRU",
        car: {
            signs: [
                "BRU"
            ],
            side: "left"
        },
        timezones: [
            "UTC+08:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/bn.png",
            svg: "https://flagcdn.com/bn.svg",
            alt: "The flag of Brunei has a yellow field with two adjoining diagonal bands of white and black that extend from the upper hoist side of the field to the lower fly side. The red emblem of Brunei is centered on the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/bn.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/bn.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                4.88,
                114.93
            ]
        },
        postalCode: {
            format: "@@####",
            regex: "^([A-Z]{2}\\d{4})$"
        }
    },
    {
        name: {
            common: "Comoros",
            official: "Union of the Comoros",
            nativeName: {
                ara: {
                    official: "\u0627\u0644\u0627\u062A\u062D\u0627\u062F \u0627\u0644\u0642\u0645\u0631\u064A",
                    common: "\u0627\u0644\u0642\u0645\u0631\u200E"
                },
                fra: {
                    official: "Union des Comores",
                    common: "Comores"
                },
                zdj: {
                    official: "Udzima wa Komori",
                    common: "Komori"
                }
            }
        },
        tld: [
            ".km"
        ],
        cca2: "KM",
        ccn3: "174",
        cca3: "COM",
        cioc: "COM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            KMF: {
                name: "Comorian franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "69"
            ]
        },
        capital: [
            "Moroni"
        ],
        altSpellings: [
            "KM",
            "Union of the Comoros",
            "Union des Comores",
            "Udzima wa Komori",
            "al-Itti\u1E25\u0101d al-Qumur\u012B"
        ],
        region: "Africa",
        subregion: "Eastern Africa",
        languages: {
            ara: "Arabic",
            fra: "French",
            zdj: "Comorian"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u0625\u062A\u062D\u0627\u062F \u0627\u0644\u0642\u0645\u0631\u064A",
                common: "\u062C\u0632\u0631 \u0627\u0644\u0642\u0645\u0631"
            },
            bre: {
                official: "Unaniezh Komorez",
                common: "Komorez"
            },
            ces: {
                official: "Komorsk\xfd svaz",
                common: "Komory"
            },
            cym: {
                official: "Undeb y Comoros",
                common: "Y Comoros"
            },
            deu: {
                official: "Union der Komoren",
                common: "Komoren"
            },
            est: {
                official: "Komoori Liit",
                common: "Komoorid"
            },
            fin: {
                official: "Komorien liitto",
                common: "Komorit"
            },
            fra: {
                official: "Union des Comores",
                common: "Comores"
            },
            hrv: {
                official: "Savez Komori",
                common: "Komori"
            },
            hun: {
                official: "Comore-szigeteki Uni\xf3",
                common: "Comore-szigetek"
            },
            ita: {
                official: "Unione delle Comore",
                common: "Comore"
            },
            jpn: {
                official: "\u30B3\u30E2\u30ED\u9023\u5408",
                common: "\u30B3\u30E2\u30ED"
            },
            kor: {
                official: "\uCF54\uBAA8\uB85C \uC5F0\uBC29",
                common: "\uCF54\uBAA8\uB85C"
            },
            nld: {
                official: "Unie van de Comoren",
                common: "Comoren"
            },
            per: {
                official: "\u0645\u062C\u0645\u0639\u200C\u0627\u0644\u062C\u0632\u0627\u06CC\u0631 \u0642\u0645\u0631",
                common: "\u0627\u062A\u062D\u0627\u062F \u0642\u064F\u0645\u064F\u0631"
            },
            pol: {
                official: "Zwi\u0105zek Komor\xf3w",
                common: "Komory"
            },
            por: {
                official: "Uni\xe3o das Comores",
                common: "Comores"
            },
            rus: {
                official: "\u0421\u043E\u044E\u0437 \u041A\u043E\u043C\u043E\u0440\u0441\u043A\u0438\u0445 \u041E\u0441\u0442\u0440\u043E\u0432\u043E\u0432",
                common: "\u041A\u043E\u043C\u043E\u0440\u044B"
            },
            slk: {
                official: "Komorsk\xe1 \xfania",
                common: "Komory"
            },
            spa: {
                official: "Uni\xf3n de las Comoras",
                common: "Comoras"
            },
            srp: {
                official: "\u0421\u0430\u0432\u0435\u0437 \u041A\u043E\u043C\u043E\u0440\u0430",
                common: "\u041A\u043E\u043C\u043E\u0440\u0438"
            },
            swe: {
                official: "Unionen Komorerna",
                common: "Komorerna"
            },
            tur: {
                official: "Komorlar Birli\u011Fi",
                common: "Komorlar"
            },
            urd: {
                official: "\u0627\u062A\u062D\u0627\u062F \u0627\u0644\u0642\u0645\u0631\u06CC",
                common: "\u0627\u0644\u0642\u0645\u0631\u06CC"
            },
            zho: {
                official: "\u79D1\u6469\u7F57\u8054\u76DF",
                common: "\u79D1\u6469\u7F57"
            }
        },
        latlng: [
            -12.16666666,
            44.25
        ],
        landlocked: false,
        area: 1862,
        demonyms: {
            eng: {
                f: "Comoran",
                m: "Comoran"
            },
            fra: {
                f: "Comorienne",
                m: "Comorien"
            }
        },
        flag: "\uD83C\uDDF0\uD83C\uDDF2",
        maps: {
            googleMaps: "https://goo.gl/maps/eas4GP28C1GyStnu6",
            openStreetMaps: "https://www.openstreetmap.org/relation/535790"
        },
        population: 869595,
        gini: {
            2014: 45.3
        },
        fifa: "COM",
        car: {
            signs: [
                "COM"
            ],
            side: "right"
        },
        timezones: [
            "UTC+03:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/km.png",
            svg: "https://flagcdn.com/km.svg",
            alt: "The flag of Comoros is composed of four equal horizontal bands of yellow, white, red and blue, with a green isosceles triangle superimposed on the hoist side of the field. This triangle has its base on the hoist end, spans about two-fifth the width of the field and bears a fly-side facing white crescent and four five-pointed white stars arranged in a vertical line along the opening of the crescent."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/km.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/km.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -11.7,
                43.23
            ]
        }
    },
    {
        name: {
            common: "Guam",
            official: "Guam",
            nativeName: {
                cha: {
                    official: "Gu\xe5h\xe5n",
                    common: "Gu\xe5h\xe5n"
                },
                eng: {
                    official: "Guam",
                    common: "Guam"
                },
                spa: {
                    official: "Guam",
                    common: "Guam"
                }
            }
        },
        tld: [
            ".gu"
        ],
        cca2: "GU",
        ccn3: "316",
        cca3: "GUM",
        cioc: "GUM",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "671"
            ]
        },
        capital: [
            "Hag\xe5t\xf1a"
        ],
        altSpellings: [
            "GU",
            "Gu\xe5h\xe5n"
        ],
        region: "Oceania",
        subregion: "Micronesia",
        languages: {
            cha: "Chamorro",
            eng: "English",
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u063A\u0648\u0627\u0645",
                common: "\u063A\u0648\u0627\u0645"
            },
            bre: {
                official: "Guam",
                common: "Guam"
            },
            ces: {
                official: "Guam",
                common: "Guam"
            },
            cym: {
                official: "Guam",
                common: "Guam"
            },
            deu: {
                official: "Guam",
                common: "Guam"
            },
            est: {
                official: "Guami ala",
                common: "Guam"
            },
            fin: {
                official: "Guam",
                common: "Guam"
            },
            fra: {
                official: "Guam",
                common: "Guam"
            },
            hrv: {
                official: "Guam",
                common: "Guam"
            },
            hun: {
                official: "Guam",
                common: "Guam"
            },
            ita: {
                official: "Guam",
                common: "Guam"
            },
            jpn: {
                official: "\u30B0\u30A2\u30E0",
                common: "\u30B0\u30A2\u30E0"
            },
            kor: {
                official: "\uAD0C",
                common: "\uAD0C"
            },
            nld: {
                official: "Guam",
                common: "Guam"
            },
            per: {
                official: "\u06AF\u0648\u0622\u0645",
                common: "\u06AF\u0648\u0622\u0645"
            },
            pol: {
                official: "Terytorium Guamu",
                common: "Guam"
            },
            por: {
                official: "Guam",
                common: "Guam"
            },
            rus: {
                official: "\u0413\u0443\u0430\u043C",
                common: "\u0413\u0443\u0430\u043C"
            },
            slk: {
                official: "Guam",
                common: "Guam"
            },
            spa: {
                official: "Guam",
                common: "Guam"
            },
            srp: {
                official: "\u0413\u0443\u0430\u043C",
                common: "\u0413\u0443\u0430\u043C"
            },
            swe: {
                official: "Guam",
                common: "Guam"
            },
            tur: {
                official: "Guam Topra\u011F\u0131",
                common: "Guam"
            },
            urd: {
                official: "\u06AF\u0648\u0627\u0645",
                common: "\u06AF\u0648\u0627\u0645"
            },
            zho: {
                official: "\u5173\u5C9B",
                common: "\u5173\u5C9B"
            }
        },
        latlng: [
            13.46666666,
            144.78333333
        ],
        landlocked: false,
        area: 549,
        demonyms: {
            eng: {
                f: "Guamanian",
                m: "Guamanian"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDFA",
        maps: {
            googleMaps: "https://goo.gl/maps/Xfnq2i279b18cH3C9",
            openStreetMaps: "https://www.openstreetmap.org/relation/306001"
        },
        population: 168783,
        fifa: "GUM",
        car: {
            signs: [
                "USA"
            ],
            side: "right"
        },
        timezones: [
            "UTC+10:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gu.png",
            svg: "https://flagcdn.com/gu.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gu.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gu.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                13.48,
                144.75
            ]
        },
        postalCode: {
            format: "969##",
            regex: "^(969\\d{2})$"
        }
    },
    {
        name: {
            common: "Tonga",
            official: "Kingdom of Tonga",
            nativeName: {
                eng: {
                    official: "Kingdom of Tonga",
                    common: "Tonga"
                },
                ton: {
                    official: "Kingdom of Tonga",
                    common: "Tonga"
                }
            }
        },
        tld: [
            ".to"
        ],
        cca2: "TO",
        ccn3: "776",
        cca3: "TON",
        cioc: "TGA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            TOP: {
                name: "Tongan pa\u02BBanga",
                symbol: "T$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "76"
            ]
        },
        capital: [
            "Nuku'alofa"
        ],
        altSpellings: [
            "TO"
        ],
        region: "Oceania",
        subregion: "Polynesia",
        languages: {
            eng: "English",
            ton: "Tongan"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u062A\u0648\u0646\u063A\u0627",
                common: "\u062A\u0648\u0646\u063A\u0627"
            },
            bre: {
                official: "Rouantelezh Tonga",
                common: "Tonga"
            },
            ces: {
                official: "Kr\xe1lovstv\xed Tonga",
                common: "Tonga"
            },
            cym: {
                official: "Kingdom of Tonga",
                common: "Tonga"
            },
            deu: {
                official: "K\xf6nigreich Tonga",
                common: "Tonga"
            },
            est: {
                official: "Tonga Kuningriik",
                common: "Tonga"
            },
            fin: {
                official: "Tongan kuningaskunta",
                common: "Tonga"
            },
            fra: {
                official: "Royaume des Tonga",
                common: "Tonga"
            },
            hrv: {
                official: "Kraljevina Tonga",
                common: "Tonga"
            },
            hun: {
                official: "Tongai Kir\xe1lys\xe1g",
                common: "Tonga"
            },
            ita: {
                official: "Regno di Tonga",
                common: "Tonga"
            },
            jpn: {
                official: "\u30C8\u30F3\u30AC\u738B\u56FD",
                common: "\u30C8\u30F3\u30AC"
            },
            kor: {
                official: "\uD1B5\uAC00 \uC655\uAD6D",
                common: "\uD1B5\uAC00"
            },
            nld: {
                official: "Koninkrijk Tonga",
                common: "Tonga"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u062A\u0648\u0646\u06AF\u0627",
                common: "\u062A\u0648\u0646\u06AF\u0627"
            },
            pol: {
                official: "Kr\xf3lestwo Tonga",
                common: "Tonga"
            },
            por: {
                official: "Reino de Tonga",
                common: "Tonga"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0422\u043E\u043D\u0433\u0430",
                common: "\u0422\u043E\u043D\u0433\u0430"
            },
            slk: {
                official: "Tongsk\xe9 kr\xe1\u013Eovstvo",
                common: "Tonga"
            },
            spa: {
                official: "Reino de Tonga",
                common: "Tonga"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0422\u043E\u043D\u0433\u0430",
                common: "\u0422\u043E\u043D\u0433\u0430"
            },
            swe: {
                official: "Konungariket Tonga",
                common: "Tonga"
            },
            tur: {
                official: "Tonga Krall\u0131\u011F\u0131",
                common: "Tonga"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0679\u0648\u0646\u06AF\u0627",
                common: "\u0679\u0648\u0646\u06AF\u0627"
            },
            zho: {
                official: "\u6C64\u52A0\u738B\u56FD",
                common: "\u6C64\u52A0"
            }
        },
        latlng: [
            -20,
            -175
        ],
        landlocked: false,
        area: 747,
        demonyms: {
            eng: {
                f: "Tongan",
                m: "Tongan"
            },
            fra: {
                f: "Tonguienne",
                m: "Tonguien"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDF4",
        maps: {
            googleMaps: "https://goo.gl/maps/p5YALBY2QdEzswRo7",
            openStreetMaps: "https://www.openstreetmap.org/relation/2186665"
        },
        population: 105697,
        gini: {
            2015: 37.6
        },
        fifa: "TGA",
        car: {
            signs: [
                "TO"
            ],
            side: "left"
        },
        timezones: [
            "UTC+13:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/to.png",
            svg: "https://flagcdn.com/to.svg",
            alt: "The flag of Tonga has a red field. A white rectangle bearing a red Greek cross is superimposed in the canton."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/to.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/to.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -21.13,
                -175.2
            ]
        }
    },
    {
        name: {
            common: "Kiribati",
            official: "Independent and Sovereign Republic of Kiribati",
            nativeName: {
                eng: {
                    official: "Independent and Sovereign Republic of Kiribati",
                    common: "Kiribati"
                },
                gil: {
                    official: "Ribaberiki Kiribati",
                    common: "Kiribati"
                }
            }
        },
        tld: [
            ".ki"
        ],
        cca2: "KI",
        ccn3: "296",
        cca3: "KIR",
        cioc: "KIR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            AUD: {
                name: "Australian dollar",
                symbol: "$"
            },
            KID: {
                name: "Kiribati dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "86"
            ]
        },
        capital: [
            "South Tarawa"
        ],
        altSpellings: [
            "KI",
            "Republic of Kiribati",
            "Ribaberiki Kiribati"
        ],
        region: "Oceania",
        subregion: "Micronesia",
        languages: {
            eng: "English",
            gil: "Gilbertese"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0643\u064A\u0631\u064A\u0628\u0627\u062A\u064A",
                common: "\u0643\u064A\u0631\u064A\u0628\u0627\u062A\u064A"
            },
            bre: {
                official: "Republik Kiribati",
                common: "Kiribati"
            },
            ces: {
                official: "Republika Kiribati",
                common: "Kiribati"
            },
            cym: {
                official: "Independent and Sovereign Republic of Kiribati",
                common: "Kiribati"
            },
            deu: {
                official: "Republik Kiribati",
                common: "Kiribati"
            },
            est: {
                official: "Kiribati Vabariik",
                common: "Kiribati"
            },
            fin: {
                official: "Kiribatin tasavalta",
                common: "Kiribati"
            },
            fra: {
                official: "R\xe9publique de Kiribati",
                common: "Kiribati"
            },
            hrv: {
                official: "Samostalne i suverene Republike Kiribati",
                common: "Kiribati"
            },
            hun: {
                official: "Kiribati K\xf6zt\xe1rsas\xe1g",
                common: "Kiribati"
            },
            ita: {
                official: "Repubblica indipendente e sovrano di Kiribati",
                common: "Kiribati"
            },
            jpn: {
                official: "\u30AD\u30EA\u30D0\u30B9\u306E\u72EC\u7ACB\u3068\u4E3B\u6A29\u5171\u548C\u56FD",
                common: "\u30AD\u30EA\u30D0\u30B9"
            },
            kor: {
                official: "\uD0A4\uB9AC\uBC14\uC2DC \uACF5\uD654\uAD6D",
                common: "\uD0A4\uB9AC\uBC14\uC2DC"
            },
            nld: {
                official: "Onafhankelijke en soevereine republiek Kiribati",
                common: "Kiribati"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u06CC\u0631\u06CC\u0628\u0627\u062A\u06CC",
                common: "\u06A9\u06CC\u0631\u06CC\u0628\u0627\u062A\u06CC"
            },
            pol: {
                official: "Republika Kiribati",
                common: "Kiribati"
            },
            por: {
                official: "Independente e soberano Rep\xfablica de Kiribati",
                common: "Kiribati"
            },
            rus: {
                official: "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043C\u043E\u0439 \u0438 \u0441\u0443\u0432\u0435\u0440\u0435\u043D\u043D\u043E\u0439 \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0438 \u041A\u0438\u0440\u0438\u0431\u0430\u0442\u0438",
                common: "\u041A\u0438\u0440\u0438\u0431\u0430\u0442\u0438"
            },
            slk: {
                official: "Kiribatsk\xe1 republika",
                common: "Kiribati"
            },
            spa: {
                official: "Rep\xfablica Independiente y Soberano de Kiribati",
                common: "Kiribati"
            },
            srp: {
                official: "\u041D\u0435\u0437\u0430\u0432\u0438\u0441\u043D\u0430 \u0438 \u0421\u0443\u0432\u0435\u0440\u0435\u043D\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u0438\u0440\u0438\u0431\u0430\u0442\u0438",
                common: "\u041A\u0438\u0440\u0438\u0431\u0430\u0442\u0438"
            },
            swe: {
                official: "Republiken Kiribati",
                common: "Kiribati"
            },
            tur: {
                official: "Kiribati Cumhuriyeti",
                common: "Kiribati"
            },
            urd: {
                official: "\u0633\u0644\u0637\u0646\u062A \u0622\u0632\u0627\u062F \u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u06CC\u0631\u06CC\u0628\u0627\u062A\u06CC",
                common: "\u06A9\u06CC\u0631\u06CC\u0628\u0627\u062A\u06CC"
            },
            zho: {
                official: "\u57FA\u91CC\u5DF4\u65AF\u5171\u548C\u56FD",
                common: "\u57FA\u91CC\u5DF4\u65AF"
            }
        },
        latlng: [
            1.41666666,
            173
        ],
        landlocked: false,
        area: 811,
        demonyms: {
            eng: {
                f: "I-Kiribati",
                m: "I-Kiribati"
            },
            fra: {
                f: "Kiribatienne",
                m: "Kiribatien"
            }
        },
        flag: "\uD83C\uDDF0\uD83C\uDDEE",
        maps: {
            googleMaps: "https://goo.gl/maps/NBfYvrndW4skAimw9",
            openStreetMaps: "https://www.openstreetmap.org/relation/571178"
        },
        population: 119446,
        gini: {
            2006: 37
        },
        car: {
            signs: [
                "KIR"
            ],
            side: "left"
        },
        timezones: [
            "UTC+12:00",
            "UTC+13:00",
            "UTC+14:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ki.png",
            svg: "https://flagcdn.com/ki.svg",
            alt: "The flag of Kiribati is divided into two halves. While the upper half has a red field, at the center of which is a yellow frigate bird flying over the top half of a rising yellow sun with seventeen visible rays, the lower half is composed of six horizontal wavy bands of white alternating with blue to depict the ocean."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ki.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ki.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                1.33,
                172.98
            ]
        }
    },
    {
        name: {
            common: "Ghana",
            official: "Republic of Ghana",
            nativeName: {
                eng: {
                    official: "Republic of Ghana",
                    common: "Ghana"
                }
            }
        },
        tld: [
            ".gh"
        ],
        cca2: "GH",
        ccn3: "288",
        cca3: "GHA",
        cioc: "GHA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            GHS: {
                name: "Ghanaian cedi",
                symbol: "\u20B5"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "33"
            ]
        },
        capital: [
            "Accra"
        ],
        altSpellings: [
            "GH"
        ],
        region: "Africa",
        subregion: "Western Africa",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u063A\u0627\u0646\u0627",
                common: "\u063A\u0627\u0646\u0627"
            },
            bre: {
                official: "Republik Ghana",
                common: "Ghana"
            },
            ces: {
                official: "Ghansk\xe1 republika",
                common: "Ghana"
            },
            cym: {
                official: "Republic of Ghana",
                common: "Ghana"
            },
            deu: {
                official: "Republik Ghana",
                common: "Ghana"
            },
            est: {
                official: "Ghana Vabariik",
                common: "Ghana"
            },
            fin: {
                official: "Ghanan tasavalta",
                common: "Ghana"
            },
            fra: {
                official: "R\xe9publique du Ghana",
                common: "Ghana"
            },
            hrv: {
                official: "Republika Gana",
                common: "Gana"
            },
            hun: {
                official: "Gh\xe1nai K\xf6zt\xe1rsas\xe1g",
                common: "Gh\xe1na"
            },
            ita: {
                official: "Repubblica del Ghana",
                common: "Ghana"
            },
            jpn: {
                official: "\u30AC\u30FC\u30CA\u5171\u548C\u56FD",
                common: "\u30AC\u30FC\u30CA"
            },
            kor: {
                official: "\uAC00\uB098 \uACF5\uD654\uAD6D",
                common: "\uAC00\uB098"
            },
            nld: {
                official: "Republiek Ghana",
                common: "Ghana"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u063A\u0646\u0627",
                common: "\u063A\u0646\u0627"
            },
            pol: {
                official: "Republika Ghany",
                common: "Ghana"
            },
            por: {
                official: "Rep\xfablica do Gana",
                common: "Gana"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u043D\u0430",
                common: "\u0413\u0430\u043D\u0430"
            },
            slk: {
                official: "Ghansk\xe1 republika",
                common: "Ghana"
            },
            spa: {
                official: "Rep\xfablica de Ghana",
                common: "Ghana"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0413\u0430\u043D\u0430",
                common: "\u0413\u0430\u043D\u0430"
            },
            swe: {
                official: "Republiken Ghana",
                common: "Ghana"
            },
            tur: {
                official: "Gana Cumhuriyeti",
                common: "Gana"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06AF\u06BE\u0627\u0646\u0627",
                common: "\u06AF\u06BE\u0627\u0646\u0627"
            },
            zho: {
                official: "\u52A0\u7EB3\u5171\u548C\u56FD",
                common: "\u52A0\u7EB3"
            }
        },
        latlng: [
            8,
            -2
        ],
        landlocked: false,
        borders: [
            "BFA",
            "CIV",
            "TGO"
        ],
        area: 238533,
        demonyms: {
            eng: {
                f: "Ghanaian",
                m: "Ghanaian"
            },
            fra: {
                f: "Ghan\xe9enne",
                m: "Ghan\xe9en"
            }
        },
        flag: "\uD83C\uDDEC\uD83C\uDDED",
        maps: {
            googleMaps: "https://goo.gl/maps/Avy5RSmdsXFBaiXq8",
            openStreetMaps: "https://www.openstreetmap.org/relation/192781"
        },
        population: 31072945,
        gini: {
            2016: 43.5
        },
        fifa: "GHA",
        car: {
            signs: [
                "GH"
            ],
            side: "right"
        },
        timezones: [
            "UTC"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/gh.png",
            svg: "https://flagcdn.com/gh.svg",
            alt: "The flag of Ghana is composed of three equal horizontal bands of red, gold and green, with a five-pointed black star centered in the gold band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/gh.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/gh.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                5.55,
                -0.22
            ]
        }
    },
    {
        name: {
            common: "Chad",
            official: "Republic of Chad",
            nativeName: {
                ara: {
                    official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0634\u0627\u062F",
                    common: "\u062A\u0634\u0627\u062F\u200E"
                },
                fra: {
                    official: "R\xe9publique du Tchad",
                    common: "Tchad"
                }
            }
        },
        tld: [
            ".td"
        ],
        cca2: "TD",
        ccn3: "148",
        cca3: "TCD",
        cioc: "CHA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XAF: {
                name: "Central African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "35"
            ]
        },
        capital: [
            "N'Djamena"
        ],
        altSpellings: [
            "TD",
            "Tchad",
            "Republic of Chad",
            "R\xe9publique du Tchad"
        ],
        region: "Africa",
        subregion: "Middle Africa",
        languages: {
            ara: "Arabic",
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u062A\u0634\u0627\u062F",
                common: "\u062A\u0634\u0627\u062F"
            },
            bre: {
                official: "Republik Tchad",
                common: "Tchad"
            },
            ces: {
                official: "\u010Cadsk\xe1 republika",
                common: "\u010Cad"
            },
            cym: {
                official: "Gweriniaeth Tsiad",
                common: "Tsiad"
            },
            deu: {
                official: "Republik Tschad",
                common: "Tschad"
            },
            est: {
                official: "T\u0161aadi Vabariik",
                common: "T\u0161aad"
            },
            fin: {
                official: "T\u0161adin tasavalta",
                common: "T\u0161ad"
            },
            fra: {
                official: "R\xe9publique du Tchad",
                common: "Tchad"
            },
            hrv: {
                official: "\u010Cadu",
                common: "\u010Cad"
            },
            hun: {
                official: "Cs\xe1d K\xf6zt\xe1rsas\xe1g",
                common: "Cs\xe1d"
            },
            ita: {
                official: "Repubblica del Ciad",
                common: "Ciad"
            },
            jpn: {
                official: "\u30C1\u30E3\u30C9\u5171\u548C\u56FD",
                common: "\u30C1\u30E3\u30C9"
            },
            kor: {
                official: "\uCC28\uB4DC \uACF5\uD654\uAD6D",
                common: "\uCC28\uB4DC"
            },
            nld: {
                official: "Republiek Tsjaad",
                common: "Tsjaad"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0686\u0627\u062F",
                common: "\u0686\u0627\u062F"
            },
            pol: {
                official: "Republika Czadu",
                common: "Czad"
            },
            por: {
                official: "Rep\xfablica do Chade",
                common: "Chade"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0427\u0430\u0434",
                common: "\u0427\u0430\u0434"
            },
            slk: {
                official: "\u010Cadsk\xe1 republika",
                common: "\u010Cad"
            },
            spa: {
                official: "Rep\xfablica de Chad",
                common: "Chad"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0427\u0430\u0434",
                common: "\u0427\u0430\u0434"
            },
            swe: {
                official: "Republiken Tchad",
                common: "Tchad"
            },
            tur: {
                official: "\xc7ad Cumhuriyeti",
                common: "\xc7ad"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0686\u0627\u0688",
                common: "\u0686\u0627\u0688"
            },
            zho: {
                official: "\u4E4D\u5F97\u5171\u548C\u56FD",
                common: "\u4E4D\u5F97"
            }
        },
        latlng: [
            15,
            19
        ],
        landlocked: true,
        borders: [
            "CMR",
            "CAF",
            "LBY",
            "NER",
            "NGA",
            "SDN"
        ],
        area: 1284000,
        demonyms: {
            eng: {
                f: "Chadian",
                m: "Chadian"
            },
            fra: {
                f: "Tchadienne",
                m: "Tchadien"
            }
        },
        flag: "\uD83C\uDDF9\uD83C\uDDE9",
        maps: {
            googleMaps: "https://goo.gl/maps/ziUdAZ8skuNfx5Hx7",
            openStreetMaps: "https://www.openstreetmap.org/relation/2361304"
        },
        population: 16425859,
        gini: {
            2011: 43.3
        },
        fifa: "CHA",
        car: {
            signs: [
                "TCH",
                "TD"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/td.png",
            svg: "https://flagcdn.com/td.svg",
            alt: "The flag of Chad is composed of three equal vertical bands of blue, gold and red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/td.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/td.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                12.1,
                15.03
            ]
        }
    },
    {
        name: {
            common: "Zimbabwe",
            official: "Republic of Zimbabwe",
            nativeName: {
                bwg: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                eng: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                kck: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                khi: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                ndc: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                nde: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                nya: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                sna: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                sot: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                toi: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                tsn: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                tso: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                ven: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                xho: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                },
                zib: {
                    official: "Republic of Zimbabwe",
                    common: "Zimbabwe"
                }
            }
        },
        tld: [
            ".zw"
        ],
        cca2: "ZW",
        ccn3: "716",
        cca3: "ZWE",
        cioc: "ZIM",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            ZWL: {
                name: "Zimbabwean dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "63"
            ]
        },
        capital: [
            "Harare"
        ],
        altSpellings: [
            "ZW",
            "Republic of Zimbabwe"
        ],
        region: "Africa",
        subregion: "Southern Africa",
        languages: {
            bwg: "Chibarwe",
            eng: "English",
            kck: "Kalanga",
            khi: "Khoisan",
            ndc: "Ndau",
            nde: "Northern Ndebele",
            nya: "Chewa",
            sna: "Shona",
            sot: "Sotho",
            toi: "Tonga",
            tsn: "Tswana",
            tso: "Tsonga",
            ven: "Venda",
            xho: "Xhosa",
            zib: "Zimbabwean Sign Language"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0632\u064A\u0645\u0628\u0627\u0628\u0648\u064A",
                common: "\u0632\u064A\u0645\u0628\u0627\u0628\u0648\u064A"
            },
            bre: {
                official: "Republik Zimbabwe",
                common: "Zimbabwe"
            },
            ces: {
                official: "Zimbabwsk\xe1 republika",
                common: "Zimbabwe"
            },
            cym: {
                official: "Republic of Zimbabwe",
                common: "Zimbabwe"
            },
            deu: {
                official: "Republik Simbabwe",
                common: "Simbabwe"
            },
            est: {
                official: "Zimbabwe Vabariik",
                common: "Zimbabwe"
            },
            fin: {
                official: "Zimbabwen tasavalta",
                common: "Zimbabwe"
            },
            fra: {
                official: "R\xe9publique du Zimbabwe",
                common: "Zimbabwe"
            },
            hrv: {
                official: "Republika Zimbabve",
                common: "Zimbabve"
            },
            hun: {
                official: "Zimbabwei K\xf6zt\xe1rsas\xe1g",
                common: "Zimbabwe"
            },
            ita: {
                official: "Repubblica dello Zimbabwe",
                common: "Zimbabwe"
            },
            jpn: {
                official: "\u30B8\u30F3\u30D0\u30D6\u30A8\u5171\u548C\u56FD",
                common: "\u30B8\u30F3\u30D0\u30D6\u30A8"
            },
            kor: {
                official: "\uC9D0\uBC14\uBE0C\uC6E8 \uACF5\uD654\uAD6D",
                common: "\uC9D0\uBC14\uBE0C\uC6E8"
            },
            nld: {
                official: "Republiek Zimbabwe",
                common: "Zimbabwe"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0632\u06CC\u0645\u0628\u0627\u0628\u0648\u0647",
                common: "\u0632\u06CC\u0645\u0628\u0627\u0628\u0648\u0647"
            },
            pol: {
                official: "Republika Zimbabwe",
                common: "Zimbabwe"
            },
            por: {
                official: "Rep\xfablica do Zimbabwe",
                common: "Zimbabwe"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0417\u0438\u043C\u0431\u0430\u0431\u0432\u0435",
                common: "\u0417\u0438\u043C\u0431\u0430\u0431\u0432\u0435"
            },
            slk: {
                official: "Zimbabwianska republika",
                common: "Zimbabwe"
            },
            spa: {
                official: "Rep\xfablica de Zimbabue",
                common: "Zimbabue"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u0417\u0438\u043C\u0431\u0430\u0431\u0432\u0435",
                common: "\u0417\u0438\u043C\u0431\u0430\u0431\u0432\u0435"
            },
            swe: {
                official: "Republiken Zimbabwe",
                common: "Zimbabwe"
            },
            tur: {
                official: "Zimbabve Cumhuriyeti",
                common: "Zimbabve"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0632\u0645\u0628\u0627\u0628\u0648\u06D2",
                common: "\u0632\u0645\u0628\u0627\u0628\u0648\u06D2"
            },
            zho: {
                official: "\u6D25\u5DF4\u5E03\u97E6\u5171\u548C\u56FD",
                common: "\u6D25\u5DF4\u5E03\u97E6"
            }
        },
        latlng: [
            -20,
            30
        ],
        landlocked: true,
        borders: [
            "BWA",
            "MOZ",
            "ZAF",
            "ZMB"
        ],
        area: 390757,
        demonyms: {
            eng: {
                f: "Zimbabwean",
                m: "Zimbabwean"
            },
            fra: {
                f: "Zimbabw\xe9enne",
                m: "Zimbabw\xe9en"
            }
        },
        flag: "\uD83C\uDDFF\uD83C\uDDFC",
        maps: {
            googleMaps: "https://goo.gl/maps/M26BqdwQctqxXS65A",
            openStreetMaps: "https://www.openstreetmap.org/relation/195272"
        },
        population: 14862927,
        gini: {
            2019: 50.3
        },
        fifa: "ZIM",
        car: {
            signs: [
                "ZW"
            ],
            side: "left"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/zw.png",
            svg: "https://flagcdn.com/zw.svg",
            alt: "The flag of Zimbabwe is composed of seven equal horizontal bands of green, yellow, red, black, red, yellow and green, with a white isosceles triangle superimposed on the hoist side of the field. This triangle is edged in black, spans about one-fourth the width of the field and has its base on the hoist end. A yellow Zimbabwe bird superimposed on a five-pointed red star is centered in the triangle."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/zw.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/zw.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -17.82,
                31.03
            ]
        }
    },
    {
        name: {
            common: "Saint Martin",
            official: "Saint Martin",
            nativeName: {
                fra: {
                    official: "Saint-Martin",
                    common: "Saint-Martin"
                }
            }
        },
        tld: [
            ".fr",
            ".gp"
        ],
        cca2: "MF",
        ccn3: "663",
        cca3: "MAF",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "90"
            ]
        },
        capital: [
            "Marigot"
        ],
        altSpellings: [
            "MF",
            "Collectivity of Saint Martin",
            "Collectivit\xe9 de Saint-Martin",
            "Saint Martin (French part)"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            fra: "French"
        },
        translations: {
            ara: {
                official: "\u0633\u0627\u0646\u062A \u0645\u0627\u0631\u062A\u0646",
                common: "\u0633\u0627\u0646\u062A \u0645\u0627\u0631\u062A\u0646"
            },
            bre: {
                official: "Saint-Martin",
                common: "Saint-Martin"
            },
            ces: {
                official: "Svat\xfd Martin",
                common: "Svat\xfd Martin (Francie)"
            },
            cym: {
                official: "Saint Martin",
                common: "Saint Martin"
            },
            deu: {
                official: "Saint-Martin",
                common: "Saint-Martin"
            },
            est: {
                official: "Saint-Martini \xfchendus",
                common: "Saint-Martin"
            },
            fin: {
                official: "Saint-Martin",
                common: "Saint-Martin"
            },
            fra: {
                official: "Saint-Martin",
                common: "Saint-Martin"
            },
            hrv: {
                official: "Saint Martin",
                common: "Sveti Martin"
            },
            hun: {
                official: "Saint-Martin K\xf6z\xf6ss\xe9g",
                common: "Saint-Martin"
            },
            ita: {
                official: "saint Martin",
                common: "Saint Martin"
            },
            jpn: {
                official: "\u30B5\u30F3\u30DE\u30EB\u30BF\u30F3\u5CF6",
                common: "\u30B5\u30F3\u30FB\u30DE\u30EB\u30BF\u30F3\uFF08\u30D5\u30E9\u30F3\u30B9\u9818\uFF09"
            },
            kor: {
                official: "\uC0DD\uB9C8\uB974\uD0F1",
                common: "\uC0DD\uB9C8\uB974\uD0F1"
            },
            nld: {
                official: "Saint Martin",
                common: "Saint-Martin"
            },
            per: {
                official: "\u0633\u0646 \u0645\u0627\u0631\u062A\u0646",
                common: "\u0633\u0646 \u0645\u0627\u0631\u062A\u0646"
            },
            pol: {
                official: "Wsp\xf3lnota Saint-Martin",
                common: "Saint-Martin"
            },
            por: {
                official: "saint Martin",
                common: "S\xe3o Martinho"
            },
            rus: {
                official: "\u0421\u0435\u043D-\u041C\u0430\u0440\u0442\u0435\u043D",
                common: "\u0421\u0435\u043D-\u041C\u0430\u0440\u0442\u0435\u043D"
            },
            slk: {
                official: "Saint-Martin",
                common: "Saint-Martin"
            },
            spa: {
                official: "Saint Martin",
                common: "Saint Martin"
            },
            srp: {
                official: "\u0421\u0432\u0435\u0442\u0438 \u041C\u0430\u0440\u0442\u0438\u043D",
                common: "\u0421\u0432\u0435\u0442\u0438 \u041C\u0430\u0440\u0442\u0438\u043D"
            },
            swe: {
                official: "F\xf6rvaltningsomr\xe5det Saint-Martin",
                common: "Saint-Martin"
            },
            tur: {
                official: "Saint Martin",
                common: "Saint Martin"
            },
            urd: {
                official: "\u0633\u06CC\u0646\u0679 \u0645\u0627\u0631\u0679\u0646",
                common: "\u0633\u06CC\u0646\u0679 \u0645\u0627\u0631\u0679\u0646"
            },
            zho: {
                official: "\u5723\u9A6C\u4E01",
                common: "\u5723\u9A6C\u4E01"
            }
        },
        latlng: [
            18.0708,
            63.0501
        ],
        landlocked: false,
        borders: [
            "SXM"
        ],
        area: 53,
        demonyms: {
            eng: {
                f: "Saint Martin Islander",
                m: "Saint Martin Islander"
            },
            fra: {
                f: "Saint-Martinoise",
                m: "Saint-Martinois"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDEB",
        maps: {
            googleMaps: "https://goo.gl/maps/P9ho9QuJ9EAR28JEA",
            openStreetMaps: "https://www.openstreetmap.org/relation/63064"
        },
        population: 38659,
        car: {
            signs: [
                "F"
            ],
            side: "right"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mf.png",
            svg: "https://flagcdn.com/mf.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                18.07,
                -63.08
            ]
        },
        postalCode: {
            format: "### ###"
        }
    },
    {
        name: {
            common: "Mongolia",
            official: "Mongolia",
            nativeName: {
                mon: {
                    official: "\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441",
                    common: "\u041C\u043E\u043D\u0433\u043E\u043B \u0443\u043B\u0441"
                }
            }
        },
        tld: [
            ".mn"
        ],
        cca2: "MN",
        ccn3: "496",
        cca3: "MNG",
        cioc: "MGL",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            MNT: {
                name: "Mongolian t\xf6gr\xf6g",
                symbol: "\u20AE"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "76"
            ]
        },
        capital: [
            "Ulan Bator"
        ],
        altSpellings: [
            "MN"
        ],
        region: "Asia",
        subregion: "Eastern Asia",
        languages: {
            mon: "Mongolian"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0645\u0646\u063A\u0648\u0644\u064A\u0627",
                common: "\u0645\u0646\u063A\u0648\u0644\u064A\u0627"
            },
            bre: {
                official: "Mongolia",
                common: "Mongolia"
            },
            ces: {
                official: "St\xe1t Mongolsko",
                common: "Mongolsko"
            },
            cym: {
                official: "Mongolia",
                common: "Mongolia"
            },
            deu: {
                official: "Mongolei",
                common: "Mongolei"
            },
            est: {
                official: "Mongoolia",
                common: "Mongoolia"
            },
            fin: {
                official: "Mongolian tasavalta",
                common: "Mongolia"
            },
            fra: {
                official: "Mongolie",
                common: "Mongolie"
            },
            hrv: {
                official: "Mongolija",
                common: "Mongolija"
            },
            hun: {
                official: "Mong\xf3lia",
                common: "Mong\xf3lia"
            },
            ita: {
                official: "Mongolia",
                common: "Mongolia"
            },
            jpn: {
                official: "\u30E2\u30F3\u30B4\u30EB",
                common: "\u30E2\u30F3\u30B4\u30EB"
            },
            kor: {
                official: "\uBABD\uACE8",
                common: "\uBABD\uACE8\uAD6D"
            },
            nld: {
                official: "Mongoli\xeb",
                common: "Mongoli\xeb"
            },
            per: {
                official: "\u0645\u063A\u0648\u0644\u0633\u062A\u0627\u0646",
                common: "\u0645\u063A\u0648\u0644\u0633\u062A\u0627\u0646"
            },
            pol: {
                official: "Mongolia",
                common: "Mongolia"
            },
            por: {
                official: "Mong\xf3lia",
                common: "Mong\xf3lia"
            },
            rus: {
                official: "\u041C\u043E\u043D\u0433\u043E\u043B\u0438\u044F",
                common: "\u041C\u043E\u043D\u0433\u043E\u043B\u0438\u044F"
            },
            slk: {
                official: "Mongolsko",
                common: "Mongolsko"
            },
            spa: {
                official: "Mongolia",
                common: "Mongolia"
            },
            srp: {
                official: "\u041C\u043E\u043D\u0433\u043E\u043B\u0438\u0458\u0430",
                common: "\u041C\u043E\u043D\u0433\u043E\u043B\u0438\u0458\u0430"
            },
            swe: {
                official: "Mongoliet",
                common: "Mongoliet"
            },
            tur: {
                official: "Mo\u011Folistan",
                common: "Mo\u011Folistan"
            },
            urd: {
                official: "\u0645\u0646\u06AF\u0648\u0644\u06CC\u0627",
                common: "\u0645\u0646\u06AF\u0648\u0644\u06CC\u0627"
            },
            zho: {
                official: "\u8499\u53E4",
                common: "\u8499\u53E4"
            }
        },
        latlng: [
            46,
            105
        ],
        landlocked: true,
        borders: [
            "CHN",
            "RUS"
        ],
        area: 1564110,
        demonyms: {
            eng: {
                f: "Mongolian",
                m: "Mongolian"
            },
            fra: {
                f: "Mongole",
                m: "Mongol"
            }
        },
        flag: "\uD83C\uDDF2\uD83C\uDDF3",
        maps: {
            googleMaps: "https://goo.gl/maps/A1X7bMCKThBDNjzH6",
            openStreetMaps: "https://www.openstreetmap.org/relation/161033"
        },
        population: 3278292,
        gini: {
            2018: 32.7
        },
        fifa: "MNG",
        car: {
            signs: [
                "MGL"
            ],
            side: "right"
        },
        timezones: [
            "UTC+07:00",
            "UTC+08:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/mn.png",
            svg: "https://flagcdn.com/mn.svg",
            alt: "The flag of Mongolia is composed of three equal vertical bands of red, blue and red, with the national emblem \u2014 the Soyombo \u2014 in gold centered in the hoist-side red band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/mn.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/mn.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                47.92,
                106.91
            ]
        },
        postalCode: {
            format: "######",
            regex: "^(\\d{6})$"
        }
    },
    {
        name: {
            common: "Portugal",
            official: "Portuguese Republic",
            nativeName: {
                por: {
                    official: "Rep\xfablica portugu\xeas",
                    common: "Portugal"
                }
            }
        },
        tld: [
            ".pt"
        ],
        cca2: "PT",
        ccn3: "620",
        cca3: "PRT",
        cioc: "POR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "51"
            ]
        },
        capital: [
            "Lisbon"
        ],
        altSpellings: [
            "PT",
            "Portuguesa",
            "Portuguese Republic",
            "Rep\xfablica Portuguesa"
        ],
        region: "Europe",
        subregion: "Southern Europe",
        languages: {
            por: "Portuguese"
        },
        translations: {
            ara: {
                official: "\u0627\u0644\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0628\u0631\u062A\u063A\u0627\u0644\u064A\u0629",
                common: "\u0627\u0644\u0628\u0631\u062A\u063A\u0627\u0644"
            },
            bre: {
                official: "Republik Portugalat",
                common: "Portugal"
            },
            ces: {
                official: "Portugalsk\xe1 republika",
                common: "Portugalsko"
            },
            cym: {
                official: "Portuguese Republic",
                common: "Portugal"
            },
            deu: {
                official: "Portugiesische Republik",
                common: "Portugal"
            },
            est: {
                official: "Portugali Vabariik",
                common: "Portugal"
            },
            fin: {
                official: "Portugalin tasavalta",
                common: "Portugali"
            },
            fra: {
                official: "R\xe9publique portugaise",
                common: "Portugal"
            },
            hrv: {
                official: "Portugalska Republika",
                common: "Portugal"
            },
            hun: {
                official: "Portug\xe1l K\xf6zt\xe1rsas\xe1g",
                common: "Portug\xe1lia"
            },
            ita: {
                official: "Repubblica portoghese",
                common: "Portogallo"
            },
            jpn: {
                official: "\u30DD\u30EB\u30C8\u30AC\u30EB\u5171\u548C\u56FD",
                common: "\u30DD\u30EB\u30C8\u30AC\u30EB"
            },
            kor: {
                official: "\uD3EC\uB974\uD22C\uAC08 \uACF5\uD654\uAD6D",
                common: "\uD3EC\uB974\uD22C\uAC08"
            },
            nld: {
                official: "Portugese Republiek",
                common: "Portugal"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u067E\u0631\u062A\u063A\u0627\u0644",
                common: "\u067E\u0631\u062A\u063A\u0627\u0644"
            },
            pol: {
                official: "Republika Portugalska",
                common: "Portugalia"
            },
            por: {
                official: "Rep\xfablica portugu\xeas",
                common: "Portugal"
            },
            rus: {
                official: "\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u044C\u0441\u043A\u0430\u044F \u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0438\u044F"
            },
            slk: {
                official: "Portugalsk\xe1 republika",
                common: "Portugalsko"
            },
            spa: {
                official: "Rep\xfablica Portuguesa",
                common: "Portugal"
            },
            srp: {
                official: "\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B\u0441\u043A\u0430 \u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430",
                common: "\u041F\u043E\u0440\u0442\u0443\u0433\u0430\u043B"
            },
            swe: {
                official: "Republiken Portugal",
                common: "Portugal"
            },
            tur: {
                official: "Portekiz Cumhuriyeti",
                common: "Portekiz"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u067E\u0631\u062A\u06AF\u0627\u0644",
                common: "\u067E\u0631\u062A\u06AF\u0627\u0644"
            },
            zho: {
                official: "\u8461\u8404\u7259\u5171\u548C\u56FD",
                common: "\u8461\u8404\u7259"
            }
        },
        latlng: [
            39.5,
            -8
        ],
        landlocked: false,
        borders: [
            "ESP"
        ],
        area: 92090,
        demonyms: {
            eng: {
                f: "Portuguese",
                m: "Portuguese"
            },
            fra: {
                f: "Portugaise",
                m: "Portugais"
            }
        },
        flag: "\uD83C\uDDF5\uD83C\uDDF9",
        maps: {
            googleMaps: "https://goo.gl/maps/BaTBSyc4GWMmbAKB8",
            openStreetMaps: "https://www.openstreetmap.org/relation/295480"
        },
        population: 10305564,
        gini: {
            2018: 33.5
        },
        fifa: "POR",
        car: {
            signs: [
                "P"
            ],
            side: "right"
        },
        timezones: [
            "UTC-01:00",
            "UTC"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/pt.png",
            svg: "https://flagcdn.com/pt.svg",
            alt: "The flag of Portugal is composed of two vertical bands of green and red in the ratio of 2:3, with the coat of arms of Portugal centered over the two-color boundary."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/pt.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/pt.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                38.72,
                -9.13
            ]
        },
        postalCode: {
            format: "####-###",
            regex: "^(\\d{7})$"
        }
    },
    {
        name: {
            common: "American Samoa",
            official: "American Samoa",
            nativeName: {
                eng: {
                    official: "American Samoa",
                    common: "American Samoa"
                },
                smo: {
                    official: "S\u0101moa Amelika",
                    common: "S\u0101moa Amelika"
                }
            }
        },
        tld: [
            ".as"
        ],
        cca2: "AS",
        ccn3: "016",
        cca3: "ASM",
        cioc: "ASA",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            USD: {
                name: "United States dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "684"
            ]
        },
        capital: [
            "Pago Pago"
        ],
        altSpellings: [
            "AS",
            "Amerika S\u0101moa",
            "Amelika S\u0101moa",
            "S\u0101moa Amelika"
        ],
        region: "Oceania",
        subregion: "Polynesia",
        languages: {
            eng: "English",
            smo: "Samoan"
        },
        translations: {
            ara: {
                official: "\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629",
                common: "\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629"
            },
            bre: {
                official: "Samoa Amerikan",
                common: "Samoa Amerikan"
            },
            ces: {
                official: "Americk\xe1 Samoa",
                common: "Americk\xe1 Samoa"
            },
            cym: {
                official: "American Samoa",
                common: "American Samoa"
            },
            deu: {
                official: "Amerikanisch-Samoa",
                common: "Amerikanisch-Samoa"
            },
            est: {
                official: "Ameerika Samoa",
                common: "Ameerika Samoa"
            },
            fin: {
                official: "Amerikan Samoa",
                common: "Amerikan Samoa"
            },
            fra: {
                official: "Samoa am\xe9ricaines",
                common: "Samoa am\xe9ricaines"
            },
            hrv: {
                official: "ameri\u010Dka Samoa",
                common: "Ameri\u010Dka Samoa"
            },
            hun: {
                official: "Szamoa",
                common: "Szamoa"
            },
            ita: {
                official: "Samoa americane",
                common: "Samoa Americane"
            },
            jpn: {
                official: "\u7C73\u30B5\u30E2\u30A2",
                common: "\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2"
            },
            kor: {
                official: "\uC544\uBA54\uB9AC\uCE78\uC0AC\uBAA8\uC544",
                common: "\uC544\uBA54\uB9AC\uCE78\uC0AC\uBAA8\uC544"
            },
            nld: {
                official: "Amerikaans Samoa",
                common: "Amerikaans Samoa"
            },
            per: {
                official: "\u0633\u0627\u0645\u0648\u0622\u06CC \u0622\u0645\u0631\u06CC\u06A9\u0627",
                common: "\u0633\u0627\u0645\u0648\u0622\u06CC \u0622\u0645\u0631\u06CC\u06A9\u0627"
            },
            pol: {
                official: "Samoa Ameryka\u0144skie",
                common: "Samoa Ameryka\u0144skie"
            },
            por: {
                official: "Samoa americana",
                common: "Samoa Americana"
            },
            rus: {
                official: "\u0430\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u043E\u0435 \u0421\u0430\u043C\u043E\u0430",
                common: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u043E\u0435 \u0421\u0430\u043C\u043E\u0430"
            },
            slk: {
                official: "Americk\xe1 Samoa",
                common: "Americk\xe1 Samoa"
            },
            spa: {
                official: "Samoa Americana",
                common: "Samoa Americana"
            },
            srp: {
                official: "\u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0430 \u0421\u0430\u043C\u043E\u0430",
                common: "\u0410\u043C\u0435\u0440\u0438\u0447\u043A\u0430 \u0421\u0430\u043C\u043E\u0430"
            },
            swe: {
                official: "Amerikanska Samoa",
                common: "Amerikanska Samoa"
            },
            tur: {
                official: "Amerikan Samoas\u0131",
                common: "Amerikan Samoas\u0131"
            },
            urd: {
                official: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0648\u0627",
                common: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0648\u0627"
            },
            zho: {
                official: "\u7F8E\u5C5E\u8428\u6469\u4E9A",
                common: "\u7F8E\u5C5E\u8428\u6469\u4E9A"
            }
        },
        latlng: [
            -14.33333333,
            -170
        ],
        landlocked: false,
        area: 199,
        demonyms: {
            eng: {
                f: "American Samoan",
                m: "American Samoan"
            },
            fra: {
                f: "Samoane",
                m: "Samoan"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDF8",
        maps: {
            googleMaps: "https://goo.gl/maps/Re9ePMjwP1sFCBFA6",
            openStreetMaps: "https://www.openstreetmap.org/relation/2177187"
        },
        population: 55197,
        fifa: "ASA",
        car: {
            signs: [
                "USA"
            ],
            side: "right"
        },
        timezones: [
            "UTC-11:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/as.png",
            svg: "https://flagcdn.com/as.svg"
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -14.27,
                -170.7
            ]
        }
    },
    {
        name: {
            common: "Republic of the Congo",
            official: "Republic of the Congo",
            nativeName: {
                fra: {
                    official: "R\xe9publique du Congo",
                    common: "R\xe9publique du Congo"
                },
                kon: {
                    official: "Repubilika ya Kongo",
                    common: "Repubilika ya Kongo"
                },
                lin: {
                    official: "Republ\xedki ya Kong\xf3",
                    common: "Republ\xedki ya Kong\xf3"
                }
            }
        },
        tld: [
            ".cg"
        ],
        cca2: "CG",
        ccn3: "178",
        cca3: "COG",
        cioc: "CGO",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            XAF: {
                name: "Central African CFA franc",
                symbol: "Fr"
            }
        },
        idd: {
            root: "+2",
            suffixes: [
                "42"
            ]
        },
        capital: [
            "Brazzaville"
        ],
        altSpellings: [
            "CG",
            "Congo",
            "Congo-Brazzaville"
        ],
        region: "Africa",
        subregion: "Middle Africa",
        languages: {
            fra: "French",
            kon: "Kikongo",
            lin: "Lingala"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0643\u0648\u0646\u063A\u0648",
                common: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0627\u0644\u0643\u0648\u0646\u0641\u0648"
            },
            bre: {
                official: "Republik Kongo",
                common: "Kongo-Brazzaville"
            },
            ces: {
                official: "Kon\u017Esk\xe1 republika",
                common: "Kongo"
            },
            cym: {
                official: "Gweriniaeth y Congo",
                common: "Gweriniaeth y Congo"
            },
            deu: {
                official: "Republik Kongo",
                common: "Kongo"
            },
            est: {
                official: "Kongo Vabariik",
                common: "Kongo Vabariik"
            },
            fin: {
                official: "Kongon tasavalta",
                common: "Kongo-Brazzaville"
            },
            fra: {
                official: "R\xe9publique du Congo",
                common: "Congo"
            },
            hrv: {
                official: "Republika Kongo",
                common: "Kongo"
            },
            hun: {
                official: "Kong\xf3i K\xf6zt\xe1rsas\xe1g",
                common: "Kong\xf3i K\xf6zt\xe1rsas\xe1g"
            },
            ita: {
                official: "Repubblica del Congo",
                common: "Congo"
            },
            jpn: {
                official: "\u30B3\u30F3\u30B4\u5171\u548C\u56FD",
                common: "\u30B3\u30F3\u30B4\u5171\u548C\u56FD"
            },
            kor: {
                official: "\uCF69\uACE0",
                common: "\uCF69\uACE0"
            },
            nld: {
                official: "Republiek Congo",
                common: "Congo"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0628\u0631\u0627\u0632\u0627\u0648\u06CC\u0644 \u06A9\u064F\u0646\u06AF\u0648",
                common: "\u062C\u0645\u0647\u0648\u0631\u06CC \u06A9\u064F\u0646\u06AF\u0648"
            },
            pol: {
                official: "Republika Konga",
                common: "Kongo"
            },
            por: {
                official: "Rep\xfablica do Congo",
                common: "Congo"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E",
                common: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E"
            },
            slk: {
                official: "Kon\u017Esk\xe1 republika",
                common: "Kongo"
            },
            spa: {
                official: "Rep\xfablica del Congo",
                common: "Congo"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041A\u043E\u043D\u0433\u043E",
                common: "\u041A\u043E\u043D\u0433\u043E"
            },
            swe: {
                official: "Republiken Kongo",
                common: "Kongo-Brazzaville"
            },
            tur: {
                official: "Kongo Cumhuriyeti",
                common: "Kongo Cumhuriyeti"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0627\u0646\u06AF\u0648",
                common: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u06A9\u0627\u0646\u06AF\u0648"
            },
            zho: {
                official: "\u521A\u679C\u5171\u548C\u56FD",
                common: "\u521A\u679C"
            }
        },
        latlng: [
            -1,
            15
        ],
        landlocked: false,
        borders: [
            "AGO",
            "CMR",
            "CAF",
            "COD",
            "GAB"
        ],
        area: 342000,
        demonyms: {
            eng: {
                f: "Congolese",
                m: "Congolese"
            },
            fra: {
                f: "Congolaise",
                m: "Congolais"
            }
        },
        flag: "\uD83C\uDDE8\uD83C\uDDEC",
        maps: {
            googleMaps: "https://goo.gl/maps/Phf5dDDKdfCtuBTb6",
            openStreetMaps: "https://www.openstreetmap.org/relation/192794"
        },
        population: 5657000,
        gini: {
            2011: 48.9
        },
        fifa: "CGO",
        car: {
            signs: [
                "RCB"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Africa"
        ],
        flags: {
            png: "https://flagcdn.com/w320/cg.png",
            svg: "https://flagcdn.com/cg.svg",
            alt: "The flag of the Republic of the Congo features a yellow diagonal band that extends from the lower hoist-side corner to the upper fly-side corner of the field. Above and beneath this band are a green and red triangle respectively."
        },
        coatOfArms: {},
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -4.25,
                15.28
            ]
        }
    },
    {
        name: {
            common: "Belgium",
            official: "Kingdom of Belgium",
            nativeName: {
                deu: {
                    official: "K\xf6nigreich Belgien",
                    common: "Belgien"
                },
                fra: {
                    official: "Royaume de Belgique",
                    common: "Belgique"
                },
                nld: {
                    official: "Koninkrijk Belgi\xeb",
                    common: "Belgi\xeb"
                }
            }
        },
        tld: [
            ".be"
        ],
        cca2: "BE",
        ccn3: "056",
        cca3: "BEL",
        cioc: "BEL",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            EUR: {
                name: "Euro",
                symbol: "\u20AC"
            }
        },
        idd: {
            root: "+3",
            suffixes: [
                "2"
            ]
        },
        capital: [
            "Brussels"
        ],
        altSpellings: [
            "BE",
            "Belgi\xeb",
            "Belgie",
            "Belgien",
            "Belgique",
            "Kingdom of Belgium",
            "Koninkrijk Belgi\xeb",
            "Royaume de Belgique",
            "K\xf6nigreich Belgien"
        ],
        region: "Europe",
        subregion: "Western Europe",
        languages: {
            deu: "German",
            fra: "French",
            nld: "Dutch"
        },
        translations: {
            ara: {
                official: "\u0645\u0645\u0644\u0643\u0629 \u0628\u0644\u062C\u064A\u0643\u0627",
                common: "\u0628\u0644\u062C\u064A\u0643\u0627"
            },
            bre: {
                official: "Rouantelezh Belgia",
                common: "Belgia"
            },
            ces: {
                official: "Belgick\xe9 kr\xe1lovstv\xed",
                common: "Belgie"
            },
            cym: {
                official: "Teyrnas Gwlad Belg",
                common: "Gwlad Belg"
            },
            deu: {
                official: "K\xf6nigreich Belgien",
                common: "Belgien"
            },
            est: {
                official: "Belgia Kuningriik",
                common: "Belgia"
            },
            fin: {
                official: "Belgian kuningaskunta",
                common: "Belgia"
            },
            fra: {
                official: "Royaume de Belgique",
                common: "Belgique"
            },
            hrv: {
                official: "Kraljevina Belgija",
                common: "Belgija"
            },
            hun: {
                official: "Belga Kir\xe1lys\xe1g",
                common: "Belgium"
            },
            ita: {
                official: "Regno del Belgio",
                common: "Belgio"
            },
            jpn: {
                official: "\u30D9\u30EB\u30AE\u30FC\u738B\u56FD",
                common: "\u30D9\u30EB\u30AE\u30FC"
            },
            kor: {
                official: "\uBCA8\uAE30\uC5D0 \uC655\uAD6D",
                common: "\uBCA8\uAE30\uC5D0"
            },
            nld: {
                official: "Koninkrijk Belgi\xeb",
                common: "Belgi\xeb"
            },
            per: {
                official: "\u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u0628\u0644\u0698\u06CC\u06A9",
                common: "\u0628\u0644\u0698\u06CC\u06A9"
            },
            pol: {
                official: "Kr\xf3lestwo Belgii",
                common: "Belgia"
            },
            por: {
                official: "Reino da B\xe9lgica",
                common: "B\xe9lgica"
            },
            rus: {
                official: "\u041A\u043E\u0440\u043E\u043B\u0435\u0432\u0441\u0442\u0432\u043E \u0411\u0435\u043B\u044C\u0433\u0438\u044F",
                common: "\u0411\u0435\u043B\u044C\u0433\u0438\u044F"
            },
            slk: {
                official: "Belgick\xe9 kr\xe1\u013Eovstvo",
                common: "Belgicko"
            },
            spa: {
                official: "Reino de B\xe9lgica",
                common: "B\xe9lgica"
            },
            srp: {
                official: "\u041A\u0440\u0430\u0459\u0435\u0432\u0438\u043D\u0430 \u0411\u0435\u043B\u0433\u0438\u0458\u0430",
                common: "\u0411\u0435\u043B\u0433\u0438\u0458\u0430"
            },
            swe: {
                official: "Konungariket Belgien",
                common: "Belgien"
            },
            tur: {
                official: "Bel\xe7ika Krall\u0131\u011F\u0131",
                common: "Bel\u011Fika"
            },
            urd: {
                official: "\u0645\u0645\u0644\u06A9\u062A\u0650 \u0628\u0644\u062C\u0626\u06CC\u0645",
                common: "\u0628\u0644\u062C\u0626\u06CC\u0645"
            },
            zho: {
                official: "\u6BD4\u5229\u65F6\u738B\u56FD",
                common: "\u6BD4\u5229\u65F6"
            }
        },
        latlng: [
            50.83333333,
            4
        ],
        landlocked: false,
        borders: [
            "FRA",
            "DEU",
            "LUX",
            "NLD"
        ],
        area: 30528,
        demonyms: {
            eng: {
                f: "Belgian",
                m: "Belgian"
            },
            fra: {
                f: "Belge",
                m: "Belge"
            }
        },
        flag: "\uD83C\uDDE7\uD83C\uDDEA",
        maps: {
            googleMaps: "https://goo.gl/maps/UQQzat85TCtPRXAL8",
            openStreetMaps: "https://www.openstreetmap.org/relation/52411"
        },
        population: 11555997,
        gini: {
            2018: 27.2
        },
        fifa: "BEL",
        car: {
            signs: [
                "B"
            ],
            side: "right"
        },
        timezones: [
            "UTC+01:00"
        ],
        continents: [
            "Europe"
        ],
        flags: {
            png: "https://flagcdn.com/w320/be.png",
            svg: "https://flagcdn.com/be.svg",
            alt: "The flag of Belgium is composed of three equal vertical bands of black, yellow and red."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/be.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/be.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                50.83,
                4.33
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Israel",
            official: "State of Israel",
            nativeName: {
                ara: {
                    official: "\u062F\u0648\u0644\u0629 \u0625\u0633\u0631\u0627\u0626\u064A\u0644",
                    common: "\u0625\u0633\u0631\u0627\u0626\u064A\u0644"
                },
                heb: {
                    official: "\u05DE\u05D3\u05D9\u05E0\u05EA \u05D9\u05E9\u05E8\u05D0\u05DC",
                    common: "\u05D9\u05E9\u05E8\u05D0\u05DC"
                }
            }
        },
        tld: [
            ".il"
        ],
        cca2: "IL",
        ccn3: "376",
        cca3: "ISR",
        cioc: "ISR",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            ILS: {
                name: "Israeli new shekel",
                symbol: "\u20AA"
            }
        },
        idd: {
            root: "+9",
            suffixes: [
                "72"
            ]
        },
        capital: [
            "Jerusalem"
        ],
        altSpellings: [
            "IL",
            "State of Israel",
            "Med\u012Bnat Yisr\u0101'el"
        ],
        region: "Asia",
        subregion: "Western Asia",
        languages: {
            ara: "Arabic",
            heb: "Hebrew"
        },
        translations: {
            ara: {
                official: "\u062F\u0648\u0644\u0629 \u0625\u0633\u0631\u0627\u0626\u064A\u0644",
                common: "\u0625\u0633\u0631\u0627\u0626\u064A\u0644"
            },
            bre: {
                official: "Stad Israel",
                common: "Israel"
            },
            ces: {
                official: "St\xe1t Izrael",
                common: "Izrael"
            },
            cym: {
                official: "State of Israel",
                common: "Israel"
            },
            deu: {
                official: "Staat Israel",
                common: "Israel"
            },
            est: {
                official: "Iisraeli Riik",
                common: "Iisrael"
            },
            fin: {
                official: "Israelin valtio",
                common: "Israel"
            },
            fra: {
                official: "\xc9tat d'Isra\xebl",
                common: "Isra\xebl"
            },
            hrv: {
                official: "Dr\u017Eava Izrael",
                common: "Izrael"
            },
            hun: {
                official: "Izrael",
                common: "Izrael"
            },
            ita: {
                official: "Stato di Israele",
                common: "Israele"
            },
            jpn: {
                official: "\u30A4\u30B9\u30E9\u30A8\u30EB\u56FD",
                common: "\u30A4\u30B9\u30E9\u30A8\u30EB"
            },
            kor: {
                official: "\uC774\uC2A4\uB77C\uC5D8\uAD6D",
                common: "\uC774\uC2A4\uB77C\uC5D8"
            },
            nld: {
                official: "Staat Isra\xebl",
                common: "Isra\xebl"
            },
            per: {
                official: "\u0641\u0644\u0633\u0637\u064A\u0646 \u0627\u0634\u063A\u0627\u0644\u06CC",
                common: "\u0641\u0644\u0633\u0637\u064A\u0646 \u0627\u0634\u063A\u0627\u0644\u06CC"
            },
            pol: {
                official: "Pa\u0144stwo Izrael",
                common: "Izrael"
            },
            por: {
                official: "Estado de Israel",
                common: "Israel"
            },
            rus: {
                official: "\u0413\u043E\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u043E \u0418\u0437\u0440\u0430\u0438\u043B\u044C",
                common: "\u0418\u0437\u0440\u0430\u0438\u043B\u044C"
            },
            slk: {
                official: "Izraelsk\xfd \u0161t\xe1t",
                common: "Izrael"
            },
            spa: {
                official: "Estado de Israel",
                common: "Israel"
            },
            srp: {
                official: "\u0414\u0440\u0436\u0430\u0432\u0430 \u0418\u0437\u0440\u0430\u0435\u043B",
                common: "\u0418\u0437\u0440\u0430\u0435\u043B"
            },
            swe: {
                official: "Staten Israel",
                common: "Israel"
            },
            tur: {
                official: "\u0130srail Devleti",
                common: "\u0130srail"
            },
            urd: {
                official: "\u0631\u06CC\u0627\u0633\u062A\u0650 \u0627\u0633\u0631\u0627\u0626\u06CC\u0644",
                common: "\u0627\u0633\u0631\u0627\u0626\u06CC\u0644"
            },
            zho: {
                official: "\u4EE5\u8272\u5217\u56FD",
                common: "\u4EE5\u8272\u5217"
            }
        },
        latlng: [
            31.47,
            35.13
        ],
        landlocked: false,
        borders: [
            "EGY",
            "JOR",
            "LBN",
            "PSE",
            "SYR"
        ],
        area: 20770,
        demonyms: {
            eng: {
                f: "Israeli",
                m: "Israeli"
            },
            fra: {
                f: "Isra\xe9lienne",
                m: "Isra\xe9lien"
            }
        },
        flag: "\uD83C\uDDEE\uD83C\uDDF1",
        maps: {
            googleMaps: "https://goo.gl/maps/6UY1AH8XeafVwdC97",
            openStreetMaps: "https://www.openstreetmap.org/relation/1473946"
        },
        population: 9216900,
        gini: {
            2016: 39
        },
        fifa: "ISR",
        car: {
            signs: [
                "IL"
            ],
            side: "right"
        },
        timezones: [
            "UTC+02:00"
        ],
        continents: [
            "Asia"
        ],
        flags: {
            png: "https://flagcdn.com/w320/il.png",
            svg: "https://flagcdn.com/il.svg",
            alt: "The flag of Israel has a white field with a blue hexagram \u2014 the Magen David \u2014 centered between two equal horizontal blue bands situated near the top and bottom edges of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/il.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/il.svg"
        },
        startOfWeek: "sunday",
        capitalInfo: {
            latlng: [
                31.77,
                35.23
            ]
        },
        postalCode: {
            format: "#####",
            regex: "^(\\d{5})$"
        }
    },
    {
        name: {
            common: "New Zealand",
            official: "New Zealand",
            nativeName: {
                eng: {
                    official: "New Zealand",
                    common: "New Zealand"
                },
                mri: {
                    official: "Aotearoa",
                    common: "Aotearoa"
                },
                nzs: {
                    official: "New Zealand",
                    common: "New Zealand"
                }
            }
        },
        tld: [
            ".nz"
        ],
        cca2: "NZ",
        ccn3: "554",
        cca3: "NZL",
        cioc: "NZL",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            NZD: {
                name: "New Zealand dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+6",
            suffixes: [
                "4"
            ]
        },
        capital: [
            "Wellington"
        ],
        altSpellings: [
            "NZ",
            "Aotearoa"
        ],
        region: "Oceania",
        subregion: "Australia and New Zealand",
        languages: {
            eng: "English",
            mri: "M\u0101ori",
            nzs: "New Zealand Sign Language"
        },
        translations: {
            ara: {
                official: "\u0646\u064A\u0648\u0632\u064A\u0644\u0646\u062F\u0627",
                common: "\u0646\u064A\u0648\u0632\u064A\u0644\u0646\u062F\u0627"
            },
            bre: {
                official: "Zeland-Nevez",
                common: "Zeland-Nevez"
            },
            ces: {
                official: "Nov\xfd Z\xe9land",
                common: "Nov\xfd Z\xe9land"
            },
            cym: {
                official: "New Zealand",
                common: "New Zealand"
            },
            deu: {
                official: "Neuseeland",
                common: "Neuseeland"
            },
            est: {
                official: "Uus-Meremaa",
                common: "Uus-Meremaa"
            },
            fin: {
                official: "Uusi-Seelanti",
                common: "Uusi-Seelanti"
            },
            fra: {
                official: "Nouvelle-Z\xe9lande",
                common: "Nouvelle-Z\xe9lande"
            },
            hrv: {
                official: "Novi Zeland",
                common: "Novi Zeland"
            },
            hun: {
                official: "\xdaj-Z\xe9land",
                common: "\xdaj-Z\xe9land"
            },
            ita: {
                official: "Nuova Zelanda",
                common: "Nuova Zelanda"
            },
            jpn: {
                official: "\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9",
                common: "\u30CB\u30E5\u30FC\u30B8\u30FC\u30E9\u30F3\u30C9"
            },
            kor: {
                official: "\uB274\uC9C8\uB79C\uB4DC",
                common: "\uB274\uC9C8\uB79C\uB4DC"
            },
            nld: {
                official: "Nieuw Zeeland",
                common: "Nieuw-Zeeland"
            },
            per: {
                official: "\u0646\u06CC\u0648\u0632\u06CC\u0644\u0646\u062F",
                common: "\u0646\u06CC\u0648\u0632\u06CC\u0644\u0646\u062F"
            },
            pol: {
                official: "Nowa Zelandia",
                common: "Nowa Zelandia"
            },
            por: {
                official: "nova Zel\xe2ndia",
                common: "Nova Zel\xe2ndia"
            },
            rus: {
                official: "\u041D\u043E\u0432\u0430\u044F \u0417\u0435\u043B\u0430\u043D\u0434\u0438\u044F",
                common: "\u041D\u043E\u0432\u0430\u044F \u0417\u0435\u043B\u0430\u043D\u0434\u0438\u044F"
            },
            slk: {
                official: "Nov\xfd Z\xe9land",
                common: "Nov\xfd Z\xe9land"
            },
            spa: {
                official: "nueva Zelanda",
                common: "Nueva Zelanda"
            },
            srp: {
                official: "\u041D\u043E\u0432\u0438 \u0417\u0435\u043B\u0430\u043D\u0434",
                common: "\u041D\u043E\u0432\u0438 \u0417\u0435\u043B\u0430\u043D\u0434"
            },
            swe: {
                official: "Nya Zeeland",
                common: "Nya Zeeland"
            },
            tur: {
                official: "Yeni Zelanda",
                common: "Yeni Zelanda"
            },
            urd: {
                official: "\u0646\u06CC\u0648\u0632\u06CC \u0644\u06CC\u0646\u0688",
                common: "\u0646\u06CC\u0648\u0632\u06CC \u0644\u06CC\u0646\u0688"
            },
            zho: {
                official: "\u65B0\u897F\u5170",
                common: "\u65B0\u897F\u5170"
            }
        },
        latlng: [
            -41,
            174
        ],
        landlocked: false,
        area: 270467,
        demonyms: {
            eng: {
                f: "New Zealander",
                m: "New Zealander"
            },
            fra: {
                f: "Neo-Z\xe9landaise",
                m: "Neo-Z\xe9landais"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDFF",
        maps: {
            googleMaps: "https://goo.gl/maps/xXiDQo65dwdpw9iu8",
            openStreetMaps: "https://www.openstreetmap.org/relation/556706#map=5/-46.710/172.046"
        },
        population: 5084300,
        fifa: "NZL",
        car: {
            signs: [
                "NZ"
            ],
            side: "left"
        },
        timezones: [
            "UTC-11:00",
            "UTC-10:00",
            "UTC+12:00",
            "UTC+12:45",
            "UTC+13:00"
        ],
        continents: [
            "Oceania"
        ],
        flags: {
            png: "https://flagcdn.com/w320/nz.png",
            svg: "https://flagcdn.com/nz.svg",
            alt: "The flag of New Zealand has a dark blue field with the flag of the United Kingdom \u2014 the Union Jack \u2014 in the canton and a representation of the Southern Cross constellation, made up of four five-pointed white-edged red stars, on the fly side of the field."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/nz.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/nz.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                -41.3,
                174.78
            ]
        },
        postalCode: {
            format: "####",
            regex: "^(\\d{4})$"
        }
    },
    {
        name: {
            common: "Nicaragua",
            official: "Republic of Nicaragua",
            nativeName: {
                spa: {
                    official: "Rep\xfablica de Nicaragua",
                    common: "Nicaragua"
                }
            }
        },
        tld: [
            ".ni"
        ],
        cca2: "NI",
        ccn3: "558",
        cca3: "NIC",
        cioc: "NCA",
        independent: true,
        status: "officially-assigned",
        unMember: true,
        currencies: {
            NIO: {
                name: "Nicaraguan c\xf3rdoba",
                symbol: "C$"
            }
        },
        idd: {
            root: "+5",
            suffixes: [
                "05"
            ]
        },
        capital: [
            "Managua"
        ],
        altSpellings: [
            "NI",
            "Republic of Nicaragua",
            "Rep\xfablica de Nicaragua"
        ],
        region: "Americas",
        subregion: "Central America",
        languages: {
            spa: "Spanish"
        },
        translations: {
            ara: {
                official: "\u062C\u0645\u0647\u0648\u0631\u064A\u0629 \u0646\u064A\u0643\u0627\u0631\u0627\u063A\u0648\u0627",
                common: "\u0646\u064A\u0643\u0627\u0631\u0627\u063A\u0648\u0627"
            },
            bre: {
                official: "Republik Nicaragua",
                common: "Nicaragua"
            },
            ces: {
                official: "Republika Nikaragua",
                common: "Nikaragua"
            },
            cym: {
                official: "Republic of Nicaragua",
                common: "Nicaragua"
            },
            deu: {
                official: "Republik Nicaragua",
                common: "Nicaragua"
            },
            est: {
                official: "Nicaragua Vabariik",
                common: "Nicaragua"
            },
            fin: {
                official: "Nicaraguan tasavalta",
                common: "Nicaragua"
            },
            fra: {
                official: "R\xe9publique du Nicaragua",
                common: "Nicaragua"
            },
            hrv: {
                official: "Republika Nikaragva",
                common: "Nikaragva"
            },
            hun: {
                official: "Nicaraguai K\xf6zt\xe1rsas\xe1g",
                common: "Nicaragua"
            },
            ita: {
                official: "Repubblica del Nicaragua",
                common: "Nicaragua"
            },
            jpn: {
                official: "\u30CB\u30AB\u30E9\u30B0\u30A2\u5171\u548C\u56FD",
                common: "\u30CB\u30AB\u30E9\u30B0\u30A2"
            },
            kor: {
                official: "\uB2C8\uCE74\uB77C\uACFC \uACF5\uD654\uAD6D",
                common: "\uB2C8\uCE74\uB77C\uACFC"
            },
            nld: {
                official: "Republiek Nicaragua",
                common: "Nicaragua"
            },
            per: {
                official: "\u062C\u0645\u0647\u0648\u0631\u06CC \u0646\u06CC\u06A9\u0627\u0631\u0627\u06AF\u0648\u0626\u0647",
                common: "\u0646\u06CC\u06A9\u0627\u0631\u0627\u06AF\u0648\u0626\u0647"
            },
            pol: {
                official: "Republika Nikaragui",
                common: "Nikaragua"
            },
            por: {
                official: "Rep\xfablica da Nicar\xe1gua",
                common: "Nicar\xe1gua"
            },
            rus: {
                official: "\u0420\u0435\u0441\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u043A\u0430\u0440\u0430\u0433\u0443\u0430",
                common: "\u041D\u0438\u043A\u0430\u0440\u0430\u0433\u0443\u0430"
            },
            slk: {
                official: "Nikaragujsk\xe1 republika",
                common: "Nikaragua"
            },
            spa: {
                official: "Rep\xfablica de Nicaragua",
                common: "Nicaragua"
            },
            srp: {
                official: "\u0420\u0435\u043F\u0443\u0431\u043B\u0438\u043A\u0430 \u041D\u0438\u043A\u0430\u0440\u0430\u0433\u0432\u0430",
                common: "\u041D\u0438\u043A\u0430\u0440\u0430\u0433\u0432\u0430"
            },
            swe: {
                official: "Republiken Nicaragua",
                common: "Nicaragua"
            },
            tur: {
                official: "Nikaragua Cumhuriyeti",
                common: "Nikaragua"
            },
            urd: {
                official: "\u062C\u0645\u06C1\u0648\u0631\u06CC\u06C1 \u0646\u06A9\u0627\u0631\u0627\u06AF\u0648\u0627",
                common: "\u0646\u06A9\u0627\u0631\u0627\u06AF\u0648\u0627"
            },
            zho: {
                official: "\u5C3C\u52A0\u62C9\u74DC\u5171\u548C\u56FD",
                common: "\u5C3C\u52A0\u62C9\u74DC"
            }
        },
        latlng: [
            13,
            -85
        ],
        landlocked: false,
        borders: [
            "CRI",
            "HND"
        ],
        area: 130373,
        demonyms: {
            eng: {
                f: "Nicaraguan",
                m: "Nicaraguan"
            },
            fra: {
                f: "Nicaraguayenne",
                m: "Nicaraguayen"
            }
        },
        flag: "\uD83C\uDDF3\uD83C\uDDEE",
        maps: {
            googleMaps: "https://goo.gl/maps/P77LaEVkKJKXneRC6",
            openStreetMaps: "https://www.openstreetmap.org/relation/287666"
        },
        population: 6624554,
        gini: {
            2014: 46.2
        },
        fifa: "NCA",
        car: {
            signs: [
                "NIC"
            ],
            side: "right"
        },
        timezones: [
            "UTC-06:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ni.png",
            svg: "https://flagcdn.com/ni.svg",
            alt: "The flag of Nicaragua is composed of three equal horizontal bands of blue, white and blue, with the national coat of arms centered in the white band."
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ni.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ni.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                12.13,
                -86.25
            ]
        },
        postalCode: {
            format: "###-###-#",
            regex: "^(\\d{7})$"
        }
    },
    {
        name: {
            common: "Anguilla",
            official: "Anguilla",
            nativeName: {
                eng: {
                    official: "Anguilla",
                    common: "Anguilla"
                }
            }
        },
        tld: [
            ".ai"
        ],
        cca2: "AI",
        ccn3: "660",
        cca3: "AIA",
        independent: false,
        status: "officially-assigned",
        unMember: false,
        currencies: {
            XCD: {
                name: "Eastern Caribbean dollar",
                symbol: "$"
            }
        },
        idd: {
            root: "+1",
            suffixes: [
                "264"
            ]
        },
        capital: [
            "The Valley"
        ],
        altSpellings: [
            "AI"
        ],
        region: "Americas",
        subregion: "Caribbean",
        languages: {
            eng: "English"
        },
        translations: {
            ara: {
                official: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627",
                common: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627"
            },
            bre: {
                official: "Anguilla",
                common: "Anguilla"
            },
            ces: {
                official: "Anguilla",
                common: "Anguilla"
            },
            cym: {
                official: "Anguilla",
                common: "Anguilla"
            },
            deu: {
                official: "Anguilla",
                common: "Anguilla"
            },
            est: {
                official: "Anguilla",
                common: "Anguilla"
            },
            fin: {
                official: "Anguilla",
                common: "Anguilla"
            },
            fra: {
                official: "Anguilla",
                common: "Anguilla"
            },
            hrv: {
                official: "Anguilla",
                common: "Angvila"
            },
            hun: {
                official: "Anguilla",
                common: "Anguilla"
            },
            ita: {
                official: "Anguilla",
                common: "Anguilla"
            },
            jpn: {
                official: "\u30A2\u30F3\u30B0\u30A3\u30E9",
                common: "\u30A2\u30F3\u30AE\u30E9"
            },
            kor: {
                official: "\uC575\uADC8\uB77C",
                common: "\uC575\uADC8\uB77C"
            },
            nld: {
                official: "Anguilla",
                common: "Anguilla"
            },
            per: {
                official: "\u0622\u0646\u06AF\u0648\u06CC\u0644\u0627",
                common: "\u0622\u0646\u06AF\u0648\u06CC\u0644\u0627"
            },
            pol: {
                official: "Anguilla",
                common: "Anguilla"
            },
            por: {
                official: "Anguilla",
                common: "Anguilla"
            },
            rus: {
                official: "\u0410\u043D\u0433\u0438\u043B\u044C\u044F",
                common: "\u0410\u043D\u0433\u0438\u043B\u044C\u044F"
            },
            slk: {
                official: "Anguilla",
                common: "Anguilla"
            },
            spa: {
                official: "Anguila",
                common: "Anguilla"
            },
            srp: {
                official: "\u0410\u043D\u0433\u0432\u0438\u043B\u0430",
                common: "\u0410\u043D\u0433\u0432\u0438\u043B\u0430"
            },
            swe: {
                official: "Anguilla",
                common: "Anguilla"
            },
            tur: {
                official: "Anguilla",
                common: "Anguilla"
            },
            urd: {
                official: "\u0627\u06CC\u0646\u06AF\u0648\u06CC\u0644\u0627",
                common: "\u0627\u06CC\u0646\u06AF\u0648\u06CC\u0644\u0627"
            },
            zho: {
                official: "\u5B89\u572D\u62C9",
                common: "\u5B89\u572D\u62C9"
            }
        },
        latlng: [
            18.25,
            -63.16666666
        ],
        landlocked: false,
        area: 91,
        demonyms: {
            eng: {
                f: "Anguillian",
                m: "Anguillian"
            },
            fra: {
                f: "Anguillane",
                m: "Anguillan"
            }
        },
        flag: "\uD83C\uDDE6\uD83C\uDDEE",
        maps: {
            googleMaps: "https://goo.gl/maps/3KgLnEyN7amdno2p9",
            openStreetMaps: "https://www.openstreetmap.org/relation/2177161"
        },
        population: 13452,
        fifa: "AIA",
        car: {
            signs: [
                "GB"
            ],
            side: "left"
        },
        timezones: [
            "UTC-04:00"
        ],
        continents: [
            "North America"
        ],
        flags: {
            png: "https://flagcdn.com/w320/ai.png",
            svg: "https://flagcdn.com/ai.svg"
        },
        coatOfArms: {
            png: "https://mainfacts.com/media/images/coats_of_arms/ai.png",
            svg: "https://mainfacts.com/media/images/coats_of_arms/ai.svg"
        },
        startOfWeek: "monday",
        capitalInfo: {
            latlng: [
                18.22,
                -63.05
            ]
        }
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["aQL8O","dIizP","bB7Pu"], "bB7Pu", "parcelRequire94c2")

//# sourceMappingURL=index.3d214d75.js.map
